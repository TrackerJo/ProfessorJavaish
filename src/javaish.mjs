"use strict";
(function(root, module) {
    module(root, root);
    // if (typeof define === 'function' && define.amd) {
    //     define(['exports'], function(exports)  {
    //         module(root, exports);
    //     });
    // } else if (typeof exports === 'object' && typeof exports.nodeName !== 'string') {
    //     module(global, exports);
    // } else {
    //     module(root, root);
    // }
}(typeof self !== 'undefined' ? self : this, function($rt_globals, $rt_exports) {
    var $rt_seed = 2463534242;
    function $rt_nextId() {
        var x = $rt_seed;
        x ^= x << 13;
        x ^= x >> 17;
        x ^= x << 5;
        $rt_seed = x;
        return x;
    }
    function $rt_compare(a, b) {
        return a > b ? 1 : a < b ?  -1 : a === b ? 0 : 1;
    }
    function $rt_isInstance(obj, cls) {
        return obj instanceof $rt_objcls() && !!obj.constructor.$meta && $rt_isAssignable(obj.constructor, cls);
    }
    function $rt_isAssignable(from, to) {
        if (from === to) {
            return true;
        }
        if (to.$meta.item !== null) {
            return from.$meta.item !== null && $rt_isAssignable(from.$meta.item, to.$meta.item);
        }
        var supertypes = from.$meta.supertypes;
        for (var i = 0;i < supertypes.length;i = i + 1 | 0) {
            if ($rt_isAssignable(supertypes[i], to)) {
                return true;
            }
        }
        return false;
    }
    function $rt_castToInterface(obj, cls) {
        if (obj !== null && !$rt_isInstance(obj, cls)) {
            $rt_throwCCE();
        }
        return obj;
    }
    function $rt_castToClass(obj, cls) {
        if (obj !== null && !(obj instanceof cls)) {
            $rt_throwCCE();
        }
        return obj;
    }
    $rt_globals.Array.prototype.fill = $rt_globals.Array.prototype.fill || function(value, start, end) {
        var len = this.length;
        if (!len) return this;
        start = start | 0;
        var i = start < 0 ? $rt_globals.Math.max(len + start, 0) : $rt_globals.Math.min(start, len);
        end = end === $rt_globals.undefined ? len : end | 0;
        end = end < 0 ? $rt_globals.Math.max(len + end, 0) : $rt_globals.Math.min(end, len);
        for (;i < end;i++) {
            this[i] = value;
        }
        return this;
    };
    function $rt_createArray(cls, sz) {
        var data = new $rt_globals.Array(sz);
        data.fill(null);
        return new $rt_array(cls, data);
    }
    function $rt_createArrayFromData(cls, init) {
        return $rt_wrapArray(cls, init);
    }
    function $rt_wrapArray(cls, data) {
        return new $rt_array(cls, data);
    }
    function $rt_createUnfilledArray(cls, sz) {
        return new $rt_array(cls, new $rt_globals.Array(sz));
    }
    function $rt_createNumericArray(cls, nativeArray) {
        return new $rt_array(cls, nativeArray);
    }
    var $rt_createLongArray;
    var $rt_createLongArrayFromData;
    if (typeof $rt_globals.BigInt64Array !== 'function') {
        $rt_createLongArray = function(sz) {
            var data = new $rt_globals.Array(sz);
            var arr = new $rt_array($rt_longcls(), data);
            data.fill(Long_ZERO);
            return arr;
        };
        $rt_createLongArrayFromData = function(init) {
            return new $rt_array($rt_longcls(), init);
        };
    } else {
        $rt_createLongArray = function(sz) {
            return $rt_createNumericArray($rt_longcls(), new $rt_globals.BigInt64Array(sz));
        };
        $rt_createLongArrayFromData = function(data) {
            var buffer = new $rt_globals.BigInt64Array(data.length);
            buffer.set(data);
            return $rt_createNumericArray($rt_longcls(), buffer);
        };
    }
    function $rt_createCharArray(sz) {
        return $rt_createNumericArray($rt_charcls(), new $rt_globals.Uint16Array(sz));
    }
    function $rt_createCharArrayFromData(data) {
        var buffer = new $rt_globals.Uint16Array(data.length);
        buffer.set(data);
        return $rt_createNumericArray($rt_charcls(), buffer);
    }
    function $rt_createByteArray(sz) {
        return $rt_createNumericArray($rt_bytecls(), new $rt_globals.Int8Array(sz));
    }
    function $rt_createByteArrayFromData(data) {
        var buffer = new $rt_globals.Int8Array(data.length);
        buffer.set(data);
        return $rt_createNumericArray($rt_bytecls(), buffer);
    }
    function $rt_createShortArray(sz) {
        return $rt_createNumericArray($rt_shortcls(), new $rt_globals.Int16Array(sz));
    }
    function $rt_createShortArrayFromData(data) {
        var buffer = new $rt_globals.Int16Array(data.length);
        buffer.set(data);
        return $rt_createNumericArray($rt_shortcls(), buffer);
    }
    function $rt_createIntArray(sz) {
        return $rt_createNumericArray($rt_intcls(), new $rt_globals.Int32Array(sz));
    }
    function $rt_createIntArrayFromData(data) {
        var buffer = new $rt_globals.Int32Array(data.length);
        buffer.set(data);
        return $rt_createNumericArray($rt_intcls(), buffer);
    }
    function $rt_createBooleanArray(sz) {
        return $rt_createNumericArray($rt_booleancls(), new $rt_globals.Int8Array(sz));
    }
    function $rt_createBooleanArrayFromData(data) {
        var buffer = new $rt_globals.Int8Array(data.length);
        buffer.set(data);
        return $rt_createNumericArray($rt_booleancls(), buffer);
    }
    function $rt_createFloatArray(sz) {
        return $rt_createNumericArray($rt_floatcls(), new $rt_globals.Float32Array(sz));
    }
    function $rt_createFloatArrayFromData(data) {
        var buffer = new $rt_globals.Float32Array(data.length);
        buffer.set(data);
        return $rt_createNumericArray($rt_floatcls(), buffer);
    }
    function $rt_createDoubleArray(sz) {
        return $rt_createNumericArray($rt_doublecls(), new $rt_globals.Float64Array(sz));
    }
    function $rt_createDoubleArrayFromData(data) {
        var buffer = new $rt_globals.Float64Array(data.length);
        buffer.set(data);
        return $rt_createNumericArray($rt_doublecls(), buffer);
    }
    function $rt_arraycls(cls) {
        var result = cls.$array;
        if (result === null) {
            var arraycls = {  };
            var name = "[" + cls.$meta.binaryName;
            arraycls.$meta = { item : cls, supertypes : [$rt_objcls()], primitive : false, superclass : $rt_objcls(), name : name, binaryName : name, enum : false, simpleName : null, declaringClass : null, enclosingClass : null };
            arraycls.classObject = null;
            arraycls.$array = null;
            result = arraycls;
            cls.$array = arraycls;
        }
        return result;
    }
    function $rt_createcls() {
        return { $array : null, classObject : null, $meta : { supertypes : [], superclass : null } };
    }
    function $rt_createPrimitiveCls(name, binaryName) {
        var cls = $rt_createcls();
        cls.$meta.primitive = true;
        cls.$meta.name = name;
        cls.$meta.binaryName = binaryName;
        cls.$meta.enum = false;
        cls.$meta.item = null;
        cls.$meta.simpleName = null;
        cls.$meta.declaringClass = null;
        cls.$meta.enclosingClass = null;
        return cls;
    }
    var $rt_booleanclsCache = null;
    function $rt_booleancls() {
        if ($rt_booleanclsCache === null) {
            $rt_booleanclsCache = $rt_createPrimitiveCls("boolean", "Z");
        }
        return $rt_booleanclsCache;
    }
    var $rt_charclsCache = null;
    function $rt_charcls() {
        if ($rt_charclsCache === null) {
            $rt_charclsCache = $rt_createPrimitiveCls("char", "C");
        }
        return $rt_charclsCache;
    }
    var $rt_byteclsCache = null;
    function $rt_bytecls() {
        if ($rt_byteclsCache === null) {
            $rt_byteclsCache = $rt_createPrimitiveCls("byte", "B");
        }
        return $rt_byteclsCache;
    }
    var $rt_shortclsCache = null;
    function $rt_shortcls() {
        if ($rt_shortclsCache === null) {
            $rt_shortclsCache = $rt_createPrimitiveCls("short", "S");
        }
        return $rt_shortclsCache;
    }
    var $rt_intclsCache = null;
    function $rt_intcls() {
        if ($rt_intclsCache === null) {
            $rt_intclsCache = $rt_createPrimitiveCls("int", "I");
        }
        return $rt_intclsCache;
    }
    var $rt_longclsCache = null;
    function $rt_longcls() {
        if ($rt_longclsCache === null) {
            $rt_longclsCache = $rt_createPrimitiveCls("long", "J");
        }
        return $rt_longclsCache;
    }
    var $rt_floatclsCache = null;
    function $rt_floatcls() {
        if ($rt_floatclsCache === null) {
            $rt_floatclsCache = $rt_createPrimitiveCls("float", "F");
        }
        return $rt_floatclsCache;
    }
    var $rt_doubleclsCache = null;
    function $rt_doublecls() {
        if ($rt_doubleclsCache === null) {
            $rt_doubleclsCache = $rt_createPrimitiveCls("double", "D");
        }
        return $rt_doubleclsCache;
    }
    var $rt_voidclsCache = null;
    function $rt_voidcls() {
        if ($rt_voidclsCache === null) {
            $rt_voidclsCache = $rt_createPrimitiveCls("void", "V");
        }
        return $rt_voidclsCache;
    }
    function $rt_throw(ex) {
        throw $rt_exception(ex);
    }
    var $rt_javaExceptionProp = $rt_globals.Symbol("javaException");
    function $rt_exception(ex) {
        var err = ex.$jsException;
        if (!err) {
            var javaCause = $rt_throwableCause(ex);
            var jsCause = javaCause !== null ? javaCause.$jsException : $rt_globals.undefined;
            var cause = typeof jsCause === "object" ? { cause : jsCause } : $rt_globals.undefined;
            err = new JavaError("Java exception thrown", cause);
            if (typeof $rt_globals.Error.captureStackTrace === "function") {
                $rt_globals.Error.captureStackTrace(err);
            }
            err[$rt_javaExceptionProp] = ex;
            ex.$jsException = err;
            $rt_fillStack(err, ex);
        }
        return err;
    }
    function $rt_fillStack(err, ex) {
        if (typeof $rt_decodeStack === "function" && err.stack) {
            var stack = $rt_decodeStack(err.stack);
            var javaStack = $rt_createArray($rt_stecls(), stack.length);
            var elem;
            var noStack = false;
            for (var i = 0;i < stack.length;++i) {
                var element = stack[i];
                elem = $rt_createStackElement($rt_str(element.className), $rt_str(element.methodName), $rt_str(element.fileName), element.lineNumber);
                if (elem == null) {
                    noStack = true;
                    break;
                }
                javaStack.data[i] = elem;
            }
            if (!noStack) {
                $rt_setStack(ex, javaStack);
            }
        }
    }
    function $rt_createMultiArray(cls, dimensions) {
        var first = 0;
        for (var i = dimensions.length - 1;i >= 0;i = i - 1 | 0) {
            if (dimensions[i] === 0) {
                first = i;
                break;
            }
        }
        if (first > 0) {
            for (i = 0;i < first;i = i + 1 | 0) {
                cls = $rt_arraycls(cls);
            }
            if (first === dimensions.length - 1) {
                return $rt_createArray(cls, dimensions[first]);
            }
        }
        var arrays = new $rt_globals.Array($rt_primitiveArrayCount(dimensions, first));
        var firstDim = dimensions[first] | 0;
        for (i = 0;i < arrays.length;i = i + 1 | 0) {
            arrays[i] = $rt_createArray(cls, firstDim);
        }
        return $rt_createMultiArrayImpl(cls, arrays, dimensions, first);
    }
    function $rt_createByteMultiArray(dimensions) {
        var arrays = new $rt_globals.Array($rt_primitiveArrayCount(dimensions, 0));
        if (arrays.length === 0) {
            return $rt_createMultiArray($rt_bytecls(), dimensions);
        }
        var firstDim = dimensions[0] | 0;
        for (var i = 0;i < arrays.length;i = i + 1 | 0) {
            arrays[i] = $rt_createByteArray(firstDim);
        }
        return $rt_createMultiArrayImpl($rt_bytecls(), arrays, dimensions);
    }
    function $rt_createCharMultiArray(dimensions) {
        var arrays = new $rt_globals.Array($rt_primitiveArrayCount(dimensions, 0));
        if (arrays.length === 0) {
            return $rt_createMultiArray($rt_charcls(), dimensions);
        }
        var firstDim = dimensions[0] | 0;
        for (var i = 0;i < arrays.length;i = i + 1 | 0) {
            arrays[i] = $rt_createCharArray(firstDim);
        }
        return $rt_createMultiArrayImpl($rt_charcls(), arrays, dimensions, 0);
    }
    function $rt_createBooleanMultiArray(dimensions) {
        var arrays = new $rt_globals.Array($rt_primitiveArrayCount(dimensions, 0));
        if (arrays.length === 0) {
            return $rt_createMultiArray($rt_booleancls(), dimensions);
        }
        var firstDim = dimensions[0] | 0;
        for (var i = 0;i < arrays.length;i = i + 1 | 0) {
            arrays[i] = $rt_createBooleanArray(firstDim);
        }
        return $rt_createMultiArrayImpl($rt_booleancls(), arrays, dimensions, 0);
    }
    function $rt_createShortMultiArray(dimensions) {
        var arrays = new $rt_globals.Array($rt_primitiveArrayCount(dimensions, 0));
        if (arrays.length === 0) {
            return $rt_createMultiArray($rt_shortcls(), dimensions);
        }
        var firstDim = dimensions[0] | 0;
        for (var i = 0;i < arrays.length;i = i + 1 | 0) {
            arrays[i] = $rt_createShortArray(firstDim);
        }
        return $rt_createMultiArrayImpl($rt_shortcls(), arrays, dimensions, 0);
    }
    function $rt_createIntMultiArray(dimensions) {
        var arrays = new $rt_globals.Array($rt_primitiveArrayCount(dimensions, 0));
        if (arrays.length === 0) {
            return $rt_createMultiArray($rt_intcls(), dimensions);
        }
        var firstDim = dimensions[0] | 0;
        for (var i = 0;i < arrays.length;i = i + 1 | 0) {
            arrays[i] = $rt_createIntArray(firstDim);
        }
        return $rt_createMultiArrayImpl($rt_intcls(), arrays, dimensions, 0);
    }
    function $rt_createLongMultiArray(dimensions) {
        var arrays = new $rt_globals.Array($rt_primitiveArrayCount(dimensions, 0));
        if (arrays.length === 0) {
            return $rt_createMultiArray($rt_longcls(), dimensions);
        }
        var firstDim = dimensions[0] | 0;
        for (var i = 0;i < arrays.length;i = i + 1 | 0) {
            arrays[i] = $rt_createLongArray(firstDim);
        }
        return $rt_createMultiArrayImpl($rt_longcls(), arrays, dimensions, 0);
    }
    function $rt_createFloatMultiArray(dimensions) {
        var arrays = new $rt_globals.Array($rt_primitiveArrayCount(dimensions, 0));
        if (arrays.length === 0) {
            return $rt_createMultiArray($rt_floatcls(), dimensions);
        }
        var firstDim = dimensions[0] | 0;
        for (var i = 0;i < arrays.length;i = i + 1 | 0) {
            arrays[i] = $rt_createFloatArray(firstDim);
        }
        return $rt_createMultiArrayImpl($rt_floatcls(), arrays, dimensions, 0);
    }
    function $rt_createDoubleMultiArray(dimensions) {
        var arrays = new $rt_globals.Array($rt_primitiveArrayCount(dimensions, 0));
        if (arrays.length === 0) {
            return $rt_createMultiArray($rt_doublecls(), dimensions);
        }
        var firstDim = dimensions[0] | 0;
        for (var i = 0;i < arrays.length;i = i + 1 | 0) {
            arrays[i] = $rt_createDoubleArray(firstDim);
        }
        return $rt_createMultiArrayImpl($rt_doublecls(), arrays, dimensions, 0);
    }
    function $rt_primitiveArrayCount(dimensions, start) {
        var val = dimensions[start + 1] | 0;
        for (var i = start + 2;i < dimensions.length;i = i + 1 | 0) {
            val = val * (dimensions[i] | 0) | 0;
            if (val === 0) {
                break;
            }
        }
        return val;
    }
    function $rt_createMultiArrayImpl(cls, arrays, dimensions, start) {
        var limit = arrays.length;
        for (var i = start + 1 | 0;i < dimensions.length;i = i + 1 | 0) {
            cls = $rt_arraycls(cls);
            var dim = dimensions[i];
            var index = 0;
            var packedIndex = 0;
            while (index < limit) {
                var arr = $rt_createUnfilledArray(cls, dim);
                for (var j = 0;j < dim;j = j + 1 | 0) {
                    arr.data[j] = arrays[index];
                    index = index + 1 | 0;
                }
                arrays[packedIndex] = arr;
                packedIndex = packedIndex + 1 | 0;
            }
            limit = packedIndex;
        }
        return arrays[0];
    }
    function $rt_assertNotNaN(value) {
        if (typeof value === 'number' && $rt_globals.isNaN(value)) {
            throw "NaN";
        }
        return value;
    }
    function $rt_createOutputFunction(printFunction) {
        var buffer = "";
        var utf8Buffer = 0;
        var utf8Remaining = 0;
        function putCodePoint(ch) {
            if (ch === 0xA) {
                printFunction(buffer);
                buffer = "";
            } else if (ch < 0x10000) {
                buffer += $rt_globals.String.fromCharCode(ch);
            } else {
                ch = ch - 0x10000 | 0;
                var hi = (ch >> 10) + 0xD800;
                var lo = (ch & 0x3FF) + 0xDC00;
                buffer += $rt_globals.String.fromCharCode(hi, lo);
            }
        }
        return function(ch) {
            if ((ch & 0x80) === 0) {
                putCodePoint(ch);
            } else if ((ch & 0xC0) === 0x80) {
                if (utf8Buffer > 0) {
                    utf8Remaining <<= 6;
                    utf8Remaining |= ch & 0x3F;
                    if ( --utf8Buffer === 0) {
                        putCodePoint(utf8Remaining);
                    }
                }
            } else if ((ch & 0xE0) === 0xC0) {
                utf8Remaining = ch & 0x1F;
                utf8Buffer = 1;
            } else if ((ch & 0xF0) === 0xE0) {
                utf8Remaining = ch & 0x0F;
                utf8Buffer = 2;
            } else if ((ch & 0xF8) === 0xF0) {
                utf8Remaining = ch & 0x07;
                utf8Buffer = 3;
            }
        };
    }
    var $rt_putStdout = typeof $rt_putStdoutCustom === "function" ? $rt_putStdoutCustom : typeof $rt_globals.console === "object" ? $rt_createOutputFunction(function(msg) {
        $rt_globals.console.info(msg);
    }) : function() {
    };
    var $rt_putStderr = typeof $rt_putStderrCustom === "function" ? $rt_putStderrCustom : typeof $rt_globals.console === "object" ? $rt_createOutputFunction(function(msg) {
        $rt_globals.console.error(msg);
    }) : function() {
    };
    var $rt_packageData = null;
    function $rt_packages(data) {
        var i = 0;
        var packages = new $rt_globals.Array(data.length);
        for (var j = 0;j < data.length;++j) {
            var prefixIndex = data[i++];
            var prefix = prefixIndex >= 0 ? packages[prefixIndex] : "";
            packages[j] = prefix + data[i++] + ".";
        }
        $rt_packageData = packages;
    }
    function $rt_metadata(data) {
        var packages = $rt_packageData;
        var i = 0;
        while (i < data.length) {
            var cls = data[i++];
            cls.$meta = {  };
            var m = cls.$meta;
            var className = data[i++];
            m.name = className !== 0 ? className : null;
            if (m.name !== null) {
                var packageIndex = data[i++];
                if (packageIndex >= 0) {
                    m.name = packages[packageIndex] + m.name;
                }
            }
            m.binaryName = "L" + m.name + ";";
            var superclass = data[i++];
            m.superclass = superclass !== 0 ? superclass : null;
            m.supertypes = data[i++];
            if (m.superclass) {
                m.supertypes.push(m.superclass);
                cls.prototype = $rt_globals.Object.create(m.superclass.prototype);
            } else {
                cls.prototype = {  };
            }
            var flags = data[i++];
            m.enum = (flags & 8) !== 0;
            m.flags = flags;
            m.primitive = false;
            m.item = null;
            cls.prototype.constructor = cls;
            cls.classObject = null;
            m.accessLevel = data[i++];
            var innerClassInfo = data[i++];
            if (innerClassInfo === 0) {
                m.simpleName = null;
                m.declaringClass = null;
                m.enclosingClass = null;
            } else {
                var enclosingClass = innerClassInfo[0];
                m.enclosingClass = enclosingClass !== 0 ? enclosingClass : null;
                var declaringClass = innerClassInfo[1];
                m.declaringClass = declaringClass !== 0 ? declaringClass : null;
                var simpleName = innerClassInfo[2];
                m.simpleName = simpleName !== 0 ? simpleName : null;
            }
            var clinit = data[i++];
            cls.$clinit = clinit !== 0 ? clinit : function() {
            };
            var virtualMethods = data[i++];
            if (virtualMethods !== 0) {
                for (var j = 0;j < virtualMethods.length;j += 2) {
                    var name = virtualMethods[j];
                    var func = virtualMethods[j + 1];
                    if (typeof name === 'string') {
                        name = [name];
                    }
                    for (var k = 0;k < name.length;++k) {
                        cls.prototype[name[k]] = func;
                    }
                }
            }
            cls.$array = null;
        }
    }
    function $rt_wrapFunction0(f) {
        return function() {
            return f(this);
        };
    }
    function $rt_wrapFunction1(f) {
        return function(p1) {
            return f(this, p1);
        };
    }
    function $rt_wrapFunction2(f) {
        return function(p1, p2) {
            return f(this, p1, p2);
        };
    }
    function $rt_wrapFunction3(f) {
        return function(p1, p2, p3) {
            return f(this, p1, p2, p3, p3);
        };
    }
    function $rt_wrapFunction4(f) {
        return function(p1, p2, p3, p4) {
            return f(this, p1, p2, p3, p4);
        };
    }
    function $rt_threadStarter(f) {
        return function() {
            var args = $rt_globals.Array.prototype.slice.apply(arguments);
            $rt_startThread(function() {
                f.apply(this, args);
            });
        };
    }
    function $rt_mainStarter(f) {
        return function(args, callback) {
            if (!args) {
                args = [];
            }
            var javaArgs = $rt_createArray($rt_objcls(), args.length);
            for (var i = 0;i < args.length;++i) {
                javaArgs.data[i] = $rt_str(args[i]);
            }
            $rt_startThread(function() {
                f.call(null, javaArgs);
            }, callback);
        };
    }
    var $rt_stringPool_instance;
    function $rt_stringPool(strings) {
        $rt_stringPool_instance = new $rt_globals.Array(strings.length);
        for (var i = 0;i < strings.length;++i) {
            $rt_stringPool_instance[i] = $rt_intern($rt_str(strings[i]));
        }
    }
    function $rt_s(index) {
        return $rt_stringPool_instance[index];
    }
    function $rt_eraseClinit(target) {
        return target.$clinit = function() {
        };
    }
    var $rt_numberConversionView = new $rt_globals.DataView(new $rt_globals.ArrayBuffer(8));
    var $rt_doubleToRawLongBits;
    var $rt_longBitsToDouble;
    if (typeof $rt_globals.BigInt !== 'function') {
        $rt_doubleToRawLongBits = function(n) {
            $rt_numberConversionView.setFloat64(0, n, true);
            return new Long($rt_numberConversionView.getInt32(0, true), $rt_numberConversionView.getInt32(4, true));
        };
        $rt_longBitsToDouble = function(n) {
            $rt_numberConversionView.setInt32(0, n.lo, true);
            $rt_numberConversionView.setInt32(4, n.hi, true);
            return $rt_numberConversionView.getFloat64(0, true);
        };
    } else {
        $rt_doubleToRawLongBits = function(n) {
            $rt_numberConversionView.setFloat64(0, n, true);
            var lo = $rt_numberConversionView.getInt32(0, true);
            var hi = $rt_numberConversionView.getInt32(4, true);
            return $rt_globals.BigInt.asIntN(64, $rt_globals.BigInt.asUintN(32, $rt_globals.BigInt(lo)) | $rt_globals.BigInt(hi) << $rt_globals.BigInt(32));
        };
        $rt_longBitsToDouble = function(n) {
            var hi = $rt_globals.Number($rt_globals.BigInt.asIntN(32, n >> $rt_globals.BigInt(32)));
            var lo = $rt_globals.Number($rt_globals.BigInt.asIntN(32, n & $rt_globals.BigInt(0xFFFFFFFF)));
            $rt_numberConversionView.setInt32(0, lo, true);
            $rt_numberConversionView.setInt32(4, hi, true);
            return $rt_numberConversionView.getFloat64(0, true);
        };
    }
    function $rt_floatToRawIntBits(n) {
        $rt_numberConversionView.setFloat32(0, n);
        return $rt_numberConversionView.getInt32(0);
    }
    function $rt_intBitsToFloat(n) {
        $rt_numberConversionView.setInt32(0, n);
        return $rt_numberConversionView.getFloat32(0);
    }
    var JavaError;
    if (typeof $rt_globals.Reflect === 'object') {
        var defaultMessage = $rt_globals.Symbol("defaultMessage");
        JavaError = function JavaError(message, cause) {
            var self = $rt_globals.Reflect.construct($rt_globals.Error, [$rt_globals.undefined, cause], JavaError);
            $rt_globals.Object.setPrototypeOf(self, JavaError.prototype);
            self[defaultMessage] = message;
            return self;
        };
        JavaError.prototype = $rt_globals.Object.create($rt_globals.Error.prototype, { constructor : { configurable : true, writable : true, value : JavaError }, message : { get : function() {
            try {
                var javaException = this[$rt_javaExceptionProp];
                if (typeof javaException === 'object') {
                    var javaMessage = $rt_throwableMessage(javaException);
                    if (typeof javaMessage === "object") {
                        return javaMessage !== null ? javaMessage.toString() : null;
                    }
                }
                return this[defaultMessage];
            } catch (e){
                return "Exception occurred trying to extract Java exception message: " + e;
            }
        } } });
    } else {
        JavaError = $rt_globals.Error;
    }
    function $rt_javaException(e) {
        return e instanceof $rt_globals.Error && typeof e[$rt_javaExceptionProp] === 'object' ? e[$rt_javaExceptionProp] : null;
    }
    function $rt_jsException(e) {
        return typeof e.$jsException === 'object' ? e.$jsException : null;
    }
    function $rt_wrapException(err) {
        var ex = err[$rt_javaExceptionProp];
        if (!ex) {
            ex = $rt_createException($rt_str("(JavaScript) " + err.toString()));
            err[$rt_javaExceptionProp] = ex;
            ex.$jsException = err;
            $rt_fillStack(err, ex);
        }
        return ex;
    }
    function $dbg_class(obj) {
        var cls = obj.constructor;
        var arrayDegree = 0;
        while (cls.$meta && cls.$meta.item) {
            ++arrayDegree;
            cls = cls.$meta.item;
        }
        var clsName = "";
        if (cls === $rt_booleancls()) {
            clsName = "boolean";
        } else if (cls === $rt_bytecls()) {
            clsName = "byte";
        } else if (cls === $rt_shortcls()) {
            clsName = "short";
        } else if (cls === $rt_charcls()) {
            clsName = "char";
        } else if (cls === $rt_intcls()) {
            clsName = "int";
        } else if (cls === $rt_longcls()) {
            clsName = "long";
        } else if (cls === $rt_floatcls()) {
            clsName = "float";
        } else if (cls === $rt_doublecls()) {
            clsName = "double";
        } else {
            clsName = cls.$meta ? cls.$meta.name || "a/" + cls.name : "@" + cls.name;
        }
        while (arrayDegree-- > 0) {
            clsName += "[]";
        }
        return clsName;
    }
    function Long(lo, hi) {
        this.lo = lo | 0;
        this.hi = hi | 0;
    }
    Long.prototype.__teavm_class__ = function() {
        return "long";
    };
    function Long_isPositive(a) {
        return (a.hi & 0x80000000) === 0;
    }
    function Long_isNegative(a) {
        return (a.hi & 0x80000000) !== 0;
    }
    var Long_MAX_NORMAL = 1 << 18;
    var Long_ZERO;
    var Long_create;
    var Long_fromInt;
    var Long_fromNumber;
    var Long_toNumber;
    var Long_hi;
    var Long_lo;
    if (typeof $rt_globals.BigInt !== "function") {
        Long.prototype.toString = function() {
            var result = [];
            var n = this;
            var positive = Long_isPositive(n);
            if (!positive) {
                n = Long_neg(n);
            }
            var radix = new Long(10, 0);
            do  {
                var divRem = Long_divRem(n, radix);
                result.push($rt_globals.String.fromCharCode(48 + divRem[1].lo));
                n = divRem[0];
            }while (n.lo !== 0 || n.hi !== 0);
            result = (result.reverse()).join('');
            return positive ? result : "-" + result;
        };
        Long.prototype.valueOf = function() {
            return Long_toNumber(this);
        };
        Long_ZERO = new Long(0, 0);
        Long_fromInt = function(val) {
            return new Long(val,  -(val < 0) | 0);
        };
        Long_fromNumber = function(val) {
            if (val >= 0) {
                return new Long(val | 0, val / 0x100000000 | 0);
            } else {
                return Long_neg(new Long( -val | 0,  -val / 0x100000000 | 0));
            }
        };
        Long_create = function(lo, hi) {
            return new Long(lo, hi);
        };
        Long_toNumber = function(val) {
            return 0x100000000 * val.hi + (val.lo >>> 0);
        };
        Long_hi = function(val) {
            return val.hi;
        };
        Long_lo = function(val) {
            return val.lo;
        };
    } else {
        Long_ZERO = $rt_globals.BigInt(0);
        Long_create = function(lo, hi) {
            return $rt_globals.BigInt.asIntN(64, $rt_globals.BigInt.asUintN(64, $rt_globals.BigInt(lo)) | $rt_globals.BigInt.asUintN(64, $rt_globals.BigInt(hi) << $rt_globals.BigInt(32)));
        };
        Long_fromInt = function(val) {
            return $rt_globals.BigInt.asIntN(64, $rt_globals.BigInt(val | 0));
        };
        Long_fromNumber = function(val) {
            return $rt_globals.BigInt.asIntN(64, $rt_globals.BigInt(val >= 0 ? $rt_globals.Math.floor(val) : $rt_globals.Math.ceil(val)));
        };
        Long_toNumber = function(val) {
            return $rt_globals.Number(val);
        };
        Long_hi = function(val) {
            return $rt_globals.Number($rt_globals.BigInt.asIntN(64, val >> $rt_globals.BigInt(32))) | 0;
        };
        Long_lo = function(val) {
            return $rt_globals.Number($rt_globals.BigInt.asIntN(32, val)) | 0;
        };
    }
    var $rt_imul = $rt_globals.Math.imul || function(a, b) {
        var ah = a >>> 16 & 0xFFFF;
        var al = a & 0xFFFF;
        var bh = b >>> 16 & 0xFFFF;
        var bl = b & 0xFFFF;
        return al * bl + (ah * bl + al * bh << 16 >>> 0) | 0;
    };
    var $rt_udiv = function(a, b) {
        return (a >>> 0) / (b >>> 0) >>> 0;
    };
    var $rt_umod = function(a, b) {
        return (a >>> 0) % (b >>> 0) >>> 0;
    };
    var $rt_ucmp = function(a, b) {
        a >>>= 0;
        b >>>= 0;
        return a < b ?  -1 : a > b ? 1 : 0;
    };
    function $rt_checkBounds(index, array) {
        if (index < 0 || index >= array.length) {
            $rt_throwAIOOBE();
        }
        return index;
    }
    function $rt_checkUpperBound(index, array) {
        if (index >= array.length) {
            $rt_throwAIOOBE();
        }
        return index;
    }
    function $rt_checkLowerBound(index) {
        if (index < 0) {
            $rt_throwAIOOBE();
        }
        return index;
    }
    function $rt_classWithoutFields(superclass) {
        if (superclass === 0) {
            return function() {
            };
        }
        if (superclass === void 0) {
            superclass = $rt_objcls();
        }
        return function() {
            superclass.call(this);
        };
    }
    function $rt_setCloneMethod(target, f) {
        target.$clone = f;
    }
    function $rt_cls(cls) {
        return jl_Class_getClass(cls);
    }
    function $rt_str(str) {
        if (str === null) {
            return null;
        }
        var characters = $rt_createCharArray(str.length);
        var charsBuffer = characters.data;
        for (var i = 0; i < str.length; i = (i + 1) | 0) {
            charsBuffer[i] = str.charCodeAt(i) & 0xFFFF;
        }
        return jl_String__init_(characters);
    }
    function $rt_ustr(str) {
        if (str === null) {
            return null;
        }
        var data = str.$characters.data;
        var result = "";
        for (var i = 0; i < data.length; i = (i + 1) | 0) {
            result += String.fromCharCode(data[i]);
        }
        return result;
    }
    function $rt_objcls() { return jl_Object; }
    function $rt_stecls() {
        return jl_Object;
    }
    function $rt_throwableMessage(t) {
        return jl_Throwable_getMessage(t);
    }
    function $rt_throwableCause(t) {
        return jl_Throwable_getCause(t);
    }
    function $rt_nullCheck(val) {
        if (val === null) {
            $rt_throw(jl_NullPointerException__init_());
        }
        return val;
    }
    function $rt_intern(str) {
        return str;
    }
    function $rt_getThread() {
        return jl_Thread_currentThread();
    }
    function $rt_setThread(t) {
        return jl_Thread_setCurrentThread(t);
    }
    function $rt_createException(message) {
        return jl_RuntimeException__init_(message);
    }
    function $rt_createStackElement(className, methodName, fileName, lineNumber) {
        return null;
    }
    function $rt_setStack(e, stack) {
    }
    function $rt_throwAIOOBE() {
        $rt_throw(jl_ArrayIndexOutOfBoundsException__init_());
    }
    function $rt_throwCCE() {
    }
    var $java = Object.create(null);
    function jl_Object() {
        this.$monitor = null;
        this.$id$ = 0;
    }
    function jl_Object_monitorEnterSync($o) {
        var var$2, var$3;
        if ($o.$monitor === null)
            jl_Object_createMonitor($o);
        var$2 = $o.$monitor;
        var$3 = var$2.$owner;
        if (var$3 === null)
            var$2.$owner = jl_Thread_currentThread();
        else if (var$3 !== jl_Thread_currentThread()) {
            var$2 = new jl_IllegalStateException;
            jl_Throwable__init_(var$2, $rt_s(0));
            $rt_throw(var$2);
        }
        $o = $o.$monitor;
        $o.$count = $o.$count + 1 | 0;
    }
    function jl_Object_monitorExitSync($o) {
        var var$2, var$3;
        if (!jl_Object_isEmptyMonitor($o) && $o.$monitor.$owner === jl_Thread_currentThread()) {
            var$2 = $o.$monitor;
            var$3 = var$2.$count - 1 | 0;
            var$2.$count = var$3;
            if (!var$3)
                var$2.$owner = null;
            jl_Object_isEmptyMonitor($o);
            return;
        }
        $o = new jl_IllegalMonitorStateException;
        jl_Exception__init_($o);
        $rt_throw($o);
    }
    function jl_Object_monitorEnter($o) {
        var var$2;
        if ($o.$monitor === null)
            jl_Object_createMonitor($o);
        var$2 = $o.$monitor;
        if (var$2.$owner === null)
            var$2.$owner = jl_Thread_currentThread();
        if ($o.$monitor.$owner !== jl_Thread_currentThread())
            jl_Object_monitorEnterWait($o, 1);
        else {
            $o = $o.$monitor;
            $o.$count = $o.$count + 1 | 0;
        }
    }
    function jl_Object_createMonitor($o) {
        var var$2;
        var$2 = new jl_Object$Monitor;
        var$2.$owner = jl_Thread_currentThread();
        $o.$monitor = var$2;
    }
    function jl_Object_monitorEnterWait(var$1, var$2) {
        var thread = $rt_nativeThread();
        var javaThread = $rt_getThread();
        if (thread.isResuming()) {
            thread.status = 0;
            var result = thread.attribute;
            if (result instanceof Error) {
                throw result;
            }
            return result;
        }
        var callback = function() {};
        callback.$complete = function(val) {
            thread.attribute = val;
            $rt_setThread(javaThread);
            thread.resume();
        };
        callback.$error = function(e) {
            thread.attribute = $rt_exception(e);
            $rt_setThread(javaThread);
            thread.resume();
        };
        callback = otpp_AsyncCallbackWrapper_create(callback);
        return thread.suspend(function() {
            try {
                jl_Object_monitorEnterWait0(var$1, var$2, callback);
            } catch($e) {
                callback.$error($rt_exception($e));
            }
        });
    }
    function jl_Object_monitorEnterWait0($o, $count, $callback) {
        var $thread_0, $monitor, var$6;
        $thread_0 = jl_Thread_currentThread();
        $monitor = $o.$monitor;
        if ($monitor === null) {
            jl_Object_createMonitor($o);
            jl_Thread_setCurrentThread($thread_0);
            $o = $o.$monitor;
            $o.$count = $o.$count + $count | 0;
            otpp_AsyncCallbackWrapper_complete($callback, null);
            return;
        }
        if ($monitor.$owner === null) {
            $monitor.$owner = $thread_0;
            jl_Thread_setCurrentThread($thread_0);
            $o = $o.$monitor;
            $o.$count = $o.$count + $count | 0;
            otpp_AsyncCallbackWrapper_complete($callback, null);
            return;
        }
        if ($monitor.$enteringThreads === null)
            $monitor.$enteringThreads = otp_Platform_createQueueJs$js_body$_30();
        $monitor = $monitor.$enteringThreads;
        var$6 = new jl_Object$monitorEnterWait$lambda$_6_0;
        var$6.$_0 = $thread_0;
        var$6.$_1 = $o;
        var$6.$_2 = $count;
        var$6.$_3 = $callback;
        $callback = var$6;
        $monitor.push($callback);
    }
    function jl_Object_monitorExit($o) {
        var var$2, var$3;
        if (!jl_Object_isEmptyMonitor($o) && $o.$monitor.$owner === jl_Thread_currentThread()) {
            var$2 = $o.$monitor;
            var$3 = var$2.$count - 1 | 0;
            var$2.$count = var$3;
            if (var$3 <= 0) {
                var$2.$owner = null;
                var$2 = var$2.$enteringThreads;
                if (var$2 !== null && !otp_PlatformQueue_isEmpty$static(var$2)) {
                    var$2 = new jl_Object$monitorExit$lambda$_8_0;
                    var$2.$_00 = $o;
                    otp_Platform_schedule(var$2, 0);
                } else
                    jl_Object_isEmptyMonitor($o);
            }
            return;
        }
        $o = new jl_IllegalMonitorStateException;
        jl_Exception__init_($o);
        $rt_throw($o);
    }
    function jl_Object_isEmptyMonitor($this) {
        var $monitor, var$2;
        $monitor = $this.$monitor;
        if ($monitor === null)
            return 1;
        a: {
            if ($monitor.$owner === null) {
                var$2 = $monitor.$enteringThreads;
                if (!(var$2 !== null && !otp_PlatformQueue_isEmpty$static(var$2))) {
                    $monitor = $monitor.$notifyListeners;
                    if ($monitor === null)
                        break a;
                    if (otp_PlatformQueue_isEmpty$static($monitor))
                        break a;
                }
            }
            return 0;
        }
        $this.$monitor = null;
        return 1;
    }
    function jl_Object_getClass($this) {
        return jl_Class_getClass($this.constructor);
    }
    function jl_Object_hashCode($this) {
        return jl_Object_identity($this);
    }
    function jl_Object_equals($this, $other) {
        return $this !== $other ? 0 : 1;
    }
    function jl_Object_toString($this) {
        var var$1, var$2, var$3;
        var$1 = jl_Class_getName(jl_Object_getClass($this));
        var$2 = jl_Integer_toHexString(jl_Object_identity($this));
        var$3 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$3);
        var$1 = jl_StringBuilder_append(var$3, var$1);
        jl_AbstractStringBuilder_append(var$1, 64);
        jl_StringBuilder_append(var$1, var$2);
        return jl_AbstractStringBuilder_toString(var$3);
    }
    function jl_Object_identity($this) {
        var $platformThis, var$2;
        $platformThis = $this;
        if (!$platformThis.$id$) {
            var$2 = $rt_nextId();
            $platformThis.$id$ = var$2;
        }
        return $this.$id$;
    }
    function jl_Object_clone($this) {
        var $result, var$2, var$3;
        if (!$rt_isInstance($this, jl_Cloneable) && $this.constructor.$meta.item === null) {
            $result = new jl_CloneNotSupportedException;
            jl_Exception__init_($result);
            $rt_throw($result);
        }
        $result = otp_Platform_clone($this);
        var$2 = $result;
        var$3 = $rt_nextId();
        var$2.$id$ = var$3;
        return $result;
    }
    var t_Client = $rt_classWithoutFields();
    function t_Client_main($args) {
        var $body, $root, $code, $result, $oldState, $json, $state, var$9, $jsonString, $obj, $projName, $robotIP, $serverIP, $ptr, $tmp;
        $ptr = 0;
        if ($rt_resuming()) {
            var $thread = $rt_nativeThread();
            $ptr = $thread.pop();$serverIP = $thread.pop();$robotIP = $thread.pop();$projName = $thread.pop();$obj = $thread.pop();$jsonString = $thread.pop();var$9 = $thread.pop();$state = $thread.pop();$json = $thread.pop();$oldState = $thread.pop();$result = $thread.pop();$code = $thread.pop();$root = $thread.pop();$body = $thread.pop();$args = $thread.pop();
        }
        main: while (true) { switch ($ptr) {
        case 0:
            jl_Integer__clinit_();
            oj_JSONObject__clinit_();
            otcic_StdoutOutputStream__clinit_();
            jn_URL__clinit_();
            jn_HttpURLConnection__clinit_();
            jn_URLConnection__clinit_();
            jl_Character__clinit_();
            jl_Float__clinit_();
            jl_Boolean__clinit_();
            jl_Double__clinit_();
            otcit_FloatSynthesizer__clinit_();
            otcit_FloatAnalyzer__clinit_();
            jl_Long__clinit_();
            jur_AbstractSet__clinit_();
            otcic_StderrOutputStream__clinit_();
            jnc_CoderResult__clinit_();
            jl_Package__clinit_();
            otcit_DoubleSynthesizer__clinit_();
            jlr_Modifier__clinit_();
            otcit_DoubleAnalyzer__clinit_();
            jm_Conversion__clinit_();
            jl_AbstractStringBuilder$Constants__clinit_();
            ju_Collections__clinit_();
            $rt_globals.console.log("Running Code");
            $body = $rt_globals.window.document.body;
            $root = $body.querySelector("#root");
            $code = $rt_str($body.querySelector(".Code").textContent);
            $result = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($result);
            jl_StringBuilder_append(jl_StringBuilder_append($result, $rt_s(1)), $code);
            $rt_globals.console.log($rt_ustr(jl_AbstractStringBuilder_toString($result)));
            if ($root.classList.contains("run") ? 1 : 0) {
                $result = tj_Variables__init_();
                $body = tj_Parser_parse(tj_Parser__init_($code, $result));
                $oldState = new tj_Interpreter;
                $oldState.$lineNumber = 0;
                $oldState.$globalVariables = $result;
                $json = $body.$body;
                $body = null;
                $state = null;
                $result = $rt_s(2);
                var$9 = 1;
                $ptr = 1;
                continue main;
            }
            if ($root.classList.contains("debug") ? 1 : 0) {
                $jsonString = $rt_str($body.querySelector(".State").textContent);
                ji_PrintStream_println(jl_System_out(), $jsonString);
                $oldState = null;
                if (!jl_String_equals($jsonString, $rt_s(2))) {
                    $obj = new oj_JSONObject;
                    $result = new oj_JSONTokener;
                    $oldState = new ji_StringReader;
                    ji_Reader__init_($oldState);
                    $oldState.$string = $jsonString;
                    oj_JSONTokener__init_($result, $oldState);
                    oj_JSONObject__init_($obj, $result);
                    $oldState = tj_Runner_convertJSONToState($obj);
                }
                $ptr = 2;
                continue main;
            }
            if ($root.classList.contains("convert-java") ? 1 : 0) {
                $projName = $rt_str($body.querySelector(".FileTile.selected").textContent);
                $rt_globals.console.log($rt_ustr((jl_String_split($projName, $rt_s(3))).data[0]));
                $result = tj_Runner_convertString($code, (jl_String_split($projName, $rt_s(3))).data[0], $rt_s(4));
                $rt_globals.console.log($rt_ustr($result));
                $body = $body.querySelector(".ConvertedCode");
                $result = $rt_ustr($result);
                $body.textContent = $result;
            } else if ($root.classList.contains("convert-python") ? 1 : 0) {
                $projName = $rt_str($body.querySelector(".FileTile.selected").textContent);
                $rt_globals.console.log($rt_ustr((jl_String_split($projName, $rt_s(3))).data[0]));
                $result = tj_Runner_convertString($code, (jl_String_split($projName, $rt_s(3))).data[0], $rt_s(5));
                $rt_globals.console.log($rt_ustr($result));
                $body = $body.querySelector(".ConvertedCode");
                $result = $rt_ustr($result);
                $body.textContent = $result;
            } else {
                if ($root.classList.contains("run-robot") ? 1 : 0) {
                    $robotIP = $rt_str($root.querySelector(".robot-ip").classList[1]);
                    $serverIP = $rt_str($root.querySelector(".server-ip").classList[1]);
                    $ptr = 3;
                    continue main;
                }
                if ($root.classList.contains("parse") ? 1 : 0)
                    tj_Parser_parse(tj_Parser__init_($code, tj_Variables__init_()));
            }
            $rt_globals.finishRun();
            return;
        case 1:
            tj_Interpreter_interpretFunction($oldState, $json, $body, $state, $result, var$9);
            if ($rt_suspending()) {
                break main;
            }
            $rt_globals.finishRun();
            return;
        case 2:
            $tmp = tj_Runner_debugString($code, $oldState);
            if ($rt_suspending()) {
                break main;
            }
            $state = $tmp;
            $json = tj_Runner_convertStateToJSON($state, 0);
            $result = $body.querySelector(".State");
            $body = $rt_ustr(oj_JSONObject_toString($json));
            $result.textContent = $body;
            $rt_globals.finishRun();
            return;
        case 3:
            tj_Runner_runRobotString($code, $robotIP, $serverIP);
            if ($rt_suspending()) {
                break main;
            }
            $rt_globals.finishRun();
            return;
        default: $rt_invalidPointer();
        }}
        $rt_nativeThread().push($args, $body, $root, $code, $result, $oldState, $json, $state, var$9, $jsonString, $obj, $projName, $robotIP, $serverIP, $ptr);
    }
    var jlr_AnnotatedElement = $rt_classWithoutFields(0);
    var jlr_Type = $rt_classWithoutFields(0);
    function jl_Class() {
        var a = this; jl_Object.call(a);
        a.$name = null;
        a.$platformClass = null;
        a.$declaredMethods = null;
    }
    var jl_Class_reflectionInitialized = 0;
    function jl_Class_getClass($cls) {
        var $result, var$3;
        if ($cls === null)
            return null;
        $result = $cls.classObject;
        if ($result === null) {
            $result = new jl_Class;
            $result.$platformClass = $cls;
            var$3 = $result;
            $cls.classObject = var$3;
        }
        return $result;
    }
    function jl_Class_toString($this) {
        var var$1, var$2, var$3;
        var$1 = jl_Class_isInterface($this) ? $rt_s(6) : !jl_Class_isPrimitive($this) ? $rt_s(7) : $rt_s(2);
        var$2 = jl_Class_getName($this);
        var$3 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$3);
        jl_StringBuilder_append(jl_StringBuilder_append(var$3, var$1), var$2);
        return jl_AbstractStringBuilder_toString(var$3);
    }
    function jl_Class_isInstance($this, $obj) {
        var var$2;
        $obj = $obj;
        var$2 = $this.$platformClass;
        return $obj !== null && !(typeof $obj.constructor.$meta === 'undefined' ? 1 : 0) && otp_Platform_isAssignable($obj.constructor, var$2) ? 1 : 0;
    }
    function jl_Class_getName($this) {
        if ($this.$name === null)
            $this.$name = $rt_str($this.$platformClass.$meta.name);
        return $this.$name;
    }
    function jl_Class_isPrimitive($this) {
        return $this.$platformClass.$meta.primitive ? 1 : 0;
    }
    function jl_Class_isArray($this) {
        return otp_Platform_getArrayItem($this.$platformClass) === null ? 0 : 1;
    }
    function jl_Class_isInterface($this) {
        return !($this.$platformClass.$meta.flags & 2) ? 0 : 1;
    }
    function jl_Class_getComponentType($this) {
        return jl_Class_getClass(otp_Platform_getArrayItem($this.$platformClass));
    }
    function jl_Class_createMetadata() {
        tj_Statements$StmtType.$meta.methods = [
            {
                name : "values",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_arraycls(tj_Statements$StmtType),
                callable : null
            }, {
                name : "valueOf",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [jl_String],
                returnType : tj_Statements$StmtType,
                callable : null
            }, {
                name : "<init>",
                modifiers : 0,
                accessLevel : 1,
                parameterTypes : [jl_String, $rt_intcls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "$values",
                modifiers : 544,
                accessLevel : 1,
                parameterTypes : [],
                returnType : $rt_arraycls(tj_Statements$StmtType),
                callable : null
            }, {
                name : "<clinit>",
                modifiers : 512,
                accessLevel : 0,
                parameterTypes : [],
                returnType : $rt_voidcls(),
                callable : null
            }];
        tj_JavaishVal$JavaishType.$meta.methods = [
            {
                name : "values",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_arraycls(tj_JavaishVal$JavaishType),
                callable : null
            }, {
                name : "valueOf",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [jl_String],
                returnType : tj_JavaishVal$JavaishType,
                callable : null
            }, {
                name : "<init>",
                modifiers : 0,
                accessLevel : 1,
                parameterTypes : [jl_String, $rt_intcls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "$values",
                modifiers : 544,
                accessLevel : 1,
                parameterTypes : [],
                returnType : $rt_arraycls(tj_JavaishVal$JavaishType),
                callable : null
            }, {
                name : "<clinit>",
                modifiers : 512,
                accessLevel : 0,
                parameterTypes : [],
                returnType : $rt_voidcls(),
                callable : null
            }];
        tj_Expression$ExpressionReturnType.$meta.methods = [
            {
                name : "values",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_arraycls(tj_Expression$ExpressionReturnType),
                callable : null
            }, {
                name : "valueOf",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [jl_String],
                returnType : tj_Expression$ExpressionReturnType,
                callable : null
            }, {
                name : "<init>",
                modifiers : 0,
                accessLevel : 1,
                parameterTypes : [jl_String, $rt_intcls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "$values",
                modifiers : 544,
                accessLevel : 1,
                parameterTypes : [],
                returnType : $rt_arraycls(tj_Expression$ExpressionReturnType),
                callable : null
            }, {
                name : "<clinit>",
                modifiers : 512,
                accessLevel : 0,
                parameterTypes : [],
                returnType : $rt_voidcls(),
                callable : null
            }];
        tj_Statements$MutationType.$meta.methods = [
            {
                name : "values",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_arraycls(tj_Statements$MutationType),
                callable : null
            }, {
                name : "valueOf",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [jl_String],
                returnType : tj_Statements$MutationType,
                callable : null
            }, {
                name : "<init>",
                modifiers : 0,
                accessLevel : 1,
                parameterTypes : [jl_String, $rt_intcls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "$values",
                modifiers : 544,
                accessLevel : 1,
                parameterTypes : [],
                returnType : $rt_arraycls(tj_Statements$MutationType),
                callable : null
            }, {
                name : "<clinit>",
                modifiers : 512,
                accessLevel : 0,
                parameterTypes : [],
                returnType : $rt_voidcls(),
                callable : null
            }];
        tj_Element$ElementType.$meta.methods = [
            {
                name : "values",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_arraycls(tj_Element$ElementType),
                callable : null
            }, {
                name : "valueOf",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [jl_String],
                returnType : tj_Element$ElementType,
                callable : null
            }, {
                name : "<init>",
                modifiers : 0,
                accessLevel : 1,
                parameterTypes : [jl_String, $rt_intcls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "$values",
                modifiers : 544,
                accessLevel : 1,
                parameterTypes : [],
                returnType : $rt_arraycls(tj_Element$ElementType),
                callable : null
            }, {
                name : "<clinit>",
                modifiers : 512,
                accessLevel : 0,
                parameterTypes : [],
                returnType : $rt_voidcls(),
                callable : null
            }];
        tj_Statements$RobotType.$meta.methods = [
            {
                name : "values",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_arraycls(tj_Statements$RobotType),
                callable : null
            }, {
                name : "valueOf",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [jl_String],
                returnType : tj_Statements$RobotType,
                callable : null
            }, {
                name : "<init>",
                modifiers : 0,
                accessLevel : 1,
                parameterTypes : [jl_String, $rt_intcls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "$values",
                modifiers : 544,
                accessLevel : 1,
                parameterTypes : [],
                returnType : $rt_arraycls(tj_Statements$RobotType),
                callable : null
            }, {
                name : "<clinit>",
                modifiers : 512,
                accessLevel : 0,
                parameterTypes : [],
                returnType : $rt_voidcls(),
                callable : null
            }];
        juc_TimeUnit.$meta.methods = [
            {
                name : "values",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_arraycls(juc_TimeUnit),
                callable : null
            }, {
                name : "valueOf",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [jl_String],
                returnType : juc_TimeUnit,
                callable : null
            }, {
                name : "<init>",
                modifiers : 0,
                accessLevel : 1,
                parameterTypes : [jl_String, $rt_intcls(), $rt_longcls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "convert",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_longcls(), juc_TimeUnit],
                returnType : $rt_longcls(),
                callable : null
            }, {
                name : "toNanos",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_longcls()],
                returnType : $rt_longcls(),
                callable : null
            }, {
                name : "toMicros",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_longcls()],
                returnType : $rt_longcls(),
                callable : null
            }, {
                name : "toMillis",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_longcls()],
                returnType : $rt_longcls(),
                callable : null
            }, {
                name : "toSeconds",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_longcls()],
                returnType : $rt_longcls(),
                callable : null
            }, {
                name : "toMinutes",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_longcls()],
                returnType : $rt_longcls(),
                callable : null
            }, {
                name : "toHours",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_longcls()],
                returnType : $rt_longcls(),
                callable : null
            }, {
                name : "toDays",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_longcls()],
                returnType : $rt_longcls(),
                callable : null
            }, {
                name : "timedWait",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_Object, $rt_longcls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "timedJoin",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_Thread, $rt_longcls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "sleep",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_longcls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "$values",
                modifiers : 544,
                accessLevel : 1,
                parameterTypes : [],
                returnType : $rt_arraycls(juc_TimeUnit),
                callable : null
            }, {
                name : "<clinit>",
                modifiers : 512,
                accessLevel : 0,
                parameterTypes : [],
                returnType : $rt_voidcls(),
                callable : null
            }];
        tj_Debugger$Operator.$meta.methods = [
            {
                name : "values",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_arraycls(tj_Debugger$Operator),
                callable : null
            }, {
                name : "valueOf",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [jl_String],
                returnType : tj_Debugger$Operator,
                callable : null
            }, {
                name : "<init>",
                modifiers : 0,
                accessLevel : 1,
                parameterTypes : [jl_String, $rt_intcls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "$values",
                modifiers : 544,
                accessLevel : 1,
                parameterTypes : [],
                returnType : $rt_arraycls(tj_Debugger$Operator),
                callable : null
            }, {
                name : "<clinit>",
                modifiers : 512,
                accessLevel : 0,
                parameterTypes : [],
                returnType : $rt_voidcls(),
                callable : null
            }];
        tj_JavaTranslator$Operator.$meta.methods = [
            {
                name : "values",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_arraycls(tj_JavaTranslator$Operator),
                callable : null
            }, {
                name : "valueOf",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [jl_String],
                returnType : tj_JavaTranslator$Operator,
                callable : null
            }, {
                name : "<init>",
                modifiers : 0,
                accessLevel : 1,
                parameterTypes : [jl_String, $rt_intcls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "$values",
                modifiers : 544,
                accessLevel : 1,
                parameterTypes : [],
                returnType : $rt_arraycls(tj_JavaTranslator$Operator),
                callable : null
            }, {
                name : "<clinit>",
                modifiers : 512,
                accessLevel : 0,
                parameterTypes : [],
                returnType : $rt_voidcls(),
                callable : null
            }];
        tj_Interpreter$Operator.$meta.methods = [
            {
                name : "values",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_arraycls(tj_Interpreter$Operator),
                callable : null
            }, {
                name : "valueOf",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [jl_String],
                returnType : tj_Interpreter$Operator,
                callable : null
            }, {
                name : "<init>",
                modifiers : 0,
                accessLevel : 1,
                parameterTypes : [jl_String, $rt_intcls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "$values",
                modifiers : 544,
                accessLevel : 1,
                parameterTypes : [],
                returnType : $rt_arraycls(tj_Interpreter$Operator),
                callable : null
            }, {
                name : "<clinit>",
                modifiers : 512,
                accessLevel : 0,
                parameterTypes : [],
                returnType : $rt_voidcls(),
                callable : null
            }];
        tj_PythonTranslator$Operator.$meta.methods = [
            {
                name : "values",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_arraycls(tj_PythonTranslator$Operator),
                callable : null
            }, {
                name : "valueOf",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [jl_String],
                returnType : tj_PythonTranslator$Operator,
                callable : null
            }, {
                name : "<init>",
                modifiers : 0,
                accessLevel : 1,
                parameterTypes : [jl_String, $rt_intcls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "$values",
                modifiers : 544,
                accessLevel : 1,
                parameterTypes : [],
                returnType : $rt_arraycls(tj_PythonTranslator$Operator),
                callable : null
            }, {
                name : "<clinit>",
                modifiers : 512,
                accessLevel : 0,
                parameterTypes : [],
                returnType : $rt_voidcls(),
                callable : null
            }];
        jlr_Method.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_Class, jl_String, $rt_intcls(), $rt_intcls(), jl_Class, $rt_arraycls(jl_Class), otcir_JSCallable],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "getDeclaringClass",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_Class,
                callable : null
            }, {
                name : "getName",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }, {
                name : "getModifiers",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "getReturnType",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_Class,
                callable : null
            }, {
                name : "getParameterTypes",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_arraycls(jl_Class),
                callable : null
            }, {
                name : "getParameterCount",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "toString",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }, {
                name : "invoke",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_Object, $rt_arraycls(jl_Object)],
                returnType : jl_Object,
                callable : null
            }, {
                name : "isBridge",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "isSynthetic",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "isVarArgs",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_booleancls(),
                callable : null
            }];
        tj_GreaterThanElmt.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "toString",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }];
        jur_CharSet.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_charcls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "charCount",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "accepts",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jl_CharSequence],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "find",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jl_CharSequence, jur_MatchResultImpl],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "findBack",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), $rt_intcls(), jl_CharSequence, jur_MatchResultImpl],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "getName",
                modifiers : 0,
                accessLevel : 2,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }, {
                name : "getChar",
                modifiers : 0,
                accessLevel : 2,
                parameterTypes : [],
                returnType : $rt_charcls(),
                callable : null
            }, {
                name : "first",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_AbstractSet],
                returnType : $rt_booleancls(),
                callable : null
            }];
        jur_PossessiveGroupQuantifierSet.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_AbstractSet, jur_AbstractSet, $rt_intcls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "matches",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jl_CharSequence, jur_MatchResultImpl],
                returnType : $rt_intcls(),
                callable : null
            }];
        tj_CallStmt.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jl_String, $rt_arraycls(tj_Expression)],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "getName",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }, {
                name : "getParams",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_arraycls(tj_Expression),
                callable : null
            }, {
                name : "getLine",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_intcls(),
                callable : null
            }];
        jur_RelAltGroupQuantifierSet.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_AbstractSet, jur_AbstractSet, $rt_intcls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "matches",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jl_CharSequence, jur_MatchResultImpl],
                returnType : $rt_intcls(),
                callable : null
            }];
        tj_ReturnStmt.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), tj_Expression, $rt_booleancls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "getValue",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : tj_Expression,
                callable : null
            }, {
                name : "getLine",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "hasReturn",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_booleancls(),
                callable : null
            }];
        jur_DotAllQuantifierSet.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_AbstractSet, jur_AbstractSet, $rt_intcls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "matches",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jl_CharSequence, jur_MatchResultImpl],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "find",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jl_CharSequence, jur_MatchResultImpl],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "getName",
                modifiers : 0,
                accessLevel : 2,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }];
        jur_UMultiLineEOLSet.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "matches",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jl_CharSequence, jur_MatchResultImpl],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "hasConsumed",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_MatchResultImpl],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "getName",
                modifiers : 0,
                accessLevel : 2,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }];
        jur_UCICharSet.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_charcls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "accepts",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jl_CharSequence],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "getName",
                modifiers : 0,
                accessLevel : 2,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }];
        tj_VariableElmt.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_String],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "toString",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }, {
                name : "getName",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }];
        jur_AltQuantifierSet.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_LeafSet, jur_AbstractSet, $rt_intcls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "matches",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jl_CharSequence, jur_MatchResultImpl],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "setNext",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_AbstractSet],
                returnType : $rt_voidcls(),
                callable : null
            }];
        jur_LeafQuantifierSet.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_LeafSet, jur_AbstractSet, $rt_intcls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "matches",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jl_CharSequence, jur_MatchResultImpl],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "getName",
                modifiers : 0,
                accessLevel : 2,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }, {
                name : "setInnerSet",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_AbstractSet],
                returnType : $rt_voidcls(),
                callable : null
            }];
        tj_NotEqualElmt.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "toString",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }];
        tj_CastElmt.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [tj_JavaishVal$JavaishType, tj_Expression],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "toString",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }, {
                name : "getCastType",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : tj_JavaishVal$JavaishType,
                callable : null
            }, {
                name : "getExpression",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : tj_Expression,
                callable : null
            }];
        jur_HangulDecomposedCharSet.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_arraycls($rt_charcls()), $rt_intcls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "getNext",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jur_AbstractSet,
                callable : null
            }, {
                name : "setNext",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_AbstractSet],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "getDecomposedChar",
                modifiers : 0,
                accessLevel : 1,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }, {
                name : "getName",
                modifiers : 0,
                accessLevel : 2,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }, {
                name : "matches",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jl_CharSequence, jur_MatchResultImpl],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "first",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_AbstractSet],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "hasConsumed",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_MatchResultImpl],
                returnType : $rt_booleancls(),
                callable : null
            }];
        tj_LessThanElmt.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "toString",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }];
        tj_JavaishFloat.$meta.methods = [
            {
                name : "getValue",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_Float,
                callable : null
            }, {
                name : "<init>",
                modifiers : 0,
                accessLevel : 0,
                parameterTypes : [$rt_floatcls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "getType",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : tj_JavaishVal$JavaishType,
                callable : null
            }, {
                name : "typeString",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }, {
                name : "getValue",
                modifiers : 96,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_Object,
                callable : null
            }];
        tj_GreaterThanEqualElmt.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "toString",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }];
        jur_DotSet.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_AbstractLineTerminator],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "matches",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jl_CharSequence, jur_MatchResultImpl],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "getName",
                modifiers : 0,
                accessLevel : 2,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }, {
                name : "getNext",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jur_AbstractSet,
                callable : null
            }, {
                name : "setNext",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_AbstractSet],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "getType",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "hasConsumed",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_MatchResultImpl],
                returnType : $rt_booleancls(),
                callable : null
            }];
        tj_RobotActionElmt.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [tj_Statements$RobotType, ju_List],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "getAction",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : tj_Statements$RobotType,
                callable : null
            }, {
                name : "toString",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }, {
                name : "getParams",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : ju_List,
                callable : null
            }];
        jur_GroupQuantifierSet.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_AbstractSet, jur_AbstractSet, $rt_intcls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "matches",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jl_CharSequence, jur_MatchResultImpl],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "getName",
                modifiers : 0,
                accessLevel : 2,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }];
        tj_ElseStmt.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "getLine",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_intcls(),
                callable : null
            }];
        tj_StringList.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 0,
                parameterTypes : [tj_JavaishStringList, jl_String],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "getValue",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : tj_JavaishStringList,
                callable : null
            }, {
                name : "setValue",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [tj_JavaishStringList],
                returnType : $rt_voidcls(),
                callable : null
            }];
        tj_BoolElmt.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_booleancls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "toString",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }, {
                name : "getValue",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_booleancls(),
                callable : null
            }];
        jur_PossessiveQuantifierSet.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_LeafSet, jur_AbstractSet, $rt_intcls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "matches",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jl_CharSequence, jur_MatchResultImpl],
                returnType : $rt_intcls(),
                callable : null
            }];
        jur_UnifiedQuantifierSet.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_LeafSet, jur_AbstractSet, $rt_intcls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_LeafQuantifierSet],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "matches",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jl_CharSequence, jur_MatchResultImpl],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "find",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jl_CharSequence, jur_MatchResultImpl],
                returnType : $rt_intcls(),
                callable : null
            }];
        jur_LowSurrogateCharSet.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_charcls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "getNext",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jur_AbstractSet,
                callable : null
            }, {
                name : "setNext",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_AbstractSet],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "matches",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jl_CharSequence, jur_MatchResultImpl],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "find",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jl_CharSequence, jur_MatchResultImpl],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "findBack",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), $rt_intcls(), jl_CharSequence, jur_MatchResultImpl],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "getName",
                modifiers : 0,
                accessLevel : 2,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }, {
                name : "getChar",
                modifiers : 0,
                accessLevel : 2,
                parameterTypes : [],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "first",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_AbstractSet],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "hasConsumed",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_MatchResultImpl],
                returnType : $rt_booleancls(),
                callable : null
            }];
        jur_EmptySet.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_AbstractSet],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "accepts",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jl_CharSequence],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "find",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jl_CharSequence, jur_MatchResultImpl],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "findBack",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), $rt_intcls(), jl_CharSequence, jur_MatchResultImpl],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "getName",
                modifiers : 0,
                accessLevel : 2,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }, {
                name : "hasConsumed",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_MatchResultImpl],
                returnType : $rt_booleancls(),
                callable : null
            }];
        jur_UCIRangeSet.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_AbstractCharClass, jur_AbstractSet],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_AbstractCharClass],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "accepts",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jl_CharSequence],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "getName",
                modifiers : 0,
                accessLevel : 2,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }];
        jur_JointSet.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 2,
                parameterTypes : [],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [ju_ArrayList, jur_FSet],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "matches",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jl_CharSequence, jur_MatchResultImpl],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "setNext",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_AbstractSet],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "getNext",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jur_AbstractSet,
                callable : null
            }, {
                name : "getName",
                modifiers : 0,
                accessLevel : 2,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }, {
                name : "getGroup",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "first",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_AbstractSet],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "hasConsumed",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_MatchResultImpl],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "processSecondPass",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_voidcls(),
                callable : null
            }];
        jur_NegativeLookAhead.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [ju_ArrayList, jur_FSet],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "matches",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jl_CharSequence, jur_MatchResultImpl],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "hasConsumed",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_MatchResultImpl],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "getName",
                modifiers : 0,
                accessLevel : 2,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }];
        tj_JavaishString.$meta.methods = [
            {
                name : "getValue",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }, {
                name : "<init>",
                modifiers : 0,
                accessLevel : 0,
                parameterTypes : [jl_String],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "getType",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : tj_JavaishVal$JavaishType,
                callable : null
            }, {
                name : "typeString",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }, {
                name : "getValue",
                modifiers : 96,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_Object,
                callable : null
            }];
        tj_JavaishListVal.$meta.methods = [
            {
                name : "getValue",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : tj_JavaishList,
                callable : null
            }, {
                name : "<init>",
                modifiers : 0,
                accessLevel : 0,
                parameterTypes : [tj_JavaishList],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "getType",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : tj_JavaishVal$JavaishType,
                callable : null
            }, {
                name : "typeString",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }, {
                name : "getValue",
                modifiers : 96,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_Object,
                callable : null
            }];
        tj_Expression.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_arraycls(tj_Element), tj_Expression$ExpressionReturnType, $rt_intcls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_String, tj_Expression$ExpressionReturnType, $rt_intcls(), $rt_intcls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "getColumn",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "getLine",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "parseExpression",
                modifiers : 0,
                accessLevel : 1,
                parameterTypes : [jl_String, $rt_intcls()],
                returnType : $rt_arraycls(tj_Element),
                callable : null
            }, {
                name : "possibleFunctionName",
                modifiers : 0,
                accessLevel : 1,
                parameterTypes : [jl_String],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "parseElement",
                modifiers : 0,
                accessLevel : 1,
                parameterTypes : [jl_String, $rt_intcls()],
                returnType : tj_Element,
                callable : null
            }, {
                name : "isInteger",
                modifiers : 0,
                accessLevel : 1,
                parameterTypes : [jl_String],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "isFloat",
                modifiers : 0,
                accessLevel : 1,
                parameterTypes : [jl_String],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "isVariable",
                modifiers : 0,
                accessLevel : 1,
                parameterTypes : [jl_String],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "getReturnType",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : tj_Expression$ExpressionReturnType,
                callable : null
            }, {
                name : "getElements",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_arraycls(tj_Element),
                callable : null
            }, {
                name : "nextWord",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_String, $rt_intcls()],
                returnType : jl_String,
                callable : null
            }, {
                name : "toString",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }, {
                name : "returnTypeToJavaishType",
                modifiers : 0,
                accessLevel : 1,
                parameterTypes : [tj_Expression$ExpressionReturnType],
                returnType : tj_JavaishVal$JavaishType,
                callable : null
            }];
        jur_ReluctantCompositeQuantifierSet.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_Quantifier, jur_LeafSet, jur_AbstractSet, $rt_intcls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "matches",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jl_CharSequence, jur_MatchResultImpl],
                returnType : $rt_intcls(),
                callable : null
            }];
        tj_ArrayLengthElmt.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_String],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "getArrayName",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }, {
                name : "toString",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }];
        jur_PositiveLookBehind.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [ju_ArrayList, jur_FSet],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "matches",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jl_CharSequence, jur_MatchResultImpl],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "hasConsumed",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_MatchResultImpl],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "getName",
                modifiers : 0,
                accessLevel : 2,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }];
        jur_BackReferenceSet.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), $rt_intcls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "matches",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jl_CharSequence, jur_MatchResultImpl],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "find",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jl_CharSequence, jur_MatchResultImpl],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "findBack",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), $rt_intcls(), jl_CharSequence, jur_MatchResultImpl],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "first",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_AbstractSet],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "getName",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }];
        jur_PosPlusGroupQuantifierSet.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_AbstractSet, jur_AbstractSet, $rt_intcls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "matches",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jl_CharSequence, jur_MatchResultImpl],
                returnType : $rt_intcls(),
                callable : null
            }];
        jur_DotAllSet.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 0,
                parameterTypes : [],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "matches",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jl_CharSequence, jur_MatchResultImpl],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "getName",
                modifiers : 0,
                accessLevel : 2,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }, {
                name : "getNext",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jur_AbstractSet,
                callable : null
            }, {
                name : "setNext",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_AbstractSet],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "getType",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "hasConsumed",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_MatchResultImpl],
                returnType : $rt_booleancls(),
                callable : null
            }];
        tj_RemoveAllFromStmt.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jl_String, tj_Expression],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "getListName",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }, {
                name : "getValue",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : tj_Expression,
                callable : null
            }];
        jur_RelCompositeGroupQuantifierSet.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_Quantifier, jur_AbstractSet, jur_AbstractSet, $rt_intcls(), $rt_intcls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "matches",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jl_CharSequence, jur_MatchResultImpl],
                returnType : $rt_intcls(),
                callable : null
            }];
        tj_ForWhenStmt.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), tj_Expression, tj_Expression, jl_String],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "getCondition",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : tj_Expression,
                callable : null
            }, {
                name : "getIncrement",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : tj_Expression,
                callable : null
            }, {
                name : "getIncVar",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }, {
                name : "getLine",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_intcls(),
                callable : null
            }];
        tj_FloatList.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 0,
                parameterTypes : [tj_JavaishFloatList, jl_String],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "getValue",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : tj_JavaishFloatList,
                callable : null
            }, {
                name : "setValue",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [tj_JavaishFloatList],
                returnType : $rt_voidcls(),
                callable : null
            }];
        jur_UCIDecomposedCharSet.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_arraycls($rt_intcls()), $rt_intcls()],
                returnType : $rt_voidcls(),
                callable : null
            }];
        jur_UEOLSet.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "matches",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jl_CharSequence, jur_MatchResultImpl],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "hasConsumed",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_MatchResultImpl],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "getName",
                modifiers : 0,
                accessLevel : 2,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }];
        tj_PrintStmt.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), tj_Expression],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "getValue",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : tj_Expression,
                callable : null
            }, {
                name : "getLine",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_intcls(),
                callable : null
            }];
        tj_Element.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "getType",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : tj_Element$ElementType,
                callable : null
            }, {
                name : "getTypeS",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }, {
                name : "typeString",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }];
        tj_BoolList.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 0,
                parameterTypes : [tj_JavaishBooleanList, jl_String],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "getValue",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : tj_JavaishBooleanList,
                callable : null
            }, {
                name : "setValue",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [tj_JavaishBooleanList],
                returnType : $rt_voidcls(),
                callable : null
            }];
        jl_Boolean.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_booleancls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_String],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "compareTo",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_Boolean],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "compare",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [$rt_booleancls(), $rt_booleancls()],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "parseBoolean",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [jl_String],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "booleanValue",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "valueOf",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [$rt_booleancls()],
                returnType : jl_Boolean,
                callable : null
            }, {
                name : "valueOf",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [jl_String],
                returnType : jl_Boolean,
                callable : null
            }, {
                name : "toString",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [$rt_booleancls()],
                returnType : jl_String,
                callable : null
            }, {
                name : "toString",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }, {
                name : "hashCode",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "hashCode",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [$rt_booleancls()],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "equals",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_Object],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "getBoolean",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [jl_String],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "logicalAnd",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [$rt_booleancls(), $rt_booleancls()],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "logicalOr",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [$rt_booleancls(), $rt_booleancls()],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "logicalXor",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [$rt_booleancls(), $rt_booleancls()],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "compareTo",
                modifiers : 96,
                accessLevel : 3,
                parameterTypes : [jl_Object],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "<clinit>",
                modifiers : 512,
                accessLevel : 0,
                parameterTypes : [],
                returnType : $rt_voidcls(),
                callable : null
            }];
        tj_ImportStmt.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jl_String],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "getImportName",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }, {
                name : "getLine",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_intcls(),
                callable : null
            }];
        jur_SupplCharSet.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "accepts",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jl_CharSequence],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "find",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jl_CharSequence, jur_MatchResultImpl],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "findBack",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), $rt_intcls(), jl_CharSequence, jur_MatchResultImpl],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "getName",
                modifiers : 0,
                accessLevel : 2,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }, {
                name : "getCodePoint",
                modifiers : 0,
                accessLevel : 2,
                parameterTypes : [],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "first",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_AbstractSet],
                returnType : $rt_booleancls(),
                callable : null
            }];
        tj_ListValElmt.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_String, tj_Expression],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "getListName",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }, {
                name : "getIndex",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : tj_Expression,
                callable : null
            }, {
                name : "toString",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }];
        jur_HighSurrogateCharSet.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_charcls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "getNext",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jur_AbstractSet,
                callable : null
            }, {
                name : "setNext",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_AbstractSet],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "matches",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jl_CharSequence, jur_MatchResultImpl],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "find",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jl_CharSequence, jur_MatchResultImpl],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "findBack",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), $rt_intcls(), jl_CharSequence, jur_MatchResultImpl],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "getName",
                modifiers : 0,
                accessLevel : 2,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }, {
                name : "getChar",
                modifiers : 0,
                accessLevel : 2,
                parameterTypes : [],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "first",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_AbstractSet],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "hasConsumed",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_MatchResultImpl],
                returnType : $rt_booleancls(),
                callable : null
            }];
        tj_OrElmt.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "toString",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }];
        jl_String.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_String],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_arraycls($rt_charcls())],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_arraycls($rt_charcls()), $rt_intcls(), $rt_intcls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "fromArray",
                modifiers : 512,
                accessLevel : 0,
                parameterTypes : [$rt_arraycls($rt_charcls())],
                returnType : jl_String,
                callable : null
            }, {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_arraycls($rt_bytecls()), $rt_intcls(), $rt_intcls(), jl_String],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_arraycls($rt_bytecls()), $rt_intcls(), $rt_intcls(), jnc_Charset],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_arraycls($rt_bytecls()), $rt_intcls(), $rt_intcls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_arraycls($rt_bytecls())],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_arraycls($rt_bytecls()), jl_String],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_arraycls($rt_bytecls()), jnc_Charset],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_arraycls($rt_intcls()), $rt_intcls(), $rt_intcls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "initWithBytes",
                modifiers : 0,
                accessLevel : 1,
                parameterTypes : [$rt_arraycls($rt_bytecls()), $rt_intcls(), $rt_intcls(), jnc_Charset],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_StringBuilder],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "<init>",
                modifiers : 0,
                accessLevel : 1,
                parameterTypes : [$rt_intcls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "allocate",
                modifiers : 512,
                accessLevel : 1,
                parameterTypes : [$rt_intcls()],
                returnType : jl_String,
                callable : null
            }, {
                name : "charAt",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls()],
                returnType : $rt_charcls(),
                callable : null
            }, {
                name : "codePointAt",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls()],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "codePointBefore",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls()],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "codePointCount",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), $rt_intcls()],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "offsetByCodePoints",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), $rt_intcls()],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "length",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "isEmpty",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "isBlank",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "getChars",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), $rt_intcls(), $rt_arraycls($rt_charcls()), $rt_intcls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "contentEquals",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_StringBuffer],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "contentEquals",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_CharSequence],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "compareTo",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_String],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "compareToIgnoreCase",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_String],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "startsWith",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_String, $rt_intcls()],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "startsWith",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_String],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "regionMatches",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_booleancls(), $rt_intcls(), jl_String, $rt_intcls(), $rt_intcls()],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "regionMatches",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jl_String, $rt_intcls(), $rt_intcls()],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "endsWith",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_String],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "indexOf",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), $rt_intcls()],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "indexOf",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls()],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "lastIndexOf",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), $rt_intcls()],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "lastIndexOf",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls()],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "indexOf",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_String, $rt_intcls()],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "indexOf",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_String],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "lastIndexOf",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_String, $rt_intcls()],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "lastIndexOf",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_String],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "substring",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), $rt_intcls()],
                returnType : jl_String,
                callable : null
            }, {
                name : "substring",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls()],
                returnType : jl_String,
                callable : null
            }, {
                name : "subSequence",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), $rt_intcls()],
                returnType : jl_CharSequence,
                callable : null
            }, {
                name : "concat",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_String],
                returnType : jl_String,
                callable : null
            }, {
                name : "replace",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_charcls(), $rt_charcls()],
                returnType : jl_String,
                callable : null
            }, {
                name : "contains",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_CharSequence],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "replace",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_CharSequence, jl_CharSequence],
                returnType : jl_String,
                callable : null
            }, {
                name : "trim",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }, {
                name : "strip",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }, {
                name : "stripLeading",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }, {
                name : "stripTrailing",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }, {
                name : "toString",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }, {
                name : "toCharArray",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_arraycls($rt_charcls()),
                callable : null
            }, {
                name : "valueOf",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [jl_Object],
                returnType : jl_String,
                callable : null
            }, {
                name : "valueOf",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [$rt_arraycls($rt_charcls())],
                returnType : jl_String,
                callable : null
            }, {
                name : "valueOf",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [$rt_arraycls($rt_charcls()), $rt_intcls(), $rt_intcls()],
                returnType : jl_String,
                callable : null
            }, {
                name : "copyValueOf",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [$rt_arraycls($rt_charcls())],
                returnType : jl_String,
                callable : null
            }, {
                name : "copyValueOf",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [$rt_arraycls($rt_charcls()), $rt_intcls(), $rt_intcls()],
                returnType : jl_String,
                callable : null
            }, {
                name : "valueOf",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [$rt_booleancls()],
                returnType : jl_String,
                callable : null
            }, {
                name : "valueOf",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [$rt_charcls()],
                returnType : jl_String,
                callable : null
            }, {
                name : "valueOf",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [$rt_intcls()],
                returnType : jl_String,
                callable : null
            }, {
                name : "valueOf",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [$rt_longcls()],
                returnType : jl_String,
                callable : null
            }, {
                name : "valueOf",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [$rt_floatcls()],
                returnType : jl_String,
                callable : null
            }, {
                name : "valueOf",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [$rt_doublecls()],
                returnType : jl_String,
                callable : null
            }, {
                name : "equals",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_Object],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "equalsIgnoreCase",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_String],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "getBytes",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_String],
                returnType : $rt_arraycls($rt_bytecls()),
                callable : null
            }, {
                name : "getBytes",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_arraycls($rt_bytecls()),
                callable : null
            }, {
                name : "getBytes",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jnc_Charset],
                returnType : $rt_arraycls($rt_bytecls()),
                callable : null
            }, {
                name : "hashCode",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "toLowerCase",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }, {
                name : "toLowerCase",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [ju_Locale],
                returnType : jl_String,
                callable : null
            }, {
                name : "toUpperCase",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }, {
                name : "toUpperCase",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [ju_Locale],
                returnType : jl_String,
                callable : null
            }, {
                name : "intern",
                modifiers : 256,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }, {
                name : "matches",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_String],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "split",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_String],
                returnType : $rt_arraycls(jl_String),
                callable : null
            }, {
                name : "split",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_String, $rt_intcls()],
                returnType : $rt_arraycls(jl_String),
                callable : null
            }, {
                name : "replaceAll",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_String, jl_String],
                returnType : jl_String,
                callable : null
            }, {
                name : "replaceFirst",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_String, jl_String],
                returnType : jl_String,
                callable : null
            }, {
                name : "format",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [jl_String, $rt_arraycls(jl_Object)],
                returnType : jl_String,
                callable : null
            }, {
                name : "format",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [ju_Locale, jl_String, $rt_arraycls(jl_Object)],
                returnType : jl_String,
                callable : null
            }, {
                name : "join",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [jl_CharSequence, $rt_arraycls(jl_CharSequence)],
                returnType : jl_String,
                callable : null
            }, {
                name : "join",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [jl_CharSequence, jl_Iterable],
                returnType : jl_String,
                callable : null
            }, {
                name : "repeat",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls()],
                returnType : jl_String,
                callable : null
            }, {
                name : "compareTo",
                modifiers : 96,
                accessLevel : 3,
                parameterTypes : [jl_Object],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "lambda$static$0",
                modifiers : 544,
                accessLevel : 1,
                parameterTypes : [jl_String, jl_String],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "<clinit>",
                modifiers : 512,
                accessLevel : 0,
                parameterTypes : [],
                returnType : $rt_voidcls(),
                callable : null
            }];
        tj_DivideElmt.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "toString",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }];
        tj_ListElmt.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [ju_List, tj_JavaishVal$JavaishType],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "getList",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : ju_List,
                callable : null
            }, {
                name : "getListType",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : tj_JavaishVal$JavaishType,
                callable : null
            }, {
                name : "toString",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }];
        tj_ElseIfStmt.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), tj_Expression],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "getCondition",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : tj_Expression,
                callable : null
            }, {
                name : "getLine",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_intcls(),
                callable : null
            }];
        tj_WhileStmt.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), tj_Expression],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "getLine",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "getCondition",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : tj_Expression,
                callable : null
            }];
        tj_RemoveAtStmt.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), tj_Expression, jl_String],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "getLocation",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : tj_Expression,
                callable : null
            }, {
                name : "getListName",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }];
        jur_CICharSet.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_charcls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "accepts",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jl_CharSequence],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "getName",
                modifiers : 0,
                accessLevel : 2,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }, {
                name : "getChar",
                modifiers : 0,
                accessLevel : 2,
                parameterTypes : [],
                returnType : $rt_charcls(),
                callable : null
            }];
        jur_AtomicJointSet.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [ju_ArrayList, jur_FSet],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "matches",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jl_CharSequence, jur_MatchResultImpl],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "setNext",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_AbstractSet],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "getNext",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jur_AbstractSet,
                callable : null
            }, {
                name : "getName",
                modifiers : 0,
                accessLevel : 2,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }];
        tj_ShowInputBoxElmt.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [tj_Expression],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "getValue",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : tj_Expression,
                callable : null
            }];
        tj_AndElmt.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "toString",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }];
        tj_FloatElmt.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_floatcls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "toString",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }, {
                name : "getValue",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_floatcls(),
                callable : null
            }];
        jur_SOLSet.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 0,
                parameterTypes : [],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "matches",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jl_CharSequence, jur_MatchResultImpl],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "hasConsumed",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_MatchResultImpl],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "getName",
                modifiers : 0,
                accessLevel : 2,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }];
        otciu_UnicodeHelper$Range.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), $rt_intcls(), $rt_arraycls($rt_bytecls())],
                returnType : $rt_voidcls(),
                callable : null
            }];
        jur_CIDecomposedCharSet.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_arraycls($rt_intcls()), $rt_intcls()],
                returnType : $rt_voidcls(),
                callable : null
            }];
        tj_FloatVar.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 0,
                parameterTypes : [tj_JavaishFloat, jl_String],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "getValue",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : tj_JavaishFloat,
                callable : null
            }];
        jl_Double.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_doublecls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_String],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "doubleValue",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_doublecls(),
                callable : null
            }, {
                name : "intValue",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "longValue",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_longcls(),
                callable : null
            }, {
                name : "floatValue",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_floatcls(),
                callable : null
            }, {
                name : "valueOf",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [$rt_doublecls()],
                returnType : jl_Double,
                callable : null
            }, {
                name : "toString",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [$rt_doublecls()],
                returnType : jl_String,
                callable : null
            }, {
                name : "valueOf",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [jl_String],
                returnType : jl_Double,
                callable : null
            }, {
                name : "parseDouble",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [jl_String],
                returnType : $rt_doublecls(),
                callable : null
            }, {
                name : "toString",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }, {
                name : "equals",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_Object],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "hashCode",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "hashCode",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [$rt_doublecls()],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "compare",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [$rt_doublecls(), $rt_doublecls()],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "compareTo",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_Double],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "isNaN",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "isInfinite",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "isNaN",
                modifiers : 768,
                accessLevel : 3,
                parameterTypes : [$rt_doublecls()],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "isInfinite",
                modifiers : 768,
                accessLevel : 3,
                parameterTypes : [$rt_doublecls()],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "isFinite",
                modifiers : 768,
                accessLevel : 3,
                parameterTypes : [$rt_doublecls()],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "doubleToRawLongBits",
                modifiers : 768,
                accessLevel : 3,
                parameterTypes : [$rt_doublecls()],
                returnType : $rt_longcls(),
                callable : null
            }, {
                name : "doubleToLongBits",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [$rt_doublecls()],
                returnType : $rt_longcls(),
                callable : null
            }, {
                name : "longBitsToDouble",
                modifiers : 768,
                accessLevel : 3,
                parameterTypes : [$rt_longcls()],
                returnType : $rt_doublecls(),
                callable : null
            }, {
                name : "toHexString",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [$rt_doublecls()],
                returnType : jl_String,
                callable : null
            }, {
                name : "compareTo",
                modifiers : 96,
                accessLevel : 3,
                parameterTypes : [jl_Object],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "<clinit>",
                modifiers : 512,
                accessLevel : 0,
                parameterTypes : [],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "isNaN$js_body$_18",
                modifiers : 768,
                accessLevel : 0,
                parameterTypes : [otj_JSObject],
                returnType : otj_JSObject,
                callable : null
            }, {
                name : "isInfinite$js_body$_19",
                modifiers : 768,
                accessLevel : 0,
                parameterTypes : [otj_JSObject],
                returnType : otj_JSObject,
                callable : null
            }, {
                name : "isFinite$js_body$_20",
                modifiers : 768,
                accessLevel : 0,
                parameterTypes : [otj_JSObject],
                returnType : otj_JSObject,
                callable : null
            }];
        jur_MultiLineEOLSet.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "matches",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jl_CharSequence, jur_MatchResultImpl],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "hasConsumed",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_MatchResultImpl],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "getName",
                modifiers : 0,
                accessLevel : 2,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }];
        tj_IntList.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 0,
                parameterTypes : [tj_JavaishIntList, jl_String],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "getValue",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : tj_JavaishIntList,
                callable : null
            }, {
                name : "setValue",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [tj_JavaishIntList],
                returnType : $rt_voidcls(),
                callable : null
            }];
        oj_JSONObject$Null.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 1,
                parameterTypes : [],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "clone",
                modifiers : 4,
                accessLevel : 2,
                parameterTypes : [],
                returnType : jl_Object,
                callable : null
            }, {
                name : "equals",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_Object],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "hashCode",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "toString",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }, {
                name : "<init>",
                modifiers : 32,
                accessLevel : 0,
                parameterTypes : [oj_JSONObject$1],
                returnType : $rt_voidcls(),
                callable : null
            }];
        jur_PossessiveCompositeQuantifierSet.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_Quantifier, jur_LeafSet, jur_AbstractSet, $rt_intcls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "matches",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jl_CharSequence, jur_MatchResultImpl],
                returnType : $rt_intcls(),
                callable : null
            }];
        tj_AssignmentStmt.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jl_String, tj_Expression],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "getName",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }, {
                name : "getValue",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : tj_Expression,
                callable : null
            }, {
                name : "getLine",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_intcls(),
                callable : null
            }];
        jur_PosCompositeGroupQuantifierSet.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_Quantifier, jur_AbstractSet, jur_AbstractSet, $rt_intcls(), $rt_intcls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "matches",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jl_CharSequence, jur_MatchResultImpl],
                returnType : $rt_intcls(),
                callable : null
            }];
        jur_ReluctantAltQuantifierSet.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_LeafSet, jur_AbstractSet, $rt_intcls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "matches",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jl_CharSequence, jur_MatchResultImpl],
                returnType : $rt_intcls(),
                callable : null
            }];
        jur_SingleSet.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_AbstractSet, jur_FSet],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "matches",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jl_CharSequence, jur_MatchResultImpl],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "find",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jl_CharSequence, jur_MatchResultImpl],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "findBack",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), $rt_intcls(), jl_CharSequence, jur_MatchResultImpl],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "first",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_AbstractSet],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "processBackRefReplacement",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jur_JointSet,
                callable : null
            }, {
                name : "processSecondPass",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_voidcls(),
                callable : null
            }];
        jur_WordBoundary.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_booleancls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "matches",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jl_CharSequence, jur_MatchResultImpl],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "hasConsumed",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_MatchResultImpl],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "getName",
                modifiers : 0,
                accessLevel : 2,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }, {
                name : "isSpace",
                modifiers : 0,
                accessLevel : 1,
                parameterTypes : [$rt_charcls(), $rt_intcls(), $rt_intcls(), jl_CharSequence],
                returnType : $rt_booleancls(),
                callable : null
            }];
        jur_CompositeRangeSet.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_AbstractSet, jur_AbstractSet, jur_AbstractSet],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_AbstractSet, jur_AbstractSet],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "getNext",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jur_AbstractSet,
                callable : null
            }, {
                name : "matches",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jl_CharSequence, jur_MatchResultImpl],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "setNext",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_AbstractSet],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "getSurrogates",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jur_AbstractSet,
                callable : null
            }, {
                name : "getWithoutSurrogates",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jur_AbstractSet,
                callable : null
            }, {
                name : "getName",
                modifiers : 0,
                accessLevel : 2,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }, {
                name : "hasConsumed",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_MatchResultImpl],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "first",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_AbstractSet],
                returnType : $rt_booleancls(),
                callable : null
            }];
        jur_DecomposedCharSet.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_arraycls($rt_intcls()), $rt_intcls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "getNext",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jur_AbstractSet,
                callable : null
            }, {
                name : "setNext",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_AbstractSet],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "matches",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jl_CharSequence, jur_MatchResultImpl],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "getDecomposedChar",
                modifiers : 0,
                accessLevel : 1,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }, {
                name : "getName",
                modifiers : 0,
                accessLevel : 2,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }, {
                name : "codePointAt",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jl_CharSequence, $rt_intcls()],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "first",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_AbstractSet],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "hasConsumed",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_MatchResultImpl],
                returnType : $rt_booleancls(),
                callable : null
            }];
        tj_IntVar.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 0,
                parameterTypes : [tj_JavaishInt, jl_String],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "getValue",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : tj_JavaishInt,
                callable : null
            }];
        tj_NotElmt.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [tj_Expression],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "toString",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }, {
                name : "getExpression",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : tj_Expression,
                callable : null
            }];
        tj_DeclarationStmt.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jl_String, tj_JavaishVal$JavaishType, tj_Expression],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "getName",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }, {
                name : "getVarType",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : tj_JavaishVal$JavaishType,
                callable : null
            }, {
                name : "getValue",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : tj_Expression,
                callable : null
            }, {
                name : "getLine",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_intcls(),
                callable : null
            }];
        jur_NonCapJointSet.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 2,
                parameterTypes : [],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [ju_ArrayList, jur_FSet],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "matches",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jl_CharSequence, jur_MatchResultImpl],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "getName",
                modifiers : 0,
                accessLevel : 2,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }, {
                name : "hasConsumed",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_MatchResultImpl],
                returnType : $rt_booleancls(),
                callable : null
            }];
        jur_PositiveLookAhead.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [ju_ArrayList, jur_FSet],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "matches",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jl_CharSequence, jur_MatchResultImpl],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "hasConsumed",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_MatchResultImpl],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "getName",
                modifiers : 0,
                accessLevel : 2,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }];
        oj_JSONArray.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [oj_JSONTokener],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_String],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [ju_Collection],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_Object],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "iterator",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : ju_Iterator,
                callable : null
            }, {
                name : "get",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls()],
                returnType : jl_Object,
                callable : null
            }, {
                name : "getBoolean",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls()],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "getDouble",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls()],
                returnType : $rt_doublecls(),
                callable : null
            }, {
                name : "getFloat",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls()],
                returnType : $rt_floatcls(),
                callable : null
            }, {
                name : "getNumber",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls()],
                returnType : jl_Number,
                callable : null
            }, {
                name : "getEnum",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_Class, $rt_intcls()],
                returnType : jl_Enum,
                callable : null
            }, {
                name : "getBigDecimal",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls()],
                returnType : jm_BigDecimal,
                callable : null
            }, {
                name : "getBigInteger",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls()],
                returnType : jm_BigInteger,
                callable : null
            }, {
                name : "getInt",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls()],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "getJSONArray",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls()],
                returnType : oj_JSONArray,
                callable : null
            }, {
                name : "getJSONObject",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls()],
                returnType : oj_JSONObject,
                callable : null
            }, {
                name : "getLong",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls()],
                returnType : $rt_longcls(),
                callable : null
            }, {
                name : "getString",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls()],
                returnType : jl_String,
                callable : null
            }, {
                name : "isNull",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls()],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "join",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_String],
                returnType : jl_String,
                callable : null
            }, {
                name : "length",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "opt",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls()],
                returnType : jl_Object,
                callable : null
            }, {
                name : "optBoolean",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls()],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "optBoolean",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), $rt_booleancls()],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "optDouble",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls()],
                returnType : $rt_doublecls(),
                callable : null
            }, {
                name : "optDouble",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), $rt_doublecls()],
                returnType : $rt_doublecls(),
                callable : null
            }, {
                name : "optFloat",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls()],
                returnType : $rt_floatcls(),
                callable : null
            }, {
                name : "optFloat",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), $rt_floatcls()],
                returnType : $rt_floatcls(),
                callable : null
            }, {
                name : "optInt",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls()],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "optInt",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), $rt_intcls()],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "optEnum",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_Class, $rt_intcls()],
                returnType : jl_Enum,
                callable : null
            }, {
                name : "optEnum",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_Class, $rt_intcls(), jl_Enum],
                returnType : jl_Enum,
                callable : null
            }, {
                name : "optBigInteger",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jm_BigInteger],
                returnType : jm_BigInteger,
                callable : null
            }, {
                name : "optBigDecimal",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jm_BigDecimal],
                returnType : jm_BigDecimal,
                callable : null
            }, {
                name : "optJSONArray",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls()],
                returnType : oj_JSONArray,
                callable : null
            }, {
                name : "optJSONObject",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls()],
                returnType : oj_JSONObject,
                callable : null
            }, {
                name : "optLong",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls()],
                returnType : $rt_longcls(),
                callable : null
            }, {
                name : "optLong",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), $rt_longcls()],
                returnType : $rt_longcls(),
                callable : null
            }, {
                name : "optNumber",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls()],
                returnType : jl_Number,
                callable : null
            }, {
                name : "optNumber",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jl_Number],
                returnType : jl_Number,
                callable : null
            }, {
                name : "optString",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls()],
                returnType : jl_String,
                callable : null
            }, {
                name : "optString",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jl_String],
                returnType : jl_String,
                callable : null
            }, {
                name : "put",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_booleancls()],
                returnType : oj_JSONArray,
                callable : null
            }, {
                name : "put",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [ju_Collection],
                returnType : oj_JSONArray,
                callable : null
            }, {
                name : "put",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_doublecls()],
                returnType : oj_JSONArray,
                callable : null
            }, {
                name : "put",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls()],
                returnType : oj_JSONArray,
                callable : null
            }, {
                name : "put",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_longcls()],
                returnType : oj_JSONArray,
                callable : null
            }, {
                name : "put",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [ju_Map],
                returnType : oj_JSONArray,
                callable : null
            }, {
                name : "put",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_Object],
                returnType : oj_JSONArray,
                callable : null
            }, {
                name : "put",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), $rt_booleancls()],
                returnType : oj_JSONArray,
                callable : null
            }, {
                name : "put",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), ju_Collection],
                returnType : oj_JSONArray,
                callable : null
            }, {
                name : "put",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), $rt_doublecls()],
                returnType : oj_JSONArray,
                callable : null
            }, {
                name : "put",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), $rt_intcls()],
                returnType : oj_JSONArray,
                callable : null
            }, {
                name : "put",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), $rt_longcls()],
                returnType : oj_JSONArray,
                callable : null
            }, {
                name : "put",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), ju_Map],
                returnType : oj_JSONArray,
                callable : null
            }, {
                name : "put",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jl_Object],
                returnType : oj_JSONArray,
                callable : null
            }, {
                name : "query",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_String],
                returnType : jl_Object,
                callable : null
            }, {
                name : "query",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [oj_JSONPointer],
                returnType : jl_Object,
                callable : null
            }, {
                name : "optQuery",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_String],
                returnType : jl_Object,
                callable : null
            }, {
                name : "optQuery",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [oj_JSONPointer],
                returnType : jl_Object,
                callable : null
            }, {
                name : "remove",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls()],
                returnType : jl_Object,
                callable : null
            }, {
                name : "similar",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_Object],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "toJSONObject",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [oj_JSONArray],
                returnType : oj_JSONObject,
                callable : null
            }, {
                name : "toString",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }, {
                name : "toString",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls()],
                returnType : jl_String,
                callable : null
            }, {
                name : "write",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [ji_Writer],
                returnType : ji_Writer,
                callable : null
            }, {
                name : "write",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [ji_Writer, $rt_intcls(), $rt_intcls()],
                returnType : ji_Writer,
                callable : null
            }, {
                name : "toList",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : ju_List,
                callable : null
            }];
        tj_StringElmt.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_String],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "toString",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }, {
                name : "getValue",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }];
        jur_PreviousMatch.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 0,
                parameterTypes : [],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "matches",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jl_CharSequence, jur_MatchResultImpl],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "hasConsumed",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_MatchResultImpl],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "getName",
                modifiers : 0,
                accessLevel : 2,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }];
        jur_CompositeGroupQuantifierSet.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_Quantifier, jur_AbstractSet, jur_AbstractSet, $rt_intcls(), $rt_intcls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "matches",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jl_CharSequence, jur_MatchResultImpl],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "reset",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "getName",
                modifiers : 0,
                accessLevel : 2,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }, {
                name : "setQuantifier",
                modifiers : 0,
                accessLevel : 0,
                parameterTypes : [jur_Quantifier],
                returnType : $rt_voidcls(),
                callable : null
            }];
        jur_RangeSet.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_AbstractCharClass, jur_AbstractSet],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_AbstractCharClass],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "accepts",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jl_CharSequence],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "getName",
                modifiers : 0,
                accessLevel : 2,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }, {
                name : "first",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_AbstractSet],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "getChars",
                modifiers : 0,
                accessLevel : 2,
                parameterTypes : [],
                returnType : jur_AbstractCharClass,
                callable : null
            }];
        tj_MultiplyElmt.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "toString",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }];
        tj_BoolVar.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 0,
                parameterTypes : [tj_JavaishBoolean, jl_String],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "getValue",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : tj_JavaishBoolean,
                callable : null
            }];
        tj_MinusElmt.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "toString",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }];
        jur_UCISequenceSet.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 0,
                parameterTypes : [jl_StringBuffer],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "accepts",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jl_CharSequence],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "getName",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }];
        jur_NegativeLookBehind.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [ju_ArrayList, jur_FSet],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "matches",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jl_CharSequence, jur_MatchResultImpl],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "hasConsumed",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_MatchResultImpl],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "getName",
                modifiers : 0,
                accessLevel : 2,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }];
        tj_IfStmt.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), tj_Expression],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "getCondition",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : tj_Expression,
                callable : null
            }, {
                name : "getLine",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_intcls(),
                callable : null
            }];
        tj_ShowMsgBoxStmt.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), tj_Expression],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "getValue",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : tj_Expression,
                callable : null
            }, {
                name : "getLine",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_intcls(),
                callable : null
            }];
        jur_ReluctantGroupQuantifierSet.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_AbstractSet, jur_AbstractSet, $rt_intcls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "matches",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jl_CharSequence, jur_MatchResultImpl],
                returnType : $rt_intcls(),
                callable : null
            }];
        tj_ClassStmt.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "getLine",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_intcls(),
                callable : null
            }];
        jur_EOLSet.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "matches",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jl_CharSequence, jur_MatchResultImpl],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "hasConsumed",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_MatchResultImpl],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "getName",
                modifiers : 0,
                accessLevel : 2,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }];
        tj_RemoveFromStmt.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), tj_Expression, jl_String],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "getValue",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : tj_Expression,
                callable : null
            }, {
                name : "getListName",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }];
        jur_UCISupplRangeSet.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_AbstractCharClass, jur_AbstractSet],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_AbstractCharClass],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "contains",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls()],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "getName",
                modifiers : 0,
                accessLevel : 2,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }];
        jur_CISequenceSet.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 0,
                parameterTypes : [jl_StringBuffer],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "accepts",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jl_CharSequence],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "getName",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }];
        tj_JavaishInt.$meta.methods = [
            {
                name : "getValue",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_Integer,
                callable : null
            }, {
                name : "<init>",
                modifiers : 0,
                accessLevel : 0,
                parameterTypes : [$rt_intcls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "getType",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : tj_JavaishVal$JavaishType,
                callable : null
            }, {
                name : "typeString",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }, {
                name : "getValue",
                modifiers : 96,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_Object,
                callable : null
            }];
        tj_IntElmt.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "toString",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }, {
                name : "getValue",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_intcls(),
                callable : null
            }];
        tj_Argument.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [tj_JavaishVal$JavaishType, jl_String],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "getType",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : tj_JavaishVal$JavaishType,
                callable : null
            }, {
                name : "getName",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }];
        jur_PossessiveAltQuantifierSet.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_LeafSet, jur_AbstractSet, $rt_intcls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "matches",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jl_CharSequence, jur_MatchResultImpl],
                returnType : $rt_intcls(),
                callable : null
            }];
        jl_Long.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_longcls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_String],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "valueOf",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [$rt_longcls()],
                returnType : jl_Long,
                callable : null
            }, {
                name : "parseLong",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [jl_String, $rt_intcls()],
                returnType : $rt_longcls(),
                callable : null
            }, {
                name : "parseLong",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [jl_CharSequence, $rt_intcls(), $rt_intcls(), $rt_intcls()],
                returnType : $rt_longcls(),
                callable : null
            }, {
                name : "parseLongImpl",
                modifiers : 512,
                accessLevel : 1,
                parameterTypes : [jl_CharSequence, $rt_intcls(), $rt_intcls(), $rt_intcls()],
                returnType : $rt_longcls(),
                callable : null
            }, {
                name : "parseLong",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [jl_String],
                returnType : $rt_longcls(),
                callable : null
            }, {
                name : "valueOf",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [jl_String, $rt_intcls()],
                returnType : jl_Long,
                callable : null
            }, {
                name : "valueOf",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [jl_String],
                returnType : jl_Long,
                callable : null
            }, {
                name : "decode",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [jl_String],
                returnType : jl_Long,
                callable : null
            }, {
                name : "decodeDigit",
                modifiers : 512,
                accessLevel : 1,
                parameterTypes : [$rt_charcls()],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "intValue",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "longValue",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_longcls(),
                callable : null
            }, {
                name : "floatValue",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_floatcls(),
                callable : null
            }, {
                name : "doubleValue",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_doublecls(),
                callable : null
            }, {
                name : "toString",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [$rt_longcls(), $rt_intcls()],
                returnType : jl_String,
                callable : null
            }, {
                name : "toHexString",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [$rt_longcls()],
                returnType : jl_String,
                callable : null
            }, {
                name : "toOctalString",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [$rt_longcls()],
                returnType : jl_String,
                callable : null
            }, {
                name : "toBinaryString",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [$rt_longcls()],
                returnType : jl_String,
                callable : null
            }, {
                name : "toString",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [$rt_longcls()],
                returnType : jl_String,
                callable : null
            }, {
                name : "toString",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }, {
                name : "hashCode",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "hashCode",
                modifiers : 512,
                accessLevel : 1,
                parameterTypes : [$rt_longcls()],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "equals",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_Object],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "compare",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [$rt_longcls(), $rt_longcls()],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "compareTo",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_Long],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "getLong",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [jl_String],
                returnType : jl_Long,
                callable : null
            }, {
                name : "getLong",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [jl_String, $rt_longcls()],
                returnType : jl_Long,
                callable : null
            }, {
                name : "getLong",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [jl_String, jl_Long],
                returnType : jl_Long,
                callable : null
            }, {
                name : "numberOfLeadingZeros",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [$rt_longcls()],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "numberOfTrailingZeros",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [$rt_longcls()],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "highestOneBit",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [$rt_longcls()],
                returnType : $rt_longcls(),
                callable : null
            }, {
                name : "lowestOneBit",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [$rt_longcls()],
                returnType : $rt_longcls(),
                callable : null
            }, {
                name : "bitCount",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [$rt_longcls()],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "rotateLeft",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [$rt_longcls(), $rt_intcls()],
                returnType : $rt_longcls(),
                callable : null
            }, {
                name : "rotateRight",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [$rt_longcls(), $rt_intcls()],
                returnType : $rt_longcls(),
                callable : null
            }, {
                name : "reverse",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [$rt_longcls()],
                returnType : $rt_longcls(),
                callable : null
            }, {
                name : "reverseBytes",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [$rt_longcls()],
                returnType : $rt_longcls(),
                callable : null
            }, {
                name : "signum",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [$rt_longcls()],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "divideUnsigned",
                modifiers : 768,
                accessLevel : 3,
                parameterTypes : [$rt_longcls(), $rt_longcls()],
                returnType : $rt_longcls(),
                callable : null
            }, {
                name : "remainderUnsigned",
                modifiers : 768,
                accessLevel : 3,
                parameterTypes : [$rt_longcls(), $rt_longcls()],
                returnType : $rt_longcls(),
                callable : null
            }, {
                name : "compareUnsigned",
                modifiers : 768,
                accessLevel : 3,
                parameterTypes : [$rt_longcls(), $rt_longcls()],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "compareTo",
                modifiers : 96,
                accessLevel : 3,
                parameterTypes : [jl_Object],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "<clinit>",
                modifiers : 512,
                accessLevel : 0,
                parameterTypes : [],
                returnType : $rt_voidcls(),
                callable : null
            }];
        tj_ExpressionElmt.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [tj_Expression],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "toString",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }, {
                name : "getExpression",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : tj_Expression,
                callable : null
            }];
        jur_UCISupplCharSet.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "accepts",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jl_CharSequence],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "getName",
                modifiers : 0,
                accessLevel : 2,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }];
        jur_SequenceSet.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 0,
                parameterTypes : [jl_StringBuffer],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "accepts",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jl_CharSequence],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "find",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jl_CharSequence, jur_MatchResultImpl],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "findBack",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), $rt_intcls(), jl_CharSequence, jur_MatchResultImpl],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "getName",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }, {
                name : "first",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_AbstractSet],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "indexOf",
                modifiers : 0,
                accessLevel : 2,
                parameterTypes : [jl_CharSequence, $rt_intcls(), $rt_intcls()],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "lastIndexOf",
                modifiers : 0,
                accessLevel : 2,
                parameterTypes : [jl_CharSequence, $rt_intcls(), $rt_intcls()],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "startsWith",
                modifiers : 0,
                accessLevel : 2,
                parameterTypes : [jl_CharSequence, $rt_intcls()],
                returnType : $rt_booleancls(),
                callable : null
            }];
        jur_ReluctantQuantifierSet.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_LeafSet, jur_AbstractSet, $rt_intcls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "matches",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jl_CharSequence, jur_MatchResultImpl],
                returnType : $rt_intcls(),
                callable : null
            }];
        tj_JavaishBoolean.$meta.methods = [
            {
                name : "getValue",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_Boolean,
                callable : null
            }, {
                name : "<init>",
                modifiers : 0,
                accessLevel : 0,
                parameterTypes : [jl_Boolean],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "getType",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : tj_JavaishVal$JavaishType,
                callable : null
            }, {
                name : "typeString",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }, {
                name : "getValue",
                modifiers : 96,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_Object,
                callable : null
            }];
        jur_PosAltGroupQuantifierSet.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_AbstractSet, jur_AbstractSet, $rt_intcls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "matches",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jl_CharSequence, jur_MatchResultImpl],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "setNext",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_AbstractSet],
                returnType : $rt_voidcls(),
                callable : null
            }];
        jur_UCIBackReferenceSet.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), $rt_intcls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "matches",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jl_CharSequence, jur_MatchResultImpl],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "getName",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }];
        tj_LessThanEqualElmt.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "toString",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }];
        jur_EOISet.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 0,
                parameterTypes : [],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "matches",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jl_CharSequence, jur_MatchResultImpl],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "hasConsumed",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_MatchResultImpl],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "getName",
                modifiers : 0,
                accessLevel : 2,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }];
        tj_StringVar.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 0,
                parameterTypes : [tj_JavaishString, jl_String],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "getValue",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : tj_JavaishString,
                callable : null
            }];
        tj_FunctionStmt.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jl_String, $rt_arraycls(tj_Argument)],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "getName",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }, {
                name : "getArgs",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_arraycls(tj_Argument),
                callable : null
            }, {
                name : "getLine",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_intcls(),
                callable : null
            }];
        tj_ForEachStmt.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jl_String, jl_String],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "getTempVar",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }, {
                name : "getListVar",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }, {
                name : "getLine",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_intcls(),
                callable : null
            }];
        jur_CompositeQuantifierSet.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_Quantifier, jur_LeafSet, jur_AbstractSet, $rt_intcls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "matches",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jl_CharSequence, jur_MatchResultImpl],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "reset",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "getName",
                modifiers : 0,
                accessLevel : 2,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }, {
                name : "setQuantifier",
                modifiers : 0,
                accessLevel : 0,
                parameterTypes : [jur_Quantifier],
                returnType : $rt_voidcls(),
                callable : null
            }];
        tj_EqualElmt.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "toString",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }];
        tj_CommentStmt.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jl_String],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "getComment",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }, {
                name : "getLine",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_intcls(),
                callable : null
            }];
        jur_CIBackReferenceSet.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), $rt_intcls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "accepts",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jl_CharSequence],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "matches",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jl_CharSequence, jur_MatchResultImpl],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "getNext",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jur_AbstractSet,
                callable : null
            }, {
                name : "setNext",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_AbstractSet],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "getString",
                modifiers : 0,
                accessLevel : 2,
                parameterTypes : [jur_MatchResultImpl],
                returnType : jl_String,
                callable : null
            }, {
                name : "getName",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }, {
                name : "hasConsumed",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_MatchResultImpl],
                returnType : $rt_booleancls(),
                callable : null
            }];
        tj_MutationStmt.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jl_String, tj_Expression, tj_Statements$MutationType],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "getVarName",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }, {
                name : "getValue",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : tj_Expression,
                callable : null
            }, {
                name : "getMutationType",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : tj_Statements$MutationType,
                callable : null
            }, {
                name : "getLine",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_intcls(),
                callable : null
            }];
        jur_DotQuantifierSet.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_AbstractSet, jur_AbstractSet, $rt_intcls(), jur_AbstractLineTerminator],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "matches",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jl_CharSequence, jur_MatchResultImpl],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "find",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jl_CharSequence, jur_MatchResultImpl],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "findLineTerminator",
                modifiers : 0,
                accessLevel : 1,
                parameterTypes : [$rt_intcls(), $rt_intcls(), jl_CharSequence],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "findBackLineTerminator",
                modifiers : 0,
                accessLevel : 1,
                parameterTypes : [$rt_intcls(), $rt_intcls(), jl_CharSequence],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "getName",
                modifiers : 0,
                accessLevel : 2,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }];
        jl_Integer.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_String],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "toString",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), $rt_intcls()],
                returnType : jl_String,
                callable : null
            }, {
                name : "hashCode",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [$rt_intcls()],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "toHexString",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [$rt_intcls()],
                returnType : jl_String,
                callable : null
            }, {
                name : "toOctalString",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [$rt_intcls()],
                returnType : jl_String,
                callable : null
            }, {
                name : "toBinaryString",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [$rt_intcls()],
                returnType : jl_String,
                callable : null
            }, {
                name : "toString",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [$rt_intcls()],
                returnType : jl_String,
                callable : null
            }, {
                name : "parseInt",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [jl_String, $rt_intcls()],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "parseInt",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [jl_CharSequence, $rt_intcls(), $rt_intcls(), $rt_intcls()],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "parseIntImpl",
                modifiers : 512,
                accessLevel : 1,
                parameterTypes : [jl_CharSequence, $rt_intcls(), $rt_intcls(), $rt_intcls()],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "parseInt",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [jl_String],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "valueOf",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [jl_String, $rt_intcls()],
                returnType : jl_Integer,
                callable : null
            }, {
                name : "valueOf",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [jl_String],
                returnType : jl_Integer,
                callable : null
            }, {
                name : "valueOf",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [$rt_intcls()],
                returnType : jl_Integer,
                callable : null
            }, {
                name : "ensureIntegerCache",
                modifiers : 512,
                accessLevel : 1,
                parameterTypes : [],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "intValue",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "longValue",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_longcls(),
                callable : null
            }, {
                name : "floatValue",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_floatcls(),
                callable : null
            }, {
                name : "doubleValue",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_doublecls(),
                callable : null
            }, {
                name : "toString",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }, {
                name : "hashCode",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "equals",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_Object],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "getInteger",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [jl_String],
                returnType : jl_Integer,
                callable : null
            }, {
                name : "getInteger",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [jl_String, $rt_intcls()],
                returnType : jl_Integer,
                callable : null
            }, {
                name : "getInteger",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [jl_String, jl_Integer],
                returnType : jl_Integer,
                callable : null
            }, {
                name : "decode",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [jl_String],
                returnType : jl_Integer,
                callable : null
            }, {
                name : "decodeDigit",
                modifiers : 512,
                accessLevel : 1,
                parameterTypes : [$rt_charcls()],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "compareTo",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_Integer],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "compare",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), $rt_intcls()],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "numberOfLeadingZeros",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [$rt_intcls()],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "numberOfTrailingZeros",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [$rt_intcls()],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "highestOneBit",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [$rt_intcls()],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "lowestOneBit",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [$rt_intcls()],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "bitCount",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [$rt_intcls()],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "rotateLeft",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), $rt_intcls()],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "rotateRight",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), $rt_intcls()],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "reverse",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [$rt_intcls()],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "reverseBytes",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [$rt_intcls()],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "signum",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [$rt_intcls()],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "divideUnsigned",
                modifiers : 768,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), $rt_intcls()],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "remainderUnsigned",
                modifiers : 768,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), $rt_intcls()],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "compareUnsigned",
                modifiers : 768,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), $rt_intcls()],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "compareTo",
                modifiers : 96,
                accessLevel : 3,
                parameterTypes : [jl_Object],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "<clinit>",
                modifiers : 512,
                accessLevel : 0,
                parameterTypes : [],
                returnType : $rt_voidcls(),
                callable : null
            }];
        jur_AltGroupQuantifierSet.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_AbstractSet, jur_AbstractSet, $rt_intcls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "matches",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jl_CharSequence, jur_MatchResultImpl],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "setNext",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_AbstractSet],
                returnType : $rt_voidcls(),
                callable : null
            }];
        tj_RobotStmt.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), tj_Statements$RobotType, $rt_arraycls(tj_Expression)],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "getRobotType",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : tj_Statements$RobotType,
                callable : null
            }, {
                name : "getValue",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_arraycls(tj_Expression),
                callable : null
            }, {
                name : "getLine",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_intcls(),
                callable : null
            }];
        jur_MultiLineSOLSet.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_AbstractLineTerminator],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "matches",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jl_CharSequence, jur_MatchResultImpl],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "hasConsumed",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_MatchResultImpl],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "getName",
                modifiers : 0,
                accessLevel : 2,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }];
        jur_SupplRangeSet.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_AbstractCharClass, jur_AbstractSet],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_AbstractCharClass],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "matches",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jl_CharSequence, jur_MatchResultImpl],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "getName",
                modifiers : 0,
                accessLevel : 2,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }, {
                name : "contains",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls()],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "first",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_AbstractSet],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "getChars",
                modifiers : 0,
                accessLevel : 2,
                parameterTypes : [],
                returnType : jur_AbstractCharClass,
                callable : null
            }, {
                name : "getNext",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jur_AbstractSet,
                callable : null
            }, {
                name : "setNext",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_AbstractSet],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "hasConsumed",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_MatchResultImpl],
                returnType : $rt_booleancls(),
                callable : null
            }];
        tj_State.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [ju_List, tj_Variables, tj_Variables, tj_Result, tj_Return, $rt_intcls(), $rt_booleancls(), $rt_booleancls(), $rt_intcls(), $rt_booleancls(), $rt_intcls(), $rt_intcls(), $rt_booleancls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [ju_List, tj_Variables, tj_Variables, tj_Result, tj_Return, $rt_intcls(), $rt_booleancls(), $rt_booleancls(), ju_List, $rt_intcls(), $rt_booleancls(), $rt_intcls(), $rt_intcls(), $rt_booleancls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "getForIndex",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "setForIndex",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "isInForWhenLoop",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "setInForWhenLoop",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_booleancls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "getLoopStartLine",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "isLoop",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "getCurrentRuntimeLine",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "setCurrentRuntimeLine",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "getStatements",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : ju_List,
                callable : null
            }, {
                name : "getGlobalVariables",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : tj_Variables,
                callable : null
            }, {
                name : "getLocalVariables",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : tj_Variables,
                callable : null
            }, {
                name : "getPastResult",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : tj_Result,
                callable : null
            }, {
                name : "getReturnVal",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : tj_Return,
                callable : null
            }, {
                name : "setStatements",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [ju_List],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "setGlobalVariables",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [tj_Variables],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "setLocalVariables",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [tj_Variables],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "setPastResult",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [tj_Result],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "setReturnVal",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [tj_Return],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "getCurrentLine",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "setCurrentLine",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "incrementCurrentLine",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "isGlobal",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "setGlobal",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_booleancls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "getStates",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : ju_List,
                callable : null
            }, {
                name : "addState",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [tj_State],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "setStates",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [ju_List],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "removeLastState",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "getLastState",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : tj_State,
                callable : null
            }, {
                name : "isComplete",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "setComplete",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_booleancls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "printState",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "printVars",
                modifiers : 512,
                accessLevel : 1,
                parameterTypes : [tj_Variables],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "getParamString",
                modifiers : 512,
                accessLevel : 1,
                parameterTypes : [$rt_arraycls(tj_Expression)],
                returnType : jl_String,
                callable : null
            }, {
                name : "getArgsString",
                modifiers : 512,
                accessLevel : 1,
                parameterTypes : [$rt_arraycls(tj_Argument)],
                returnType : jl_String,
                callable : null
            }];
        tj_FunctionElmt.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_String, $rt_arraycls(tj_Expression)],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "getName",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }, {
                name : "getParams",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_arraycls(tj_Expression),
                callable : null
            }, {
                name : "toString",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }];
        tj_PlusElmt.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "toString",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }];
        oj_JSONObject.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [oj_JSONObject, $rt_arraycls(jl_String)],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [oj_JSONTokener],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [ju_Map],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_Object],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_Object, $rt_arraycls(jl_String)],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_String],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_String, ju_Locale],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "<init>",
                modifiers : 0,
                accessLevel : 2,
                parameterTypes : [$rt_intcls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "accumulate",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_String, jl_Object],
                returnType : oj_JSONObject,
                callable : null
            }, {
                name : "append",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_String, jl_Object],
                returnType : oj_JSONObject,
                callable : null
            }, {
                name : "doubleToString",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [$rt_doublecls()],
                returnType : jl_String,
                callable : null
            }, {
                name : "get",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_String],
                returnType : jl_Object,
                callable : null
            }, {
                name : "getEnum",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_Class, jl_String],
                returnType : jl_Enum,
                callable : null
            }, {
                name : "getBoolean",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_String],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "getBigInteger",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_String],
                returnType : jm_BigInteger,
                callable : null
            }, {
                name : "getBigDecimal",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_String],
                returnType : jm_BigDecimal,
                callable : null
            }, {
                name : "getDouble",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_String],
                returnType : $rt_doublecls(),
                callable : null
            }, {
                name : "getFloat",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_String],
                returnType : $rt_floatcls(),
                callable : null
            }, {
                name : "getNumber",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_String],
                returnType : jl_Number,
                callable : null
            }, {
                name : "getInt",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_String],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "getJSONArray",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_String],
                returnType : oj_JSONArray,
                callable : null
            }, {
                name : "getJSONObject",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_String],
                returnType : oj_JSONObject,
                callable : null
            }, {
                name : "getLong",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_String],
                returnType : $rt_longcls(),
                callable : null
            }, {
                name : "getNames",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [oj_JSONObject],
                returnType : $rt_arraycls(jl_String),
                callable : null
            }, {
                name : "getNames",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [jl_Object],
                returnType : $rt_arraycls(jl_String),
                callable : null
            }, {
                name : "getString",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_String],
                returnType : jl_String,
                callable : null
            }, {
                name : "has",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_String],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "increment",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_String],
                returnType : oj_JSONObject,
                callable : null
            }, {
                name : "isNull",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_String],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "keys",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : ju_Iterator,
                callable : null
            }, {
                name : "keySet",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : ju_Set,
                callable : null
            }, {
                name : "entrySet",
                modifiers : 0,
                accessLevel : 2,
                parameterTypes : [],
                returnType : ju_Set,
                callable : null
            }, {
                name : "length",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "names",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : oj_JSONArray,
                callable : null
            }, {
                name : "numberToString",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [jl_Number],
                returnType : jl_String,
                callable : null
            }, {
                name : "opt",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_String],
                returnType : jl_Object,
                callable : null
            }, {
                name : "optEnum",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_Class, jl_String],
                returnType : jl_Enum,
                callable : null
            }, {
                name : "optEnum",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_Class, jl_String, jl_Enum],
                returnType : jl_Enum,
                callable : null
            }, {
                name : "optBoolean",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_String],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "optBoolean",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_String, $rt_booleancls()],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "optBigDecimal",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_String, jm_BigDecimal],
                returnType : jm_BigDecimal,
                callable : null
            }, {
                name : "optBigInteger",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_String, jm_BigInteger],
                returnType : jm_BigInteger,
                callable : null
            }, {
                name : "optDouble",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_String],
                returnType : $rt_doublecls(),
                callable : null
            }, {
                name : "optDouble",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_String, $rt_doublecls()],
                returnType : $rt_doublecls(),
                callable : null
            }, {
                name : "optFloat",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_String],
                returnType : $rt_floatcls(),
                callable : null
            }, {
                name : "optFloat",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_String, $rt_floatcls()],
                returnType : $rt_floatcls(),
                callable : null
            }, {
                name : "optInt",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_String],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "optInt",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_String, $rt_intcls()],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "optJSONArray",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_String],
                returnType : oj_JSONArray,
                callable : null
            }, {
                name : "optJSONObject",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_String],
                returnType : oj_JSONObject,
                callable : null
            }, {
                name : "optLong",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_String],
                returnType : $rt_longcls(),
                callable : null
            }, {
                name : "optLong",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_String, $rt_longcls()],
                returnType : $rt_longcls(),
                callable : null
            }, {
                name : "optNumber",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_String],
                returnType : jl_Number,
                callable : null
            }, {
                name : "optNumber",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_String, jl_Number],
                returnType : jl_Number,
                callable : null
            }, {
                name : "optString",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_String],
                returnType : jl_String,
                callable : null
            }, {
                name : "optString",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_String, jl_String],
                returnType : jl_String,
                callable : null
            }, {
                name : "populateMap",
                modifiers : 0,
                accessLevel : 1,
                parameterTypes : [jl_Object],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "put",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_String, $rt_booleancls()],
                returnType : oj_JSONObject,
                callable : null
            }, {
                name : "put",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_String, ju_Collection],
                returnType : oj_JSONObject,
                callable : null
            }, {
                name : "put",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_String, $rt_doublecls()],
                returnType : oj_JSONObject,
                callable : null
            }, {
                name : "put",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_String, $rt_floatcls()],
                returnType : oj_JSONObject,
                callable : null
            }, {
                name : "put",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_String, $rt_intcls()],
                returnType : oj_JSONObject,
                callable : null
            }, {
                name : "put",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_String, $rt_longcls()],
                returnType : oj_JSONObject,
                callable : null
            }, {
                name : "put",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_String, ju_Map],
                returnType : oj_JSONObject,
                callable : null
            }, {
                name : "put",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_String, jl_Object],
                returnType : oj_JSONObject,
                callable : null
            }, {
                name : "putOnce",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_String, jl_Object],
                returnType : oj_JSONObject,
                callable : null
            }, {
                name : "putOpt",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_String, jl_Object],
                returnType : oj_JSONObject,
                callable : null
            }, {
                name : "query",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_String],
                returnType : jl_Object,
                callable : null
            }, {
                name : "query",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [oj_JSONPointer],
                returnType : jl_Object,
                callable : null
            }, {
                name : "optQuery",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_String],
                returnType : jl_Object,
                callable : null
            }, {
                name : "optQuery",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [oj_JSONPointer],
                returnType : jl_Object,
                callable : null
            }, {
                name : "quote",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [jl_String],
                returnType : jl_String,
                callable : null
            }, {
                name : "quote",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [jl_String, ji_Writer],
                returnType : ji_Writer,
                callable : null
            }, {
                name : "remove",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_String],
                returnType : jl_Object,
                callable : null
            }, {
                name : "similar",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_Object],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "isDecimalNotation",
                modifiers : 512,
                accessLevel : 2,
                parameterTypes : [jl_String],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "stringToNumber",
                modifiers : 512,
                accessLevel : 2,
                parameterTypes : [jl_String],
                returnType : jl_Number,
                callable : null
            }, {
                name : "stringToValue",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [jl_String],
                returnType : jl_Object,
                callable : null
            }, {
                name : "testValidity",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [jl_Object],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "toJSONArray",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [oj_JSONArray],
                returnType : oj_JSONArray,
                callable : null
            }, {
                name : "toString",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }, {
                name : "toString",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls()],
                returnType : jl_String,
                callable : null
            }, {
                name : "valueToString",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [jl_Object],
                returnType : jl_String,
                callable : null
            }, {
                name : "wrap",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [jl_Object],
                returnType : jl_Object,
                callable : null
            }, {
                name : "write",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [ji_Writer],
                returnType : ji_Writer,
                callable : null
            }, {
                name : "writeValue",
                modifiers : 516,
                accessLevel : 0,
                parameterTypes : [ji_Writer, jl_Object, $rt_intcls(), $rt_intcls()],
                returnType : ji_Writer,
                callable : null
            }, {
                name : "indent",
                modifiers : 516,
                accessLevel : 0,
                parameterTypes : [ji_Writer, $rt_intcls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "write",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [ji_Writer, $rt_intcls(), $rt_intcls()],
                returnType : ji_Writer,
                callable : null
            }, {
                name : "toMap",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : ju_Map,
                callable : null
            }, {
                name : "<clinit>",
                modifiers : 512,
                accessLevel : 0,
                parameterTypes : [],
                returnType : $rt_voidcls(),
                callable : null
            }];
        jl_Class.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 1,
                parameterTypes : [otp_PlatformClass],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "getClass",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [otp_PlatformClass],
                returnType : jl_Class,
                callable : null
            }, {
                name : "toString",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }, {
                name : "obfuscatedToString",
                modifiers : 0,
                accessLevel : 1,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }, {
                name : "getPlatformClass",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : otp_PlatformClass,
                callable : null
            }, {
                name : "isInstance",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_Object],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "isInstanceLowLevel",
                modifiers : 0,
                accessLevel : 1,
                parameterTypes : [otr_RuntimeObject],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "isAssignableFrom",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_Class],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "isAssignableFromLowLevel",
                modifiers : 0,
                accessLevel : 1,
                parameterTypes : [otr_RuntimeClass],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "getName",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }, {
                name : "getSimpleName",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }, {
                name : "getSimpleNameCache",
                modifiers : 512,
                accessLevel : 1,
                parameterTypes : [jl_Class],
                returnType : jl_String,
                callable : null
            }, {
                name : "getSimpleNameCacheLowLevel",
                modifiers : 512,
                accessLevel : 1,
                parameterTypes : [otr_RuntimeClass],
                returnType : otr_RuntimeObject,
                callable : null
            }, {
                name : "setSimpleNameCache",
                modifiers : 512,
                accessLevel : 1,
                parameterTypes : [jl_Class, jl_String],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "setSimpleNameCacheLowLevel",
                modifiers : 512,
                accessLevel : 1,
                parameterTypes : [otr_RuntimeClass, otr_RuntimeObject],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "getNameCache",
                modifiers : 512,
                accessLevel : 1,
                parameterTypes : [jl_Class],
                returnType : jl_String,
                callable : null
            }, {
                name : "getNameCacheLowLevel",
                modifiers : 512,
                accessLevel : 1,
                parameterTypes : [otr_RuntimeClass],
                returnType : otr_RuntimeObject,
                callable : null
            }, {
                name : "setNameCache",
                modifiers : 512,
                accessLevel : 1,
                parameterTypes : [jl_Class, jl_String],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "setNameCacheLowLevel",
                modifiers : 512,
                accessLevel : 1,
                parameterTypes : [otr_RuntimeClass, otr_RuntimeObject],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "getCanonicalName",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }, {
                name : "isSynthetic",
                modifiers : 0,
                accessLevel : 1,
                parameterTypes : [],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "getCanonicalNameCache",
                modifiers : 0,
                accessLevel : 1,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }, {
                name : "getCanonicalNameCacheLowLevel",
                modifiers : 0,
                accessLevel : 1,
                parameterTypes : [],
                returnType : otr_RuntimeObject,
                callable : null
            }, {
                name : "setCanonicalNameCache",
                modifiers : 0,
                accessLevel : 1,
                parameterTypes : [jl_String],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "setCanonicalNameCacheLowLevel",
                modifiers : 0,
                accessLevel : 1,
                parameterTypes : [otr_RuntimeObject],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "isPrimitive",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "isArray",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "isEnum",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "isInterface",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "isLocalClass",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "isMemberClass",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "getComponentType",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_Class,
                callable : null
            }, {
                name : "getDeclaredFields",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_arraycls(jlr_Field),
                callable : null
            }, {
                name : "initReflection",
                modifiers : 512,
                accessLevel : 1,
                parameterTypes : [],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "createMetadata",
                modifiers : 768,
                accessLevel : 1,
                parameterTypes : [],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "getFields",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_arraycls(jlr_Field),
                callable : null
            }, {
                name : "getDeclaredField",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_String],
                returnType : jlr_Field,
                callable : null
            }, {
                name : "getField",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_String],
                returnType : jlr_Field,
                callable : null
            }, {
                name : "findField",
                modifiers : 0,
                accessLevel : 1,
                parameterTypes : [jl_String, ju_Set],
                returnType : jlr_Field,
                callable : null
            }, {
                name : "newEmptyInstance",
                modifiers : 256,
                accessLevel : 3,
                parameterTypes : [],
                returnType : otp_PlatformObject,
                callable : null
            }, {
                name : "getDeclaredConstructors",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_arraycls(jlr_Constructor),
                callable : null
            }, {
                name : "getConstructors",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_arraycls(jlr_Constructor),
                callable : null
            }, {
                name : "getDeclaredConstructor",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_arraycls(jl_Class)],
                returnType : jlr_Constructor,
                callable : null
            }, {
                name : "getConstructor",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_arraycls(jl_Class)],
                returnType : jlr_Constructor,
                callable : null
            }, {
                name : "getFieldsOfInterfaces",
                modifiers : 512,
                accessLevel : 1,
                parameterTypes : [jl_Class, ju_List, ju_Set],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "getDeclaredMethods",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_arraycls(jlr_Method),
                callable : null
            }, {
                name : "getDeclaredMethod",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_String, $rt_arraycls(jl_Class)],
                returnType : jlr_Method,
                callable : null
            }, {
                name : "getMethods",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_arraycls(jlr_Method),
                callable : null
            }, {
                name : "getMethod",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_String, $rt_arraycls(jl_Class)],
                returnType : jlr_Method,
                callable : null
            }, {
                name : "findMethods",
                modifiers : 512,
                accessLevel : 1,
                parameterTypes : [jl_Class, ju_Map],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "findMethod",
                modifiers : 512,
                accessLevel : 1,
                parameterTypes : [jl_Class, jlr_Method, jl_String, $rt_arraycls(jl_Class)],
                returnType : jlr_Method,
                callable : null
            }, {
                name : "getModifiers",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "desiredAssertionStatus",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "getSuperclass",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_Class,
                callable : null
            }, {
                name : "getInterfaces",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_arraycls(jl_Class),
                callable : null
            }, {
                name : "getEnumConstants",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_arraycls(jl_Object),
                callable : null
            }, {
                name : "cast",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_Object],
                returnType : jl_Object,
                callable : null
            }, {
                name : "getClassLoader",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_ClassLoader,
                callable : null
            }, {
                name : "forName",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [jl_String],
                returnType : jl_Class,
                callable : null
            }, {
                name : "forName",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [jl_String, $rt_booleancls(), jl_ClassLoader],
                returnType : jl_Class,
                callable : null
            }, {
                name : "initialize",
                modifiers : 0,
                accessLevel : 0,
                parameterTypes : [],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "newInstance",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_Object,
                callable : null
            }, {
                name : "getDeclaringClass",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_Class,
                callable : null
            }, {
                name : "getEnclosingClass",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_Class,
                callable : null
            }, {
                name : "asSubclass",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_Class],
                returnType : jl_Class,
                callable : null
            }, {
                name : "isAnnotationPresent",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_Class],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "getAnnotation",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_Class],
                returnType : jla_Annotation,
                callable : null
            }, {
                name : "getAnnotations",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_arraycls(jla_Annotation),
                callable : null
            }, {
                name : "getDeclaredAnnotations",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_arraycls(jla_Annotation),
                callable : null
            }, {
                name : "ensureAnnotationsByType",
                modifiers : 0,
                accessLevel : 1,
                parameterTypes : [],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "getResourceAsStream",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_String],
                returnType : ji_InputStream,
                callable : null
            }, {
                name : "getPackage",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_Package,
                callable : null
            }];
        jl_Enum.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 2,
                parameterTypes : [jl_String, $rt_intcls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "name",
                modifiers : 4,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }, {
                name : "ordinal",
                modifiers : 4,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "toString",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }, {
                name : "equals",
                modifiers : 4,
                accessLevel : 3,
                parameterTypes : [jl_Object],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "hashCode",
                modifiers : 4,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "clone",
                modifiers : 4,
                accessLevel : 2,
                parameterTypes : [],
                returnType : jl_Object,
                callable : null
            }, {
                name : "getDeclaringClass",
                modifiers : 4,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_Class,
                callable : null
            }, {
                name : "compareTo",
                modifiers : 4,
                accessLevel : 3,
                parameterTypes : [jl_Enum],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "valueOf",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [jl_Class, jl_String],
                returnType : jl_Enum,
                callable : null
            }, {
                name : "compareTo",
                modifiers : 96,
                accessLevel : 3,
                parameterTypes : [jl_Object],
                returnType : $rt_intcls(),
                callable : null
            }];
        jur_QuantifierSet.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_AbstractSet, jur_AbstractSet, $rt_intcls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "getInnerSet",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jur_AbstractSet,
                callable : null
            }, {
                name : "setInnerSet",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_AbstractSet],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "first",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_AbstractSet],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "hasConsumed",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_MatchResultImpl],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "processSecondPass",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_voidcls(),
                callable : null
            }];
        tj_Statements.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "getBody",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : ju_List,
                callable : null
            }, {
                name : "getLine",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "getType",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : tj_Statements$StmtType,
                callable : null
            }, {
                name : "getTypeT",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }, {
                name : "isBlock",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "addStatement",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [tj_Statements],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "addVariableName",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_String],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "containsVariable",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_String],
                returnType : $rt_booleancls(),
                callable : null
            }];
        jur_LeafSet.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_AbstractSet],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "accepts",
                modifiers : 1,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jl_CharSequence],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "matches",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jl_CharSequence, jur_MatchResultImpl],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "charCount",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "hasConsumed",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_MatchResultImpl],
                returnType : $rt_booleancls(),
                callable : null
            }];
        jur_AbstractSet.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_AbstractSet],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "matches",
                modifiers : 1,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jl_CharSequence, jur_MatchResultImpl],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "find",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jl_CharSequence, jur_MatchResultImpl],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "findBack",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), $rt_intcls(), jl_CharSequence, jur_MatchResultImpl],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "hasConsumed",
                modifiers : 1,
                accessLevel : 3,
                parameterTypes : [jur_MatchResultImpl],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "getName",
                modifiers : 1,
                accessLevel : 2,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }, {
                name : "setType",
                modifiers : 0,
                accessLevel : 2,
                parameterTypes : [$rt_intcls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "getType",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "getQualifiedName",
                modifiers : 0,
                accessLevel : 2,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }, {
                name : "toString",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }, {
                name : "getNext",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jur_AbstractSet,
                callable : null
            }, {
                name : "setNext",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_AbstractSet],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "first",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_AbstractSet],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "processBackRefReplacement",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jur_JointSet,
                callable : null
            }, {
                name : "processSecondPass",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "<clinit>",
                modifiers : 512,
                accessLevel : 0,
                parameterTypes : [],
                returnType : $rt_voidcls(),
                callable : null
            }];
        jl_Object.$meta.methods = [
            {
                name : "monitorEnterSync",
                modifiers : 512,
                accessLevel : 0,
                parameterTypes : [jl_Object],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "monitorExitSync",
                modifiers : 512,
                accessLevel : 0,
                parameterTypes : [jl_Object],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "monitorEnter",
                modifiers : 512,
                accessLevel : 0,
                parameterTypes : [jl_Object],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "monitorEnter",
                modifiers : 512,
                accessLevel : 0,
                parameterTypes : [jl_Object, $rt_intcls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "createMonitor",
                modifiers : 512,
                accessLevel : 1,
                parameterTypes : [jl_Object],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "monitorEnterWait",
                modifiers : 768,
                accessLevel : 0,
                parameterTypes : [jl_Object, $rt_intcls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "monitorEnterWait",
                modifiers : 512,
                accessLevel : 0,
                parameterTypes : [jl_Object, $rt_intcls(), oti_AsyncCallback],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "monitorExit",
                modifiers : 512,
                accessLevel : 0,
                parameterTypes : [jl_Object],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "monitorExit",
                modifiers : 512,
                accessLevel : 0,
                parameterTypes : [jl_Object, $rt_intcls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "waitForOtherThreads",
                modifiers : 512,
                accessLevel : 1,
                parameterTypes : [jl_Object],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "isEmptyMonitor",
                modifiers : 4,
                accessLevel : 0,
                parameterTypes : [],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "deleteMonitor",
                modifiers : 0,
                accessLevel : 1,
                parameterTypes : [],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "holdsLock",
                modifiers : 512,
                accessLevel : 0,
                parameterTypes : [jl_Object],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "fakeInit",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "<init>",
                modifiers : 0,
                accessLevel : 1,
                parameterTypes : [],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "getClass",
                modifiers : 4,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_Class,
                callable : null
            }, {
                name : "hashCode",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "equals",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_Object],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "toString",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }, {
                name : "obfuscatedToString",
                modifiers : 0,
                accessLevel : 1,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }, {
                name : "identity",
                modifiers : 4,
                accessLevel : 0,
                parameterTypes : [],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "hashCodeLowLevel",
                modifiers : 768,
                accessLevel : 1,
                parameterTypes : [jl_Object],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "hashCodeLowLevelImpl",
                modifiers : 512,
                accessLevel : 1,
                parameterTypes : [otr_RuntimeObject],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "setHashCodeLowLevel",
                modifiers : 768,
                accessLevel : 1,
                parameterTypes : [jl_Object, $rt_intcls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "setHashCodeLowLevelImpl",
                modifiers : 512,
                accessLevel : 1,
                parameterTypes : [otr_RuntimeObject, $rt_intcls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "identityLowLevel",
                modifiers : 512,
                accessLevel : 1,
                parameterTypes : [],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "identityOrMonitor",
                modifiers : 256,
                accessLevel : 1,
                parameterTypes : [],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "identityOrMonitorLowLevel",
                modifiers : 512,
                accessLevel : 1,
                parameterTypes : [otr_RuntimeObject],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "setIdentity",
                modifiers : 256,
                accessLevel : 0,
                parameterTypes : [$rt_intcls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "setIdentityLowLevel",
                modifiers : 512,
                accessLevel : 1,
                parameterTypes : [otr_RuntimeObject, $rt_intcls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "clone",
                modifiers : 0,
                accessLevel : 2,
                parameterTypes : [],
                returnType : jl_Object,
                callable : null
            }, {
                name : "cloneLowLevel",
                modifiers : 512,
                accessLevel : 1,
                parameterTypes : [otr_RuntimeObject],
                returnType : otr_RuntimeObject,
                callable : null
            }, {
                name : "notify",
                modifiers : 4,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "notifyAll",
                modifiers : 4,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "wait",
                modifiers : 4,
                accessLevel : 3,
                parameterTypes : [$rt_longcls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "wait",
                modifiers : 0,
                accessLevel : 1,
                parameterTypes : [$rt_longcls(), $rt_intcls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "waitImpl",
                modifiers : 256,
                accessLevel : 1,
                parameterTypes : [$rt_longcls(), $rt_intcls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "waitImpl",
                modifiers : 4,
                accessLevel : 3,
                parameterTypes : [$rt_longcls(), $rt_intcls(), oti_AsyncCallback],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "wait",
                modifiers : 4,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "finalize",
                modifiers : 0,
                accessLevel : 2,
                parameterTypes : [],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "lambda$monitorExit$2",
                modifiers : 544,
                accessLevel : 1,
                parameterTypes : [jl_Object],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "lambda$monitorExit$1",
                modifiers : 544,
                accessLevel : 1,
                parameterTypes : [jl_Object],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "lambda$monitorEnterWait$0",
                modifiers : 544,
                accessLevel : 1,
                parameterTypes : [jl_Thread, jl_Object, $rt_intcls(), oti_AsyncCallback],
                returnType : $rt_voidcls(),
                callable : null
            }];
        jlr_AccessibleObject.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 2,
                parameterTypes : [],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "setAccessible",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [$rt_arraycls(jlr_AccessibleObject), $rt_booleancls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "setAccessible",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_booleancls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "isAccessible",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "getAnnotation",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_Class],
                returnType : jla_Annotation,
                callable : null
            }, {
                name : "getAnnotations",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_arraycls(jla_Annotation),
                callable : null
            }, {
                name : "getDeclaredAnnotations",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_arraycls(jla_Annotation),
                callable : null
            }];
        jl_Number.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "intValue",
                modifiers : 1,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "longValue",
                modifiers : 1,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_longcls(),
                callable : null
            }, {
                name : "floatValue",
                modifiers : 1,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_floatcls(),
                callable : null
            }, {
                name : "doubleValue",
                modifiers : 1,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_doublecls(),
                callable : null
            }, {
                name : "byteValue",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_bytecls(),
                callable : null
            }, {
                name : "shortValue",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_shortcls(),
                callable : null
            }];
        jur_BackReferencedSingleSet.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_AbstractSet, jur_FSet],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_SingleSet],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "find",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jl_CharSequence, jur_MatchResultImpl],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "findBack",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), $rt_intcls(), jl_CharSequence, jur_MatchResultImpl],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "processBackRefReplacement",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jur_JointSet,
                callable : null
            }];
        jur_NonCapFSet.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "matches",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jl_CharSequence, jur_MatchResultImpl],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "getName",
                modifiers : 0,
                accessLevel : 2,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }, {
                name : "hasConsumed",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_MatchResultImpl],
                returnType : $rt_booleancls(),
                callable : null
            }];
        jur_AtomicFSet.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "matches",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jl_CharSequence, jur_MatchResultImpl],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "getIndex",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "getName",
                modifiers : 0,
                accessLevel : 2,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }, {
                name : "hasConsumed",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_MatchResultImpl],
                returnType : $rt_booleancls(),
                callable : null
            }];
        jur_FSet$PossessiveFSet.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 0,
                parameterTypes : [],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "matches",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jl_CharSequence, jur_MatchResultImpl],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "getName",
                modifiers : 0,
                accessLevel : 2,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }, {
                name : "hasConsumed",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_MatchResultImpl],
                returnType : $rt_booleancls(),
                callable : null
            }];
        jur_AheadFSet.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "matches",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jl_CharSequence, jur_MatchResultImpl],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "getName",
                modifiers : 0,
                accessLevel : 2,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }];
        jur_FinalSet.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "matches",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jl_CharSequence, jur_MatchResultImpl],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "getName",
                modifiers : 0,
                accessLevel : 2,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }];
        jur_FSet.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "matches",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jl_CharSequence, jur_MatchResultImpl],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "getGroupIndex",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "getName",
                modifiers : 0,
                accessLevel : 2,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }, {
                name : "hasConsumed",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jur_MatchResultImpl],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "<clinit>",
                modifiers : 512,
                accessLevel : 0,
                parameterTypes : [],
                returnType : $rt_voidcls(),
                callable : null
            }];
        jur_BehindFSet.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "matches",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jl_CharSequence, jur_MatchResultImpl],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "getName",
                modifiers : 0,
                accessLevel : 2,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }];
        jl_Float.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_floatcls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_doublecls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_String],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "intValue",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "longValue",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_longcls(),
                callable : null
            }, {
                name : "floatValue",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_floatcls(),
                callable : null
            }, {
                name : "doubleValue",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_doublecls(),
                callable : null
            }, {
                name : "valueOf",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [$rt_floatcls()],
                returnType : jl_Float,
                callable : null
            }, {
                name : "toString",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [$rt_floatcls()],
                returnType : jl_String,
                callable : null
            }, {
                name : "toString",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }, {
                name : "equals",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_Object],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "hashCode",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "hashCode",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [$rt_floatcls()],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "isNaN",
                modifiers : 768,
                accessLevel : 3,
                parameterTypes : [$rt_floatcls()],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "isInfinite",
                modifiers : 768,
                accessLevel : 3,
                parameterTypes : [$rt_floatcls()],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "isFinite",
                modifiers : 768,
                accessLevel : 3,
                parameterTypes : [$rt_floatcls()],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "parseFloat",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [jl_String],
                returnType : $rt_floatcls(),
                callable : null
            }, {
                name : "valueOf",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [jl_String],
                returnType : jl_Float,
                callable : null
            }, {
                name : "isNaN",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "isInfinite",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "compare",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [$rt_floatcls(), $rt_floatcls()],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "compareTo",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_Float],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "floatToRawIntBits",
                modifiers : 768,
                accessLevel : 3,
                parameterTypes : [$rt_floatcls()],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "floatToIntBits",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [$rt_floatcls()],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "intBitsToFloat",
                modifiers : 768,
                accessLevel : 3,
                parameterTypes : [$rt_intcls()],
                returnType : $rt_floatcls(),
                callable : null
            }, {
                name : "toHexString",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [$rt_floatcls()],
                returnType : jl_String,
                callable : null
            }, {
                name : "compareTo",
                modifiers : 96,
                accessLevel : 3,
                parameterTypes : [jl_Object],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "<clinit>",
                modifiers : 512,
                accessLevel : 0,
                parameterTypes : [],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "isNaN$js_body$_13",
                modifiers : 768,
                accessLevel : 0,
                parameterTypes : [otj_JSObject],
                returnType : otj_JSObject,
                callable : null
            }, {
                name : "isInfinite$js_body$_14",
                modifiers : 768,
                accessLevel : 0,
                parameterTypes : [otj_JSObject],
                returnType : otj_JSObject,
                callable : null
            }, {
                name : "isFinite$js_body$_15",
                modifiers : 768,
                accessLevel : 0,
                parameterTypes : [otj_JSObject],
                returnType : otj_JSObject,
                callable : null
            }, {
                name : "floatToRawIntBits$js_body$_22",
                modifiers : 768,
                accessLevel : 0,
                parameterTypes : [otj_JSObject],
                returnType : otj_JSObject,
                callable : null
            }, {
                name : "intBitsToFloat$js_body$_24",
                modifiers : 768,
                accessLevel : 0,
                parameterTypes : [otj_JSObject],
                returnType : otj_JSObject,
                callable : null
            }];
        jl_Package.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 0,
                parameterTypes : [jl_String],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "getName",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }, {
                name : "getPackage",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [jl_String],
                returnType : jl_Package,
                callable : null
            }, {
                name : "getAnnotation",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_Class],
                returnType : jla_Annotation,
                callable : null
            }, {
                name : "getAnnotations",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_arraycls(jla_Annotation),
                callable : null
            }, {
                name : "getDeclaredAnnotations",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_arraycls(jla_Annotation),
                callable : null
            }, {
                name : "<clinit>",
                modifiers : 512,
                accessLevel : 0,
                parameterTypes : [],
                returnType : $rt_voidcls(),
                callable : null
            }];
        jni_XHRStreamHandler.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "openConnection",
                modifiers : 0,
                accessLevel : 2,
                parameterTypes : [jn_URL],
                returnType : jn_URLConnection,
                callable : null
            }, {
                name : "getDefaultPort",
                modifiers : 0,
                accessLevel : 2,
                parameterTypes : [],
                returnType : $rt_intcls(),
                callable : null
            }];
        ju_ArrayList.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [ju_Collection],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "trimToSize",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "ensureCapacity",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "get",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls()],
                returnType : jl_Object,
                callable : null
            }, {
                name : "getFirst",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_Object,
                callable : null
            }, {
                name : "getLast",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_Object,
                callable : null
            }, {
                name : "size",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "clone",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_Object,
                callable : null
            }, {
                name : "set",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jl_Object],
                returnType : jl_Object,
                callable : null
            }, {
                name : "add",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_Object],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "add",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jl_Object],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "addFirst",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_Object],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "addLast",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_Object],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "removeFirst",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_Object,
                callable : null
            }, {
                name : "removeLast",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_Object,
                callable : null
            }, {
                name : "checkIfNotEmpty",
                modifiers : 0,
                accessLevel : 1,
                parameterTypes : [],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "remove",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls()],
                returnType : jl_Object,
                callable : null
            }, {
                name : "remove",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_Object],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "clear",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "addAll",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), ju_Collection],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "removeRange",
                modifiers : 0,
                accessLevel : 2,
                parameterTypes : [$rt_intcls(), $rt_intcls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "checkIndex",
                modifiers : 0,
                accessLevel : 1,
                parameterTypes : [$rt_intcls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "checkIndexForAdd",
                modifiers : 0,
                accessLevel : 1,
                parameterTypes : [$rt_intcls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "replaceAll",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [juf_UnaryOperator],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "forEach",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [juf_Consumer],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "toString",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }, {
                name : "hashCode",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "sort",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [ju_Comparator],
                returnType : $rt_voidcls(),
                callable : null
            }];
        jni_DummyStreamHandler.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "openConnection",
                modifiers : 0,
                accessLevel : 2,
                parameterTypes : [jn_URL],
                returnType : jn_URLConnection,
                callable : null
            }, {
                name : "getDefaultPort",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_intcls(),
                callable : null
            }];
        jnci_UTF8Charset.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 1,
                parameterTypes : [],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "contains",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jnc_Charset],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "newDecoder",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jnc_CharsetDecoder,
                callable : null
            }, {
                name : "newEncoder",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jnc_CharsetEncoder,
                callable : null
            }, {
                name : "<clinit>",
                modifiers : 512,
                accessLevel : 0,
                parameterTypes : [],
                returnType : $rt_voidcls(),
                callable : null
            }];
        jnci_AsciiCharset.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "contains",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jnc_Charset],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "newDecoder",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jnc_CharsetDecoder,
                callable : null
            }, {
                name : "newEncoder",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jnc_CharsetEncoder,
                callable : null
            }];
        jnci_Iso8859Charset.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "contains",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jnc_Charset],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "newDecoder",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jnc_CharsetDecoder,
                callable : null
            }, {
                name : "newEncoder",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jnc_CharsetEncoder,
                callable : null
            }];
        tj_FunctionVar.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 0,
                parameterTypes : [jl_String, ju_List, $rt_arraycls(tj_Argument), $rt_intcls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "getArgs",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_arraycls(tj_Argument),
                callable : null
            }, {
                name : "getBody",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : ju_List,
                callable : null
            }, {
                name : "getName",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }, {
                name : "getLineNumber",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_intcls(),
                callable : null
            }];
        jnci_UTF16Charset.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_String, $rt_booleancls(), $rt_booleancls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "contains",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jnc_Charset],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "newDecoder",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jnc_CharsetDecoder,
                callable : null
            }, {
                name : "newEncoder",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jnc_CharsetEncoder,
                callable : null
            }];
        jnc_Charset.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 2,
                parameterTypes : [jl_String, $rt_arraycls(jl_String)],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "checkCanonicalName",
                modifiers : 512,
                accessLevel : 1,
                parameterTypes : [jl_String],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "isValidCharsetStart",
                modifiers : 512,
                accessLevel : 1,
                parameterTypes : [$rt_charcls()],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "forName",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [jl_String],
                returnType : jnc_Charset,
                callable : null
            }, {
                name : "defaultCharset",
                modifiers : 512,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jnc_Charset,
                callable : null
            }, {
                name : "name",
                modifiers : 4,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }, {
                name : "aliases",
                modifiers : 4,
                accessLevel : 3,
                parameterTypes : [],
                returnType : ju_Set,
                callable : null
            }, {
                name : "displayName",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }, {
                name : "contains",
                modifiers : 1,
                accessLevel : 3,
                parameterTypes : [jnc_Charset],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "newDecoder",
                modifiers : 1,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jnc_CharsetDecoder,
                callable : null
            }, {
                name : "newEncoder",
                modifiers : 1,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jnc_CharsetEncoder,
                callable : null
            }, {
                name : "canEncode",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "decode",
                modifiers : 4,
                accessLevel : 3,
                parameterTypes : [jn_ByteBuffer],
                returnType : jn_CharBuffer,
                callable : null
            }, {
                name : "encode",
                modifiers : 4,
                accessLevel : 3,
                parameterTypes : [jn_CharBuffer],
                returnType : jn_ByteBuffer,
                callable : null
            }, {
                name : "encode",
                modifiers : 4,
                accessLevel : 3,
                parameterTypes : [jl_String],
                returnType : jn_ByteBuffer,
                callable : null
            }, {
                name : "compareTo",
                modifiers : 4,
                accessLevel : 3,
                parameterTypes : [jnc_Charset],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "compareTo",
                modifiers : 96,
                accessLevel : 3,
                parameterTypes : [jl_Object],
                returnType : $rt_intcls(),
                callable : null
            }];
        jn_URLStreamHandler.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "openConnection",
                modifiers : 1,
                accessLevel : 2,
                parameterTypes : [jn_URL],
                returnType : jn_URLConnection,
                callable : null
            }, {
                name : "parseURL",
                modifiers : 0,
                accessLevel : 2,
                parameterTypes : [jn_URL, jl_String, $rt_intcls(), $rt_intcls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "canonicalizePath",
                modifiers : 512,
                accessLevel : 1,
                parameterTypes : [jl_String],
                returnType : jl_String,
                callable : null
            }, {
                name : "setURL",
                modifiers : 128,
                accessLevel : 2,
                parameterTypes : [jn_URL, jl_String, jl_String, $rt_intcls(), jl_String, jl_String],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "setURL",
                modifiers : 0,
                accessLevel : 2,
                parameterTypes : [jn_URL, jl_String, jl_String, $rt_intcls(), jl_String, jl_String, jl_String, jl_String, jl_String],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "toExternalForm",
                modifiers : 0,
                accessLevel : 2,
                parameterTypes : [jn_URL],
                returnType : jl_String,
                callable : null
            }, {
                name : "equals",
                modifiers : 0,
                accessLevel : 2,
                parameterTypes : [jn_URL, jn_URL],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "getDefaultPort",
                modifiers : 0,
                accessLevel : 2,
                parameterTypes : [],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "hashCode",
                modifiers : 0,
                accessLevel : 2,
                parameterTypes : [jn_URL],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "hostsEqual",
                modifiers : 0,
                accessLevel : 2,
                parameterTypes : [jn_URL, jn_URL],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "sameFile",
                modifiers : 0,
                accessLevel : 2,
                parameterTypes : [jn_URL, jn_URL],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "getHost",
                modifiers : 512,
                accessLevel : 1,
                parameterTypes : [jn_URL],
                returnType : jl_String,
                callable : null
            }];
        ju_AbstractList.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 2,
                parameterTypes : [],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "add",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_Object],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "iterator",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : ju_Iterator,
                callable : null
            }, {
                name : "addAll",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), ju_Collection],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "set",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jl_Object],
                returnType : jl_Object,
                callable : null
            }, {
                name : "add",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), jl_Object],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "remove",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls()],
                returnType : jl_Object,
                callable : null
            }, {
                name : "indexOf",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_Object],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "lastIndexOf",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_Object],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "clear",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "listIterator",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : ju_ListIterator,
                callable : null
            }, {
                name : "listIterator",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls()],
                returnType : ju_ListIterator,
                callable : null
            }, {
                name : "subList",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls(), $rt_intcls()],
                returnType : ju_List,
                callable : null
            }, {
                name : "removeRange",
                modifiers : 0,
                accessLevel : 2,
                parameterTypes : [$rt_intcls(), $rt_intcls()],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "hashCode",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_intcls(),
                callable : null
            }, {
                name : "equals",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_Object],
                returnType : $rt_booleancls(),
                callable : null
            }];
        ju_AbstractCollection.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 2,
                parameterTypes : [],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "isEmpty",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "contains",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_Object],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "toArray",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_arraycls(jl_Object),
                callable : null
            }, {
                name : "toArray",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_arraycls(jl_Object)],
                returnType : $rt_arraycls(jl_Object),
                callable : null
            }, {
                name : "add",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_Object],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "remove",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_Object],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "containsAll",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [ju_Collection],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "addAll",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [ju_Collection],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "removeAll",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [ju_Collection],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "retainAll",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [ju_Collection],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "clear",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "toString",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : jl_String,
                callable : null
            }];
        ju_Collections$8.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 0,
                parameterTypes : [ju_List],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "get",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [$rt_intcls()],
                returnType : jl_Object,
                callable : null
            }, {
                name : "size",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_intcls(),
                callable : null
            }];
        jl_Class$MethodSignature.$meta.methods = [
            {
                name : "<init>",
                modifiers : 0,
                accessLevel : 0,
                parameterTypes : [jl_String, $rt_arraycls(jl_Class), jl_Class],
                returnType : $rt_voidcls(),
                callable : null
            }, {
                name : "equals",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [jl_Object],
                returnType : $rt_booleancls(),
                callable : null
            }, {
                name : "hashCode",
                modifiers : 0,
                accessLevel : 3,
                parameterTypes : [],
                returnType : $rt_intcls(),
                callable : null
            }];
    }
    function jl_Class_getDeclaredMethods($this) {
        var $jsMethods, $count, $i, var$4, $jsMethod, $jsParameterTypes, $parameterTypes, var$8, $j, var$10, $returnType, var$12, var$13;
        if (!jl_Class_isPrimitive($this) && !jl_Class_isArray($this)) {
            if ($this.$declaredMethods === null) {
                if (!jl_Class_reflectionInitialized) {
                    jl_Class_reflectionInitialized = 1;
                    jl_Class_createMetadata();
                }
                $jsMethods = $this.$platformClass.$meta.methods;
                $this.$declaredMethods = $rt_createArray(jlr_Method, $jsMethods.length);
                $count = 0;
                $i = 0;
                while ($i < $jsMethods.length) {
                    var$4 = $jsMethods[$i];
                    $jsMethod = var$4 === null ? null : !(var$4 instanceof $rt_objcls()) ? var$4 : otji_JSWrapper_unwrap(var$4);
                    if (!jl_String_equals($rt_str($jsMethod.name), $rt_s(8)) && !jl_String_equals($rt_str($jsMethod.name), $rt_s(9))) {
                        $jsParameterTypes = $jsMethod.parameterTypes;
                        $parameterTypes = $rt_createArray(jl_Class, $jsParameterTypes.length);
                        var$8 = $parameterTypes.data;
                        $j = 0;
                        var$10 = var$8.length;
                        while ($j < var$10) {
                            var$8[$j] = jl_Class_getClass($jsParameterTypes[$j]);
                            $j = $j + 1 | 0;
                        }
                        $returnType = jl_Class_getClass($jsMethod.returnType);
                        var$8 = $this.$declaredMethods.data;
                        var$12 = $count + 1 | 0;
                        var$13 = new jlr_Method;
                        var$4 = $rt_str($jsMethod.name);
                        var$10 = $jsMethod.modifiers;
                        $j = $jsMethod.accessLevel;
                        $jsParameterTypes = otji_JS_functionAsObject($jsMethod.callable, "call");
                        var$13.$declaringClass = $this;
                        var$13.$name0 = var$4;
                        var$13.$flags = var$10;
                        var$13.$accessLevel = $j;
                        var$13.$returnType = $returnType;
                        var$13.$parameterTypes = $parameterTypes;
                        var$13.$callable = $jsParameterTypes;
                        var$8[$count] = var$13;
                        $count = var$12;
                    }
                    $i = $i + 1 | 0;
                }
                $this.$declaredMethods = ju_Arrays_copyOf($this.$declaredMethods, $count);
            }
            return $this.$declaredMethods.$clone();
        }
        return $rt_createArray(jlr_Method, 0);
    }
    function jl_Class_findMethods($cls, $methods) {
        var var$3, var$4, var$5, $method, $signature, $superclass, var$9, $iface, var$11;
        var$3 = (jl_Class_getDeclaredMethods($cls)).data;
        var$4 = var$3.length;
        var$5 = 0;
        while (var$5 < var$4) {
            $method = var$3[var$5];
            if (jlr_Modifier_isPublic(jlr_Method_getModifiers($method))) {
                $signature = new jl_Class$MethodSignature;
                $superclass = $method.$name0;
                var$9 = jlr_Method_getParameterTypes($method);
                $iface = $method.$returnType;
                $signature.$name1 = $superclass;
                $signature.$parameterTypes0 = var$9;
                $signature.$returnType0 = $iface;
                if (!ju_HashMap_containsKey($methods, $signature))
                    ju_HashMap_put($methods, $signature, $method);
            }
            var$5 = var$5 + 1 | 0;
        }
        if (!jl_Class_isInterface($cls)) {
            $superclass = jl_Class_getSuperclass($cls);
            if ($superclass !== null)
                jl_Class_findMethods($superclass, $methods);
        }
        var$3 = (jl_Class_getInterfaces($cls)).data;
        var$4 = var$3.length;
        var$11 = 0;
        while (var$11 < var$4) {
            jl_Class_findMethods(var$3[var$11], $methods);
            var$11 = var$11 + 1 | 0;
        }
    }
    function jl_Class_getSuperclass($this) {
        return jl_Class_getClass($this.$platformClass.$meta.superclass);
    }
    function jl_Class_getInterfaces($this) {
        var $supertypes, $filteredSupertypes, var$3, $j, $i, var$6;
        $supertypes = $this.$platformClass.$meta.supertypes;
        $filteredSupertypes = $rt_createArray(jl_Class, $supertypes.length);
        var$3 = $filteredSupertypes.data;
        $j = 0;
        $i = 0;
        while ($i < $supertypes.length) {
            if ($supertypes[$i] !== $this.$platformClass.$meta.superclass) {
                var$6 = $j + 1 | 0;
                var$3[$j] = jl_Class_getClass($supertypes[$i]);
                $j = var$6;
            }
            $i = $i + 1 | 0;
        }
        if (var$3.length > $j)
            $filteredSupertypes = ju_Arrays_copyOf($filteredSupertypes, $j);
        return $filteredSupertypes;
    }
    function jl_Class_getClassLoader($this) {
        jl_ClassLoader_$callClinit();
        return jl_ClassLoader_systemClassLoader;
    }
    function jl_Class_getPackage($this) {
        var $name, var$2;
        $name = jl_Class_getName($this);
        $name = jl_String_substring($name, 0, jl_String_lastIndexOf($name, 46) + 1 | 0);
        var$2 = ju_HashMap_get(jl_Package_packages, $name);
        if (var$2 === null) {
            var$2 = new jl_Package;
            var$2.$name2 = $name;
            ju_HashMap_put(jl_Package_packages, $name, var$2);
        }
        return var$2;
    }
    var otji_JS = $rt_classWithoutFields();
    function otji_JS_wrap($array) {
        var var$2, $result, $i, var$5;
        if ($array === null)
            return null;
        $array = $array.data;
        var$2 = $array.length;
        $result = new $rt_globals.Array(var$2);
        $i = 0;
        while ($i < var$2) {
            var$5 = $rt_ustr($array[$i]);
            $result[$i] = otji_JSWrapper_javaToJs(var$5);
            $i = $i + 1 | 0;
        }
        return $result;
    }
    function otji_JS_function(var$1, var$2) {
        var name = 'jso$functor$' + var$2;
        if (!var$1[name]) {
            var fn = function() {
                return var$1[var$2].apply(var$1, arguments);
            };
            var$1[name] = function() {
                return fn;
            };
        }
        return var$1[name]();
    }
    function otji_JS_functionAsObject(var$1, var$2) {
        if (typeof var$1 !== "function") return var$1;
        var result = {};
        result[var$2] = var$1;
        return result;
    }
    var otp_Platform = $rt_classWithoutFields();
    function otp_Platform_clone(var$1) {
        var copy = new var$1.constructor();
        for (var field in var$1) {
            if (!var$1.hasOwnProperty(field)) {
                continue;
            }
            copy[field] = var$1[field];
        }
        return copy;
    }
    function otp_Platform_isAssignable($from, $to) {
        var $supertypes, $i;
        if ($from === $to)
            return 1;
        $supertypes = $from.$meta.supertypes;
        $i = 0;
        while ($i < $supertypes.length) {
            if (otp_Platform_isAssignable($supertypes[$i], $to))
                return 1;
            $i = $i + 1 | 0;
        }
        return 0;
    }
    function otp_Platform_getEnumConstants(var$1) {
        var c = '$$enumConstants$$';
        tj_JavaishVal$JavaishType[c] = tj_JavaishVal$JavaishType_values;
        tj_Statements$StmtType[c] = tj_Statements$StmtType_values;
        tj_Expression$ExpressionReturnType[c] = tj_Expression$ExpressionReturnType_values;
        tj_Statements$MutationType[c] = tj_Statements$MutationType_values;
        tj_Element$ElementType[c] = tj_Element$ElementType_values;
        tj_Statements$RobotType[c] = tj_Statements$RobotType_values;
        tj_Debugger$Operator[c] = tj_Debugger$Operator_values;
        juc_TimeUnit[c] = juc_TimeUnit_values;
        tj_Interpreter$Operator[c] = tj_Interpreter$Operator_values;
        tj_JavaTranslator$Operator[c] = tj_JavaTranslator$Operator_values;
        tj_PythonTranslator$Operator[c] = tj_PythonTranslator$Operator_values;
        otp_Platform_getEnumConstants = function(cls) {
            if (!cls.hasOwnProperty(c)) {
                return null;
            }
            if (typeof cls[c] === "function") {
                cls[c] = cls[c]();
            }
            return cls[c];
        };
        return otp_Platform_getEnumConstants(var$1);
    }
    function otp_Platform_launchThread($runnable) {
        $runnable.$run();
    }
    function otp_Platform_schedule(var$1, var$2) {
        return setTimeout(function() {
            otp_Platform_launchThread(var$1);
        }, var$2);
    }
    function otp_Platform_getArrayItem($cls) {
        return $cls.$meta.item;
    }
    function otp_Platform_createQueueJs$js_body$_30() {
        return [];
    }
    function jl_Throwable() {
        var a = this; jl_Object.call(a);
        a.$message = null;
        a.$cause = null;
        a.$suppressionEnabled = 0;
        a.$writableStackTrace = 0;
    }
    function jl_Throwable__init_0(var_0) {
        var var_1 = new jl_Throwable();
        jl_Throwable__init_(var_1, var_0);
        return var_1;
    }
    function jl_Throwable__init_1(var_0, var_1) {
        var var_2 = new jl_Throwable();
        jl_Throwable__init_2(var_2, var_0, var_1);
        return var_2;
    }
    function jl_Throwable__init_($this, $message) {
        $this.$suppressionEnabled = 1;
        $this.$writableStackTrace = 1;
        $this.$message = $message;
    }
    function jl_Throwable__init_2($this, $message, $cause) {
        $this.$suppressionEnabled = 1;
        $this.$writableStackTrace = 1;
        $this.$message = $message;
        $this.$cause = $cause;
    }
    function jl_Throwable_fillInStackTrace($this) {
        return $this;
    }
    function jl_Throwable_getMessage($this) {
        return $this.$message;
    }
    function jl_Throwable_getLocalizedMessage($this) {
        return $this.$getMessage();
    }
    function jl_Throwable_getCause($this) {
        var var$1;
        var$1 = $this.$cause;
        if (var$1 === $this)
            var$1 = null;
        return var$1;
    }
    function jl_Throwable_toString($this) {
        var $message, var$2, var$3, var$4;
        $message = $this.$getMessage();
        var$2 = jl_Class_getName(jl_Object_getClass($this));
        if ($message === null)
            var$3 = $rt_s(2);
        else {
            var$3 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_(var$3);
            jl_StringBuilder_append(jl_StringBuilder_append(var$3, $rt_s(10)), $message);
            var$3 = jl_AbstractStringBuilder_toString(var$3);
        }
        var$4 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$4);
        jl_StringBuilder_append(jl_StringBuilder_append(var$4, var$2), var$3);
        return jl_AbstractStringBuilder_toString(var$4);
    }
    var jl_Exception = $rt_classWithoutFields(jl_Throwable);
    function jl_Exception__init_0() {
        var var_0 = new jl_Exception();
        jl_Exception__init_(var_0);
        return var_0;
    }
    function jl_Exception__init_($this) {
        $this.$suppressionEnabled = 1;
        $this.$writableStackTrace = 1;
    }
    var jl_RuntimeException = $rt_classWithoutFields(jl_Exception);
    function jl_RuntimeException__init_(var_0) {
        var var_1 = new jl_RuntimeException();
        jl_RuntimeException__init_0(var_1, var_0);
        return var_1;
    }
    function jl_RuntimeException__init_0($this, $message) {
        jl_Throwable__init_($this, $message);
    }
    var jl_ClassCastException = $rt_classWithoutFields(jl_RuntimeException);
    var ji_Serializable = $rt_classWithoutFields(0);
    var jl_Comparable = $rt_classWithoutFields(0);
    var jl_CharSequence = $rt_classWithoutFields(0);
    function jl_String() {
        var a = this; jl_Object.call(a);
        a.$characters = null;
        a.$hashCode = 0;
    }
    var jl_String_EMPTY_CHARS = null;
    var jl_String_EMPTY = null;
    var jl_String_CASE_INSENSITIVE_ORDER = null;
    function jl_String_$callClinit() {
        jl_String_$callClinit = $rt_eraseClinit(jl_String);
        jl_String__clinit_();
    }
    function jl_String__init_(var_0) {
        var var_1 = new jl_String();
        jl_String__init_0(var_1, var_0);
        return var_1;
    }
    function jl_String__init_1(var_0, var_1, var_2) {
        var var_3 = new jl_String();
        jl_String__init_2(var_3, var_0, var_1, var_2);
        return var_3;
    }
    function jl_String__init_3(var_0, var_1, var_2) {
        var var_3 = new jl_String();
        jl_String__init_4(var_3, var_0, var_1, var_2);
        return var_3;
    }
    function jl_String__init_0($this, $characters) {
        jl_String_$callClinit();
        jl_String__init_2($this, $characters, 0, $characters.data.length);
    }
    function jl_String__init_2($this, $value, $offset, $count) {
        var var$4;
        jl_String_$callClinit();
        var$4 = $rt_createCharArray($count);
        $this.$characters = var$4;
        jl_System_fastArraycopy($value, $offset, var$4, 0, $count);
    }
    function jl_String__init_4($this, $codePoints, $offset, $count) {
        var $charCount, $i, var$6, var$7, $codePoint, var$9;
        jl_String_$callClinit();
        $this.$characters = $rt_createCharArray($count * 2 | 0);
        $charCount = 0;
        $i = 0;
        while ($i < $count) {
            var$6 = $codePoints.data;
            var$7 = $offset + 1 | 0;
            $codePoint = var$6[$offset];
            if ($codePoint < 65536) {
                var$6 = $this.$characters.data;
                var$9 = $charCount + 1 | 0;
                var$6[$charCount] = $codePoint & 65535;
            } else {
                var$6 = $this.$characters.data;
                $offset = $charCount + 1 | 0;
                var$6[$charCount] = jl_Character_highSurrogate($codePoint);
                var$6 = $this.$characters.data;
                var$9 = $offset + 1 | 0;
                var$6[$offset] = jl_Character_lowSurrogate($codePoint);
            }
            $i = $i + 1 | 0;
            $offset = var$7;
            $charCount = var$9;
        }
        $codePoints = $this.$characters;
        if ($charCount < $codePoints.data.length)
            $this.$characters = ju_Arrays_copyOf0($codePoints, $charCount);
    }
    function jl_String_charAt($this, $index) {
        var var$2, var$3;
        if ($index >= 0) {
            var$2 = $this.$characters.data;
            if ($index < var$2.length)
                return var$2[$index];
        }
        var$3 = new jl_StringIndexOutOfBoundsException;
        jl_Exception__init_(var$3);
        $rt_throw(var$3);
    }
    function jl_String_length($this) {
        return $this.$characters.data.length;
    }
    function jl_String_isEmpty($this) {
        return $this.$characters.data.length ? 0 : 1;
    }
    function jl_String_startsWith($this, $prefix, $toffset) {
        var $i, var$4, var$5;
        if (($toffset + jl_String_length($prefix) | 0) > jl_String_length($this))
            return 0;
        $i = 0;
        while ($i < jl_String_length($prefix)) {
            var$4 = jl_String_charAt($prefix, $i);
            var$5 = $toffset + 1 | 0;
            if (var$4 != jl_String_charAt($this, $toffset))
                return 0;
            $i = $i + 1 | 0;
            $toffset = var$5;
        }
        return 1;
    }
    function jl_String_startsWith0($this, $prefix) {
        if ($this === $prefix)
            return 1;
        return jl_String_startsWith($this, $prefix, 0);
    }
    function jl_String_endsWith($this, $suffix) {
        var $j, $i, var$4, var$5;
        if ($this === $suffix)
            return 1;
        if (jl_String_length($suffix) > jl_String_length($this))
            return 0;
        $j = 0;
        $i = jl_String_length($this) - jl_String_length($suffix) | 0;
        while ($i < jl_String_length($this)) {
            var$4 = jl_String_charAt($this, $i);
            var$5 = $j + 1 | 0;
            if (var$4 != jl_String_charAt($suffix, $j))
                return 0;
            $i = $i + 1 | 0;
            $j = var$5;
        }
        return 1;
    }
    function jl_String_indexOf($this, $ch, $fromIndex) {
        var $i, $bmpChar, var$5, $hi, $lo;
        $i = jl_Math_max(0, $fromIndex);
        if ($ch < 65536) {
            $bmpChar = $ch & 65535;
            while (true) {
                var$5 = $this.$characters.data;
                if ($i >= var$5.length)
                    return (-1);
                if (var$5[$i] == $bmpChar)
                    break;
                $i = $i + 1 | 0;
            }
            return $i;
        }
        $hi = jl_Character_highSurrogate($ch);
        $lo = jl_Character_lowSurrogate($ch);
        while (true) {
            var$5 = $this.$characters.data;
            if ($i >= (var$5.length - 1 | 0))
                return (-1);
            if (var$5[$i] == $hi && var$5[$i + 1 | 0] == $lo)
                break;
            $i = $i + 1 | 0;
        }
        return $i;
    }
    function jl_String_indexOf0($this, $ch) {
        return jl_String_indexOf($this, $ch, 0);
    }
    function jl_String_lastIndexOf0($this, $ch, $fromIndex) {
        var $i, $bmpChar, $hi, $lo, var$7;
        $i = jl_Math_min($fromIndex, jl_String_length($this) - 1 | 0);
        if ($ch < 65536) {
            $bmpChar = $ch & 65535;
            while (true) {
                if ($i < 0)
                    return (-1);
                if ($this.$characters.data[$i] == $bmpChar)
                    break;
                $i = $i + (-1) | 0;
            }
            return $i;
        }
        $hi = jl_Character_highSurrogate($ch);
        $lo = jl_Character_lowSurrogate($ch);
        while (true) {
            if ($i < 1)
                return (-1);
            var$7 = $this.$characters.data;
            if (var$7[$i] == $lo) {
                $ch = $i - 1 | 0;
                if (var$7[$ch] == $hi)
                    break;
            }
            $i = $i + (-1) | 0;
        }
        return $ch;
    }
    function jl_String_lastIndexOf($this, $ch) {
        return jl_String_lastIndexOf0($this, $ch, jl_String_length($this) - 1 | 0);
    }
    function jl_String_indexOf1($this, $str, $fromIndex) {
        var $i, $toIndex, $j;
        $i = jl_Math_max(0, $fromIndex);
        $toIndex = jl_String_length($this) - jl_String_length($str) | 0;
        a: while (true) {
            if ($i > $toIndex)
                return (-1);
            $j = 0;
            while (true) {
                if ($j >= jl_String_length($str))
                    break a;
                if (jl_String_charAt($this, $i + $j | 0) != jl_String_charAt($str, $j))
                    break;
                $j = $j + 1 | 0;
            }
            $i = $i + 1 | 0;
        }
        return $i;
    }
    function jl_String_indexOf2($this, $str) {
        return jl_String_indexOf1($this, $str, 0);
    }
    function jl_String_substring($this, $beginIndex, $endIndex) {
        var var$3, var$4;
        var$3 = $rt_compare($beginIndex, $endIndex);
        if (var$3 > 0) {
            var$4 = new jl_IndexOutOfBoundsException;
            jl_Exception__init_(var$4);
            $rt_throw(var$4);
        }
        if (!var$3) {
            jl_String_$callClinit();
            return jl_String_EMPTY;
        }
        if (!$beginIndex && $endIndex == jl_String_length($this))
            return $this;
        return jl_String__init_1($this.$characters, $beginIndex, $endIndex - $beginIndex | 0);
    }
    function jl_String_substring0($this, $beginIndex) {
        return jl_String_substring($this, $beginIndex, jl_String_length($this));
    }
    function jl_String_contains($this, $s) {
        var $sz, $i, $j;
        $sz = jl_String_length($this) - jl_String_length($s) | 0;
        $i = 0;
        while ($i <= $sz) {
            $j = 0;
            while (true) {
                if ($j >= jl_String_length($s))
                    return 1;
                if (jl_String_charAt($this, $i + $j | 0) != jl_String_charAt($s, $j))
                    break;
                $j = $j + 1 | 0;
            }
            $i = $i + 1 | 0;
        }
        return 0;
    }
    function jl_String_trim($this) {
        var $lower, $upper;
        $lower = 0;
        $upper = jl_String_length($this) - 1 | 0;
        a: {
            while ($lower <= $upper) {
                if (jl_String_charAt($this, $lower) > 32)
                    break a;
                $lower = $lower + 1 | 0;
            }
        }
        while ($lower <= $upper && jl_String_charAt($this, $upper) <= 32) {
            $upper = $upper + (-1) | 0;
        }
        return jl_String_substring($this, $lower, $upper + 1 | 0);
    }
    function jl_String_toString($this) {
        return $this;
    }
    function jl_String_toCharArray($this) {
        var var$1, $array, var$3, $i, var$5;
        var$1 = $this.$characters.data;
        $array = $rt_createCharArray(var$1.length);
        var$3 = $array.data;
        $i = 0;
        var$5 = var$3.length;
        while ($i < var$5) {
            var$3[$i] = var$1[$i];
            $i = $i + 1 | 0;
        }
        return $array;
    }
    function jl_String_valueOf($obj) {
        jl_String_$callClinit();
        return $obj === null ? $rt_s(11) : $obj.$toString();
    }
    function jl_String_valueOf0($i) {
        var var$2;
        jl_String_$callClinit();
        var$2 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$2);
        return jl_AbstractStringBuilder_toString(jl_StringBuilder_append0(var$2, $i));
    }
    function jl_String_equals($this, $other) {
        var $str, $i;
        if ($this === $other)
            return 1;
        if (!($other instanceof jl_String))
            return 0;
        $str = $other;
        if (jl_String_length($str) != jl_String_length($this))
            return 0;
        $i = 0;
        while ($i < jl_String_length($str)) {
            if (jl_String_charAt($this, $i) != jl_String_charAt($str, $i))
                return 0;
            $i = $i + 1 | 0;
        }
        return 1;
    }
    function jl_String_equalsIgnoreCase($this, $other) {
        var $i;
        if ($this === $other)
            return 1;
        if ($other === null)
            return 0;
        if (jl_String_length($this) != jl_String_length($other))
            return 0;
        $i = 0;
        while ($i < jl_String_length($this)) {
            if (jl_Character_toLowerCase(jl_String_charAt($this, $i)) != jl_Character_toLowerCase(jl_String_charAt($other, $i)))
                return 0;
            $i = $i + 1 | 0;
        }
        return 1;
    }
    function jl_String_hashCode($this) {
        var var$1, var$2, var$3, $c;
        a: {
            if (!$this.$hashCode) {
                var$1 = $this.$characters.data;
                var$2 = var$1.length;
                var$3 = 0;
                while (true) {
                    if (var$3 >= var$2)
                        break a;
                    $c = var$1[var$3];
                    $this.$hashCode = (31 * $this.$hashCode | 0) + $c | 0;
                    var$3 = var$3 + 1 | 0;
                }
            }
        }
        return $this.$hashCode;
    }
    function jl_String_toLowerCase($this) {
        var $codePoints, var$2, $codePointCount, $i, var$5, var$6, var$7;
        if (jl_String_isEmpty($this))
            return $this;
        $codePoints = $rt_createIntArray($this.$characters.data.length);
        var$2 = $codePoints.data;
        $codePointCount = 0;
        $i = 0;
        while (true) {
            var$5 = $this.$characters.data;
            var$6 = var$5.length;
            if ($i >= var$6)
                break;
            a: {
                if ($i != (var$6 - 1 | 0) && jl_Character_isHighSurrogate(var$5[$i])) {
                    var$5 = $this.$characters.data;
                    var$6 = $i + 1 | 0;
                    if (jl_Character_isLowSurrogate(var$5[var$6])) {
                        var$7 = $codePointCount + 1 | 0;
                        var$5 = $this.$characters.data;
                        var$2[$codePointCount] = jl_Character_toLowerCase0(jl_Character_toCodePoint(var$5[$i], var$5[var$6]));
                        $i = var$6;
                        break a;
                    }
                }
                var$7 = $codePointCount + 1 | 0;
                var$2[$codePointCount] = jl_Character_toLowerCase($this.$characters.data[$i]);
            }
            $i = $i + 1 | 0;
            $codePointCount = var$7;
        }
        return jl_String__init_3($codePoints, 0, $codePointCount);
    }
    function jl_String_toUpperCase($this) {
        var $codePoints, var$2, $codePointCount, $i, var$5, var$6, var$7;
        if (jl_String_isEmpty($this))
            return $this;
        $codePoints = $rt_createIntArray($this.$characters.data.length);
        var$2 = $codePoints.data;
        $codePointCount = 0;
        $i = 0;
        while (true) {
            var$5 = $this.$characters.data;
            var$6 = var$5.length;
            if ($i >= var$6)
                break;
            a: {
                if ($i != (var$6 - 1 | 0) && jl_Character_isHighSurrogate(var$5[$i])) {
                    var$5 = $this.$characters.data;
                    var$6 = $i + 1 | 0;
                    if (jl_Character_isLowSurrogate(var$5[var$6])) {
                        var$7 = $codePointCount + 1 | 0;
                        var$5 = $this.$characters.data;
                        var$2[$codePointCount] = jl_Character_toUpperCase(jl_Character_toCodePoint(var$5[$i], var$5[var$6]));
                        $i = var$6;
                        break a;
                    }
                }
                var$7 = $codePointCount + 1 | 0;
                var$2[$codePointCount] = jl_Character_toUpperCase0($this.$characters.data[$i]);
            }
            $i = $i + 1 | 0;
            $codePointCount = var$7;
        }
        return jl_String__init_3($codePoints, 0, $codePointCount);
    }
    function jl_String_split($this, $regex) {
        var var$2, var$3, var$4, var$5, var$6, var$7, var$8, var$9, var$10, var$11, var$12;
        if ($regex === null) {
            $regex = new jl_NullPointerException;
            jl_Throwable__init_($regex, $rt_s(12));
            $rt_throw($regex);
        }
        jur_AbstractSet_counter = 1;
        var$2 = new jur_Pattern;
        var$2.$backRefs = $rt_createArray(jur_FSet, 10);
        var$2.$globalGroupIndex = (-1);
        var$2.$compCount = (-1);
        var$2.$consCount = (-1);
        var$3 = new jur_Lexer;
        var$3.$mode = 1;
        var$3.$orig = $regex;
        var$3.$pattern = $rt_createCharArray(jl_String_length($regex) + 2 | 0);
        jl_System_fastArraycopy(jl_String_toCharArray($regex), 0, var$3.$pattern, 0, jl_String_length($regex));
        var$4 = var$3.$pattern.data;
        var$5 = var$4.length;
        var$4[var$5 - 1 | 0] = 0;
        var$4[var$5 - 2 | 0] = 0;
        var$3.$patternFullLength = var$5;
        var$3.$flags0 = 0;
        jur_Lexer_movePointer(var$3);
        jur_Lexer_movePointer(var$3);
        var$2.$lexemes = var$3;
        var$2.$flags1 = 0;
        var$2.$start = jur_Pattern_processExpression(var$2, (-1), 0, null);
        if (!jur_Lexer_isEmpty(var$2.$lexemes)) {
            $regex = new jur_PatternSyntaxException;
            var$6 = var$2.$lexemes;
            jur_PatternSyntaxException__init_($regex, $rt_s(2), var$6.$orig, var$6.$curToc);
            $rt_throw($regex);
        }
        if (var$2.$needsBackRefReplacement)
            var$2.$start.$processSecondPass();
        $regex = ju_ArrayList__init_();
        var$6 = new jur_Matcher;
        var$6.$leftBound = (-1);
        var$6.$rightBound = (-1);
        var$6.$pat = var$2;
        var$6.$start0 = var$2.$start;
        var$6.$string0 = $this;
        var$6.$leftBound = 0;
        var$5 = jl_String_length($this);
        var$6.$rightBound = var$5;
        var$3 = new jur_MatchResultImpl;
        var$7 = var$6.$leftBound;
        var$8 = var$2.$globalGroupIndex;
        var$9 = var$2.$compCount + 1 | 0;
        var$10 = var$2.$consCount + 1 | 0;
        var$3.$previousMatch = (-1);
        var$11 = var$8 + 1 | 0;
        var$3.$groupCount = var$11;
        var$3.$groupBounds = $rt_createIntArray(var$11 * 2 | 0);
        var$4 = $rt_createIntArray(var$10);
        var$3.$consumers = var$4;
        ju_Arrays_fill(var$4, (-1));
        if (var$9 > 0)
            var$3.$compQuantCounters = $rt_createIntArray(var$9);
        ju_Arrays_fill(var$3.$groupBounds, (-1));
        jur_MatchResultImpl_reset(var$3, $this, var$7, var$5);
        var$6.$matchResult = var$3;
        var$3.$anchoringBounds = 1;
        var$5 = 0;
        var$7 = 0;
        if (!jl_String_length($this)) {
            var$4 = $rt_createArray(jl_String, 1);
            var$4.data[0] = $rt_s(2);
        } else {
            while (jur_Matcher_find(var$6)) {
                var$5 = var$5 + 1 | 0;
                ju_ArrayList_add($regex, jl_String_substring($this, var$7, jur_MatchResultImpl_start(var$6.$matchResult, 0)));
                var$7 = jur_MatchResultImpl_end(var$6.$matchResult, 0);
            }
            ju_ArrayList_add($regex, jl_String_substring($this, var$7, jl_String_length($this)));
            var$12 = var$5 + 1 | 0;
            a: {
                while (true) {
                    var$12 = var$12 + (-1) | 0;
                    if (var$12 < 0)
                        break;
                    if (jl_String_length(ju_ArrayList_get($regex, var$12)))
                        break a;
                    ju_ArrayList_remove($regex, var$12);
                }
            }
            if (var$12 < 0)
                var$12 = 0;
            var$4 = ju_AbstractCollection_toArray($regex, $rt_createArray(jl_String, var$12));
        }
        return var$4;
    }
    function jl_String__clinit_() {
        var var$1, var$2;
        var$1 = $rt_createCharArray(0);
        jl_String_EMPTY_CHARS = var$1;
        var$2 = new jl_String;
        jl_String_$callClinit();
        var$2.$characters = var$1;
        jl_String_EMPTY = var$2;
        jl_String_CASE_INSENSITIVE_ORDER = new jl_String$_clinit_$lambda$_89_0;
    }
    var jl_Error = $rt_classWithoutFields(jl_Throwable);
    var jl_LinkageError = $rt_classWithoutFields(jl_Error);
    var jl_NoClassDefFoundError = $rt_classWithoutFields(jl_LinkageError);
    var jl_Number = $rt_classWithoutFields();
    function jl_Integer() {
        jl_Number.call(this);
        this.$value = 0;
    }
    var jl_Integer_TYPE = null;
    var jl_Integer_integerCache = null;
    function jl_Integer__init_(var_0) {
        var var_1 = new jl_Integer();
        jl_Integer__init_0(var_1, var_0);
        return var_1;
    }
    function jl_Integer__init_0($this, $value) {
        $this.$value = $value;
    }
    function jl_Integer_toHexString($i) {
        var var$2, var$3, var$4, var$5, var$6, var$7;
        if (!$i)
            var$2 = $rt_s(13);
        else {
            var$3 = (((32 - jl_Integer_numberOfLeadingZeros($i) | 0) + 4 | 0) - 1 | 0) / 4 | 0;
            var$4 = $rt_createCharArray(var$3);
            var$5 = var$4.data;
            var$6 = (var$3 - 1 | 0) * 4 | 0;
            var$3 = 0;
            while (var$6 >= 0) {
                var$7 = var$3 + 1 | 0;
                var$5[var$3] = jl_Character_forDigit(($i >>> var$6 | 0) & 15, 16);
                var$6 = var$6 - 4 | 0;
                var$3 = var$7;
            }
            var$2 = jl_String__init_(var$4);
        }
        return var$2;
    }
    function jl_Integer_toString($i) {
        return (jl_AbstractStringBuilder_append0(jl_AbstractStringBuilder__init_0(20), $i, 10)).$toString();
    }
    function jl_Integer_parseInt($s, $radix) {
        var var$3, var$4, var$5, var$6, var$7, var$8, var$9, var$10, var$11;
        if ($s === null) {
            $s = new jl_NumberFormatException;
            jl_Throwable__init_($s, $rt_s(14));
            $rt_throw($s);
        }
        var$3 = jl_String_length($s);
        if (0 == var$3) {
            $s = new jl_NumberFormatException;
            jl_Throwable__init_($s, $rt_s(15));
            $rt_throw($s);
        }
        if ($radix >= 2 && $radix <= 36) {
            a: {
                var$4 = 0;
                switch (jl_String_charAt($s, 0)) {
                    case 43:
                        break;
                    case 45:
                        var$4 = 1;
                        var$5 = 1;
                        break a;
                    default:
                        var$5 = 0;
                        break a;
                }
                var$5 = 1;
            }
            var$6 = 0;
            if (var$5 == var$3) {
                $s = new jl_NumberFormatException;
                jl_Exception__init_($s);
                $rt_throw($s);
            }
            b: {
                c: {
                    while (var$5 < var$3) {
                        var$7 = var$5 + 1 | 0;
                        var$8 = jl_Character_getNumericValue(jl_String_charAt($s, var$5));
                        if (var$8 < 0) {
                            var$9 = new jl_NumberFormatException;
                            $s = jl_String_valueOf(jl_String_substring($s, 0, var$3));
                            var$10 = new jl_StringBuilder;
                            jl_AbstractStringBuilder__init_(var$10);
                            jl_StringBuilder_append(jl_StringBuilder_append(var$10, $rt_s(16)), $s);
                            jl_Throwable__init_(var$9, jl_AbstractStringBuilder_toString(var$10));
                            $rt_throw(var$9);
                        }
                        if (var$8 >= $radix) {
                            var$9 = new jl_NumberFormatException;
                            $s = jl_String_valueOf(jl_String_substring($s, 0, var$3));
                            var$10 = new jl_StringBuilder;
                            jl_AbstractStringBuilder__init_(var$10);
                            jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(var$10, $rt_s(17)), $radix), $rt_s(10)), $s);
                            jl_Throwable__init_(var$9, jl_AbstractStringBuilder_toString(var$10));
                            $rt_throw(var$9);
                        }
                        var$6 = $rt_imul($radix, var$6) + var$8 | 0;
                        if (var$6 < 0) {
                            if (var$7 != var$3)
                                break b;
                            if (var$6 != (-2147483648))
                                break b;
                            if (!var$4)
                                break b;
                            var$6 = (-2147483648);
                            break c;
                        }
                        var$5 = var$7;
                    }
                    if (var$4)
                        var$6 =  -var$6 | 0;
                }
                return var$6;
            }
            var$9 = new jl_NumberFormatException;
            var$10 = jl_String_valueOf(jl_String_substring($s, 0, var$3));
            var$11 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_(var$11);
            jl_StringBuilder_append(jl_StringBuilder_append(var$11, $rt_s(18)), var$10);
            jl_Throwable__init_(var$9, jl_AbstractStringBuilder_toString(var$11));
            $rt_throw(var$9);
        }
        $s = new jl_NumberFormatException;
        var$9 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$9);
        jl_StringBuilder_append0(jl_StringBuilder_append(var$9, $rt_s(19)), $radix);
        jl_Throwable__init_($s, jl_AbstractStringBuilder_toString(var$9));
        $rt_throw($s);
    }
    function jl_Integer_parseInt0($s) {
        return jl_Integer_parseInt($s, 10);
    }
    function jl_Integer_valueOf($i) {
        var var$2, var$3;
        if ($i >= (-128) && $i <= 127) {
            a: {
                if (jl_Integer_integerCache === null) {
                    jl_Integer_integerCache = $rt_createArray(jl_Integer, 256);
                    var$2 = 0;
                    while (true) {
                        var$3 = jl_Integer_integerCache.data;
                        if (var$2 >= var$3.length)
                            break a;
                        var$3[var$2] = jl_Integer__init_(var$2 - 128 | 0);
                        var$2 = var$2 + 1 | 0;
                    }
                }
            }
            return jl_Integer_integerCache.data[$i + 128 | 0];
        }
        return jl_Integer__init_($i);
    }
    function jl_Integer_intValue($this) {
        return $this.$value;
    }
    function jl_Integer_floatValue($this) {
        return $this.$value;
    }
    function jl_Integer_toString0($this) {
        return jl_Integer_toString($this.$value);
    }
    function jl_Integer_hashCode($this) {
        return $this.$value;
    }
    function jl_Integer_equals($this, $other) {
        if ($this === $other)
            return 1;
        return $other instanceof jl_Integer && $other.$value == $this.$value ? 1 : 0;
    }
    function jl_Integer_numberOfLeadingZeros($i) {
        var $n, var$3;
        if (!$i)
            return 32;
        $n = 0;
        var$3 = $i >>> 16 | 0;
        if (var$3)
            $n = 16;
        else
            var$3 = $i;
        $i = var$3 >>> 8 | 0;
        if (!$i)
            $i = var$3;
        else
            $n = $n | 8;
        var$3 = $i >>> 4 | 0;
        if (!var$3)
            var$3 = $i;
        else
            $n = $n | 4;
        $i = var$3 >>> 2 | 0;
        if (!$i)
            $i = var$3;
        else
            $n = $n | 2;
        if ($i >>> 1 | 0)
            $n = $n | 1;
        return (32 - $n | 0) - 1 | 0;
    }
    function jl_Integer_numberOfTrailingZeros($i) {
        var $n, var$3;
        if (!$i)
            return 32;
        $n = 0;
        var$3 = $i << 16;
        if (var$3)
            $n = 16;
        else
            var$3 = $i;
        $i = var$3 << 8;
        if (!$i)
            $i = var$3;
        else
            $n = $n | 8;
        var$3 = $i << 4;
        if (!var$3)
            var$3 = $i;
        else
            $n = $n | 4;
        $i = var$3 << 2;
        if (!$i)
            $i = var$3;
        else
            $n = $n | 2;
        if ($i << 1)
            $n = $n | 1;
        return (32 - $n | 0) - 1 | 0;
    }
    function jl_Integer__clinit_() {
        jl_Integer_TYPE = $rt_cls($rt_intcls());
    }
    function jl_AbstractStringBuilder() {
        var a = this; jl_Object.call(a);
        a.$buffer = null;
        a.$length0 = 0;
    }
    function jl_AbstractStringBuilder__init_1() {
        var var_0 = new jl_AbstractStringBuilder();
        jl_AbstractStringBuilder__init_(var_0);
        return var_0;
    }
    function jl_AbstractStringBuilder__init_0(var_0) {
        var var_1 = new jl_AbstractStringBuilder();
        jl_AbstractStringBuilder__init_2(var_1, var_0);
        return var_1;
    }
    function jl_AbstractStringBuilder__init_($this) {
        jl_AbstractStringBuilder__init_2($this, 16);
    }
    function jl_AbstractStringBuilder__init_2($this, $capacity) {
        $this.$buffer = $rt_createCharArray($capacity);
    }
    function jl_AbstractStringBuilder_append1($this, $string) {
        return $this.$insert($this.$length0, $string);
    }
    function jl_AbstractStringBuilder_insert($this, $index, $string) {
        var $i, var$4, var$5;
        if ($index >= 0 && $index <= $this.$length0) {
            if ($string === null)
                $string = $rt_s(11);
            else if (jl_String_isEmpty($string))
                return $this;
            $this.$ensureCapacity($this.$length0 + jl_String_length($string) | 0);
            $i = $this.$length0 - 1 | 0;
            while ($i >= $index) {
                $this.$buffer.data[$i + jl_String_length($string) | 0] = $this.$buffer.data[$i];
                $i = $i + (-1) | 0;
            }
            $this.$length0 = $this.$length0 + jl_String_length($string) | 0;
            $i = 0;
            while ($i < jl_String_length($string)) {
                var$4 = $this.$buffer.data;
                var$5 = $index + 1 | 0;
                var$4[$index] = jl_String_charAt($string, $i);
                $i = $i + 1 | 0;
                $index = var$5;
            }
            return $this;
        }
        $string = new jl_StringIndexOutOfBoundsException;
        jl_Exception__init_($string);
        $rt_throw($string);
    }
    function jl_AbstractStringBuilder_append0($this, $value, $radix) {
        return jl_AbstractStringBuilder_insert0($this, $this.$length0, $value, $radix);
    }
    function jl_AbstractStringBuilder_insert0($this, $target, $value, $radix) {
        var $positive, var$5, var$6, $pos, $sz, $posLimit, var$10;
        $positive = 1;
        if ($value < 0) {
            $positive = 0;
            $value =  -$value | 0;
        }
        a: {
            if ($rt_ucmp($value, $radix) < 0) {
                if ($positive)
                    jl_AbstractStringBuilder_insertSpace($this, $target, $target + 1 | 0);
                else {
                    jl_AbstractStringBuilder_insertSpace($this, $target, $target + 2 | 0);
                    var$5 = $this.$buffer.data;
                    var$6 = $target + 1 | 0;
                    var$5[$target] = 45;
                    $target = var$6;
                }
                $this.$buffer.data[$target] = jl_Character_forDigit($value, $radix);
            } else {
                $pos = 1;
                $sz = 1;
                $posLimit = $rt_udiv((-1), $radix);
                b: {
                    while (true) {
                        var$10 = $rt_imul($pos, $radix);
                        if ($rt_ucmp(var$10, $value) > 0) {
                            var$10 = $pos;
                            break b;
                        }
                        $sz = $sz + 1 | 0;
                        if ($rt_ucmp(var$10, $posLimit) > 0)
                            break;
                        $pos = var$10;
                    }
                }
                if (!$positive)
                    $sz = $sz + 1 | 0;
                jl_AbstractStringBuilder_insertSpace($this, $target, $target + $sz | 0);
                if ($positive)
                    $positive = $target;
                else {
                    var$5 = $this.$buffer.data;
                    $positive = $target + 1 | 0;
                    var$5[$target] = 45;
                }
                while (true) {
                    if (!var$10)
                        break a;
                    var$5 = $this.$buffer.data;
                    $target = $positive + 1 | 0;
                    var$5[$positive] = jl_Character_forDigit($rt_udiv($value, var$10), $radix);
                    $value = $rt_umod($value, var$10);
                    var$10 = $rt_udiv(var$10, $radix);
                    $positive = $target;
                }
            }
        }
        return $this;
    }
    function jl_AbstractStringBuilder_insert1($this, $target, $value) {
        var $mantissa, var$4, $number, $exp, $negative, $intPart, $sz, $digits, $zeros, $leadingZeros, $leadingZero, $pos, $intDigit, $i;
        $mantissa = $rt_compare($value, 0.0);
        if (!$mantissa) {
            if (1.0 / $value === Infinity) {
                jl_AbstractStringBuilder_insertSpace($this, $target, $target + 3 | 0);
                var$4 = $this.$buffer.data;
                $mantissa = $target + 1 | 0;
                var$4[$target] = 48;
                $target = $mantissa + 1 | 0;
                var$4[$mantissa] = 46;
                var$4[$target] = 48;
                return $this;
            }
            jl_AbstractStringBuilder_insertSpace($this, $target, $target + 4 | 0);
            var$4 = $this.$buffer.data;
            $mantissa = $target + 1 | 0;
            var$4[$target] = 45;
            $target = $mantissa + 1 | 0;
            var$4[$mantissa] = 48;
            $mantissa = $target + 1 | 0;
            var$4[$target] = 46;
            var$4[$mantissa] = 48;
            return $this;
        }
        if ($rt_globals.isNaN($value) ? 1 : 0) {
            jl_AbstractStringBuilder_insertSpace($this, $target, $target + 3 | 0);
            var$4 = $this.$buffer.data;
            $mantissa = $target + 1 | 0;
            var$4[$target] = 78;
            $target = $mantissa + 1 | 0;
            var$4[$mantissa] = 97;
            var$4[$target] = 78;
            return $this;
        }
        if (!$rt_globals.isFinite($value) ? 1 : 0) {
            if ($mantissa > 0) {
                jl_AbstractStringBuilder_insertSpace($this, $target, $target + 8 | 0);
                $mantissa = $target;
            } else {
                jl_AbstractStringBuilder_insertSpace($this, $target, $target + 9 | 0);
                var$4 = $this.$buffer.data;
                $mantissa = $target + 1 | 0;
                var$4[$target] = 45;
            }
            var$4 = $this.$buffer.data;
            $target = $mantissa + 1 | 0;
            var$4[$mantissa] = 73;
            $mantissa = $target + 1 | 0;
            var$4[$target] = 110;
            $target = $mantissa + 1 | 0;
            var$4[$mantissa] = 102;
            $mantissa = $target + 1 | 0;
            var$4[$target] = 105;
            $target = $mantissa + 1 | 0;
            var$4[$mantissa] = 110;
            $mantissa = $target + 1 | 0;
            var$4[$target] = 105;
            $target = $mantissa + 1 | 0;
            var$4[$mantissa] = 116;
            var$4[$target] = 121;
            return $this;
        }
        $number = jl_AbstractStringBuilder$Constants_floatAnalysisResult;
        otcit_FloatAnalyzer_analyze($value, $number);
        $mantissa = $number.$mantissa;
        $exp = $number.$exponent;
        $negative = $number.$sign;
        $intPart = 1;
        $sz = 1;
        if ($negative)
            $sz = 2;
        $digits = 9;
        $zeros = jl_AbstractStringBuilder_trailingDecimalZeros($mantissa);
        if ($zeros > 0)
            $digits = $digits - $zeros | 0;
        $leadingZeros = 0;
        $leadingZero = 0;
        if ($exp < 7 && $exp >= (-3)) {
            if ($exp >= 0) {
                $intPart = $exp + 1 | 0;
                $digits = jl_Math_max($digits, $intPart + 1 | 0);
                $exp = 0;
            } else {
                $intPart = 0;
                $leadingZeros = ( -$exp | 0) - 1 | 0;
                $leadingZero = 1;
                $sz = $sz + 1 | 0;
                $exp = 0;
            }
        }
        if ($exp) {
            $sz = $sz + 2 | 0;
            if (!($exp > (-10) && $exp < 10))
                $sz = $sz + 1 | 0;
            if ($exp < 0)
                $sz = $sz + 1 | 0;
        }
        if ($exp && $digits == $intPart)
            $digits = $digits + 1 | 0;
        jl_AbstractStringBuilder_insertSpace($this, $target, $target + ($sz + ($digits + $leadingZeros | 0) | 0) | 0);
        if (!$negative)
            $negative = $target;
        else {
            var$4 = $this.$buffer.data;
            $negative = $target + 1 | 0;
            var$4[$target] = 45;
        }
        $pos = 100000000;
        if ($leadingZero) {
            var$4 = $this.$buffer.data;
            $target = $negative + 1 | 0;
            var$4[$negative] = 48;
            $negative = $target + 1 | 0;
            var$4[$target] = 46;
            while (true) {
                $target = $leadingZeros + (-1) | 0;
                if ($leadingZeros <= 0)
                    break;
                $intDigit = $negative + 1 | 0;
                var$4[$negative] = 48;
                $leadingZeros = $target;
                $negative = $intDigit;
            }
        }
        $i = 0;
        while ($i < $digits) {
            if ($pos <= 0)
                $intDigit = 0;
            else {
                $intDigit = $mantissa / $pos | 0;
                $mantissa = $mantissa % $pos | 0;
            }
            var$4 = $this.$buffer.data;
            $target = $negative + 1 | 0;
            var$4[$negative] = (48 + $intDigit | 0) & 65535;
            $intPart = $intPart + (-1) | 0;
            if ($intPart)
                $negative = $target;
            else {
                $negative = $target + 1 | 0;
                var$4[$target] = 46;
            }
            $pos = $pos / 10 | 0;
            $i = $i + 1 | 0;
        }
        if ($exp) {
            var$4 = $this.$buffer.data;
            $target = $negative + 1 | 0;
            var$4[$negative] = 69;
            if ($exp >= 0)
                $mantissa = $target;
            else {
                $exp =  -$exp | 0;
                $mantissa = $target + 1 | 0;
                var$4[$target] = 45;
            }
            if ($exp < 10)
                $intDigit = $mantissa;
            else {
                $intDigit = $mantissa + 1 | 0;
                var$4[$mantissa] = (48 + ($exp / 10 | 0) | 0) & 65535;
            }
            var$4[$intDigit] = (48 + ($exp % 10 | 0) | 0) & 65535;
        }
        return $this;
    }
    function jl_AbstractStringBuilder_insert2($this, $target, $value) {
        var $intDigit, var$4, $number, $mantissa, $exp, $negative, $intPart, $sz, $digits, $zeros, $leadingZeros, $leadingZero, $pos, $i;
        $intDigit = $rt_compare($value, 0.0);
        if (!$intDigit) {
            if (1.0 / $value === Infinity) {
                jl_AbstractStringBuilder_insertSpace($this, $target, $target + 3 | 0);
                var$4 = $this.$buffer.data;
                $intDigit = $target + 1 | 0;
                var$4[$target] = 48;
                $target = $intDigit + 1 | 0;
                var$4[$intDigit] = 46;
                var$4[$target] = 48;
                return $this;
            }
            jl_AbstractStringBuilder_insertSpace($this, $target, $target + 4 | 0);
            var$4 = $this.$buffer.data;
            $intDigit = $target + 1 | 0;
            var$4[$target] = 45;
            $target = $intDigit + 1 | 0;
            var$4[$intDigit] = 48;
            $intDigit = $target + 1 | 0;
            var$4[$target] = 46;
            var$4[$intDigit] = 48;
            return $this;
        }
        if ($rt_globals.isNaN($value) ? 1 : 0) {
            jl_AbstractStringBuilder_insertSpace($this, $target, $target + 3 | 0);
            var$4 = $this.$buffer.data;
            $intDigit = $target + 1 | 0;
            var$4[$target] = 78;
            $target = $intDigit + 1 | 0;
            var$4[$intDigit] = 97;
            var$4[$target] = 78;
            return $this;
        }
        if (!$rt_globals.isFinite($value) ? 1 : 0) {
            if ($intDigit > 0) {
                jl_AbstractStringBuilder_insertSpace($this, $target, $target + 8 | 0);
                $intDigit = $target;
            } else {
                jl_AbstractStringBuilder_insertSpace($this, $target, $target + 9 | 0);
                var$4 = $this.$buffer.data;
                $intDigit = $target + 1 | 0;
                var$4[$target] = 45;
            }
            var$4 = $this.$buffer.data;
            $target = $intDigit + 1 | 0;
            var$4[$intDigit] = 73;
            $intDigit = $target + 1 | 0;
            var$4[$target] = 110;
            $target = $intDigit + 1 | 0;
            var$4[$intDigit] = 102;
            $intDigit = $target + 1 | 0;
            var$4[$target] = 105;
            $target = $intDigit + 1 | 0;
            var$4[$intDigit] = 110;
            $intDigit = $target + 1 | 0;
            var$4[$target] = 105;
            $target = $intDigit + 1 | 0;
            var$4[$intDigit] = 116;
            var$4[$target] = 121;
            return $this;
        }
        $number = jl_AbstractStringBuilder$Constants_doubleAnalysisResult;
        otcit_DoubleAnalyzer_analyze($value, $number);
        $mantissa = $number.$mantissa0;
        $exp = $number.$exponent0;
        $negative = $number.$sign0;
        $intPart = 1;
        $sz = 1;
        if ($negative)
            $sz = 2;
        $digits = 18;
        $zeros = jl_AbstractStringBuilder_trailingDecimalZeros0($mantissa);
        if ($zeros > 0)
            $digits = $digits - $zeros | 0;
        $leadingZeros = 0;
        $leadingZero = 0;
        if ($exp < 7 && $exp >= (-3)) {
            if ($exp >= 0) {
                $intPart = $exp + 1 | 0;
                $digits = jl_Math_max($digits, $intPart + 1 | 0);
                $exp = 0;
            } else {
                $intPart = 0;
                $leadingZeros = ( -$exp | 0) - 1 | 0;
                $leadingZero = 1;
                $sz = $sz + 1 | 0;
                $exp = 0;
            }
        }
        if ($exp) {
            $sz = $sz + 2 | 0;
            if (!($exp > (-10) && $exp < 10))
                $sz = $sz + 1 | 0;
            if (!($exp > (-100) && $exp < 100))
                $sz = $sz + 1 | 0;
            if ($exp < 0)
                $sz = $sz + 1 | 0;
        }
        if ($exp && $digits == $intPart)
            $digits = $digits + 1 | 0;
        jl_AbstractStringBuilder_insertSpace($this, $target, $target + ($sz + ($digits + $leadingZeros | 0) | 0) | 0);
        if (!$negative)
            $sz = $target;
        else {
            var$4 = $this.$buffer.data;
            $sz = $target + 1 | 0;
            var$4[$target] = 45;
        }
        $pos = Long_create(1569325056, 23283064);
        if ($leadingZero) {
            var$4 = $this.$buffer.data;
            $target = $sz + 1 | 0;
            var$4[$sz] = 48;
            $sz = $target + 1 | 0;
            var$4[$target] = 46;
            while (true) {
                $target = $leadingZeros + (-1) | 0;
                if ($leadingZeros <= 0)
                    break;
                $intDigit = $sz + 1 | 0;
                var$4[$sz] = 48;
                $leadingZeros = $target;
                $sz = $intDigit;
            }
        }
        $i = 0;
        while ($i < $digits) {
            if (Long_le($pos, Long_ZERO))
                $intDigit = 0;
            else {
                $intDigit = Long_lo(Long_div($mantissa, $pos));
                $mantissa = Long_rem($mantissa, $pos);
            }
            var$4 = $this.$buffer.data;
            $target = $sz + 1 | 0;
            var$4[$sz] = (48 + $intDigit | 0) & 65535;
            $intPart = $intPart + (-1) | 0;
            if ($intPart)
                $sz = $target;
            else {
                $sz = $target + 1 | 0;
                var$4[$target] = 46;
            }
            $pos = Long_div($pos, Long_fromInt(10));
            $i = $i + 1 | 0;
        }
        if ($exp) {
            var$4 = $this.$buffer.data;
            $negative = $sz + 1 | 0;
            var$4[$sz] = 69;
            if ($exp >= 0)
                $intDigit = $negative;
            else {
                $exp =  -$exp | 0;
                $intDigit = $negative + 1 | 0;
                var$4[$negative] = 45;
            }
            if ($exp >= 100) {
                $target = $intDigit + 1 | 0;
                var$4[$intDigit] = (48 + ($exp / 100 | 0) | 0) & 65535;
                $exp = $exp % 100 | 0;
                $negative = $target + 1 | 0;
                var$4[$target] = (48 + ($exp / 10 | 0) | 0) & 65535;
            } else if ($exp < 10)
                $negative = $intDigit;
            else {
                $negative = $intDigit + 1 | 0;
                var$4[$intDigit] = (48 + ($exp / 10 | 0) | 0) & 65535;
            }
            var$4[$negative] = (48 + ($exp % 10 | 0) | 0) & 65535;
        }
        return $this;
    }
    function jl_AbstractStringBuilder_trailingDecimalZeros($n) {
        var $result, $zeros, var$4;
        if (!($n % 1000000000 | 0))
            return 9;
        $result = 0;
        $zeros = 1;
        if (!($n % 100000000 | 0)) {
            $result = 8;
            $zeros = 100000000;
        }
        var$4 = $zeros * 10000 | 0;
        if ($n % var$4 | 0)
            var$4 = $zeros;
        else
            $result = $result | 4;
        $zeros = var$4 * 100 | 0;
        if ($n % $zeros | 0)
            $zeros = var$4;
        else
            $result = $result | 2;
        if (!($n % ($zeros * 10 | 0) | 0))
            $result = $result | 1;
        return $result;
    }
    function jl_AbstractStringBuilder_trailingDecimalZeros0($n) {
        var $zeros, $result, $bit, var$5, $i;
        $zeros = Long_fromInt(1);
        $result = 0;
        $bit = 16;
        var$5 = jl_AbstractStringBuilder$Constants_longLogPowersOfTen.data;
        $i = var$5.length - 1 | 0;
        while ($i >= 0) {
            if (Long_eq(Long_rem($n, Long_mul($zeros, var$5[$i])), Long_ZERO)) {
                $result = $result | $bit;
                $zeros = Long_mul($zeros, var$5[$i]);
            }
            $bit = $bit >>> 1 | 0;
            $i = $i + (-1) | 0;
        }
        return $result;
    }
    function jl_AbstractStringBuilder_append($this, $c) {
        return $this.$insert1($this.$length0, $c);
    }
    function jl_AbstractStringBuilder_insert3($this, $index, $c) {
        jl_AbstractStringBuilder_insertSpace($this, $index, $index + 1 | 0);
        $this.$buffer.data[$index] = $c;
        return $this;
    }
    function jl_AbstractStringBuilder_ensureCapacity($this, $capacity) {
        var var$2, $newLength;
        var$2 = $this.$buffer.data.length;
        if (var$2 >= $capacity)
            return;
        $newLength = var$2 >= 1073741823 ? 2147483647 : jl_Math_max($capacity, jl_Math_max(var$2 * 2 | 0, 5));
        $this.$buffer = ju_Arrays_copyOf0($this.$buffer, $newLength);
    }
    function jl_AbstractStringBuilder_toString($this) {
        return jl_String__init_1($this.$buffer, 0, $this.$length0);
    }
    function jl_AbstractStringBuilder_length($this) {
        return $this.$length0;
    }
    function jl_AbstractStringBuilder_charAt($this, $index) {
        var var$2;
        if ($index >= 0 && $index < $this.$length0)
            return $this.$buffer.data[$index];
        var$2 = new jl_IndexOutOfBoundsException;
        jl_Exception__init_(var$2);
        $rt_throw(var$2);
    }
    function jl_AbstractStringBuilder_append2($this, $chars, $offset, $len) {
        return $this.$insert2($this.$length0, $chars, $offset, $len);
    }
    function jl_AbstractStringBuilder_insert4($this, $index, $chars, $offset, $len) {
        var var$5, var$6, var$7, var$8;
        jl_AbstractStringBuilder_insertSpace($this, $index, $index + $len | 0);
        var$5 = $len + $offset | 0;
        while ($offset < var$5) {
            var$6 = $chars.data;
            var$7 = $this.$buffer.data;
            $len = $index + 1 | 0;
            var$8 = $offset + 1 | 0;
            var$7[$index] = var$6[$offset];
            $index = $len;
            $offset = var$8;
        }
        return $this;
    }
    function jl_AbstractStringBuilder_append3($this, $chars) {
        return $this.$append3($chars, 0, $chars.data.length);
    }
    function jl_AbstractStringBuilder_insertSpace($this, $start, $end) {
        var var$3, $sz, $i, var$6;
        var$3 = $this.$length0;
        $sz = var$3 - $start | 0;
        $this.$ensureCapacity((var$3 + $end | 0) - $start | 0);
        $i = $sz - 1 | 0;
        while ($i >= 0) {
            var$6 = $this.$buffer.data;
            var$6[$end + $i | 0] = var$6[$start + $i | 0];
            $i = $i + (-1) | 0;
        }
        $this.$length0 = $this.$length0 + ($end - $start | 0) | 0;
    }
    var jl_Appendable = $rt_classWithoutFields(0);
    var jl_StringBuilder = $rt_classWithoutFields(jl_AbstractStringBuilder);
    function jl_StringBuilder__init_() {
        var var_0 = new jl_StringBuilder();
        jl_StringBuilder__init_0(var_0);
        return var_0;
    }
    function jl_StringBuilder__init_0($this) {
        jl_AbstractStringBuilder__init_($this);
    }
    function jl_StringBuilder_append($this, $obj) {
        jl_AbstractStringBuilder_insert($this, $this.$length0, $obj === null ? $rt_s(11) : $obj.$toString());
        return $this;
    }
    function jl_StringBuilder_append1($this, $string) {
        jl_AbstractStringBuilder_append1($this, $string);
        return $this;
    }
    function jl_StringBuilder_append0($this, $value) {
        jl_AbstractStringBuilder_append0($this, $value, 10);
        return $this;
    }
    function jl_StringBuilder_append2($this, $value) {
        var var$2, var$3, var$4, var$5, var$6, var$7, var$8, var$9;
        var$2 = $this.$length0;
        var$3 = 1;
        if (Long_lt($value, Long_ZERO)) {
            var$3 = 0;
            $value = Long_neg($value);
        }
        a: {
            if (jl_Long_compareUnsigned($value, Long_fromInt(10)) < 0) {
                if (var$3)
                    jl_AbstractStringBuilder_insertSpace($this, var$2, var$2 + 1 | 0);
                else {
                    jl_AbstractStringBuilder_insertSpace($this, var$2, var$2 + 2 | 0);
                    var$4 = $this.$buffer.data;
                    var$5 = var$2 + 1 | 0;
                    var$4[var$2] = 45;
                    var$2 = var$5;
                }
                $this.$buffer.data[var$2] = jl_Character_forDigit(Long_lo($value), 10);
            } else {
                var$6 = 1;
                var$7 = Long_fromInt(1);
                var$8 = jl_Long_divideUnsigned(Long_fromInt(-1), Long_fromInt(10));
                b: {
                    while (true) {
                        var$9 = Long_mul(var$7, Long_fromInt(10));
                        if (jl_Long_compareUnsigned(var$9, $value) > 0) {
                            var$9 = var$7;
                            break b;
                        }
                        var$6 = var$6 + 1 | 0;
                        if (jl_Long_compareUnsigned(var$9, var$8) > 0)
                            break;
                        var$7 = var$9;
                    }
                }
                if (!var$3)
                    var$6 = var$6 + 1 | 0;
                jl_AbstractStringBuilder_insertSpace($this, var$2, var$2 + var$6 | 0);
                if (var$3)
                    var$5 = var$2;
                else {
                    var$4 = $this.$buffer.data;
                    var$5 = var$2 + 1 | 0;
                    var$4[var$2] = 45;
                }
                while (true) {
                    if (Long_eq(var$9, Long_ZERO))
                        break a;
                    var$4 = $this.$buffer.data;
                    var$2 = var$5 + 1 | 0;
                    var$4[var$5] = jl_Character_forDigit(Long_lo((jl_Long_divideUnsigned($value, var$9))), 10);
                    $value = jl_Long_remainderUnsigned($value, var$9);
                    var$9 = jl_Long_divideUnsigned(var$9, Long_fromInt(10));
                    var$5 = var$2;
                }
            }
        }
        return $this;
    }
    function jl_StringBuilder_append3($this, $c) {
        jl_AbstractStringBuilder_append($this, $c);
        return $this;
    }
    function jl_StringBuilder_append4($this, $b) {
        jl_AbstractStringBuilder_insert($this, $this.$length0, !$b ? $rt_s(20) : $rt_s(21));
        return $this;
    }
    function jl_StringBuilder_delete($this, $start, $end) {
        var var$3, var$4, var$5, var$6, var$7, var$8;
        var$3 = $rt_compare($start, $end);
        if (var$3 <= 0) {
            var$4 = $this.$length0;
            if ($start <= var$4) {
                if (var$3) {
                    var$5 = var$4 - $end | 0;
                    $this.$length0 = var$4 - ($end - $start | 0) | 0;
                    var$6 = 0;
                    while (var$6 < var$5) {
                        var$7 = $this.$buffer.data;
                        var$4 = $start + 1 | 0;
                        var$3 = $end + 1 | 0;
                        var$7[$start] = var$7[$end];
                        var$6 = var$6 + 1 | 0;
                        $start = var$4;
                        $end = var$3;
                    }
                }
                return $this;
            }
        }
        var$8 = new jl_StringIndexOutOfBoundsException;
        jl_Exception__init_(var$8);
        $rt_throw(var$8);
    }
    function jl_StringBuilder_deleteCharAt($this, $index) {
        var var$2, var$3, var$4, var$5;
        if ($index >= 0) {
            var$2 = $this.$length0;
            if ($index < var$2) {
                var$2 = var$2 - 1 | 0;
                $this.$length0 = var$2;
                while ($index < var$2) {
                    var$3 = $this.$buffer.data;
                    var$4 = $index + 1 | 0;
                    var$3[$index] = var$3[var$4];
                    $index = var$4;
                }
                return $this;
            }
        }
        var$5 = new jl_StringIndexOutOfBoundsException;
        jl_Exception__init_(var$5);
        $rt_throw(var$5);
    }
    function jl_StringBuilder_insert($this, var$1, var$2, var$3, var$4) {
        jl_AbstractStringBuilder_insert4($this, var$1, var$2, var$3, var$4);
        return $this;
    }
    function jl_StringBuilder_append5($this, var$1, var$2, var$3) {
        jl_AbstractStringBuilder_append2($this, var$1, var$2, var$3);
        return $this;
    }
    function jl_StringBuilder_charAt($this, var$1) {
        return jl_AbstractStringBuilder_charAt($this, var$1);
    }
    function jl_StringBuilder_length($this) {
        return $this.$length0;
    }
    function jl_StringBuilder_toString($this) {
        return jl_AbstractStringBuilder_toString($this);
    }
    function jl_StringBuilder_ensureCapacity($this, var$1) {
        jl_AbstractStringBuilder_ensureCapacity($this, var$1);
    }
    function jl_StringBuilder_insert0($this, var$1, var$2) {
        jl_AbstractStringBuilder_insert3($this, var$1, var$2);
        return $this;
    }
    function jl_StringBuilder_insert1($this, var$1, var$2) {
        jl_AbstractStringBuilder_insert($this, var$1, var$2);
        return $this;
    }
    var jl_IncompatibleClassChangeError = $rt_classWithoutFields(jl_LinkageError);
    var jl_NoSuchFieldError = $rt_classWithoutFields(jl_IncompatibleClassChangeError);
    function jl_NoSuchFieldError__init_(var_0) {
        var var_1 = new jl_NoSuchFieldError();
        jl_NoSuchFieldError__init_0(var_1, var_0);
        return var_1;
    }
    function jl_NoSuchFieldError__init_0($this, $message) {
        jl_Throwable__init_($this, $message);
    }
    var jl_NoSuchMethodError = $rt_classWithoutFields(jl_IncompatibleClassChangeError);
    function jl_NoSuchMethodError__init_(var_0) {
        var var_1 = new jl_NoSuchMethodError();
        jl_NoSuchMethodError__init_0(var_1, var_0);
        return var_1;
    }
    function jl_NoSuchMethodError__init_0($this, $message) {
        jl_Throwable__init_($this, $message);
    }
    var otj_JSObject = $rt_classWithoutFields(0);
    var otjdx_Node = $rt_classWithoutFields(0);
    var otjdx_Document = $rt_classWithoutFields(0);
    var otjde_EventTarget = $rt_classWithoutFields(0);
    var otjdh_HTMLDocument = $rt_classWithoutFields(0);
    var tj_Runner = $rt_classWithoutFields();
    function tj_Runner_convertString($string, $projName, $translateTo) {
        var $variables, $statements, $lines, $translator, $javaFile, $line;
        $variables = tj_Variables__init_();
        $statements = tj_Parser_parse(tj_Parser__init_($string, $variables));
        $lines = ju_ArrayList__init_();
        if (jl_String_equals($translateTo, $rt_s(4))) {
            $translator = new tj_JavaTranslator;
            $translator.$lineNumber0 = 0;
            $translator.$tabCount = 2;
            $translator.$javaLines = ju_ArrayList__init_();
            $translator.$javaImports = ju_ArrayList__init_();
            $translator.$javaMain = ju_ArrayList__init_();
            $translator.$publicVarDeclarations = ju_ArrayList__init_();
            $translator.$usedJOptionPane = 0;
            $translator.$usedList = 0;
            $translator.$globalVariables0 = $variables;
            $translator.$projName = $projName;
            tj_JavaTranslator_interpretFunction($translator, $statements.$body, null, null, $rt_s(22), 1, 1);
            $lines = ju_ArrayList__init_();
            $string = ju_AbstractList_iterator($translator.$javaImports);
            while (ju_AbstractList$1_hasNext($string)) {
                ju_ArrayList_add($lines, ju_AbstractList$1_next($string));
            }
            $string = $translator.$projName;
            $projName = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($projName);
            jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($projName, $rt_s(23)), $string), $rt_s(24));
            ju_ArrayList_add($lines, jl_AbstractStringBuilder_toString($projName));
            $string = ju_AbstractList_iterator($translator.$publicVarDeclarations);
            while (ju_AbstractList$1_hasNext($string)) {
                ju_ArrayList_add($lines, ju_AbstractList$1_next($string));
            }
            ju_ArrayList_add($lines, $rt_s(25));
            $string = ju_AbstractList_iterator($translator.$javaMain);
            while (ju_AbstractList$1_hasNext($string)) {
                ju_ArrayList_add($lines, ju_AbstractList$1_next($string));
            }
            ju_ArrayList_add($lines, $rt_s(26));
            $string = ju_AbstractList_iterator($translator.$javaLines);
            while (ju_AbstractList$1_hasNext($string)) {
                ju_ArrayList_add($lines, ju_AbstractList$1_next($string));
            }
            ju_ArrayList_add($lines, $rt_s(27));
        } else if (jl_String_equals($translateTo, $rt_s(5))) {
            $translator = new tj_PythonTranslator;
            $translator.$lineNumber1 = 0;
            $translator.$tabCount0 = 0;
            $translator.$javaLines0 = ju_ArrayList__init_();
            $translator.$javaImports0 = ju_ArrayList__init_();
            $translator.$usedJOptionPane0 = 0;
            $translator.$usedList0 = 0;
            $translator.$usedMessageBox = 0;
            $translator.$usingRobot = 0;
            $translator.$usedRMove = 0;
            $translator.$usedRSpeak = 0;
            $translator.$usedRPosture = 0;
            $translator.$usedRLED = 0;
            $translator.$usedRMemory = 0;
            $translator.$usedRAudio = 0;
            $translator.$usedRPhoto = 0;
            $translator.$usedRSocket = 0;
            $translator.$globalVariables1 = $variables;
            $translator.$projName0 = $projName;
            tj_PythonTranslator_interpretFunction($translator, $statements.$body, null, null, $rt_s(22), 1, 1);
            $lines = tj_PythonTranslator_getPythonLines($translator);
        }
        tj_Runner_printJavaLines($lines);
        $javaFile = $rt_s(2);
        $string = ju_AbstractList_iterator($lines);
        while (ju_AbstractList$1_hasNext($string)) {
            $line = ju_AbstractList$1_next($string);
            $projName = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($projName);
            jl_AbstractStringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($projName, $javaFile), $line), 10);
            $javaFile = jl_AbstractStringBuilder_toString($projName);
        }
        ji_PrintStream_println(jl_System_out(), $javaFile);
        return $javaFile;
    }
    function tj_Runner_runRobotString($string, $robotIP, $serverIP) {
        var $variables, $statements, $translator, $lines, $pythonFile, $line, $encodedFile, $url, var$12, var$13, $$je, $ptr, $tmp;
        $ptr = 0;
        if ($rt_resuming()) {
            var $thread = $rt_nativeThread();
            $ptr = $thread.pop();var$13 = $thread.pop();var$12 = $thread.pop();$url = $thread.pop();$encodedFile = $thread.pop();$line = $thread.pop();$pythonFile = $thread.pop();$lines = $thread.pop();$translator = $thread.pop();$statements = $thread.pop();$variables = $thread.pop();$serverIP = $thread.pop();$robotIP = $thread.pop();$string = $thread.pop();
        }
        main: while (true) { switch ($ptr) {
        case 0:
            $variables = tj_Variables__init_();
            $statements = tj_Parser_parse(tj_Parser__init_($string, $variables));
            $translator = new tj_PythonTranslator;
            $translator.$lineNumber1 = 0;
            $translator.$tabCount0 = 0;
            $translator.$javaLines0 = ju_ArrayList__init_();
            $translator.$javaImports0 = ju_ArrayList__init_();
            $translator.$usedJOptionPane0 = 0;
            $translator.$usedList0 = 0;
            $translator.$usedMessageBox = 0;
            $translator.$usingRobot = 0;
            $translator.$usedRMove = 0;
            $translator.$usedRSpeak = 0;
            $translator.$usedRPosture = 0;
            $translator.$usedRLED = 0;
            $translator.$usedRMemory = 0;
            $translator.$usedRAudio = 0;
            $translator.$usedRPhoto = 0;
            $translator.$usedRSocket = 0;
            $translator.$globalVariables1 = $variables;
            $translator.$projName0 = $rt_s(2);
            $translator.$robotIP = $robotIP;
            tj_PythonTranslator_interpretFunction($translator, $statements.$body, null, null, $rt_s(22), 1, 1);
            $lines = tj_PythonTranslator_getPythonLines($translator);
            tj_Runner_printJavaLines($lines);
            $pythonFile = $rt_s(2);
            $string = ju_AbstractList_iterator($lines);
            while (ju_AbstractList$1_hasNext($string)) {
                $line = ju_AbstractList$1_next($string);
                $robotIP = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_($robotIP);
                jl_AbstractStringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($robotIP, $pythonFile), $line), 10);
                $pythonFile = jl_AbstractStringBuilder_toString($robotIP);
            }
            ji_PrintStream_println(jl_System_out(), $pythonFile);
            ju_Objects_requireNonNull($pythonFile);
            ju_Objects_requireNonNull($rt_s(28));
            a: {
                try {
                    $encodedFile = jn_URLEncoder_encode($pythonFile, jnc_Charset_forName($rt_s(28)));
                    break a;
                } catch ($$e) {
                    $$je = $rt_wrapException($$e);
                    if ($$je instanceof jnc_UnsupportedCharsetException) {
                    } else {
                        throw $$e;
                    }
                }
                $robotIP = new ji_UnsupportedEncodingException;
                jl_Throwable__init_($robotIP, $rt_s(28));
                $rt_throw($robotIP);
            }
            $string = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($string);
            jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($string, $rt_s(29)), $serverIP), $rt_s(30)), $encodedFile);
            $serverIP = jl_AbstractStringBuilder_toString($string);
            ji_PrintStream_println(jl_System_out(), $serverIP);
            $url = jn_URL__init_(null, $serverIP, null);
            $serverIP = $url.$strmHandler.$openConnection($url);
            if ($serverIP.$connected) {
                $string = new jn_ProtocolException;
                jl_Exception__init_($string);
                $rt_throw($string);
            }
            var$12 = 0;
            while (true) {
                var$13 = $serverIP.$methodTokens.data;
                if (var$12 >= var$13.length)
                    break;
                if (jl_String_equals(var$13[var$12], $rt_s(31))) {
                    $serverIP.$method = $serverIP.$methodTokens.data[var$12];
                    jni_XHRURLConnection_connect($serverIP);
                    if ($serverIP.$requestPerformed) {
                        jni_XHRURLConnection_connect($serverIP);
                        var$12 = $serverIP.$responseCode;
                        ji_PrintStream_println0(jl_System_out(), var$12);
                        return;
                    }
                    $serverIP.$requestPerformed = 1;
                    $ptr = 1;
                    continue main;
                }
                var$12 = var$12 + 1 | 0;
            }
            $string = new jn_ProtocolException;
            jl_Exception__init_($string);
            $rt_throw($string);
        case 1:
            jni_XHRURLConnection_performRequest($serverIP);
            if ($rt_suspending()) {
                break main;
            }
            jni_XHRURLConnection_connect($serverIP);
            var$12 = $serverIP.$responseCode;
            ji_PrintStream_println0(jl_System_out(), var$12);
            return;
        default: $rt_invalidPointer();
        }}
        $rt_nativeThread().push($string, $robotIP, $serverIP, $variables, $statements, $translator, $lines, $pythonFile, $line, $encodedFile, $url, var$12, var$13, $ptr);
    }
    function tj_Runner_debugString($string, $oldState) {
        var $variables, $variables1, $statements, $debugger, var$7, $newState, $ptr, $tmp;
        $ptr = 0;
        if ($rt_resuming()) {
            var $thread = $rt_nativeThread();
            $ptr = $thread.pop();$newState = $thread.pop();var$7 = $thread.pop();$debugger = $thread.pop();$statements = $thread.pop();$variables1 = $thread.pop();$variables = $thread.pop();$oldState = $thread.pop();$string = $thread.pop();
        }
        main: while (true) { switch ($ptr) {
        case 0:
            $variables = tj_Variables__init_();
            $variables1 = tj_Variables__init_();
            $statements = tj_Parser_parse(tj_Parser__init_($string, $variables));
            ji_PrintStream_println1(jl_System_out(), $statements.$body);
            tj_Runner_printStmts($statements.$body, 0);
            if ($oldState !== null)
                $oldState.$statements = $statements.$body;
            else
                $oldState = tj_State__init_($statements.$body, $variables, $variables1, tj_Result__init_(0), tj_Return__init_(0, null), 0, 1, 0, 0, 0, 0, 0, 0);
            $debugger = new tj_Debugger;
            $debugger.$lineNumber2 = 0;
            $debugger.$inForWhenLoop = 0;
            $debugger.$forIndex = 0;
            var$7 = $oldState.$currentLine;
            $ptr = 1;
        case 1:
            $tmp = tj_Debugger_debugLine($debugger, var$7, $oldState);
            if ($rt_suspending()) {
                break main;
            }
            $newState = $tmp;
            return $newState;
        default: $rt_invalidPointer();
        }}
        $rt_nativeThread().push($string, $oldState, $variables, $variables1, $statements, $debugger, var$7, $newState, $ptr);
    }
    function tj_Runner_printJavaLines($lines) {
        var $line;
        $lines = ju_AbstractList_iterator($lines);
        while (ju_AbstractList$1_hasNext($lines)) {
            $line = ju_AbstractList$1_next($lines);
            ji_PrintStream_println(jl_System_out(), $line);
        }
    }
    function tj_Runner_printStmts($statements, $indent) {
        var var$3, $statement, $type, $lineNumber, $name, $declaration, $i, $ifStmt, $removeFromStmt, $elseStmt, $functionStmt, $callStmt, $assignmentStmt, $foreachStmt, $showMsgBoxStmt, $printStmt, $removeAllFromStmt, $removeAtStmt, $returnStmt, $elseIfStmt, $whileStmt, $mutationStmt, $varType, $value, $forwhenStmt;
        $statements = ju_AbstractList_iterator($statements);
        var$3 = $indent + 1 | 0;
        while (ju_AbstractList$1_hasNext($statements)) {
            $statement = ju_AbstractList$1_next($statements);
            $type = tj_Statements_getType($statement);
            $lineNumber = $statement.$getLine();
            $name = jl_System_out();
            $declaration = jl_StringBuilder__init_();
            jl_StringBuilder_append3(jl_StringBuilder_append0($declaration, $lineNumber), 58);
            ji_PrintStream_print($name, jl_StringBuilder_toString($declaration));
            $i = 0;
            while ($i < $indent) {
                ji_PrintStream_print(jl_System_out(), $rt_s(32));
                $i = $i + 1 | 0;
            }
            a: {
                b: {
                    c: {
                        d: {
                            e: {
                                f: {
                                    g: {
                                        tj_Runner$1_$callClinit();
                                        switch (tj_Runner$1_$SwitchMap$trackerjo$javaish$Statements$StmtType.data[jl_Enum_ordinal($type)]) {
                                            case 1:
                                                break c;
                                            case 2:
                                                $ifStmt = $statement;
                                                $statement = jl_System_out();
                                                $declaration = jl_String_valueOf(tj_IfStmt_getCondition($ifStmt));
                                                $removeFromStmt = jl_StringBuilder__init_();
                                                jl_StringBuilder_append(jl_StringBuilder_append($removeFromStmt, $rt_s(33)), $declaration);
                                                ji_PrintStream_println($statement, jl_StringBuilder_toString($removeFromStmt));
                                                if (tj_Statements_getBody($ifStmt) === null)
                                                    break a;
                                                tj_Runner_printStmts(tj_Statements_getBody($ifStmt), var$3);
                                                break a;
                                            case 3:
                                                $elseStmt = $statement;
                                                ji_PrintStream_println(jl_System_out(), $rt_s(34));
                                                if (tj_Statements_getBody($elseStmt) === null)
                                                    break a;
                                                tj_Runner_printStmts(tj_Statements_getBody($elseStmt), var$3);
                                                break a;
                                            case 4:
                                                break f;
                                            case 5:
                                                break;
                                            case 6:
                                                break g;
                                            case 7:
                                                break d;
                                            case 8:
                                                $functionStmt = $statement;
                                                $statement = jl_System_out();
                                                $declaration = tj_FunctionStmt_getName($functionStmt);
                                                $removeFromStmt = tj_Runner_getArgsString(tj_FunctionStmt_getArgs($functionStmt));
                                                $lineNumber = (tj_FunctionStmt_getArgs($functionStmt)).data.length;
                                                $type = jl_StringBuilder__init_();
                                                jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append3(jl_StringBuilder_append(jl_StringBuilder_append($type, $rt_s(35)), $declaration), 32), $removeFromStmt), $rt_s(36)), $lineNumber);
                                                ji_PrintStream_println($statement, jl_StringBuilder_toString($type));
                                                if (tj_Statements_getBody($functionStmt) === null)
                                                    break a;
                                                tj_Runner_printStmts(tj_Statements_getBody($functionStmt), var$3);
                                                break a;
                                            case 9:
                                                $callStmt = $statement;
                                                $statement = jl_System_out();
                                                $declaration = tj_CallStmt_getName($callStmt);
                                                $removeFromStmt = tj_Runner_getParamString(tj_CallStmt_getParams($callStmt));
                                                $type = jl_StringBuilder__init_();
                                                jl_StringBuilder_append(jl_StringBuilder_append3(jl_StringBuilder_append(jl_StringBuilder_append($type, $rt_s(37)), $declaration), 32), $removeFromStmt);
                                                ji_PrintStream_println($statement, jl_StringBuilder_toString($type));
                                                break a;
                                            case 10:
                                                $assignmentStmt = $statement;
                                                $statement = jl_System_out();
                                                $declaration = tj_AssignmentStmt_getName($assignmentStmt);
                                                $removeFromStmt = tj_Expression_toString(tj_AssignmentStmt_getValue($assignmentStmt));
                                                $type = jl_StringBuilder__init_();
                                                jl_StringBuilder_append(jl_StringBuilder_append3(jl_StringBuilder_append(jl_StringBuilder_append($type, $rt_s(38)), $declaration), 32), $removeFromStmt);
                                                ji_PrintStream_println($statement, jl_StringBuilder_toString($type));
                                                break a;
                                            case 11:
                                                $foreachStmt = $statement;
                                                $statement = jl_System_out();
                                                $declaration = tj_ForEachStmt_getTempVar($foreachStmt);
                                                $removeFromStmt = tj_ForEachStmt_getListVar($foreachStmt);
                                                $type = jl_StringBuilder__init_();
                                                jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($type, $rt_s(39)), $declaration), $rt_s(40)), $removeFromStmt);
                                                ji_PrintStream_println($statement, jl_StringBuilder_toString($type));
                                                if (tj_Statements_getBody($foreachStmt) === null)
                                                    break a;
                                                tj_Runner_printStmts(tj_Statements_getBody($foreachStmt), var$3);
                                                break a;
                                            case 12:
                                                break b;
                                            case 13:
                                                $showMsgBoxStmt = $statement;
                                                $statement = jl_System_out();
                                                $declaration = tj_Expression_toString(tj_ShowMsgBoxStmt_getValue($showMsgBoxStmt));
                                                $removeFromStmt = jl_StringBuilder__init_();
                                                jl_StringBuilder_append(jl_StringBuilder_append($removeFromStmt, $rt_s(41)), $declaration);
                                                ji_PrintStream_println($statement, jl_StringBuilder_toString($removeFromStmt));
                                                break a;
                                            case 14:
                                                $printStmt = $statement;
                                                $statement = jl_System_out();
                                                $declaration = tj_Expression_toString(tj_PrintStmt_getValue($printStmt));
                                                $removeFromStmt = jl_StringBuilder__init_();
                                                jl_StringBuilder_append(jl_StringBuilder_append($removeFromStmt, $rt_s(42)), $declaration);
                                                ji_PrintStream_println($statement, jl_StringBuilder_toString($removeFromStmt));
                                                break a;
                                            case 15:
                                                break e;
                                            case 16:
                                                $removeAllFromStmt = $statement;
                                                $statement = jl_System_out();
                                                $declaration = jl_String_valueOf(tj_RemoveAllFromStmt_getValue($removeAllFromStmt));
                                                $removeFromStmt = tj_RemoveAllFromStmt_getListName($removeAllFromStmt);
                                                $type = jl_StringBuilder__init_();
                                                jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($type, $rt_s(43)), $declaration), $rt_s(44)), $removeFromStmt);
                                                ji_PrintStream_println($statement, jl_StringBuilder_toString($type));
                                                break a;
                                            case 17:
                                                $removeFromStmt = $statement;
                                                $declaration = jl_System_out();
                                                $statement = jl_String_valueOf(tj_RemoveFromStmt_getValue($removeFromStmt));
                                                $removeFromStmt = tj_RemoveFromStmt_getListName($removeFromStmt);
                                                $type = jl_StringBuilder__init_();
                                                jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($type, $rt_s(45)), $statement), $rt_s(44)), $removeFromStmt);
                                                ji_PrintStream_println($declaration, jl_StringBuilder_toString($type));
                                                break a;
                                            case 18:
                                                $removeAtStmt = $statement;
                                                $type = jl_System_out();
                                                $removeFromStmt = jl_String_valueOf(tj_RemoveAtStmt_getLocation($removeAtStmt));
                                                $name = tj_RemoveAtStmt_getListName($removeAtStmt);
                                                $statement = jl_StringBuilder__init_();
                                                jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($statement, $rt_s(46)), $removeFromStmt), $rt_s(44)), $name);
                                                ji_PrintStream_println($type, jl_StringBuilder_toString($statement));
                                                break a;
                                            default:
                                                break a;
                                        }
                                        ji_PrintStream_println(jl_System_out(), $rt_s(47));
                                        break a;
                                    }
                                    $returnStmt = $statement;
                                    $statement = jl_System_out();
                                    $declaration = tj_Expression_toString(tj_ReturnStmt_getValue($returnStmt));
                                    $removeFromStmt = jl_StringBuilder__init_();
                                    jl_StringBuilder_append(jl_StringBuilder_append($removeFromStmt, $rt_s(48)), $declaration);
                                    ji_PrintStream_println($statement, jl_StringBuilder_toString($removeFromStmt));
                                    break a;
                                }
                                $elseIfStmt = $statement;
                                $statement = jl_System_out();
                                $declaration = jl_String_valueOf(tj_ElseIfStmt_getCondition($elseIfStmt));
                                $removeFromStmt = jl_StringBuilder__init_();
                                jl_StringBuilder_append(jl_StringBuilder_append($removeFromStmt, $rt_s(49)), $declaration);
                                ji_PrintStream_println($statement, jl_StringBuilder_toString($removeFromStmt));
                                if (tj_Statements_getBody($elseIfStmt) === null)
                                    break a;
                                tj_Runner_printStmts(tj_Statements_getBody($elseIfStmt), var$3);
                                break a;
                            }
                            $whileStmt = $statement;
                            $statement = jl_System_out();
                            $declaration = jl_String_valueOf(tj_WhileStmt_getCondition($whileStmt));
                            $removeFromStmt = jl_StringBuilder__init_();
                            jl_StringBuilder_append(jl_StringBuilder_append($removeFromStmt, $rt_s(50)), $declaration);
                            ji_PrintStream_println($statement, jl_StringBuilder_toString($removeFromStmt));
                            if (tj_Statements_getBody($whileStmt) === null)
                                break a;
                            tj_Runner_printStmts(tj_Statements_getBody($whileStmt), var$3);
                            break a;
                        }
                        $mutationStmt = $statement;
                        $statement = jl_System_out();
                        $declaration = tj_MutationStmt_getVarName($mutationStmt);
                        $removeFromStmt = jl_String_valueOf(tj_MutationStmt_getMutationType($mutationStmt));
                        $type = tj_Expression_toString(tj_MutationStmt_getValue($mutationStmt));
                        $name = jl_StringBuilder__init_();
                        jl_StringBuilder_append(jl_StringBuilder_append3(jl_StringBuilder_append(jl_StringBuilder_append3(jl_StringBuilder_append(jl_StringBuilder_append($name, $rt_s(51)), $declaration), 32), $removeFromStmt), 32), $type);
                        ji_PrintStream_println($statement, jl_StringBuilder_toString($name));
                        break a;
                    }
                    $declaration = $statement;
                    $name = tj_DeclarationStmt_getName($declaration);
                    $varType = tj_DeclarationStmt_getVarType($declaration);
                    $value = tj_Expression_toString(tj_DeclarationStmt_getValue($declaration));
                    $statement = jl_System_out();
                    $declaration = jl_String_valueOf($varType);
                    $removeFromStmt = jl_StringBuilder__init_();
                    jl_StringBuilder_append(jl_StringBuilder_append3(jl_StringBuilder_append(jl_StringBuilder_append3(jl_StringBuilder_append(jl_StringBuilder_append($removeFromStmt, $rt_s(52)), $name), 32), $declaration), 32), $value);
                    ji_PrintStream_println($statement, jl_StringBuilder_toString($removeFromStmt));
                    break a;
                }
                $forwhenStmt = $statement;
                $statement = jl_System_out();
                $declaration = jl_String_valueOf(tj_ForWhenStmt_getCondition($forwhenStmt));
                $removeFromStmt = tj_ForWhenStmt_getIncVar($forwhenStmt);
                $type = jl_String_valueOf(tj_ForWhenStmt_getIncrement($forwhenStmt));
                $name = jl_StringBuilder__init_();
                jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($name, $rt_s(53)), $declaration), $rt_s(54)), $removeFromStmt), $rt_s(55)), $type);
                ji_PrintStream_println($statement, jl_StringBuilder_toString($name));
                if (tj_Statements_getBody($forwhenStmt) !== null)
                    tj_Runner_printStmts(tj_Statements_getBody($forwhenStmt), var$3);
            }
        }
    }
    function tj_Runner_getParamString($params) {
        var $paramString, var$3, var$4, $param, $exprString;
        $params = $params.data;
        $paramString = $rt_s(2);
        var$3 = $params.length;
        var$4 = 0;
        while (var$4 < var$3) {
            $param = $params[var$4];
            if ($param !== null && $param.$elements !== null) {
                $exprString = tj_Expression_toString($param);
                $param = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_($param);
                jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($param, $paramString), $exprString), $rt_s(56));
                $paramString = jl_AbstractStringBuilder_toString($param);
            }
            var$4 = var$4 + 1 | 0;
        }
        if (jl_String_length($paramString) < 2)
            return $rt_s(2);
        return jl_String_substring($paramString, 0, jl_String_length($paramString) - 2 | 0);
    }
    function tj_Runner_getArgsString($args) {
        var $argsString, var$3, var$4, $arg, var$6, var$7;
        if ($args === null)
            return $rt_s(2);
        $args = $args.data;
        $argsString = $rt_s(2);
        var$3 = $args.length;
        var$4 = 0;
        while (var$4 < var$3) {
            $arg = $args[var$4];
            if ($arg !== null) {
                var$6 = jl_String_valueOf($arg.$type);
                var$7 = $arg.$name3;
                $arg = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_($arg);
                $argsString = jl_StringBuilder_append(jl_StringBuilder_append($arg, $argsString), var$6);
                jl_AbstractStringBuilder_append($argsString, 32);
                jl_StringBuilder_append(jl_StringBuilder_append($argsString, var$7), $rt_s(56));
                $argsString = jl_AbstractStringBuilder_toString($arg);
            }
            var$4 = var$4 + 1 | 0;
        }
        if (jl_String_length($argsString) < 2)
            return $rt_s(2);
        return jl_String_substring($argsString, 0, jl_String_length($argsString) - 2 | 0);
    }
    function tj_Runner_convertStateToJSON($state, $nestedState) {
        var $stateJSON, $body, $bodyJSON, $statesJSON, $states, $state2;
        $stateJSON = oj_JSONObject__init_0();
        if (!$nestedState)
            oj_JSONObject_put($stateJSON, $rt_s(57), oj_JSONArray__init_());
        else {
            $body = $state.$statements;
            $bodyJSON = ju_ArrayList__init_();
            $statesJSON = ju_AbstractList_iterator($body);
            while (ju_AbstractList$1_hasNext($statesJSON)) {
                ju_ArrayList_add($bodyJSON, tj_Runner_convertStatementToJSON(ju_AbstractList$1_next($statesJSON)));
            }
            oj_JSONObject_put0($stateJSON, $rt_s(57), $bodyJSON);
        }
        oj_JSONObject_put1($stateJSON, $rt_s(58), $state.$isComplete);
        oj_JSONObject_put2($stateJSON, $rt_s(59), $state.$currentRuntimeLine);
        oj_JSONObject_put1($stateJSON, $rt_s(60), $state.$isGlobal);
        oj_JSONObject_put1($stateJSON, $rt_s(61), $state.$isLoop);
        oj_JSONObject_put2($stateJSON, $rt_s(62), $state.$currentLine);
        $states = $state.$returnVal;
        $statesJSON = oj_JSONObject__init_0();
        oj_JSONObject_put1($statesJSON, $rt_s(63), $states.$hasReturn);
        $state2 = $states.$value0;
        if ($state2 === null)
            oj_JSONObject_put($statesJSON, $rt_s(64), $rt_s(11));
        else {
            oj_JSONObject_put($statesJSON, $rt_s(64), ($state2.$getValue0()).$toString());
            oj_JSONObject_put($statesJSON, $rt_s(65), $states.$value0.$typeString());
        }
        oj_JSONObject_put($stateJSON, $rt_s(66), $statesJSON);
        oj_JSONObject_put1($stateJSON, $rt_s(67), $state.$pastResult.$pastResult0);
        oj_JSONObject_put2($stateJSON, $rt_s(68), $state.$loopStartLine);
        oj_JSONObject_put2($stateJSON, $rt_s(69), $state.$forIndex0);
        oj_JSONObject_put1($stateJSON, $rt_s(70), $state.$inForWhenLoop0);
        oj_JSONObject_put($stateJSON, $rt_s(71), tj_Runner_convertVariablesToJSON($state.$globalVariables2));
        oj_JSONObject_put($stateJSON, $rt_s(72), tj_Runner_convertVariablesToJSON($state.$localVariables));
        $states = $state.$states;
        $statesJSON = ju_ArrayList__init_();
        $state = ju_AbstractList_iterator($states);
        while (ju_AbstractList$1_hasNext($state)) {
            ju_ArrayList_add($statesJSON, tj_Runner_convertStateToJSON(ju_AbstractList$1_next($state), 1));
        }
        oj_JSONObject_put0($stateJSON, $rt_s(73), $statesJSON);
        return $stateJSON;
    }
    function tj_Runner_convertVariablesToJSON($variables) {
        var $variablesJSON, $variablesMap, $numVariables, $bodyJSON, $entry, $value, $variableJSON, $entry_0, $functionJSON, var$11, $body;
        $variablesJSON = oj_JSONObject__init_0();
        $variablesMap = $variables.$allVariables;
        $numVariables = 0;
        $bodyJSON = ju_HashMap$HashMapEntrySet_iterator(ju_HashMap_entrySet($variablesMap));
        while (ju_HashMap$AbstractMapIterator_hasNext($bodyJSON)) {
            $entry = ju_HashMap$EntryIterator_next($bodyJSON);
            $value = tj_Variables_getVariableValue($variables, $entry.$key);
            $variableJSON = oj_JSONObject__init_0();
            oj_JSONObject_put($variableJSON, $rt_s(74), $entry.$key);
            oj_JSONObject_put($variableJSON, $rt_s(65), $entry.$value1.$name4);
            ji_PrintStream_println(jl_System_out(), $entry.$value1.$name4);
            if (!jl_String_equals($entry.$value1.$name4, $rt_s(75)) && !jl_String_equals($entry.$value1.$name4, $rt_s(76)) && !jl_String_equals($entry.$value1.$name4, $rt_s(77)) && !jl_String_equals($entry.$value1.$name4, $rt_s(78)))
                oj_JSONObject_put($variableJSON, $rt_s(64), ($value.$getValue0()).$toString());
            else {
                $entry_0 = $value;
                $variablesMap = oj_JSONObject__init_0();
                $functionJSON = $entry_0.$list;
                oj_JSONObject_put($variablesMap, $rt_s(65), ($functionJSON.$getType0()).$name4);
                oj_JSONObject_put($variablesMap, $rt_s(79), ($functionJSON.$getInnerType()).$name4);
                oj_JSONObject_put2($variablesMap, $rt_s(80), $functionJSON.$getLength());
                $entry_0 = oj_JSONArray__init_();
                var$11 = 0;
                while (var$11 < $functionJSON.$getLength()) {
                    oj_JSONArray_put($entry_0, ($functionJSON.$getValue1(var$11)).$getValue0());
                    var$11 = var$11 + 1 | 0;
                }
                oj_JSONObject_put($variablesMap, $rt_s(64), $entry_0);
                oj_JSONObject_put($variableJSON, $rt_s(64), $variablesMap);
            }
            oj_JSONObject_put2($variableJSON, $rt_s(81), $numVariables);
            $numVariables = $numVariables + 1 | 0;
            oj_JSONObject_put($variablesJSON, $entry.$key, $variableJSON);
        }
        $variables = ju_HashMap$HashMapEntrySet_iterator(ju_HashMap_entrySet($variables.$functions));
        while (ju_HashMap$AbstractMapIterator_hasNext($variables)) {
            $entry_0 = ju_HashMap$EntryIterator_next($variables);
            $value = $entry_0.$value1;
            $functionJSON = oj_JSONObject__init_0();
            oj_JSONObject_put($functionJSON, $rt_s(74), $entry_0.$key);
            oj_JSONObject_put($functionJSON, $rt_s(65), $rt_s(82));
            oj_JSONObject_put($functionJSON, $rt_s(83), tj_Runner_getArgsString($value.$args));
            oj_JSONObject_put2($functionJSON, $rt_s(84), $value.$lineNumber3);
            $body = $value.$body0;
            $bodyJSON = ju_ArrayList__init_();
            $variablesMap = ju_AbstractList_iterator($body);
            while (ju_AbstractList$1_hasNext($variablesMap)) {
                ju_ArrayList_add($bodyJSON, tj_Runner_convertStatementToJSON(ju_AbstractList$1_next($variablesMap)));
            }
            oj_JSONObject_put0($functionJSON, $rt_s(57), $bodyJSON);
            oj_JSONObject_put($variablesJSON, $entry_0.$key, $functionJSON);
        }
        return $variablesJSON;
    }
    function tj_Runner_convertStatementToJSON($statements) {
        var $statementJSON, $declaration, $name, $varType, $elements, $elementsJSONArray, var$8, var$9, $element, $returnType, $ifStmt, $condition, $conditionElementsJSONArray, $ifreturnType, $body, $bodyJSON, $ebody, $ebodyJSON, $elseIfStmt, $efcondition, $efconditionElementsJSONArray, $efreturnType, $efbody, $efbodyJSON, $returnStmt, $returnExpr, $returnElementsJSONArray, $returnReturnType, $mutationStmt, $mutationExpr, $mutationElementsJSONArray, $mutationReturnType, $functionStmt, $fbody, $fbodyJSON, $callStmt,
        $paramsJSONArray, $expression, $paramJSON, $conditionElements, $elementsCallJSONArray, var$43, var$44, $assignmentStmt, $assignmentExpr, $assignmentElementsJSONArray, $assignmentReturnType, $foreachStmt, $febody, $febodyJSON, $forwhenStmt, $forwhenReturnType, $fwbody, $fwbodyJSON, $forwhenConditionElementsJSONArray, $forwhenIncElementsJSONArray, $showMsgBoxStmt, $showMsgBoxStmtElementsJSONArray, $printStmt, $printStmtElementsJSONArray, $whileStmt, $whileConditionElementsJSONArray, $whilereturnType, $whilebody,
        $whilebodyJSON, $removeAllFromStmt, $removeAllFromStmtElementsJSONArray, $removeFromStmt, $removeFromStmtElementsJSONArray, $removeAtStmt, $removeAtStmtElementsJSONArray;
        a: {
            $statementJSON = oj_JSONObject__init_0();
            oj_JSONObject_put($statementJSON, $rt_s(65), jl_Enum_toString(tj_Statements_getType($statements)));
            oj_JSONObject_put2($statementJSON, $rt_s(84), $statements.$getLine());
            tj_Runner$1_$callClinit();
            switch (tj_Runner$1_$SwitchMap$trackerjo$javaish$Statements$StmtType.data[jl_Enum_ordinal(tj_Statements_getType($statements))]) {
                case 1:
                    $declaration = $statements;
                    $name = tj_DeclarationStmt_getName($declaration);
                    $varType = tj_DeclarationStmt_getVarType($declaration);
                    tj_Expression_toString(tj_DeclarationStmt_getValue($declaration));
                    $elements = (tj_Expression_getElements(tj_DeclarationStmt_getValue($declaration))).data;
                    $elementsJSONArray = oj_JSONArray__init_();
                    var$8 = $elements.length;
                    var$9 = 0;
                    while (var$9 < var$8) {
                        $element = $elements[var$9];
                        if ($element !== null) {
                            ji_PrintStream_print(jl_System_out(), $rt_s(85));
                            oj_JSONArray_put($elementsJSONArray, tj_Runner_convertElementToJSON($element));
                        }
                        var$9 = var$9 + 1 | 0;
                    }
                    $returnType = tj_Expression_getReturnType(tj_DeclarationStmt_getValue($declaration));
                    oj_JSONObject_put($statementJSON, $rt_s(74), $name);
                    oj_JSONObject_put($statementJSON, $rt_s(86), jl_Enum_toString($varType));
                    oj_JSONObject_put($statementJSON, $rt_s(64), $elementsJSONArray);
                    oj_JSONObject_put($statementJSON, $rt_s(87), jl_Enum_toString($returnType));
                    break a;
                case 2:
                    $ifStmt = $statements;
                    $condition = tj_IfStmt_getCondition($ifStmt);
                    $elements = (tj_Expression_getElements($condition)).data;
                    $conditionElementsJSONArray = oj_JSONArray__init_();
                    var$8 = $elements.length;
                    var$9 = 0;
                    while (var$9 < var$8) {
                        $element = $elements[var$9];
                        if ($element !== null)
                            oj_JSONArray_put($conditionElementsJSONArray, tj_Runner_convertElementToJSON($element));
                        var$9 = var$9 + 1 | 0;
                    }
                    $ifreturnType = tj_Expression_getReturnType($condition);
                    $body = tj_Statements_getBody($ifStmt);
                    $bodyJSON = ju_ArrayList__init_();
                    $statements = ju_AbstractList_iterator($body);
                    while (ju_AbstractList$1_hasNext($statements)) {
                        ju_ArrayList_add($bodyJSON, tj_Runner_convertStatementToJSON(ju_AbstractList$1_next($statements)));
                    }
                    oj_JSONObject_put($statementJSON, $rt_s(88), $conditionElementsJSONArray);
                    oj_JSONObject_put($statementJSON, $rt_s(89), jl_Enum_toString($ifreturnType));
                    oj_JSONObject_put0($statementJSON, $rt_s(57), $bodyJSON);
                    break a;
                case 3:
                    $ebody = tj_Statements_getBody($statements);
                    $ebodyJSON = ju_ArrayList__init_();
                    $statements = ju_AbstractList_iterator($ebody);
                    while (ju_AbstractList$1_hasNext($statements)) {
                        ju_ArrayList_add($ebodyJSON, tj_Runner_convertStatementToJSON(ju_AbstractList$1_next($statements)));
                    }
                    oj_JSONObject_put0($statementJSON, $rt_s(90), $ebodyJSON);
                    break a;
                case 4:
                    $elseIfStmt = $statements;
                    $efcondition = tj_ElseIfStmt_getCondition($elseIfStmt);
                    $elements = (tj_Expression_getElements($efcondition)).data;
                    $efconditionElementsJSONArray = oj_JSONArray__init_();
                    var$8 = $elements.length;
                    var$9 = 0;
                    while (var$9 < var$8) {
                        $element = $elements[var$9];
                        if ($element !== null)
                            oj_JSONArray_put($efconditionElementsJSONArray, tj_Runner_convertElementToJSON($element));
                        var$9 = var$9 + 1 | 0;
                    }
                    $efreturnType = tj_Expression_getReturnType($efcondition);
                    $efbody = tj_Statements_getBody($elseIfStmt);
                    $efbodyJSON = ju_ArrayList__init_();
                    $statements = ju_AbstractList_iterator($efbody);
                    while (ju_AbstractList$1_hasNext($statements)) {
                        ju_ArrayList_add($efbodyJSON, tj_Runner_convertStatementToJSON(ju_AbstractList$1_next($statements)));
                    }
                    oj_JSONObject_put($statementJSON, $rt_s(91), $efconditionElementsJSONArray);
                    oj_JSONObject_put($statementJSON, $rt_s(92), jl_Enum_toString($efreturnType));
                    oj_JSONObject_put0($statementJSON, $rt_s(93), $efbodyJSON);
                    break a;
                case 5:
                    break;
                case 6:
                    $returnStmt = $statements;
                    if (tj_ReturnStmt_getValue($returnStmt) === null) {
                        oj_JSONObject_put($statementJSON, $rt_s(94), $rt_s(11));
                        break a;
                    }
                    $returnExpr = tj_ReturnStmt_getValue($returnStmt);
                    $elements = (tj_Expression_getElements($returnExpr)).data;
                    $returnElementsJSONArray = oj_JSONArray__init_();
                    var$8 = $elements.length;
                    var$9 = 0;
                    while (var$9 < var$8) {
                        $element = $elements[var$9];
                        if ($element !== null)
                            oj_JSONArray_put($returnElementsJSONArray, tj_Runner_convertElementToJSON($element));
                        var$9 = var$9 + 1 | 0;
                    }
                    $returnReturnType = tj_Expression_getReturnType($returnExpr);
                    oj_JSONObject_put($statementJSON, $rt_s(94), $returnElementsJSONArray);
                    oj_JSONObject_put($statementJSON, $rt_s(95), jl_Enum_toString($returnReturnType));
                    break a;
                case 7:
                    $mutationStmt = $statements;
                    $mutationExpr = tj_MutationStmt_getValue($mutationStmt);
                    $elements = (tj_Expression_getElements($mutationExpr)).data;
                    $mutationElementsJSONArray = oj_JSONArray__init_();
                    var$8 = $elements.length;
                    var$9 = 0;
                    while (var$9 < var$8) {
                        $element = $elements[var$9];
                        if ($element !== null)
                            oj_JSONArray_put($mutationElementsJSONArray, tj_Runner_convertElementToJSON($element));
                        var$9 = var$9 + 1 | 0;
                    }
                    $mutationReturnType = tj_Expression_getReturnType($mutationExpr);
                    oj_JSONObject_put($statementJSON, $rt_s(96), $mutationElementsJSONArray);
                    oj_JSONObject_put($statementJSON, $rt_s(97), jl_Enum_toString(tj_MutationStmt_getMutationType($mutationStmt)));
                    oj_JSONObject_put($statementJSON, $rt_s(98), tj_MutationStmt_getVarName($mutationStmt));
                    oj_JSONObject_put($statementJSON, $rt_s(99), jl_Enum_toString($mutationReturnType));
                    break a;
                case 8:
                    $functionStmt = $statements;
                    $fbody = tj_Statements_getBody($functionStmt);
                    $fbodyJSON = ju_ArrayList__init_();
                    $statements = ju_AbstractList_iterator($fbody);
                    while (ju_AbstractList$1_hasNext($statements)) {
                        ju_ArrayList_add($fbodyJSON, tj_Runner_convertStatementToJSON(ju_AbstractList$1_next($statements)));
                    }
                    oj_JSONObject_put($statementJSON, $rt_s(74), tj_FunctionStmt_getName($functionStmt));
                    oj_JSONObject_put($statementJSON, $rt_s(83), tj_Runner_getArgsString(tj_FunctionStmt_getArgs($functionStmt)));
                    oj_JSONObject_put0($statementJSON, $rt_s(100), $fbodyJSON);
                    break a;
                case 9:
                    $callStmt = $statements;
                    oj_JSONObject_put($statementJSON, $rt_s(74), tj_CallStmt_getName($callStmt));
                    $elements = (tj_CallStmt_getParams($callStmt)).data;
                    $paramsJSONArray = oj_JSONArray__init_();
                    var$8 = $elements.length;
                    var$9 = 0;
                    while (var$9 < var$8) {
                        $expression = $elements[var$9];
                        if ($expression !== null) {
                            $paramJSON = oj_JSONObject__init_0();
                            $conditionElements = (tj_Expression_getElements($expression)).data;
                            $elementsCallJSONArray = oj_JSONArray__init_();
                            var$43 = $conditionElements.length;
                            var$44 = 0;
                            while (var$44 < var$43) {
                                $element = $conditionElements[var$44];
                                if ($element !== null)
                                    oj_JSONArray_put($elementsCallJSONArray, tj_Runner_convertElementToJSON($element));
                                var$44 = var$44 + 1 | 0;
                            }
                            oj_JSONObject_put($paramJSON, $rt_s(101), $elementsCallJSONArray);
                            oj_JSONObject_put($paramJSON, $rt_s(102), jl_Enum_toString(tj_Expression_getReturnType($expression)));
                            oj_JSONArray_put($paramsJSONArray, $paramJSON);
                        }
                        var$9 = var$9 + 1 | 0;
                    }
                    oj_JSONObject_put($statementJSON, $rt_s(103), $paramsJSONArray);
                    break a;
                case 10:
                    $assignmentStmt = $statements;
                    $assignmentExpr = tj_AssignmentStmt_getValue($assignmentStmt);
                    $elements = (tj_Expression_getElements($assignmentExpr)).data;
                    $assignmentElementsJSONArray = oj_JSONArray__init_();
                    var$8 = $elements.length;
                    var$9 = 0;
                    while (var$9 < var$8) {
                        $element = $elements[var$9];
                        if ($element !== null)
                            oj_JSONArray_put($assignmentElementsJSONArray, tj_Runner_convertElementToJSON($element));
                        var$9 = var$9 + 1 | 0;
                    }
                    $assignmentReturnType = tj_Expression_getReturnType($assignmentExpr);
                    oj_JSONObject_put($statementJSON, $rt_s(74), tj_AssignmentStmt_getName($assignmentStmt));
                    oj_JSONObject_put($statementJSON, $rt_s(104), $assignmentElementsJSONArray);
                    oj_JSONObject_put($statementJSON, $rt_s(105), jl_Enum_toString($assignmentReturnType));
                    break a;
                case 11:
                    $foreachStmt = $statements;
                    $febody = tj_Statements_getBody($foreachStmt);
                    $febodyJSON = ju_ArrayList__init_();
                    $statements = ju_AbstractList_iterator($febody);
                    while (ju_AbstractList$1_hasNext($statements)) {
                        ju_ArrayList_add($febodyJSON, tj_Runner_convertStatementToJSON(ju_AbstractList$1_next($statements)));
                    }
                    oj_JSONObject_put($statementJSON, $rt_s(106), tj_ForEachStmt_getTempVar($foreachStmt));
                    oj_JSONObject_put($statementJSON, $rt_s(107), tj_ForEachStmt_getListVar($foreachStmt));
                    oj_JSONObject_put0($statementJSON, $rt_s(108), $febodyJSON);
                    break a;
                case 12:
                    $forwhenStmt = $statements;
                    $forwhenReturnType = tj_Expression_getReturnType(tj_ForWhenStmt_getCondition($forwhenStmt));
                    $fwbody = tj_Statements_getBody($forwhenStmt);
                    $fwbodyJSON = ju_ArrayList__init_();
                    $statements = ju_AbstractList_iterator($fwbody);
                    while (ju_AbstractList$1_hasNext($statements)) {
                        ju_ArrayList_add($fwbodyJSON, tj_Runner_convertStatementToJSON(ju_AbstractList$1_next($statements)));
                    }
                    $elements = (tj_Expression_getElements(tj_ForWhenStmt_getCondition($forwhenStmt))).data;
                    $forwhenConditionElementsJSONArray = oj_JSONArray__init_();
                    var$8 = $elements.length;
                    var$9 = 0;
                    while (var$9 < var$8) {
                        $element = $elements[var$9];
                        if ($element !== null)
                            oj_JSONArray_put($forwhenConditionElementsJSONArray, tj_Runner_convertElementToJSON($element));
                        var$9 = var$9 + 1 | 0;
                    }
                    $elements = (tj_Expression_getElements(tj_ForWhenStmt_getIncrement($forwhenStmt))).data;
                    $forwhenIncElementsJSONArray = oj_JSONArray__init_();
                    var$8 = $elements.length;
                    var$9 = 0;
                    while (var$9 < var$8) {
                        $element = $elements[var$9];
                        if ($element !== null)
                            oj_JSONArray_put($forwhenIncElementsJSONArray, tj_Runner_convertElementToJSON($element));
                        var$9 = var$9 + 1 | 0;
                    }
                    oj_JSONObject_put($statementJSON, $rt_s(88), $forwhenConditionElementsJSONArray);
                    oj_JSONObject_put($statementJSON, $rt_s(109), tj_ForWhenStmt_getIncVar($forwhenStmt));
                    oj_JSONObject_put($statementJSON, $rt_s(110), $forwhenIncElementsJSONArray);
                    oj_JSONObject_put($statementJSON, $rt_s(111), jl_Enum_toString(tj_Expression_getReturnType(tj_ForWhenStmt_getIncrement($forwhenStmt))));
                    oj_JSONObject_put($statementJSON, $rt_s(112), jl_Enum_toString($forwhenReturnType));
                    oj_JSONObject_put0($statementJSON, $rt_s(113), $fwbodyJSON);
                    break a;
                case 13:
                    $showMsgBoxStmt = $statements;
                    $elements = (tj_Expression_getElements(tj_ShowMsgBoxStmt_getValue($showMsgBoxStmt))).data;
                    $showMsgBoxStmtElementsJSONArray = oj_JSONArray__init_();
                    var$8 = $elements.length;
                    var$9 = 0;
                    while (var$9 < var$8) {
                        $element = $elements[var$9];
                        if ($element !== null)
                            oj_JSONArray_put($showMsgBoxStmtElementsJSONArray, tj_Runner_convertElementToJSON($element));
                        var$9 = var$9 + 1 | 0;
                    }
                    oj_JSONObject_put($statementJSON, $rt_s(114), $showMsgBoxStmtElementsJSONArray);
                    oj_JSONObject_put($statementJSON, $rt_s(115), jl_Enum_toString(tj_Expression_getReturnType(tj_ShowMsgBoxStmt_getValue($showMsgBoxStmt))));
                    break a;
                case 14:
                    $printStmt = $statements;
                    $elements = (tj_Expression_getElements(tj_PrintStmt_getValue($printStmt))).data;
                    $printStmtElementsJSONArray = oj_JSONArray__init_();
                    var$8 = $elements.length;
                    var$9 = 0;
                    while (var$9 < var$8) {
                        $element = $elements[var$9];
                        if ($element !== null)
                            oj_JSONArray_put($printStmtElementsJSONArray, tj_Runner_convertElementToJSON($element));
                        var$9 = var$9 + 1 | 0;
                    }
                    oj_JSONObject_put($statementJSON, $rt_s(116), $printStmtElementsJSONArray);
                    oj_JSONObject_put($statementJSON, $rt_s(117), jl_Enum_toString(tj_Expression_getReturnType(tj_PrintStmt_getValue($printStmt))));
                    break a;
                case 15:
                    $whileStmt = $statements;
                    $elements = (tj_Expression_getElements(tj_WhileStmt_getCondition($whileStmt))).data;
                    $whileConditionElementsJSONArray = oj_JSONArray__init_();
                    var$8 = $elements.length;
                    var$9 = 0;
                    while (var$9 < var$8) {
                        $element = $elements[var$9];
                        if ($element !== null)
                            oj_JSONArray_put($whileConditionElementsJSONArray, tj_Runner_convertElementToJSON($element));
                        var$9 = var$9 + 1 | 0;
                    }
                    $whilereturnType = tj_Expression_getReturnType(tj_WhileStmt_getCondition($whileStmt));
                    $whilebody = tj_Statements_getBody($whileStmt);
                    $whilebodyJSON = ju_ArrayList__init_();
                    $statements = ju_AbstractList_iterator($whilebody);
                    while (ju_AbstractList$1_hasNext($statements)) {
                        ju_ArrayList_add($whilebodyJSON, tj_Runner_convertStatementToJSON(ju_AbstractList$1_next($statements)));
                    }
                    oj_JSONObject_put($statementJSON, $rt_s(118), $whileConditionElementsJSONArray);
                    oj_JSONObject_put($statementJSON, $rt_s(119), jl_Enum_toString($whilereturnType));
                    oj_JSONObject_put0($statementJSON, $rt_s(120), $whilebodyJSON);
                    break a;
                case 16:
                    $removeAllFromStmt = $statements;
                    $elements = (tj_Expression_getElements(tj_RemoveAllFromStmt_getValue($removeAllFromStmt))).data;
                    $removeAllFromStmtElementsJSONArray = oj_JSONArray__init_();
                    var$8 = $elements.length;
                    var$9 = 0;
                    while (var$9 < var$8) {
                        $element = $elements[var$9];
                        if ($element !== null)
                            oj_JSONArray_put($removeAllFromStmtElementsJSONArray, tj_Runner_convertElementToJSON($element));
                        var$9 = var$9 + 1 | 0;
                    }
                    oj_JSONObject_put($statementJSON, $rt_s(121), $removeAllFromStmtElementsJSONArray);
                    oj_JSONObject_put($statementJSON, $rt_s(122), tj_RemoveAllFromStmt_getListName($removeAllFromStmt));
                    oj_JSONObject_put($statementJSON, $rt_s(123), jl_Enum_toString(tj_Expression_getReturnType(tj_RemoveAllFromStmt_getValue($removeAllFromStmt))));
                    break a;
                case 17:
                    $removeFromStmt = $statements;
                    $elements = (tj_Expression_getElements(tj_RemoveFromStmt_getValue($removeFromStmt))).data;
                    $removeFromStmtElementsJSONArray = oj_JSONArray__init_();
                    var$8 = $elements.length;
                    var$9 = 0;
                    while (var$9 < var$8) {
                        $element = $elements[var$9];
                        if ($element !== null)
                            oj_JSONArray_put($removeFromStmtElementsJSONArray, tj_Runner_convertElementToJSON($element));
                        var$9 = var$9 + 1 | 0;
                    }
                    oj_JSONObject_put($statementJSON, $rt_s(124), $removeFromStmtElementsJSONArray);
                    oj_JSONObject_put($statementJSON, $rt_s(125), tj_RemoveFromStmt_getListName($removeFromStmt));
                    oj_JSONObject_put($statementJSON, $rt_s(126), jl_Enum_toString(tj_Expression_getReturnType(tj_RemoveFromStmt_getValue($removeFromStmt))));
                    break a;
                case 18:
                    $removeAtStmt = $statements;
                    $elements = (tj_Expression_getElements(tj_RemoveAtStmt_getLocation($removeAtStmt))).data;
                    $removeAtStmtElementsJSONArray = oj_JSONArray__init_();
                    var$8 = $elements.length;
                    var$9 = 0;
                    while (var$9 < var$8) {
                        $element = $elements[var$9];
                        if ($element !== null)
                            oj_JSONArray_put($removeAtStmtElementsJSONArray, tj_Runner_convertElementToJSON($element));
                        var$9 = var$9 + 1 | 0;
                    }
                    oj_JSONObject_put($statementJSON, $rt_s(127), $removeAtStmtElementsJSONArray);
                    oj_JSONObject_put($statementJSON, $rt_s(128), tj_RemoveAtStmt_getListName($removeAtStmt));
                    oj_JSONObject_put($statementJSON, $rt_s(129), jl_Enum_toString(tj_Expression_getReturnType(tj_RemoveAtStmt_getLocation($removeAtStmt))));
                    break a;
                default:
                    break a;
            }
        }
        return $statementJSON;
    }
    function tj_Runner_convertElementToJSON($element) {
        var $elementJSON, $type, $expressionElmt, $expressionStmtElementsJSONArray, $expressionElement, $elementsCall, var$8, var$9, $notElmt, $notStmtElementsJSONArray, $castElmt, $castStmtElementsJSONArray, $showInputBoxElmt, $showInputBoxStmtElementsJSONArray, $functionElmt, $functionParamsJSONArray, $expression, $paramJSON, $elementsCall_0, $elementsCallJSONArray, var$22, var$23, $element2, $listElmt, $list, $listJSONArray, $listValElmt, $listVal, $listValJSONArray;
        a: {
            $elementJSON = oj_JSONObject__init_0();
            $type = $element.$type0;
            $expressionElmt = jl_System_out();
            $expressionStmtElementsJSONArray = jl_String_valueOf($type);
            $expressionElement = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($expressionElement);
            jl_StringBuilder_append(jl_StringBuilder_append($expressionElement, $expressionStmtElementsJSONArray), $rt_s(130));
            ji_PrintStream_println($expressionElmt, jl_AbstractStringBuilder_toString($expressionElement));
            oj_JSONObject_put($elementJSON, $rt_s(131), $type.$name4);
            tj_Runner$1_$callClinit();
            switch (tj_Runner$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[$type.$ordinal0]) {
                case 1:
                    $expressionElmt = $element;
                    oj_JSONObject_put($elementJSON, $rt_s(132), $expressionElmt.$expression.$returnType1.$name4);
                    $elementsCall = $expressionElmt.$expression.$elements.data;
                    $expressionStmtElementsJSONArray = oj_JSONArray__init_();
                    var$8 = $elementsCall.length;
                    var$9 = 0;
                    while (var$9 < var$8) {
                        $expressionElement = $elementsCall[var$9];
                        if ($expressionElement !== null)
                            oj_JSONArray_put($expressionStmtElementsJSONArray, tj_Runner_convertElementToJSON($expressionElement));
                        var$9 = var$9 + 1 | 0;
                    }
                    oj_JSONObject_put($elementJSON, $rt_s(133), $expressionStmtElementsJSONArray);
                    break a;
                case 2:
                    $notElmt = $element;
                    oj_JSONObject_put($elementJSON, $rt_s(132), $notElmt.$expression0.$returnType1.$name4);
                    $elementsCall = $notElmt.$expression0.$elements.data;
                    $notStmtElementsJSONArray = oj_JSONArray__init_();
                    var$8 = $elementsCall.length;
                    var$9 = 0;
                    while (var$9 < var$8) {
                        $expressionElement = $elementsCall[var$9];
                        if ($expressionElement !== null)
                            oj_JSONArray_put($notStmtElementsJSONArray, tj_Runner_convertElementToJSON($expressionElement));
                        var$9 = var$9 + 1 | 0;
                    }
                    oj_JSONObject_put($elementJSON, $rt_s(133), $notStmtElementsJSONArray);
                    break a;
                case 3:
                    $castElmt = $element;
                    oj_JSONObject_put($elementJSON, $rt_s(132), $castElmt.$element.$returnType1.$name4);
                    oj_JSONObject_put($elementJSON, $rt_s(134), $castElmt.$castType.$name4);
                    $elementsCall = $castElmt.$element.$elements.data;
                    $castStmtElementsJSONArray = oj_JSONArray__init_();
                    var$8 = $elementsCall.length;
                    var$9 = 0;
                    while (var$9 < var$8) {
                        $expressionElement = $elementsCall[var$9];
                        if ($expressionElement !== null)
                            oj_JSONArray_put($castStmtElementsJSONArray, tj_Runner_convertElementToJSON($expressionElement));
                        var$9 = var$9 + 1 | 0;
                    }
                    oj_JSONObject_put($elementJSON, $rt_s(133), $castStmtElementsJSONArray);
                    break a;
                case 4:
                    $showInputBoxElmt = $element;
                    oj_JSONObject_put($elementJSON, $rt_s(132), $showInputBoxElmt.$value2.$returnType1.$name4);
                    $elementsCall = $showInputBoxElmt.$value2.$elements.data;
                    $showInputBoxStmtElementsJSONArray = oj_JSONArray__init_();
                    var$8 = $elementsCall.length;
                    var$9 = 0;
                    while (var$9 < var$8) {
                        $expressionElement = $elementsCall[var$9];
                        if ($expressionElement !== null)
                            oj_JSONArray_put($showInputBoxStmtElementsJSONArray, tj_Runner_convertElementToJSON($expressionElement));
                        var$9 = var$9 + 1 | 0;
                    }
                    oj_JSONObject_put($elementJSON, $rt_s(133), $showInputBoxStmtElementsJSONArray);
                    break a;
                case 5:
                    $functionElmt = $element;
                    oj_JSONObject_put($elementJSON, $rt_s(74), $functionElmt.$name5);
                    $elementsCall = $functionElmt.$params.data;
                    $functionParamsJSONArray = oj_JSONArray__init_();
                    var$8 = $elementsCall.length;
                    var$9 = 0;
                    while (var$9 < var$8) {
                        $expression = $elementsCall[var$9];
                        if ($expression !== null) {
                            $paramJSON = oj_JSONObject__init_0();
                            $elementsCall_0 = $expression.$elements.data;
                            $elementsCallJSONArray = oj_JSONArray__init_();
                            var$22 = $elementsCall_0.length;
                            var$23 = 0;
                            while (var$23 < var$22) {
                                $element2 = $elementsCall_0[var$23];
                                if ($element2 !== null)
                                    oj_JSONArray_put($elementsCallJSONArray, tj_Runner_convertElementToJSON($element2));
                                var$23 = var$23 + 1 | 0;
                            }
                            oj_JSONObject_put($paramJSON, $rt_s(101), $elementsCallJSONArray);
                            oj_JSONObject_put($paramJSON, $rt_s(102), $expression.$returnType1.$name4);
                            oj_JSONArray_put($functionParamsJSONArray, $paramJSON);
                        }
                        var$9 = var$9 + 1 | 0;
                    }
                    oj_JSONObject_put($elementJSON, $rt_s(103), $functionParamsJSONArray);
                    break a;
                case 6:
                    $listElmt = $element;
                    oj_JSONObject_put($elementJSON, $rt_s(135), $listElmt.$listType.$name4);
                    $list = $listElmt.$list0;
                    $listJSONArray = oj_JSONArray__init_();
                    $element = ju_AbstractList_iterator($list);
                    while (ju_AbstractList$1_hasNext($element)) {
                        $elementsCall = (ju_AbstractList$1_next($element)).$elements.data;
                        $elementsCallJSONArray = oj_JSONArray__init_();
                        var$8 = $elementsCall.length;
                        var$9 = 0;
                        while (var$9 < var$8) {
                            $element2 = $elementsCall[var$9];
                            if ($element2 !== null)
                                oj_JSONArray_put($elementsCallJSONArray, tj_Runner_convertElementToJSON($element2));
                            var$9 = var$9 + 1 | 0;
                        }
                        oj_JSONArray_put($listJSONArray, $elementsCallJSONArray);
                    }
                    oj_JSONObject_put($elementJSON, $rt_s(133), $listJSONArray);
                    break a;
                case 7:
                    oj_JSONObject_put($elementJSON, $rt_s(133), $element.$arrayName);
                    break a;
                case 8:
                    oj_JSONObject_put($elementJSON, $rt_s(133), $element.$name6);
                    break a;
                case 9:
                    $listValElmt = $element;
                    oj_JSONObject_put($elementJSON, $rt_s(136), $listValElmt.$listName);
                    $listVal = $listValElmt.$index;
                    $listValJSONArray = oj_JSONArray__init_();
                    $elementsCall = $listVal.$elements.data;
                    var$8 = $elementsCall.length;
                    var$9 = 0;
                    while (var$9 < var$8) {
                        $element2 = $elementsCall[var$9];
                        if ($element2 !== null)
                            oj_JSONArray_put($listValJSONArray, tj_Runner_convertElementToJSON($element2));
                        var$9 = var$9 + 1 | 0;
                    }
                    oj_JSONObject_put($elementJSON, $rt_s(133), $listValJSONArray);
                    break a;
                default:
            }
            oj_JSONObject_put($elementJSON, $rt_s(133), $element.$toString());
        }
        return $elementJSON;
    }
    function tj_Runner_convertJSONToState($jsonObject) {
        var $isComplete, $isGlobal, $globalVariables, var$5, $returnVal, $currentLine, $currentRuntimeLine, $loopStartLine, $forIndex, $isLoop, $inForWhenLoop, $pastResult, $i, $localVariables, $states, $statesJSONArray, $statesJSON, $state, $body, $bodyJSOJsonArray, $bodyJSON;
        $isComplete = oj_JSONObject_getBoolean($jsonObject, $rt_s(58));
        $isGlobal = oj_JSONObject_getBoolean($jsonObject, $rt_s(60));
        $globalVariables = jl_System_out();
        var$5 = oj_JSONObject_getBoolean($jsonObject, $rt_s(60));
        $returnVal = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($returnVal);
        jl_StringBuilder_append4(jl_StringBuilder_append(jl_StringBuilder_append4($returnVal, var$5), $rt_s(137)), $isGlobal);
        ji_PrintStream_println($globalVariables, jl_AbstractStringBuilder_toString($returnVal));
        $currentLine = oj_JSONObject_getInt($jsonObject, $rt_s(62));
        $currentRuntimeLine = oj_JSONObject_getInt($jsonObject, $rt_s(59));
        $loopStartLine = oj_JSONObject_getInt($jsonObject, $rt_s(68));
        $forIndex = oj_JSONObject_getInt($jsonObject, $rt_s(69));
        $isLoop = oj_JSONObject_getBoolean($jsonObject, $rt_s(61));
        $inForWhenLoop = oj_JSONObject_getBoolean($jsonObject, $rt_s(70));
        $pastResult = tj_Result__init_(oj_JSONObject_getBoolean($jsonObject, $rt_s(67)));
        $returnVal = oj_JSONObject_getJSONObject($jsonObject, $rt_s(66));
        $i = oj_JSONObject_getBoolean($returnVal, $rt_s(63));
        $returnVal = jl_String_equals(oj_JSONObject_getString($returnVal, $rt_s(64)), $rt_s(11)) ? tj_Return__init_($i, null) : tj_Return__init_($i, tj_Runner_convertJSONToJavaishVal(oj_JSONObject_getJSONObject($returnVal, $rt_s(64))));
        $globalVariables = tj_Runner_convertJSONToVariables(oj_JSONObject_getJSONObject($jsonObject, $rt_s(71)));
        $localVariables = tj_Runner_convertJSONToVariables(oj_JSONObject_getJSONObject($jsonObject, $rt_s(72)));
        $states = ju_ArrayList__init_();
        $statesJSONArray = oj_JSONObject_getJSONArray($jsonObject, $rt_s(73));
        $statesJSON = ju_ArrayList__init_();
        $i = 0;
        while ($i < oj_JSONArray_length($statesJSONArray)) {
            ju_ArrayList_add($statesJSON, oj_JSONArray_getJSONObject($statesJSONArray, $i));
            $i = $i + 1 | 0;
        }
        $statesJSONArray = ju_AbstractList_iterator($statesJSON);
        while (ju_AbstractList$1_hasNext($statesJSONArray)) {
            ju_ArrayList_add($states, tj_Runner_convertJSONToState(ju_AbstractList$1_next($statesJSONArray)));
        }
        if (!oj_JSONArray_length(oj_JSONObject_getJSONArray($jsonObject, $rt_s(57)))) {
            $state = tj_State__init_(null, $globalVariables, $localVariables, $pastResult, $returnVal, $currentLine, $isGlobal, $isComplete, $currentRuntimeLine, $isLoop, $loopStartLine, $forIndex, $inForWhenLoop);
            $state.$states = $states;
            return $state;
        }
        $body = ju_ArrayList__init_();
        $bodyJSOJsonArray = oj_JSONObject_getJSONArray($jsonObject, $rt_s(57));
        $bodyJSON = ju_ArrayList__init_();
        $i = 0;
        while ($i < oj_JSONArray_length($bodyJSOJsonArray)) {
            ju_ArrayList_add($bodyJSON, oj_JSONArray_getJSONObject($bodyJSOJsonArray, $i));
            $i = $i + 1 | 0;
        }
        $statesJSONArray = ju_AbstractList_iterator($bodyJSON);
        while (ju_AbstractList$1_hasNext($statesJSONArray)) {
            ju_ArrayList_add($body, tj_Runner_convertJSONToStatement(ju_AbstractList$1_next($statesJSONArray)));
        }
        $state = tj_State__init_($body, $globalVariables, $localVariables, $pastResult, $returnVal, $currentLine, $isGlobal, $isComplete, $currentRuntimeLine, $isLoop, $loopStartLine, $forIndex, $inForWhenLoop);
        $state.$states = $states;
        return $state;
    }
    function tj_Runner_convertJSONToJavaishVal($jsonObject) {
        var $type;
        $type = tj_JavaishVal$JavaishType_valueOf(oj_JSONObject_getString($jsonObject, $rt_s(65)));
        tj_Runner$1_$callClinit();
        switch (tj_Runner$1_$SwitchMap$trackerjo$javaish$JavaishVal$JavaishType.data[$type.$ordinal0]) {
            case 1:
                return tj_JavaishFloat__init_(jl_Float_parseFloat(oj_JSONObject_getString($jsonObject, $rt_s(64))));
            case 2:
                return tj_JavaishInt__init_(jl_Integer_parseInt0(oj_JSONObject_getString($jsonObject, $rt_s(64))));
            case 3:
                return tj_JavaishString__init_(oj_JSONObject_getString($jsonObject, $rt_s(64)));
            case 4:
                return tj_JavaishBoolean__init_(jl_Boolean_valueOf(jl_Boolean_parseBoolean(oj_JSONObject_getString($jsonObject, $rt_s(64)))));
            default:
        }
        return null;
    }
    function tj_Runner_convertJSONToVariables($jsonObject) {
        var $variables, var$3, $variableJSON, $name, $args, $lineNumber, $arguments, var$9, $i, $arg, $body, $bodyJSOJsonArray, $bodyJSON, $value, $type, $valueJSON;
        $variables = tj_Variables__init_();
        var$3 = ju_HashMap$1_iterator(ju_HashMap_keySet($jsonObject.$map));
        while (ju_HashMap$AbstractMapIterator_hasNext(var$3)) {
            $variableJSON = oj_JSONObject_getJSONObject($jsonObject, ju_HashMap$KeyIterator_next(var$3));
            if (jl_String_equals(oj_JSONObject_getString($variableJSON, $rt_s(65)), $rt_s(82))) {
                $name = oj_JSONObject_getString($variableJSON, $rt_s(74));
                $args = (jl_String_split(oj_JSONObject_getString($variableJSON, $rt_s(83)), $rt_s(56))).data;
                $lineNumber = $args.length;
                $arguments = $rt_createArray(tj_Argument, $lineNumber);
                var$9 = $arguments.data;
                $i = 0;
                while ($i < $lineNumber) {
                    ji_PrintStream_println(jl_System_out(), $args[$i]);
                    if (!jl_String_equals($args[$i], $rt_s(2))) {
                        $arg = (jl_String_split($args[$i], $rt_s(138))).data;
                        var$9[$i] = tj_Argument__init_(tj_JavaishVal$JavaishType_valueOf($arg[0]), $arg[1]);
                    }
                    $i = $i + 1 | 0;
                }
                $lineNumber = oj_JSONObject_getInt($variableJSON, $rt_s(84));
                $body = ju_ArrayList__init_();
                $bodyJSOJsonArray = oj_JSONObject_getJSONArray($variableJSON, $rt_s(57));
                $bodyJSON = ju_ArrayList__init_();
                $i = 0;
                while ($i < oj_JSONArray_length($bodyJSOJsonArray)) {
                    ju_ArrayList_add($bodyJSON, oj_JSONArray_getJSONObject($bodyJSOJsonArray, $i));
                    $i = $i + 1 | 0;
                }
                $value = ju_AbstractList_iterator($bodyJSON);
                while (ju_AbstractList$1_hasNext($value)) {
                    ju_ArrayList_add($body, tj_Runner_convertJSONToStatement(ju_AbstractList$1_next($value)));
                }
                tj_Variables_addFunction($variables, $name, $body, $arguments, $lineNumber);
                continue;
            }
            $type = tj_JavaishVal$JavaishType_valueOf(oj_JSONObject_getString($variableJSON, $rt_s(65)));
            $name = oj_JSONObject_getString($variableJSON, $rt_s(74));
            $valueJSON = oj_JSONObject__init_0();
            oj_JSONObject_put($valueJSON, $rt_s(65), $type.$name4);
            if (!jl_String_equals($type.$name4, $rt_s(75)) && !jl_String_equals($type.$name4, $rt_s(76)) && !jl_String_equals($type.$name4, $rt_s(77)) && !jl_String_equals($type.$name4, $rt_s(78))) {
                oj_JSONObject_put($valueJSON, $rt_s(64), oj_JSONObject_getString($variableJSON, $rt_s(64)));
                tj_Variables_addVariable($variables, $name, $type, tj_Runner_convertJSONToJavaishVal($valueJSON), 0);
                continue;
            }
            oj_JSONObject_put($valueJSON, $rt_s(64), tj_Runner_convertJSONToList(oj_JSONObject_getJSONObject($variableJSON, $rt_s(64))));
            tj_Variables_addList($variables, $name, $type, (tj_Runner_convertJSONToList(oj_JSONObject_getJSONObject($variableJSON, $rt_s(64)))).$list, 0);
        }
        return $variables;
    }
    function tj_Runner_convertJSONToList($jsonObject) {
        var $type, $innerType, $valueJSONArray, $list, $i, $listVal, $floatList, $intList, $stringList, $booleanList, var$12, var$13, $$je;
        $type = tj_JavaishVal$JavaishType_valueOf(oj_JSONObject_getString($jsonObject, $rt_s(65)));
        $innerType = tj_JavaishVal$JavaishType_valueOf(oj_JSONObject_getString($jsonObject, $rt_s(79)));
        oj_JSONObject_getInt($jsonObject, $rt_s(80));
        $valueJSONArray = oj_JSONObject_getJSONArray($jsonObject, $rt_s(64));
        $list = ju_ArrayList__init_();
        $i = 0;
        a: {
            b: while (true) {
                if ($i >= oj_JSONArray_length($valueJSONArray)) {
                    c: {
                        $listVal = null;
                        $floatList = jl_System_out();
                        $innerType = jl_String_valueOf($type);
                        $jsonObject = new jl_StringBuilder;
                        jl_AbstractStringBuilder__init_($jsonObject);
                        jl_StringBuilder_append(jl_StringBuilder_append($jsonObject, $innerType), $rt_s(130));
                        ji_PrintStream_println($floatList, jl_AbstractStringBuilder_toString($jsonObject));
                        tj_Runner$1_$callClinit();
                        switch (tj_Runner$1_$SwitchMap$trackerjo$javaish$JavaishVal$JavaishType.data[$type.$ordinal0]) {
                            case 5:
                                $floatList = ju_ArrayList__init_();
                                $jsonObject = ju_AbstractList_iterator($list);
                                while (ju_AbstractList$1_hasNext($jsonObject)) {
                                    ju_ArrayList_add($floatList, ju_AbstractList$1_next($jsonObject));
                                }
                                $listVal = tj_JavaishListVal__init_(tj_JavaishFloatList__init_($floatList));
                                break c;
                            case 6:
                                $intList = ju_ArrayList__init_();
                                $jsonObject = ju_AbstractList_iterator($list);
                                while (ju_AbstractList$1_hasNext($jsonObject)) {
                                    ju_ArrayList_add($intList, ju_AbstractList$1_next($jsonObject));
                                }
                                $listVal = tj_JavaishListVal__init_(tj_JavaishIntList__init_($intList));
                                break c;
                            case 7:
                                $stringList = ju_ArrayList__init_();
                                $jsonObject = ju_AbstractList_iterator($list);
                                while (ju_AbstractList$1_hasNext($jsonObject)) {
                                    ju_ArrayList_add($stringList, ju_AbstractList$1_next($jsonObject));
                                }
                                $listVal = tj_JavaishListVal__init_(tj_JavaishStringList__init_($stringList));
                                break c;
                            case 8:
                                $booleanList = ju_ArrayList__init_();
                                $jsonObject = ju_AbstractList_iterator($list);
                                while (ju_AbstractList$1_hasNext($jsonObject)) {
                                    ju_ArrayList_add($booleanList, ju_AbstractList$1_next($jsonObject));
                                }
                                $listVal = tj_JavaishListVal__init_(tj_JavaishBooleanList__init_($booleanList));
                                break c;
                            default:
                        }
                    }
                    $jsonObject = jl_System_out();
                    $type = jl_Object_toString($listVal.$list);
                    $innerType = new jl_StringBuilder;
                    jl_AbstractStringBuilder__init_($innerType);
                    jl_StringBuilder_append(jl_StringBuilder_append($innerType, $type), $rt_s(139));
                    ji_PrintStream_println($jsonObject, jl_AbstractStringBuilder_toString($innerType));
                    return $listVal;
                }
                d: {
                    e: {
                        tj_Runner$1_$callClinit();
                        switch (tj_Runner$1_$SwitchMap$trackerjo$javaish$JavaishVal$JavaishType.data[$innerType.$ordinal0]) {
                            case 1:
                                break e;
                            case 2:
                                $jsonObject = new tj_JavaishInt;
                                $listVal = oj_JSONArray_get($valueJSONArray, $i);
                                f: {
                                    try {
                                        if (!($listVal instanceof jl_Number)) {
                                            var$12 = jl_Integer_parseInt0($listVal);
                                            break f;
                                        }
                                        var$12 = $listVal.$intValue();
                                        break f;
                                    } catch ($$e) {
                                        $$je = $rt_wrapException($$e);
                                        if ($$je instanceof jl_Exception) {
                                            $type = $$je;
                                            $innerType = new oj_JSONException;
                                            $jsonObject = new jl_StringBuilder;
                                            jl_AbstractStringBuilder__init_($jsonObject);
                                            jl_AbstractStringBuilder_append1($jsonObject, $rt_s(140));
                                            $jsonObject = jl_StringBuilder_append0($jsonObject, $i);
                                            jl_AbstractStringBuilder_append1($jsonObject, $rt_s(141));
                                            jl_Throwable__init_2($innerType, jl_AbstractStringBuilder_toString($jsonObject), $type);
                                            $rt_throw($innerType);
                                        } else {
                                            throw $$e;
                                        }
                                    }
                                }
                                tj_JavaishInt__init_0($jsonObject, var$12);
                                ju_ArrayList_add($list, $jsonObject);
                                break d;
                            case 3:
                                break;
                            case 4:
                                g: {
                                    h: {
                                        $jsonObject = new tj_JavaishBoolean;
                                        $listVal = oj_JSONArray_get($valueJSONArray, $i);
                                        if (!$listVal.$equals(jl_Boolean_FALSE)) {
                                            var$12 = $listVal instanceof jl_String;
                                            if (!var$12)
                                                break h;
                                            if (!jl_String_equalsIgnoreCase($listVal, $rt_s(20)))
                                                break h;
                                        }
                                        var$12 = 0;
                                        break g;
                                    }
                                    if (!$listVal.$equals(jl_Boolean_TRUE)) {
                                        if (!var$12)
                                            break a;
                                        if (!jl_String_equalsIgnoreCase($listVal, $rt_s(21)))
                                            break a;
                                    }
                                    var$12 = 1;
                                }
                                tj_JavaishBoolean__init_0($jsonObject, jl_Boolean_valueOf(var$12));
                                ju_ArrayList_add($list, $jsonObject);
                                break d;
                            default:
                                break d;
                        }
                        $jsonObject = new tj_JavaishString;
                        $listVal = oj_JSONArray_get($valueJSONArray, $i);
                        if (!($listVal instanceof jl_String))
                            break b;
                        tj_JavaishString__init_0($jsonObject, $listVal);
                        ju_ArrayList_add($list, $jsonObject);
                        break d;
                    }
                    $listVal = new tj_JavaishFloat;
                    $jsonObject = oj_JSONArray_get($valueJSONArray, $i);
                    i: {
                        try {
                            if (!($jsonObject instanceof jl_Number)) {
                                var$13 = jl_Float_parseFloat($jsonObject.$toString());
                                break i;
                            }
                            var$13 = $jsonObject.$floatValue();
                            break i;
                        } catch ($$e) {
                            $$je = $rt_wrapException($$e);
                            if ($$je instanceof jl_Exception) {
                                $type = $$je;
                                $innerType = new oj_JSONException;
                                $jsonObject = new jl_StringBuilder;
                                jl_AbstractStringBuilder__init_($jsonObject);
                                jl_AbstractStringBuilder_append1($jsonObject, $rt_s(140));
                                $jsonObject = jl_StringBuilder_append0($jsonObject, $i);
                                jl_AbstractStringBuilder_append1($jsonObject, $rt_s(141));
                                jl_Throwable__init_2($innerType, jl_AbstractStringBuilder_toString($jsonObject), $type);
                                $rt_throw($innerType);
                            } else {
                                throw $$e;
                            }
                        }
                    }
                    tj_JavaishFloat__init_0($listVal, var$13);
                    ju_ArrayList_add($list, $listVal);
                }
                $i = $i + 1 | 0;
            }
            $type = new oj_JSONException;
            $jsonObject = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($jsonObject);
            jl_AbstractStringBuilder_append1($jsonObject, $rt_s(140));
            $jsonObject = jl_StringBuilder_append0($jsonObject, $i);
            jl_AbstractStringBuilder_append1($jsonObject, $rt_s(142));
            jl_Throwable__init_($type, jl_AbstractStringBuilder_toString($jsonObject));
            $rt_throw($type);
        }
        $type = new oj_JSONException;
        $jsonObject = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($jsonObject);
        jl_AbstractStringBuilder_append1($jsonObject, $rt_s(140));
        $jsonObject = jl_StringBuilder_append0($jsonObject, $i);
        jl_AbstractStringBuilder_append1($jsonObject, $rt_s(143));
        jl_Throwable__init_($type, jl_AbstractStringBuilder_toString($jsonObject));
        $rt_throw($type);
    }
    function tj_Runner_convertJSONToStatement($jsonObject) {
        var $type, $line, $name, $varType, $elementsJSONArray, $elements, $conditionElements, $i, $returnType, $conditionElementsJSONArray, $condition, $bodyJSOJsonArray, $bodyJSON, $newIfStmt, $ebodyJSOJsonArray, $ebodyJSON, $newElseStmt, $efconditionElementsJSONArray, $efconditionElements, $efcondition, $efbodyJSOJsonArray, $efbodyJSON, $newElseIfStmt, $returnElementsJSONArray, $returnElements, $mutationElementsJSONArray, $mutationElements, $mutationExpr, $mutationType, $fname, $arguments, $i_0, $fbodyJSOJsonArray,
        $fbodyJSON, $newFunctionStmt, $cname, $paramsString, $expressions, $param, $paramElementsJSONArray, $paramElements, $j, $aname, $assignmentElementsJSONArray, $assignmentElements, $tempVar, $listVar, $febodyJSOJsonArray, $febodyJSON, $newForEachStmt, $forwhenConditionElementsJSONArray, $forwhenConditionElements, $forwhenCondition, $incVar, $forwhenIncElementsJSONArray, $forwhenIncElements, $increment, $fwbodyJSOJsonArray, $fwbodyJSON, $newForWhenStmt, $showMsgBoxStmtElementsJSONArray, $showMsgBoxStmtElements,
        $printStmtElementsJSONArray, $printStmtElements, $whileConditionElementsJSONArray, $whileConditionElements, $whileCondition, $whilebodyJSOJsonArray, $whilebodyJSON, $newWhileStmt, $removeAllFromStmtElementsJSONArray, $removeAllFromStmtElements, $removeAllFromExpr, $removeFromStmtElementsJSONArray, $removeFromStmtElements, $removeAtStmtElementsJSONArray, $removeAtStmtElements;
        $type = tj_Statements$StmtType_valueOf(oj_JSONObject_getString($jsonObject, $rt_s(65)));
        $line = oj_JSONObject_getInt($jsonObject, $rt_s(84));
        tj_Runner$1_$callClinit();
        switch (tj_Runner$1_$SwitchMap$trackerjo$javaish$Statements$StmtType.data[jl_Enum_ordinal($type)]) {
            case 1:
                $name = oj_JSONObject_getString($jsonObject, $rt_s(74));
                $varType = tj_JavaishVal$JavaishType_valueOf(oj_JSONObject_getString($jsonObject, $rt_s(86)));
                $elementsJSONArray = oj_JSONObject_getJSONArray($jsonObject, $rt_s(64));
                $elements = $rt_createArray(tj_Element, oj_JSONArray_length($elementsJSONArray));
                $conditionElements = $elements.data;
                $i = 0;
                while ($i < oj_JSONArray_length($elementsJSONArray)) {
                    $conditionElements[$i] = tj_Runner_convertJSONToElement(oj_JSONArray_getJSONObject($elementsJSONArray, $i), $line);
                    $i = $i + 1 | 0;
                }
                $returnType = tj_Expression$ExpressionReturnType_valueOf(oj_JSONObject_getString($jsonObject, $rt_s(87)));
                return tj_DeclarationStmt__init_($line, $name, $varType, tj_Expression__init_($elements, $returnType, $line));
            case 2:
                $conditionElementsJSONArray = oj_JSONObject_getJSONArray($jsonObject, $rt_s(88));
                $conditionElements = $rt_createArray(tj_Element, oj_JSONArray_length($conditionElementsJSONArray));
                $elements = $conditionElements.data;
                $i = 0;
                while ($i < oj_JSONArray_length($conditionElementsJSONArray)) {
                    $elements[$i] = tj_Runner_convertJSONToElement(oj_JSONArray_getJSONObject($conditionElementsJSONArray, $i), $line);
                    $i = $i + 1 | 0;
                }
                $condition = tj_Expression__init_($conditionElements, tj_Expression$ExpressionReturnType_valueOf(oj_JSONObject_getString($jsonObject, $rt_s(89))), $line);
                ju_ArrayList__init_0(new ju_ArrayList);
                $bodyJSOJsonArray = oj_JSONObject_getJSONArray($jsonObject, $rt_s(73));
                $bodyJSON = ju_ArrayList__init_();
                $i = 0;
                while ($i < oj_JSONArray_length($bodyJSOJsonArray)) {
                    ju_ArrayList_add($bodyJSON, oj_JSONArray_getJSONObject($bodyJSOJsonArray, $i));
                    $i = $i + 1 | 0;
                }
                $newIfStmt = tj_IfStmt__init_($line, $condition);
                $jsonObject = ju_AbstractList_iterator($bodyJSON);
                while (ju_AbstractList$1_hasNext($jsonObject)) {
                    tj_Statements_addStatement($newIfStmt, tj_Runner_convertJSONToStatement(ju_AbstractList$1_next($jsonObject)));
                }
                return $newIfStmt;
            case 3:
                ju_ArrayList__init_0(new ju_ArrayList);
                $ebodyJSOJsonArray = oj_JSONObject_getJSONArray($jsonObject, $rt_s(90));
                $ebodyJSON = ju_ArrayList__init_();
                $i = 0;
                while ($i < oj_JSONArray_length($ebodyJSOJsonArray)) {
                    ju_ArrayList_add($ebodyJSON, oj_JSONArray_getJSONObject($ebodyJSOJsonArray, $i));
                    $i = $i + 1 | 0;
                }
                $newElseStmt = tj_ElseStmt__init_($line);
                $jsonObject = ju_AbstractList_iterator($ebodyJSON);
                while (ju_AbstractList$1_hasNext($jsonObject)) {
                    tj_Statements_addStatement($newElseStmt, tj_Runner_convertJSONToStatement(ju_AbstractList$1_next($jsonObject)));
                }
                return $newElseStmt;
            case 4:
                $efconditionElementsJSONArray = oj_JSONObject_getJSONArray($jsonObject, $rt_s(91));
                $efconditionElements = $rt_createArray(tj_Element, oj_JSONArray_length($efconditionElementsJSONArray));
                $elements = $efconditionElements.data;
                $i = 0;
                while ($i < oj_JSONArray_length($efconditionElementsJSONArray)) {
                    $elements[$i] = tj_Runner_convertJSONToElement(oj_JSONArray_getJSONObject($efconditionElementsJSONArray, $i), $line);
                    $i = $i + 1 | 0;
                }
                $efcondition = tj_Expression__init_($efconditionElements, tj_Expression$ExpressionReturnType_valueOf(oj_JSONObject_getString($jsonObject, $rt_s(92))), $line);
                ju_ArrayList__init_0(new ju_ArrayList);
                $efbodyJSOJsonArray = oj_JSONObject_getJSONArray($jsonObject, $rt_s(93));
                $efbodyJSON = ju_ArrayList__init_();
                $i = 0;
                while ($i < oj_JSONArray_length($efbodyJSOJsonArray)) {
                    ju_ArrayList_add($efbodyJSON, oj_JSONArray_getJSONObject($efbodyJSOJsonArray, $i));
                    $i = $i + 1 | 0;
                }
                $newElseIfStmt = tj_ElseIfStmt__init_($line, $efcondition);
                $jsonObject = ju_AbstractList_iterator($efbodyJSON);
                while (ju_AbstractList$1_hasNext($jsonObject)) {
                    tj_Statements_addStatement($newElseIfStmt, tj_Runner_convertJSONToStatement(ju_AbstractList$1_next($jsonObject)));
                }
                return $newElseIfStmt;
            case 5:
                break;
            case 6:
                if (jl_String_equals(oj_JSONObject_getString($jsonObject, $rt_s(94)), $rt_s(11)))
                    return tj_ReturnStmt__init_($line, null, 0);
                $returnElementsJSONArray = oj_JSONObject_getJSONArray($jsonObject, $rt_s(94));
                $returnElements = $rt_createArray(tj_Element, oj_JSONArray_length($returnElementsJSONArray));
                $elements = $returnElements.data;
                $i = 0;
                while ($i < oj_JSONArray_length($returnElementsJSONArray)) {
                    $elements[$i] = tj_Runner_convertJSONToElement(oj_JSONArray_getJSONObject($returnElementsJSONArray, $i), $line);
                    $i = $i + 1 | 0;
                }
                return tj_ReturnStmt__init_($line, tj_Expression__init_($returnElements, tj_Expression$ExpressionReturnType_valueOf(oj_JSONObject_getString($jsonObject, $rt_s(95))), $line), 1);
            case 7:
                $mutationElementsJSONArray = oj_JSONObject_getJSONArray($jsonObject, $rt_s(96));
                $mutationElements = $rt_createArray(tj_Element, oj_JSONArray_length($mutationElementsJSONArray));
                $elements = $mutationElements.data;
                $i = 0;
                while ($i < oj_JSONArray_length($mutationElementsJSONArray)) {
                    $elements[$i] = tj_Runner_convertJSONToElement(oj_JSONArray_getJSONObject($mutationElementsJSONArray, $i), $line);
                    $i = $i + 1 | 0;
                }
                $mutationExpr = tj_Expression__init_($mutationElements, tj_Expression$ExpressionReturnType_valueOf(oj_JSONObject_getString($jsonObject, $rt_s(99))), $line);
                $mutationType = oj_JSONObject_getString($jsonObject, $rt_s(97));
                return tj_MutationStmt__init_($line, oj_JSONObject_getString($jsonObject, $rt_s(98)), $mutationExpr, tj_Statements$MutationType_valueOf($mutationType));
            case 8:
                $fname = oj_JSONObject_getString($jsonObject, $rt_s(74));
                $elements = (jl_String_split(oj_JSONObject_getString($jsonObject, $rt_s(83)), $rt_s(56))).data;
                $i = $elements.length;
                $arguments = $rt_createArray(tj_Argument, $i);
                $conditionElements = $arguments.data;
                $i_0 = 0;
                while ($i_0 < $i) {
                    $efconditionElements = (jl_String_split($elements[$i_0], $rt_s(138))).data;
                    $conditionElements[$i_0] = tj_Argument__init_(tj_JavaishVal$JavaishType_valueOf($efconditionElements[0]), $efconditionElements[1]);
                    $i_0 = $i_0 + 1 | 0;
                }
                ju_ArrayList__init_0(new ju_ArrayList);
                $fbodyJSOJsonArray = oj_JSONObject_getJSONArray($jsonObject, $rt_s(100));
                $fbodyJSON = ju_ArrayList__init_();
                $i = 0;
                while ($i < oj_JSONArray_length($fbodyJSOJsonArray)) {
                    ju_ArrayList_add($fbodyJSON, oj_JSONArray_getJSONObject($fbodyJSOJsonArray, $i));
                    $i = $i + 1 | 0;
                }
                $newFunctionStmt = tj_FunctionStmt__init_($line, $fname, $arguments);
                $jsonObject = ju_AbstractList_iterator($fbodyJSON);
                while (ju_AbstractList$1_hasNext($jsonObject)) {
                    tj_Statements_addStatement($newFunctionStmt, tj_Runner_convertJSONToStatement(ju_AbstractList$1_next($jsonObject)));
                }
                return $newFunctionStmt;
            case 9:
                $cname = oj_JSONObject_getString($jsonObject, $rt_s(74));
                $paramsString = oj_JSONObject_getJSONArray($jsonObject, $rt_s(103));
                $expressions = $rt_createArray(tj_Expression, oj_JSONArray_length($paramsString));
                $elements = $expressions.data;
                $i = 0;
                while ($i < oj_JSONArray_length($paramsString)) {
                    $param = oj_JSONArray_getJSONObject($paramsString, $i);
                    $paramElementsJSONArray = oj_JSONObject_getJSONArray($param, $rt_s(101));
                    $paramElements = $rt_createArray(tj_Element, oj_JSONArray_length($paramElementsJSONArray));
                    $conditionElements = $paramElements.data;
                    $j = 0;
                    while ($j < oj_JSONArray_length($paramElementsJSONArray)) {
                        $conditionElements[$j] = tj_Runner_convertJSONToElement(oj_JSONArray_getJSONObject($paramElementsJSONArray, $j), $line);
                        $j = $j + 1 | 0;
                    }
                    $elements[$i] = tj_Expression__init_($paramElements, tj_Expression$ExpressionReturnType_valueOf(oj_JSONObject_getString($param, $rt_s(102))), $line);
                    $i = $i + 1 | 0;
                }
                return tj_CallStmt__init_($line, $cname, $expressions);
            case 10:
                $aname = oj_JSONObject_getString($jsonObject, $rt_s(74));
                $assignmentElementsJSONArray = oj_JSONObject_getJSONArray($jsonObject, $rt_s(104));
                $assignmentElements = $rt_createArray(tj_Element, oj_JSONArray_length($assignmentElementsJSONArray));
                $elements = $assignmentElements.data;
                $i = 0;
                while ($i < oj_JSONArray_length($assignmentElementsJSONArray)) {
                    $elements[$i] = tj_Runner_convertJSONToElement(oj_JSONArray_getJSONObject($assignmentElementsJSONArray, $i), $line);
                    $i = $i + 1 | 0;
                }
                return tj_AssignmentStmt__init_($line, $aname, tj_Expression__init_($assignmentElements, tj_Expression$ExpressionReturnType_valueOf(oj_JSONObject_getString($jsonObject, $rt_s(105))), $line));
            case 11:
                $tempVar = oj_JSONObject_getString($jsonObject, $rt_s(106));
                $listVar = oj_JSONObject_getString($jsonObject, $rt_s(107));
                ju_ArrayList__init_0(new ju_ArrayList);
                $febodyJSOJsonArray = oj_JSONObject_getJSONArray($jsonObject, $rt_s(108));
                $febodyJSON = ju_ArrayList__init_();
                $i = 0;
                while ($i < oj_JSONArray_length($febodyJSOJsonArray)) {
                    ju_ArrayList_add($febodyJSON, oj_JSONArray_getJSONObject($febodyJSOJsonArray, $i));
                    $i = $i + 1 | 0;
                }
                $newForEachStmt = tj_ForEachStmt__init_($line, $tempVar, $listVar);
                $jsonObject = ju_AbstractList_iterator($febodyJSON);
                while (ju_AbstractList$1_hasNext($jsonObject)) {
                    tj_Statements_addStatement($newForEachStmt, tj_Runner_convertJSONToStatement(ju_AbstractList$1_next($jsonObject)));
                }
                return $newForEachStmt;
            case 12:
                $forwhenConditionElementsJSONArray = oj_JSONObject_getJSONArray($jsonObject, $rt_s(88));
                $forwhenConditionElements = $rt_createArray(tj_Element, oj_JSONArray_length($forwhenConditionElementsJSONArray));
                $elements = $forwhenConditionElements.data;
                $i = 0;
                while ($i < oj_JSONArray_length($forwhenConditionElementsJSONArray)) {
                    $elements[$i] = tj_Runner_convertJSONToElement(oj_JSONArray_getJSONObject($forwhenConditionElementsJSONArray, $i), $line);
                    $i = $i + 1 | 0;
                }
                $forwhenCondition = tj_Expression__init_($forwhenConditionElements, tj_Expression$ExpressionReturnType_valueOf(oj_JSONObject_getString($jsonObject, $rt_s(112))), $line);
                $incVar = oj_JSONObject_getString($jsonObject, $rt_s(109));
                $forwhenIncElementsJSONArray = oj_JSONObject_getJSONArray($jsonObject, $rt_s(110));
                $forwhenIncElements = $rt_createArray(tj_Element, oj_JSONArray_length($forwhenIncElementsJSONArray));
                $elements = $forwhenIncElements.data;
                $i = 0;
                while ($i < oj_JSONArray_length($forwhenIncElementsJSONArray)) {
                    $elements[$i] = tj_Runner_convertJSONToElement(oj_JSONArray_getJSONObject($forwhenIncElementsJSONArray, $i), $line);
                    $i = $i + 1 | 0;
                }
                $increment = tj_Expression__init_($forwhenIncElements, tj_Expression$ExpressionReturnType_valueOf(oj_JSONObject_getString($jsonObject, $rt_s(111))), $line);
                ju_ArrayList__init_0(new ju_ArrayList);
                $fwbodyJSOJsonArray = oj_JSONObject_getJSONArray($jsonObject, $rt_s(113));
                $fwbodyJSON = ju_ArrayList__init_();
                $i = 0;
                while ($i < oj_JSONArray_length($fwbodyJSOJsonArray)) {
                    ju_ArrayList_add($fwbodyJSON, oj_JSONArray_getJSONObject($fwbodyJSOJsonArray, $i));
                    $i = $i + 1 | 0;
                }
                $newForWhenStmt = tj_ForWhenStmt__init_($line, $forwhenCondition, $increment, $incVar);
                $jsonObject = ju_AbstractList_iterator($fwbodyJSON);
                while (ju_AbstractList$1_hasNext($jsonObject)) {
                    tj_Statements_addStatement($newForWhenStmt, tj_Runner_convertJSONToStatement(ju_AbstractList$1_next($jsonObject)));
                }
                return $newForWhenStmt;
            case 13:
                $showMsgBoxStmtElementsJSONArray = oj_JSONObject_getJSONArray($jsonObject, $rt_s(114));
                $showMsgBoxStmtElements = $rt_createArray(tj_Element, oj_JSONArray_length($showMsgBoxStmtElementsJSONArray));
                $elements = $showMsgBoxStmtElements.data;
                $i = 0;
                while ($i < oj_JSONArray_length($showMsgBoxStmtElementsJSONArray)) {
                    $elements[$i] = tj_Runner_convertJSONToElement(oj_JSONArray_getJSONObject($showMsgBoxStmtElementsJSONArray, $i), $line);
                    $i = $i + 1 | 0;
                }
                return tj_ShowMsgBoxStmt__init_($line, tj_Expression__init_($showMsgBoxStmtElements, tj_Expression$ExpressionReturnType_valueOf(oj_JSONObject_getString($jsonObject, $rt_s(144))), $line));
            case 14:
                $printStmtElementsJSONArray = oj_JSONObject_getJSONArray($jsonObject, $rt_s(116));
                $printStmtElements = $rt_createArray(tj_Element, oj_JSONArray_length($printStmtElementsJSONArray));
                $elements = $printStmtElements.data;
                $i = 0;
                while ($i < oj_JSONArray_length($printStmtElementsJSONArray)) {
                    $elements[$i] = tj_Runner_convertJSONToElement(oj_JSONArray_getJSONObject($printStmtElementsJSONArray, $i), $line);
                    $i = $i + 1 | 0;
                }
                return tj_PrintStmt__init_($line, tj_Expression__init_($printStmtElements, tj_Expression$ExpressionReturnType_valueOf(oj_JSONObject_getString($jsonObject, $rt_s(117))), $line));
            case 15:
                $whileConditionElementsJSONArray = oj_JSONObject_getJSONArray($jsonObject, $rt_s(118));
                $whileConditionElements = $rt_createArray(tj_Element, oj_JSONArray_length($whileConditionElementsJSONArray));
                $elements = $whileConditionElements.data;
                $i = 0;
                while ($i < oj_JSONArray_length($whileConditionElementsJSONArray)) {
                    $elements[$i] = tj_Runner_convertJSONToElement(oj_JSONArray_getJSONObject($whileConditionElementsJSONArray, $i), $line);
                    $i = $i + 1 | 0;
                }
                $whileCondition = tj_Expression__init_($whileConditionElements, tj_Expression$ExpressionReturnType_valueOf(oj_JSONObject_getString($jsonObject, $rt_s(119))), $line);
                ju_ArrayList__init_0(new ju_ArrayList);
                $whilebodyJSOJsonArray = oj_JSONObject_getJSONArray($jsonObject, $rt_s(120));
                $whilebodyJSON = ju_ArrayList__init_();
                $i = 0;
                while ($i < oj_JSONArray_length($whilebodyJSOJsonArray)) {
                    ju_ArrayList_add($whilebodyJSON, oj_JSONArray_getJSONObject($whilebodyJSOJsonArray, $i));
                    $i = $i + 1 | 0;
                }
                $newWhileStmt = tj_WhileStmt__init_($line, $whileCondition);
                $jsonObject = ju_AbstractList_iterator($whilebodyJSON);
                while (ju_AbstractList$1_hasNext($jsonObject)) {
                    tj_Statements_addStatement($newWhileStmt, tj_Runner_convertJSONToStatement(ju_AbstractList$1_next($jsonObject)));
                }
                return $newWhileStmt;
            case 16:
                $removeAllFromStmtElementsJSONArray = oj_JSONObject_getJSONArray($jsonObject, $rt_s(121));
                $removeAllFromStmtElements = $rt_createArray(tj_Element, oj_JSONArray_length($removeAllFromStmtElementsJSONArray));
                $elements = $removeAllFromStmtElements.data;
                $i = 0;
                while ($i < oj_JSONArray_length($removeAllFromStmtElementsJSONArray)) {
                    $elements[$i] = tj_Runner_convertJSONToElement(oj_JSONArray_getJSONObject($removeAllFromStmtElementsJSONArray, $i), $line);
                    $i = $i + 1 | 0;
                }
                $removeAllFromExpr = tj_Expression__init_($removeAllFromStmtElements, tj_Expression$ExpressionReturnType_valueOf(oj_JSONObject_getString($jsonObject, $rt_s(123))), $line);
                return tj_RemoveAllFromStmt__init_($line, oj_JSONObject_getString($jsonObject, $rt_s(122)), $removeAllFromExpr);
            case 17:
                $removeFromStmtElementsJSONArray = oj_JSONObject_getJSONArray($jsonObject, $rt_s(124));
                $removeFromStmtElements = $rt_createArray(tj_Element, oj_JSONArray_length($removeFromStmtElementsJSONArray));
                $elements = $removeFromStmtElements.data;
                $i = 0;
                while ($i < oj_JSONArray_length($removeFromStmtElementsJSONArray)) {
                    $elements[$i] = tj_Runner_convertJSONToElement(oj_JSONArray_getJSONObject($removeFromStmtElementsJSONArray, $i), $line);
                    $i = $i + 1 | 0;
                }
                return tj_RemoveFromStmt__init_($line, tj_Expression__init_($removeFromStmtElements, tj_Expression$ExpressionReturnType_valueOf(oj_JSONObject_getString($jsonObject, $rt_s(126))), $line), oj_JSONObject_getString($jsonObject, $rt_s(125)));
            case 18:
                $removeAtStmtElementsJSONArray = oj_JSONObject_getJSONArray($jsonObject, $rt_s(127));
                $removeAtStmtElements = $rt_createArray(tj_Element, oj_JSONArray_length($removeAtStmtElementsJSONArray));
                $elements = $removeAtStmtElements.data;
                $i = 0;
                while ($i < oj_JSONArray_length($removeAtStmtElementsJSONArray)) {
                    $elements[$i] = tj_Runner_convertJSONToElement(oj_JSONArray_getJSONObject($removeAtStmtElementsJSONArray, $i), $line);
                    $i = $i + 1 | 0;
                }
                return tj_RemoveAtStmt__init_($line, tj_Expression__init_($removeAtStmtElements, tj_Expression$ExpressionReturnType_valueOf(oj_JSONObject_getString($jsonObject, $rt_s(129))), $line), oj_JSONObject_getString($jsonObject, $rt_s(128)));
            default:
                return null;
        }
        return null;
    }
    function tj_Runner_convertJSONToElement($jsonObject, $line) {
        var $element, $expressionStmtElementsJSONArray, $elementType, $expressionFromStmtElements, $notElements, $i, $notStmtElementsJSONArray, $i_0, $castStmtElementsJSONArray, $castElements, $castExpr, $showInputBoxStmtElementsJSONArray, $showInputBoxStmtElements, $paramsString, $expressions, $param, $elementsCall, $paramReturnType, $paramElementsJSONArray, $j, $listJSONArray, $list, $listElementJSONArray, $listElement, $listValStmtElementsJSONArray, $listValStmtElements, $listValExpr;
        a: {
            $element = new tj_Element;
            $expressionStmtElementsJSONArray = oj_JSONObject_getString($jsonObject, $rt_s(131));
            tj_Element$ElementType_$callClinit();
            $elementType = jl_Enum_valueOf($rt_cls(tj_Element$ElementType), $expressionStmtElementsJSONArray);
            tj_Runner$1_$callClinit();
            switch (tj_Runner$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[$elementType.$ordinal0]) {
                case 1:
                    $expressionStmtElementsJSONArray = oj_JSONObject_getJSONArray($jsonObject, $rt_s(133));
                    $expressionFromStmtElements = $rt_createArray(tj_Element, oj_JSONArray_length($expressionStmtElementsJSONArray));
                    $notElements = $expressionFromStmtElements.data;
                    $i = 0;
                    while ($i < oj_JSONArray_length($expressionStmtElementsJSONArray)) {
                        $notElements[$i] = tj_Runner_convertJSONToElement(oj_JSONArray_getJSONObject($expressionStmtElementsJSONArray, $i), $line);
                        $i = $i + 1 | 0;
                    }
                    $element = tj_ExpressionElmt__init_(tj_Expression__init_($expressionFromStmtElements, tj_Expression$ExpressionReturnType_valueOf(oj_JSONObject_getString($jsonObject, $rt_s(132))), $line));
                    break a;
                case 2:
                    $notStmtElementsJSONArray = oj_JSONObject_getJSONArray($jsonObject, $rt_s(133));
                    $notElements = $rt_createArray(tj_Element, oj_JSONArray_length($notStmtElementsJSONArray));
                    $expressionFromStmtElements = $notElements.data;
                    $i_0 = 0;
                    while ($i_0 < oj_JSONArray_length($notStmtElementsJSONArray)) {
                        $expressionFromStmtElements[$i_0] = tj_Runner_convertJSONToElement(oj_JSONArray_getJSONObject($notStmtElementsJSONArray, $i_0), $line);
                        $i_0 = $i_0 + 1 | 0;
                    }
                    $element = tj_NotElmt__init_(tj_Expression__init_($notElements, tj_Expression$ExpressionReturnType_valueOf(oj_JSONObject_getString($jsonObject, $rt_s(132))), $line));
                    break a;
                case 3:
                    $castStmtElementsJSONArray = oj_JSONObject_getJSONArray($jsonObject, $rt_s(133));
                    $castElements = $rt_createArray(tj_Element, oj_JSONArray_length($castStmtElementsJSONArray));
                    $expressionFromStmtElements = $castElements.data;
                    $i = 0;
                    while ($i < oj_JSONArray_length($castStmtElementsJSONArray)) {
                        $expressionFromStmtElements[$i] = tj_Runner_convertJSONToElement(oj_JSONArray_getJSONObject($castStmtElementsJSONArray, $i), $line);
                        $i = $i + 1 | 0;
                    }
                    $castExpr = tj_Expression__init_($castElements, tj_Expression$ExpressionReturnType_valueOf(oj_JSONObject_getString($jsonObject, $rt_s(132))), $line);
                    $element = tj_CastElmt__init_(tj_JavaishVal$JavaishType_valueOf(oj_JSONObject_getString($jsonObject, $rt_s(134))), $castExpr);
                    break a;
                case 4:
                    $showInputBoxStmtElementsJSONArray = oj_JSONObject_getJSONArray($jsonObject, $rt_s(133));
                    $showInputBoxStmtElements = $rt_createArray(tj_Element, oj_JSONArray_length($showInputBoxStmtElementsJSONArray));
                    $expressionFromStmtElements = $showInputBoxStmtElements.data;
                    $i = 0;
                    while ($i < oj_JSONArray_length($showInputBoxStmtElementsJSONArray)) {
                        $expressionFromStmtElements[$i] = tj_Runner_convertJSONToElement(oj_JSONArray_getJSONObject($showInputBoxStmtElementsJSONArray, $i), $line);
                        $i = $i + 1 | 0;
                    }
                    $element = tj_ShowInputBoxElmt__init_(tj_Expression__init_($showInputBoxStmtElements, tj_Expression$ExpressionReturnType_valueOf(oj_JSONObject_getString($jsonObject, $rt_s(132))), $line));
                    break a;
                case 5:
                    $paramsString = oj_JSONObject_getJSONArray($jsonObject, $rt_s(103));
                    $expressions = $rt_createArray(tj_Expression, oj_JSONArray_length($paramsString));
                    $expressionFromStmtElements = $expressions.data;
                    $i = 0;
                    while ($i < oj_JSONArray_length($paramsString)) {
                        $param = oj_JSONArray_getJSONObject($paramsString, $i);
                        $elementsCall = $rt_createArray(tj_Element, oj_JSONObject_length($param));
                        $notElements = $elementsCall.data;
                        $paramReturnType = oj_JSONObject_getString($param, $rt_s(102));
                        $paramElementsJSONArray = oj_JSONObject_getJSONArray($param, $rt_s(101));
                        $j = 0;
                        while ($j < oj_JSONArray_length($paramElementsJSONArray)) {
                            $notElements[$j] = tj_Runner_convertJSONToElement(oj_JSONArray_getJSONObject($paramElementsJSONArray, $j), $line);
                            $j = $j + 1 | 0;
                        }
                        $expressionFromStmtElements[$i] = tj_Expression__init_($elementsCall, tj_Expression$ExpressionReturnType_valueOf($paramReturnType), $line);
                        $i = $i + 1 | 0;
                    }
                    $element = tj_FunctionElmt__init_(oj_JSONObject_getString($jsonObject, $rt_s(74)), $expressions);
                    break a;
                case 6:
                    $listJSONArray = oj_JSONObject_getJSONArray($jsonObject, $rt_s(133));
                    $list = ju_ArrayList__init_();
                    $i = 0;
                    while ($i < oj_JSONArray_length($listJSONArray)) {
                        $element = oj_JSONArray_get($listJSONArray, $i);
                        if (!($element instanceof oj_JSONArray)) {
                            $element = new oj_JSONException;
                            $jsonObject = new jl_StringBuilder;
                            jl_AbstractStringBuilder__init_($jsonObject);
                            jl_AbstractStringBuilder_append1($jsonObject, $rt_s(140));
                            $jsonObject = jl_StringBuilder_append0($jsonObject, $i);
                            jl_AbstractStringBuilder_append1($jsonObject, $rt_s(145));
                            jl_Throwable__init_($element, jl_AbstractStringBuilder_toString($jsonObject));
                            $rt_throw($element);
                        }
                        $listElementJSONArray = $element;
                        $listElement = $rt_createArray(tj_Element, oj_JSONArray_length($listElementJSONArray));
                        $expressionFromStmtElements = $listElement.data;
                        $j = 0;
                        while ($j < oj_JSONArray_length($listElementJSONArray)) {
                            $expressionFromStmtElements[$j] = tj_Runner_convertJSONToElement(oj_JSONArray_getJSONObject($listElementJSONArray, $j), $line);
                            $j = $j + 1 | 0;
                        }
                        ju_ArrayList_add($list, tj_Expression__init_($listElement, tj_Expression$ExpressionReturnType_valueOf(oj_JSONObject_getString($jsonObject, $rt_s(135))), $line));
                        $i = $i + 1 | 0;
                    }
                    $element = tj_ListElmt__init_($list, tj_JavaishVal$JavaishType_valueOf(oj_JSONObject_getString($jsonObject, $rt_s(135))));
                    break a;
                case 7:
                    $element = tj_ArrayLengthElmt__init_(oj_JSONObject_getString($jsonObject, $rt_s(133)));
                    break a;
                case 8:
                    $element = tj_VariableElmt__init_(oj_JSONObject_getString($jsonObject, $rt_s(133)));
                    break a;
                case 9:
                    $listValStmtElementsJSONArray = oj_JSONObject_getJSONArray($jsonObject, $rt_s(133));
                    $listValStmtElements = $rt_createArray(tj_Element, oj_JSONArray_length($listValStmtElementsJSONArray));
                    $expressionFromStmtElements = $listValStmtElements.data;
                    $i = 0;
                    while ($i < oj_JSONArray_length($listValStmtElementsJSONArray)) {
                        $expressionFromStmtElements[$i] = tj_Runner_convertJSONToElement(oj_JSONArray_getJSONObject($listValStmtElementsJSONArray, $i), $line);
                        $i = $i + 1 | 0;
                    }
                    $listValExpr = new tj_Expression;
                    tj_Expression$ExpressionReturnType_$callClinit();
                    tj_Expression__init_0($listValExpr, $listValStmtElements, tj_Expression$ExpressionReturnType_NUMBER, $line);
                    $element = tj_ListValElmt__init_(oj_JSONObject_getString($jsonObject, $rt_s(136)), $listValExpr);
                    break a;
                case 10:
                    $element = tj_StringElmt__init_(oj_JSONObject_getString($jsonObject, $rt_s(133)));
                    break a;
                case 11:
                    $element = tj_AndElmt__init_();
                    break a;
                case 12:
                    $element = tj_OrElmt__init_();
                    break a;
                case 13:
                    $element = tj_PlusElmt__init_();
                    break a;
                case 14:
                    $element = tj_MinusElmt__init_();
                    break a;
                case 15:
                    $element = tj_MultiplyElmt__init_();
                    break a;
                case 16:
                    $element = tj_DivideElmt__init_();
                    break a;
                case 17:
                    $element = tj_FloatElmt__init_(jl_Float_parseFloat(oj_JSONObject_getString($jsonObject, $rt_s(133))));
                    break a;
                case 18:
                    $element = tj_IntElmt__init_(jl_Integer_parseInt0(oj_JSONObject_getString($jsonObject, $rt_s(133))));
                    break a;
                case 19:
                    $element = tj_BoolElmt__init_(jl_Boolean_parseBoolean(oj_JSONObject_getString($jsonObject, $rt_s(133))));
                    break a;
                case 20:
                    $element = tj_EqualElmt__init_();
                    break a;
                case 21:
                    $element = tj_NotEqualElmt__init_();
                    break a;
                case 22:
                    $element = tj_GreaterThanElmt__init_();
                    break a;
                case 23:
                    $element = tj_LessThanElmt__init_();
                    break a;
                case 24:
                    $element = tj_GreaterThanEqualElmt__init_();
                    break a;
                case 25:
                    $element = tj_LessThanEqualElmt__init_();
                    break a;
                default:
            }
        }
        return $element;
    }
    var jl_System = $rt_classWithoutFields();
    var jl_System_outCache = null;
    var jl_System_errCache = null;
    function jl_System_out() {
        if (jl_System_outCache === null)
            jl_System_outCache = ji_PrintStream__init_(otcic_StdoutOutputStream_INSTANCE, 0);
        return jl_System_outCache;
    }
    function jl_System_err() {
        if (jl_System_errCache === null)
            jl_System_errCache = ji_PrintStream__init_(otcic_StderrOutputStream_INSTANCE, 0);
        return jl_System_errCache;
    }
    function jl_System_arraycopy($src, $srcPos, $dest, $destPos, $length) {
        var $srcType, $targetType, $srcArray, $i, var$10, var$11, var$12;
        if ($src !== null && $dest !== null) {
            if ($srcPos >= 0 && $destPos >= 0 && $length >= 0 && ($srcPos + $length | 0) <= jlr_Array_getLength($src) && ($destPos + $length | 0) <= jlr_Array_getLength($dest)) {
                a: {
                    b: {
                        if ($src !== $dest) {
                            $srcType = jl_Class_getComponentType(jl_Object_getClass($src));
                            $targetType = jl_Class_getComponentType(jl_Object_getClass($dest));
                            if ($srcType !== null && $targetType !== null) {
                                if ($srcType === $targetType)
                                    break b;
                                if (!jl_Class_isPrimitive($srcType) && !jl_Class_isPrimitive($targetType)) {
                                    $srcArray = $src;
                                    $i = 0;
                                    var$10 = $srcPos;
                                    while ($i < $length) {
                                        var$11 = $srcArray.data;
                                        var$12 = var$10 + 1 | 0;
                                        if (!jl_Class_isInstance($targetType, var$11[var$10])) {
                                            jl_System_doArrayCopy($src, $srcPos, $dest, $destPos, $i);
                                            $src = new jl_ArrayStoreException;
                                            jl_Exception__init_($src);
                                            $rt_throw($src);
                                        }
                                        $i = $i + 1 | 0;
                                        var$10 = var$12;
                                    }
                                    jl_System_doArrayCopy($src, $srcPos, $dest, $destPos, $length);
                                    return;
                                }
                                if (!jl_Class_isPrimitive($srcType))
                                    break a;
                                if (jl_Class_isPrimitive($targetType))
                                    break b;
                                else
                                    break a;
                            }
                            $src = new jl_ArrayStoreException;
                            jl_Exception__init_($src);
                            $rt_throw($src);
                        }
                    }
                    jl_System_doArrayCopy($src, $srcPos, $dest, $destPos, $length);
                    return;
                }
                $src = new jl_ArrayStoreException;
                jl_Exception__init_($src);
                $rt_throw($src);
            }
            $src = new jl_IndexOutOfBoundsException;
            jl_Exception__init_($src);
            $rt_throw($src);
        }
        $dest = new jl_NullPointerException;
        jl_Throwable__init_($dest, $rt_s(146));
        $rt_throw($dest);
    }
    function jl_System_fastArraycopy($src, $srcPos, $dest, $destPos, $length) {
        if ($srcPos >= 0 && $destPos >= 0 && $length >= 0 && ($srcPos + $length | 0) <= jlr_Array_getLength($src) && ($destPos + $length | 0) <= jlr_Array_getLength($dest)) {
            jl_System_doArrayCopy($src, $srcPos, $dest, $destPos, $length);
            return;
        }
        $src = new jl_IndexOutOfBoundsException;
        jl_Exception__init_($src);
        $rt_throw($src);
    }
    function jl_System_doArrayCopy(var$1, var$2, var$3, var$4, var$5) {
        if (var$5 === 0) {
            return; 
        } else if (typeof var$1.data.buffer !== 'undefined') {
            var$3.data.set(var$1.data.subarray(var$2, var$2 + var$5), var$4);
        } else if (var$1 !== var$3 || var$4 < var$2) {
            for (var i = 0; i < var$5; i = (i + 1) | 0) {
                var$3.data[var$4++] = var$1.data[var$2++];
            }
        } else {
            var$2 = (var$2 + var$5) | 0;
            var$4 = (var$4 + var$5) | 0;
            for (var i = 0; i < var$5; i = (i + 1) | 0) {
                var$3.data[--var$4] = var$1.data[--var$2];
            }
        }
    }
    function jl_System_currentTimeMillis() {
        return Long_fromNumber(new Date().getTime());
    }
    function oj_JSONObject() {
        jl_Object.call(this);
        this.$map = null;
    }
    var oj_JSONObject_NULL = null;
    function oj_JSONObject__init_0() {
        var var_0 = new oj_JSONObject();
        oj_JSONObject__init_1(var_0);
        return var_0;
    }
    function oj_JSONObject__init_2(var_0) {
        var var_1 = new oj_JSONObject();
        oj_JSONObject__init_(var_1, var_0);
        return var_1;
    }
    function oj_JSONObject__init_3(var_0) {
        var var_1 = new oj_JSONObject();
        oj_JSONObject__init_4(var_1, var_0);
        return var_1;
    }
    function oj_JSONObject__init_5(var_0) {
        var var_1 = new oj_JSONObject();
        oj_JSONObject__init_6(var_1, var_0);
        return var_1;
    }
    function oj_JSONObject__init_1($this) {
        $this.$map = ju_HashMap__init_();
    }
    function oj_JSONObject__init_($this, $x) {
        var $key, $value;
        oj_JSONObject__init_1($this);
        if (oj_JSONTokener_nextClean($x) != 123)
            $rt_throw(oj_JSONTokener_syntaxError($x, $rt_s(147)));
        a: while (true) {
            switch (oj_JSONTokener_nextClean($x)) {
                case 0:
                    $rt_throw(oj_JSONTokener_syntaxError($x, $rt_s(148)));
                case 125:
                    break a;
                default:
            }
            oj_JSONTokener_back($x);
            $key = (oj_JSONTokener_nextValue($x)).$toString();
            if (oj_JSONTokener_nextClean($x) != 58)
                $rt_throw(oj_JSONTokener_syntaxError($x, $rt_s(149)));
            if ($key !== null) {
                if (oj_JSONObject_opt($this, $key) !== null) {
                    $value = new jl_StringBuilder;
                    jl_AbstractStringBuilder__init_($value);
                    jl_AbstractStringBuilder_append1($value, $rt_s(150));
                    jl_AbstractStringBuilder_append1($value, $key);
                    jl_AbstractStringBuilder_append1($value, $rt_s(151));
                    $rt_throw(oj_JSONTokener_syntaxError($x, jl_AbstractStringBuilder_toString($value)));
                }
                $value = oj_JSONTokener_nextValue($x);
                if ($value !== null)
                    oj_JSONObject_put($this, $key, $value);
            }
            switch (oj_JSONTokener_nextClean($x)) {
                case 44:
                case 59:
                    break;
                case 125:
                    return;
                default:
                    $rt_throw(oj_JSONTokener_syntaxError($x, $rt_s(152)));
            }
            if (oj_JSONTokener_nextClean($x) == 125)
                return;
            oj_JSONTokener_back($x);
        }
    }
    function oj_JSONObject__init_4($this, $m) {
        var $e, $value;
        a: {
            if ($m === null)
                $this.$map = ju_HashMap__init_();
            else {
                $this.$map = ju_HashMap__init_0($m.$size());
                $m = ($m.$entrySet()).$iterator();
                while (true) {
                    if (!$m.$hasNext())
                        break a;
                    $e = $m.$next();
                    $value = $e.$getValue0();
                    if ($value !== null)
                        ju_HashMap_put($this.$map, jl_String_valueOf($e.$getKey()), oj_JSONObject_wrap($value));
                }
            }
        }
    }
    function oj_JSONObject__init_6($this, $bean) {
        oj_JSONObject__init_1($this);
        oj_JSONObject_populateMap($this, $bean);
    }
    function oj_JSONObject_get($this, $key) {
        var $object, var$3;
        if ($key === null) {
            $key = new oj_JSONException;
            jl_Throwable__init_($key, $rt_s(153));
            $rt_throw($key);
        }
        $object = oj_JSONObject_opt($this, $key);
        if ($object !== null)
            return $object;
        var$3 = new oj_JSONException;
        $object = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($object);
        jl_AbstractStringBuilder_append1($object, $rt_s(154));
        jl_AbstractStringBuilder_append1($object, oj_JSONObject_quote($key));
        jl_AbstractStringBuilder_append1($object, $rt_s(155));
        jl_Throwable__init_(var$3, jl_AbstractStringBuilder_toString($object));
        $rt_throw(var$3);
    }
    function oj_JSONObject_getBoolean($this, $key) {
        var $object, var$3, var$4;
        a: {
            $object = oj_JSONObject_get($this, $key);
            if (!$object.$equals(jl_Boolean_FALSE)) {
                var$3 = $object instanceof jl_String;
                if (!var$3)
                    break a;
                if (!jl_String_equalsIgnoreCase($object, $rt_s(20)))
                    break a;
            }
            return 0;
        }
        b: {
            if (!$object.$equals(jl_Boolean_TRUE)) {
                if (!var$3)
                    break b;
                if (!jl_String_equalsIgnoreCase($object, $rt_s(21)))
                    break b;
            }
            return 1;
        }
        var$4 = new oj_JSONException;
        $object = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($object);
        jl_AbstractStringBuilder_append1($object, $rt_s(154));
        jl_AbstractStringBuilder_append1($object, oj_JSONObject_quote($key));
        jl_AbstractStringBuilder_append1($object, $rt_s(156));
        jl_Throwable__init_(var$4, jl_AbstractStringBuilder_toString($object));
        $rt_throw(var$4);
    }
    function oj_JSONObject_getInt($this, $key) {
        var $object, var$3, $e, var$5, $$je;
        $object = oj_JSONObject_get($this, $key);
        a: {
            try {
                var$3 = !($object instanceof jl_Number) ? jl_Integer_parseInt0($object) : $object.$intValue();
            } catch ($$e) {
                $$je = $rt_wrapException($$e);
                if ($$je instanceof jl_Exception) {
                    $e = $$je;
                    break a;
                } else {
                    throw $$e;
                }
            }
            return var$3;
        }
        var$5 = new oj_JSONException;
        $object = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($object);
        jl_AbstractStringBuilder_append1($object, $rt_s(154));
        jl_AbstractStringBuilder_append1($object, oj_JSONObject_quote($key));
        jl_AbstractStringBuilder_append1($object, $rt_s(157));
        jl_Throwable__init_2(var$5, jl_AbstractStringBuilder_toString($object), $e);
        $rt_throw(var$5);
    }
    function oj_JSONObject_getJSONArray($this, $key) {
        var $object, var$3;
        $object = oj_JSONObject_get($this, $key);
        if ($object instanceof oj_JSONArray)
            return $object;
        var$3 = new oj_JSONException;
        $object = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($object);
        jl_AbstractStringBuilder_append1($object, $rt_s(154));
        jl_AbstractStringBuilder_append1($object, oj_JSONObject_quote($key));
        jl_AbstractStringBuilder_append1($object, $rt_s(145));
        jl_Throwable__init_(var$3, jl_AbstractStringBuilder_toString($object));
        $rt_throw(var$3);
    }
    function oj_JSONObject_getJSONObject($this, $key) {
        var $object, var$3;
        $object = oj_JSONObject_get($this, $key);
        if ($object instanceof oj_JSONObject)
            return $object;
        var$3 = new oj_JSONException;
        $object = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($object);
        jl_AbstractStringBuilder_append1($object, $rt_s(154));
        jl_AbstractStringBuilder_append1($object, oj_JSONObject_quote($key));
        jl_AbstractStringBuilder_append1($object, $rt_s(158));
        jl_Throwable__init_(var$3, jl_AbstractStringBuilder_toString($object));
        $rt_throw(var$3);
    }
    function oj_JSONObject_getString($this, $key) {
        var $object, var$3;
        $object = oj_JSONObject_get($this, $key);
        if ($object instanceof jl_String)
            return $object;
        var$3 = new oj_JSONException;
        $object = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($object);
        jl_AbstractStringBuilder_append1($object, $rt_s(154));
        jl_AbstractStringBuilder_append1($object, oj_JSONObject_quote($key));
        jl_AbstractStringBuilder_append1($object, $rt_s(142));
        jl_Throwable__init_(var$3, jl_AbstractStringBuilder_toString($object));
        $rt_throw(var$3);
    }
    function oj_JSONObject_entrySet($this) {
        return ju_HashMap_entrySet($this.$map);
    }
    function oj_JSONObject_length($this) {
        return $this.$map.$elementCount;
    }
    function oj_JSONObject_opt($this, $key) {
        return $key === null ? null : ju_HashMap_get($this.$map, $key);
    }
    function oj_JSONObject_populateMap($this, $bean) {
        var $klass, $methods, $key, $result, var$6, var$7, $method, $modifiers, $name, $$je;
        $klass = jl_Object_getClass($bean);
        if (!(jl_Class_getClassLoader($klass) === null ? 0 : 1))
            $methods = jl_Class_getDeclaredMethods($klass);
        else {
            $key = ju_HashMap__init_();
            jl_Class_findMethods($klass, $key);
            if ($key.$cachedValues === null) {
                $result = new ju_HashMap$2;
                $result.$this$0 = $key;
                $key.$cachedValues = $result;
            }
            $methods = ju_AbstractCollection_toArray($key.$cachedValues, $rt_createArray(jlr_Method, $key.$elementCount));
        }
        $methods = $methods.data;
        var$6 = $methods.length;
        var$7 = 0;
        while (var$7 < var$6) {
            a: {
                $method = $methods[var$7];
                $modifiers = jlr_Method_getModifiers($method);
                if (jlr_Modifier_isPublic($modifiers) && !(!($modifiers & 8) ? 0 : 1) && !(jlr_Method_getParameterTypes($method)).data.length && !(!($method.$flags & 64) ? 0 : 1) && $method.$returnType !== $rt_cls($rt_voidcls())) {
                    $name = $method.$name0;
                    if (!jl_String_startsWith0($name, $rt_s(159))) {
                        if (!jl_String_startsWith0($name, $rt_s(160)))
                            break a;
                        $key = jl_String_substring0($name, 2);
                    } else {
                        if (jl_String_equals($rt_s(161), $name))
                            break a;
                        if (jl_String_equals($rt_s(162), $name))
                            break a;
                        $key = jl_String_substring0($name, 3);
                    }
                    if (jl_String_length($key) > 0 && jl_Character_isUpperCase(jl_String_charAt($key, 0))) {
                        if (jl_String_length($key) == 1) {
                            ju_Locale_$callClinit();
                            $key = jl_String_toLowerCase($key);
                        } else if (!jl_Character_isUpperCase(jl_String_charAt($key, 1))) {
                            $result = new jl_StringBuilder;
                            jl_AbstractStringBuilder__init_($result);
                            $name = jl_String_substring($key, 0, 1);
                            ju_Locale_$callClinit();
                            jl_AbstractStringBuilder_append1($result, jl_String_toLowerCase($name));
                            jl_AbstractStringBuilder_append1($result, jl_String_substring0($key, 1));
                            $key = jl_AbstractStringBuilder_toString($result);
                        }
                        b: {
                            try {
                                c: {
                                    $result = jlr_Method_invoke($method, $bean, $rt_createArray(jl_Object, 0));
                                    if ($result !== null) {
                                        ju_HashMap_put($this.$map, $key, oj_JSONObject_wrap($result));
                                        if ($rt_isInstance($result, ji_Closeable))
                                            try {
                                                $result.$close();
                                                break c;
                                            } catch ($$e) {
                                                $$je = $rt_wrapException($$e);
                                                if ($$je instanceof ji_IOException) {
                                                } else {
                                                    throw $$e;
                                                }
                                            }
                                    }
                                }
                                break a;
                            } catch ($$e) {
                                $$je = $rt_wrapException($$e);
                                if ($$je instanceof jl_IllegalAccessException) {
                                } else if ($$je instanceof jl_IllegalArgumentException) {
                                    break b;
                                } else if ($$je instanceof jlr_InvocationTargetException) {
                                    break a;
                                } else {
                                    throw $$e;
                                }
                            }
                            break a;
                        }
                    }
                }
            }
            var$7 = var$7 + 1 | 0;
        }
    }
    function oj_JSONObject_put1($this, $key, $value) {
        oj_JSONObject_put($this, $key, !$value ? jl_Boolean_FALSE : jl_Boolean_TRUE);
        return $this;
    }
    function oj_JSONObject_put0($this, $key, $value) {
        oj_JSONObject_put($this, $key, oj_JSONArray__init_0($value));
        return $this;
    }
    function oj_JSONObject_put2($this, $key, $value) {
        oj_JSONObject_put($this, $key, jl_Integer_valueOf($value));
        return $this;
    }
    function oj_JSONObject_put($this, $key, $value) {
        if ($key === null) {
            $key = new jl_NullPointerException;
            jl_Throwable__init_($key, $rt_s(153));
            $rt_throw($key);
        }
        if ($value === null)
            ju_HashMap_remove($this.$map, $key);
        else {
            oj_JSONObject_testValidity($value);
            ju_HashMap_put($this.$map, $key, $value);
        }
        return $this;
    }
    function oj_JSONObject_quote($string) {
        var $sw, var$3, $$je;
        $sw = ji_StringWriter__init_();
        var$3 = $sw.$buf;
        jl_Object_monitorEnterSync(var$3);
        a: {
            b: {
                try {
                    try {
                        $string = ji_StringWriter_toString(oj_JSONObject_quote0($string, $sw));
                    } catch ($$e) {
                        $$je = $rt_wrapException($$e);
                        if ($$je instanceof ji_IOException) {
                            break b;
                        } else {
                            throw $$e;
                        }
                    }
                    jl_Object_monitorExitSync(var$3);
                } catch ($$e) {
                    $$je = $rt_wrapException($$e);
                    $string = $$je;
                    break a;

                }
                return $string;
            }
            try {
                jl_Object_monitorExitSync(var$3);
            } catch ($$e) {
                $$je = $rt_wrapException($$e);
                $string = $$je;
                break a;

            }
            return $rt_s(2);
        }
        jl_Object_monitorExitSync(var$3);
        $rt_throw($string);
    }
    function oj_JSONObject_quote0($string, $w) {
        var $c, $len, $i, var$6, $hhhh, var$8;
        if ($string !== null && jl_String_length($string)) {
            $c = 0;
            $len = jl_String_length($string);
            ji_StringWriter_write($w, 34);
            $i = 0;
            while ($i < $len) {
                a: {
                    var$6 = jl_String_charAt($string, $i);
                    switch (var$6) {
                        case 8:
                            break;
                        case 9:
                            ji_StringWriter_write0($w, $rt_s(163));
                            break a;
                        case 10:
                            ji_StringWriter_write0($w, $rt_s(164));
                            break a;
                        case 12:
                            ji_StringWriter_write0($w, $rt_s(165));
                            break a;
                        case 13:
                            ji_StringWriter_write0($w, $rt_s(166));
                            break a;
                        case 34:
                        case 92:
                            ji_StringWriter_write($w, 92);
                            ji_StringWriter_write($w, var$6);
                            break a;
                        case 47:
                            if ($c == 60)
                                ji_StringWriter_write($w, 92);
                            ji_StringWriter_write($w, var$6);
                            break a;
                        default:
                            if (var$6 >= 32 && !(var$6 >= 128 && var$6 < 160) && !(var$6 >= 8192 && var$6 < 8448)) {
                                ji_StringWriter_write($w, var$6);
                                break a;
                            }
                            ji_StringWriter_write0($w, $rt_s(167));
                            $hhhh = jl_Integer_toHexString(var$6);
                            var$8 = jl_String_substring($rt_s(168), 0, 0 + (4 - jl_String_length($hhhh) | 0) | 0);
                            jl_AbstractStringBuilder_append1($w.$buf, var$8);
                            ji_StringWriter_write0($w, $hhhh);
                            break a;
                    }
                    ji_StringWriter_write0($w, $rt_s(169));
                }
                $i = $i + 1 | 0;
                $c = var$6;
            }
            ji_StringWriter_write($w, 34);
            return $w;
        }
        ji_StringWriter_write0($w, $rt_s(170));
        return $w;
    }
    function oj_JSONObject_isDecimalNotation($val) {
        return jl_String_indexOf0($val, 46) <= (-1) && jl_String_indexOf0($val, 101) <= (-1) && jl_String_indexOf0($val, 69) <= (-1) && !jl_String_equals($rt_s(171), $val) ? 0 : 1;
    }
    function oj_JSONObject_testValidity($o) {
        var var$2;
        a: {
            b: {
                if ($o !== null) {
                    if ($o instanceof jl_Double) {
                        $o = $o;
                        if (!jl_Double_isInfinite($o) && !jl_Double_isNaN($o))
                            break b;
                        $o = new oj_JSONException;
                        jl_Throwable__init_($o, $rt_s(172));
                        $rt_throw($o);
                    }
                    if ($o instanceof jl_Float) {
                        $o = $o;
                        if (!$rt_globals.isFinite($o.$value3) ? 1 : 0)
                            break a;
                        if ($rt_globals.isNaN($o.$value3) ? 1 : 0)
                            break a;
                    }
                }
            }
            return;
        }
        var$2 = new oj_JSONException;
        jl_Throwable__init_(var$2, $rt_s(172));
        $rt_throw(var$2);
    }
    function oj_JSONObject_toString($this) {
        var var$1, $$je;
        a: {
            try {
                var$1 = oj_JSONObject_toString0($this, 0);
            } catch ($$e) {
                $$je = $rt_wrapException($$e);
                if ($$je instanceof jl_Exception) {
                    break a;
                } else {
                    throw $$e;
                }
            }
            return var$1;
        }
        return null;
    }
    function oj_JSONObject_toString0($this, $indentFactor) {
        var $w, var$3, $$je;
        $w = ji_StringWriter__init_();
        var$3 = $w.$buf;
        jl_Object_monitorEnterSync(var$3);
        a: {
            try {
                $w = ji_StringWriter_toString(oj_JSONObject_write($this, $w, $indentFactor, 0));
                jl_Object_monitorExitSync(var$3);
            } catch ($$e) {
                $$je = $rt_wrapException($$e);
                $w = $$je;
                break a;

            }
            return $w;
        }
        jl_Object_monitorExitSync(var$3);
        $rt_throw($w);
    }
    function oj_JSONObject_wrap($object) {
        var $coll, $objectPackage, $map, $objectPackageName, $$je;
        a: {
            b: {
                try {
                    if ($object !== null)
                        break b;
                    $object = oj_JSONObject_NULL;
                } catch ($$e) {
                    $$je = $rt_wrapException($$e);
                    if ($$je instanceof jl_Exception) {
                        break a;
                    } else {
                        throw $$e;
                    }
                }
                return $object;
            }
            c: {
                try {
                    d: {
                        if ($object instanceof oj_JSONObject)
                            break d;
                        if ($object instanceof oj_JSONArray)
                            break d;
                        if (oj_JSONObject$Null_equals(oj_JSONObject_NULL, $object))
                            break d;
                        if ($rt_isInstance($object, oj_JSONString))
                            break d;
                        if ($object instanceof jl_Byte)
                            break d;
                        if ($object instanceof jl_Character)
                            break d;
                        if ($object instanceof jl_Short)
                            break d;
                        if ($object instanceof jl_Integer)
                            break d;
                        if ($object instanceof jl_Long)
                            break d;
                        if ($object instanceof jl_Boolean)
                            break d;
                        if ($object instanceof jl_Float)
                            break d;
                        if ($object instanceof jl_Double)
                            break d;
                        if ($object instanceof jl_String)
                            break d;
                        if ($object instanceof jm_BigInteger)
                            break d;
                        if ($object instanceof jm_BigDecimal)
                            break d;
                        if (!($object instanceof jl_Enum))
                            break c;
                    }
                } catch ($$e) {
                    $$je = $rt_wrapException($$e);
                    if ($$je instanceof jl_Exception) {
                        break a;
                    } else {
                        throw $$e;
                    }
                }
                return $object;
            }
            e: {
                try {
                    if (!$rt_isInstance($object, ju_Collection))
                        break e;
                    $coll = $object;
                    $object = oj_JSONArray__init_0($coll);
                } catch ($$e) {
                    $$je = $rt_wrapException($$e);
                    if ($$je instanceof jl_Exception) {
                        break a;
                    } else {
                        throw $$e;
                    }
                }
                return $object;
            }
            f: {
                try {
                    if (!jl_Class_isArray(jl_Object_getClass($object)))
                        break f;
                    $objectPackage = oj_JSONArray__init_1($object);
                } catch ($$e) {
                    $$je = $rt_wrapException($$e);
                    if ($$je instanceof jl_Exception) {
                        break a;
                    } else {
                        throw $$e;
                    }
                }
                return $objectPackage;
            }
            g: {
                try {
                    if (!$rt_isInstance($object, ju_Map))
                        break g;
                    $map = $object;
                    $object = oj_JSONObject__init_3($map);
                } catch ($$e) {
                    $$je = $rt_wrapException($$e);
                    if ($$je instanceof jl_Exception) {
                        break a;
                    } else {
                        throw $$e;
                    }
                }
                return $object;
            }
            h: {
                try {
                    $objectPackage = jl_Class_getPackage(jl_Object_getClass($object));
                    if ($objectPackage === null) {
                        $objectPackageName = $rt_s(2);
                        break h;
                    }
                    $objectPackageName = jl_Package_getName($objectPackage);
                    break h;
                } catch ($$e) {
                    $$je = $rt_wrapException($$e);
                    if ($$je instanceof jl_Exception) {
                        break a;
                    } else {
                        throw $$e;
                    }
                }
            }
            i: {
                try {
                    if (!jl_String_startsWith0($objectPackageName, $rt_s(173)) && !jl_String_startsWith0($objectPackageName, $rt_s(174)) && jl_Class_getClassLoader(jl_Object_getClass($object)) !== null)
                        break i;
                    $object = $object.$toString();
                } catch ($$e) {
                    $$je = $rt_wrapException($$e);
                    if ($$je instanceof jl_Exception) {
                        break a;
                    } else {
                        throw $$e;
                    }
                }
                return $object;
            }
            try {
                $objectPackage = oj_JSONObject__init_5($object);
            } catch ($$e) {
                $$je = $rt_wrapException($$e);
                if ($$je instanceof jl_Exception) {
                    break a;
                } else {
                    throw $$e;
                }
            }
            return $objectPackage;
        }
        return null;
    }
    function oj_JSONObject_writeValue($writer, $value, $indentFactor, $indent) {
        var $o, $e, $numberAsString, $$je;
        if ($value !== null && !$value.$equals(null)) {
            if ($rt_isInstance($value, oj_JSONString)) {
                a: {
                    try {
                        $o = $value.$toJSONString();
                        break a;
                    } catch ($$e) {
                        $$je = $rt_wrapException($$e);
                        if ($$je instanceof jl_Exception) {
                            $e = $$je;
                        } else {
                            throw $$e;
                        }
                    }
                    $rt_throw(oj_JSONException__init_($e));
                }
                ji_StringWriter_write0($writer, $o !== null ? $o.$toString() : oj_JSONObject_quote($value.$toString()));
            } else if (!($value instanceof jl_Number)) {
                if ($value instanceof jl_Boolean)
                    ji_StringWriter_write0($writer, $value.$toString());
                else if ($value instanceof jl_Enum)
                    ji_StringWriter_write0($writer, oj_JSONObject_quote($value.$name4));
                else if ($value instanceof oj_JSONObject)
                    oj_JSONObject_write($value, $writer, $indentFactor, $indent);
                else if ($value instanceof oj_JSONArray)
                    oj_JSONArray_write($value, $writer, $indentFactor, $indent);
                else if ($rt_isInstance($value, ju_Map))
                    oj_JSONObject_write(oj_JSONObject__init_3($value), $writer, $indentFactor, $indent);
                else if ($rt_isInstance($value, ju_Collection))
                    oj_JSONArray_write(oj_JSONArray__init_0($value), $writer, $indentFactor, $indent);
                else if (!jl_Class_isArray(jl_Object_getClass($value)))
                    oj_JSONObject_quote0($value.$toString(), $writer);
                else
                    oj_JSONArray_write(oj_JSONArray__init_1($value), $writer, $indentFactor, $indent);
            } else {
                $value = $value;
                if ($value === null) {
                    $writer = new oj_JSONException;
                    jl_Throwable__init_($writer, $rt_s(175));
                    $rt_throw($writer);
                }
                oj_JSONObject_testValidity($value);
                $numberAsString = $value.$toString();
                if (jl_String_indexOf0($numberAsString, 46) > 0 && jl_String_indexOf0($numberAsString, 101) < 0 && jl_String_indexOf0($numberAsString, 69) < 0) {
                    while (jl_String_endsWith($numberAsString, $rt_s(13))) {
                        $numberAsString = jl_String_substring($numberAsString, 0, jl_String_length($numberAsString) - 1 | 0);
                    }
                    if (jl_String_endsWith($numberAsString, $rt_s(176)))
                        $numberAsString = jl_String_substring($numberAsString, 0, jl_String_length($numberAsString) - 1 | 0);
                }
                b: {
                    try {
                        jm_BigDecimal__init_(new jm_BigDecimal, $numberAsString);
                        ji_StringWriter_write0($writer, $numberAsString);
                        break b;
                    } catch ($$e) {
                        $$je = $rt_wrapException($$e);
                        if ($$je instanceof jl_NumberFormatException) {
                        } else {
                            throw $$e;
                        }
                    }
                    oj_JSONObject_quote0($numberAsString, $writer);
                }
            }
        } else
            ji_StringWriter_write0($writer, $rt_s(11));
        return $writer;
    }
    function oj_JSONObject_indent($writer, $indent) {
        var $i;
        $i = 0;
        while ($i < $indent) {
            ji_StringWriter_write($writer, 32);
            $i = $i + 1 | 0;
        }
    }
    function oj_JSONObject_write($this, $writer, $indentFactor, $indent) {
        var $commanate, $length, $entry, $key, $e, $newindent, $exception, $$je;
        a: {
            try {
                b: {
                    $commanate = 0;
                    $length = oj_JSONObject_length($this);
                    ji_StringWriter_write($writer, 123);
                    if ($length == 1) {
                        $entry = ju_HashMap$EntryIterator_next(ju_HashMap$HashMapEntrySet_iterator(oj_JSONObject_entrySet($this)));
                        $key = ju_MapEntry_getKey($entry);
                        ji_StringWriter_write0($writer, oj_JSONObject_quote($key));
                        ji_StringWriter_write($writer, 58);
                        if ($indentFactor > 0)
                            ji_StringWriter_write($writer, 32);
                        c: {
                            try {
                                oj_JSONObject_writeValue($writer, ju_MapEntry_getValue($entry), $indentFactor, $indent);
                                break c;
                            } catch ($$e) {
                                $$je = $rt_wrapException($$e);
                                if ($$je instanceof jl_Exception) {
                                    $e = $$je;
                                } else {
                                    throw $$e;
                                }
                            }
                            $rt_throw(oj_JSONException__init_0(jl_StringBuilder_toString(jl_StringBuilder_append1(jl_StringBuilder_append1(jl_StringBuilder__init_(), $rt_s(177)), $key)), $e));
                        }
                    } else if ($length) {
                        $newindent = $indent + $indentFactor | 0;
                        $e = ju_HashMap$HashMapEntrySet_iterator(oj_JSONObject_entrySet($this));
                        while (true) {
                            if (!ju_HashMap$AbstractMapIterator_hasNext($e)) {
                                if ($indentFactor > 0)
                                    ji_StringWriter_write($writer, 10);
                                oj_JSONObject_indent($writer, $indent);
                                break b;
                            }
                            $entry = ju_HashMap$EntryIterator_next($e);
                            if ($commanate)
                                ji_StringWriter_write($writer, 44);
                            if ($indentFactor > 0)
                                ji_StringWriter_write($writer, 10);
                            oj_JSONObject_indent($writer, $newindent);
                            $key = ju_MapEntry_getKey($entry);
                            ji_StringWriter_write0($writer, oj_JSONObject_quote($key));
                            ji_StringWriter_write($writer, 58);
                            if ($indentFactor > 0)
                                ji_StringWriter_write($writer, 32);
                            try {
                                oj_JSONObject_writeValue($writer, ju_MapEntry_getValue($entry), $indentFactor, $newindent);
                            } catch ($$e) {
                                $$je = $rt_wrapException($$e);
                                if ($$je instanceof jl_Exception) {
                                    $e = $$je;
                                    break;
                                } else {
                                    throw $$e;
                                }
                            }
                            $commanate = 1;
                        }
                        $rt_throw(oj_JSONException__init_0(jl_StringBuilder_toString(jl_StringBuilder_append1(jl_StringBuilder_append1(jl_StringBuilder__init_(), $rt_s(177)), $key)), $e));
                    }
                }
                ji_StringWriter_write($writer, 125);
            } catch ($$e) {
                $$je = $rt_wrapException($$e);
                if ($$je instanceof ji_IOException) {
                    $exception = $$je;
                    break a;
                } else {
                    throw $$e;
                }
            }
            return $writer;
        }
        $rt_throw(oj_JSONException__init_($exception));
    }
    function oj_JSONObject__clinit_() {
        oj_JSONObject_NULL = new oj_JSONObject$Null;
    }
    var otci_IntegerUtil = $rt_classWithoutFields();
    var otjde_FocusEventTarget = $rt_classWithoutFields(0);
    var otjde_MouseEventTarget = $rt_classWithoutFields(0);
    var otjde_KeyboardEventTarget = $rt_classWithoutFields(0);
    var otjde_LoadEventTarget = $rt_classWithoutFields(0);
    var otjde_GamepadEventTarget = $rt_classWithoutFields(0);
    var otjb_WindowEventTarget = $rt_classWithoutFields(0);
    var otjb_StorageProvider = $rt_classWithoutFields(0);
    var otjc_JSArrayReader = $rt_classWithoutFields(0);
    var otjb_Window = $rt_classWithoutFields();
    function otjb_Window_get$exported$0(var$0, var$1) {
        return otji_JSWrapper_javaToJs(var$0.$get0(var$1));
    }
    function otjb_Window_addEventListener$exported$1(var$0, var$1, var$2) {
        var$0.$addEventListener($rt_str(var$1), otji_JS_functionAsObject(var$2, "handleEvent"));
    }
    function otjb_Window_removeEventListener$exported$2(var$0, var$1, var$2) {
        var$0.$removeEventListener($rt_str(var$1), otji_JS_functionAsObject(var$2, "handleEvent"));
    }
    function otjb_Window_removeEventListener$exported$3(var$0, var$1, var$2, var$3) {
        var$0.$removeEventListener0($rt_str(var$1), otji_JS_functionAsObject(var$2, "handleEvent"), var$3 ? 1 : 0);
    }
    function otjb_Window_dispatchEvent$exported$4(var$0, var$1) {
        return !!var$0.$dispatchEvent(var$1);
    }
    function otjb_Window_getLength$exported$5(var$0) {
        return var$0.$getLength();
    }
    function otjb_Window_addEventListener$exported$6(var$0, var$1, var$2, var$3) {
        var$0.$addEventListener0($rt_str(var$1), otji_JS_functionAsObject(var$2, "handleEvent"), var$3 ? 1 : 0);
    }
    function tj_Variables() {
        var a = this; jl_Object.call(a);
        a.$allVariables = null;
        a.$intVariables = null;
        a.$floatVariables = null;
        a.$boolVariables = null;
        a.$stringVariables = null;
        a.$intLists = null;
        a.$floatLists = null;
        a.$boolLists = null;
        a.$stringLists = null;
        a.$functions = null;
    }
    function tj_Variables__init_0(var_0) {
        var var_1 = new tj_Variables();
        tj_Variables__init_1(var_1, var_0);
        return var_1;
    }
    function tj_Variables__init_() {
        var var_0 = new tj_Variables();
        tj_Variables__init_2(var_0);
        return var_0;
    }
    function tj_Variables__init_1($this, $variables) {
        $this.$allVariables = ju_HashMap__init_();
        $this.$intVariables = ju_ArrayList__init_();
        $this.$floatVariables = ju_ArrayList__init_();
        $this.$boolVariables = ju_ArrayList__init_();
        $this.$stringVariables = ju_ArrayList__init_();
        $this.$intLists = ju_ArrayList__init_();
        $this.$floatLists = ju_ArrayList__init_();
        $this.$boolLists = ju_ArrayList__init_();
        $this.$stringLists = ju_ArrayList__init_();
        $this.$functions = ju_HashMap__init_();
        $this.$allVariables = $variables.$allVariables;
        $this.$intVariables = $variables.$intVariables;
        $this.$floatVariables = $variables.$floatVariables;
        $this.$boolVariables = $variables.$boolVariables;
        $this.$stringVariables = $variables.$stringVariables;
        $this.$functions = $variables.$functions;
    }
    function tj_Variables_clone($this) {
        var $allVariables, $intVariables, $floatVariables, $boolVariables, $stringVariables, $intLists, $floatLists, $boolLists, $stringLists, $functions, $intList, $entry, $floatList, $boolList, $newVariables;
        $allVariables = ju_HashMap__init_();
        $intVariables = ju_ArrayList__init_();
        $floatVariables = ju_ArrayList__init_();
        $boolVariables = ju_ArrayList__init_();
        $stringVariables = ju_ArrayList__init_();
        $intLists = ju_ArrayList__init_();
        $floatLists = ju_ArrayList__init_();
        $boolLists = ju_ArrayList__init_();
        $stringLists = ju_ArrayList__init_();
        $functions = ju_HashMap__init_();
        $intList = ju_HashMap$HashMapEntrySet_iterator(ju_HashMap_entrySet($this.$allVariables));
        while (ju_HashMap$AbstractMapIterator_hasNext($intList)) {
            $entry = ju_HashMap$EntryIterator_next($intList);
            ju_HashMap_put($allVariables, $entry.$key, $entry.$value1);
        }
        $floatList = ju_AbstractList_iterator($this.$intVariables);
        while (ju_AbstractList$1_hasNext($floatList)) {
            ju_ArrayList_add($intVariables, ju_AbstractList$1_next($floatList));
        }
        $boolList = ju_AbstractList_iterator($this.$floatVariables);
        while (ju_AbstractList$1_hasNext($boolList)) {
            ju_ArrayList_add($floatVariables, ju_AbstractList$1_next($boolList));
        }
        $boolList = ju_AbstractList_iterator($this.$boolVariables);
        while (ju_AbstractList$1_hasNext($boolList)) {
            ju_ArrayList_add($boolVariables, ju_AbstractList$1_next($boolList));
        }
        $boolList = ju_AbstractList_iterator($this.$stringVariables);
        while (ju_AbstractList$1_hasNext($boolList)) {
            ju_ArrayList_add($stringVariables, ju_AbstractList$1_next($boolList));
        }
        $boolList = ju_AbstractList_iterator($this.$intLists);
        while (ju_AbstractList$1_hasNext($boolList)) {
            ju_ArrayList_add($intLists, ju_AbstractList$1_next($boolList));
        }
        $intList = ju_AbstractList_iterator($this.$floatLists);
        while (ju_AbstractList$1_hasNext($intList)) {
            ju_ArrayList_add($floatLists, ju_AbstractList$1_next($intList));
        }
        $floatList = ju_AbstractList_iterator($this.$boolLists);
        while (ju_AbstractList$1_hasNext($floatList)) {
            ju_ArrayList_add($boolLists, ju_AbstractList$1_next($floatList));
        }
        $boolList = ju_AbstractList_iterator($this.$stringLists);
        while (ju_AbstractList$1_hasNext($boolList)) {
            ju_ArrayList_add($stringLists, ju_AbstractList$1_next($boolList));
        }
        $floatList = ju_HashMap$HashMapEntrySet_iterator(ju_HashMap_entrySet($this.$functions));
        while (ju_HashMap$AbstractMapIterator_hasNext($floatList)) {
            $entry = ju_HashMap$EntryIterator_next($floatList);
            ju_HashMap_put($functions, $entry.$key, $entry.$value1);
        }
        $newVariables = tj_Variables__init_();
        $newVariables.$allVariables = $allVariables;
        $newVariables.$intVariables = $intVariables;
        $newVariables.$floatVariables = $floatVariables;
        $newVariables.$boolVariables = $boolVariables;
        $newVariables.$stringVariables = $stringVariables;
        $newVariables.$intLists = $intLists;
        $newVariables.$floatLists = $floatLists;
        $newVariables.$boolLists = $boolLists;
        $newVariables.$stringLists = $stringLists;
        $newVariables.$functions = $functions;
        return $newVariables;
    }
    function tj_Variables__init_2($this) {
        $this.$allVariables = ju_HashMap__init_();
        $this.$intVariables = ju_ArrayList__init_();
        $this.$floatVariables = ju_ArrayList__init_();
        $this.$boolVariables = ju_ArrayList__init_();
        $this.$stringVariables = ju_ArrayList__init_();
        $this.$intLists = ju_ArrayList__init_();
        $this.$floatLists = ju_ArrayList__init_();
        $this.$boolLists = ju_ArrayList__init_();
        $this.$stringLists = ju_ArrayList__init_();
        $this.$functions = ju_HashMap__init_();
    }
    function tj_Variables_addVariable($this, $name, $type, $value, $lineNumber) {
        var var$5, var$6;
        a: {
            if (ju_HashMap_containsKey($this.$allVariables, $name))
                tj_Error_VariableAlreadyExists($name, $lineNumber);
            else {
                b: {
                    ju_HashMap_put($this.$allVariables, $name, $type);
                    $type = $type.$name4;
                    var$5 = (-1);
                    switch (jl_String_hashCode($type)) {
                        case -1838656495:
                            if (!jl_String_equals($type, $rt_s(178)))
                                break b;
                            var$5 = 3;
                            break b;
                        case 72655:
                            if (!jl_String_equals($type, $rt_s(179)))
                                break b;
                            var$5 = 0;
                            break b;
                        case 66988604:
                            if (!jl_String_equals($type, $rt_s(180)))
                                break b;
                            var$5 = 1;
                            break b;
                        case 782694408:
                            if (!jl_String_equals($type, $rt_s(181)))
                                break b;
                            var$5 = 2;
                            break b;
                        default:
                    }
                }
                switch (var$5) {
                    case 0:
                        break;
                    case 1:
                        $type = $this.$floatVariables;
                        var$6 = new tj_FloatVar;
                        var$6.$value4 = $value;
                        var$6.$name7 = $name;
                        ju_ArrayList_add($type, var$6);
                        break a;
                    case 2:
                        $type = $this.$boolVariables;
                        var$6 = new tj_BoolVar;
                        var$6.$value5 = $value;
                        var$6.$name8 = $name;
                        ju_ArrayList_add($type, var$6);
                        break a;
                    case 3:
                        $type = $this.$stringVariables;
                        var$6 = new tj_StringVar;
                        var$6.$value6 = $value;
                        var$6.$name9 = $name;
                        ju_ArrayList_add($type, var$6);
                        break a;
                    default:
                        break a;
                }
                $type = $this.$intVariables;
                var$6 = new tj_IntVar;
                var$6.$value7 = $value;
                var$6.$name10 = $name;
                ju_ArrayList_add($type, var$6);
            }
        }
    }
    function tj_Variables_functionExists($this, $name) {
        return ju_HashMap_containsKey($this.$functions, $name);
    }
    function tj_Variables_isVariable($this, $name) {
        return ju_HashMap_containsKey($this.$allVariables, $name);
    }
    function tj_Variables_addFunction($this, $name, $body, $args, $lineNumber) {
        var var$5, var$6, var$7;
        if (!ju_HashMap_containsKey($this.$functions, $name)) {
            var$5 = $this.$functions;
            var$6 = new tj_FunctionVar;
            var$6.$name11 = $name;
            var$6.$body0 = $body;
            var$6.$args = $args;
            var$6.$lineNumber3 = $lineNumber;
            ju_HashMap_put(var$5, $name, var$6);
            return;
        }
        $body = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($body);
        jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($body, $rt_s(182)), $name), $rt_s(183));
        $body = jl_AbstractStringBuilder_toString($body);
        $args = $rt_createArray(jl_String, 2);
        var$7 = $args.data;
        var$7[0] = $body;
        $body = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($body);
        jl_StringBuilder_append0($body, $lineNumber);
        var$7[1] = jl_AbstractStringBuilder_toString($body);
        tj_Error_errorLog$js_body$_1(otji_JS_wrap($args));
        $body = new jl_RuntimeException;
        var$6 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$6);
        jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$6, $rt_s(182)), $name), $rt_s(183));
        jl_Throwable__init_($body, jl_AbstractStringBuilder_toString(var$6));
        $rt_throw($body);
    }
    function tj_Variables_getFunctionArgs($this, $name) {
        return (ju_HashMap_get($this.$functions, $name)).$args;
    }
    function tj_Variables_getFunctionBody($this, $name) {
        return (ju_HashMap_get($this.$functions, $name)).$body0;
    }
    function tj_Variables_setVariableValue($this, $name, $value, $lineNumber) {
        var $i, var$5, $i_0, $t, var$8;
        a: {
            $i = (ju_HashMap_get($this.$allVariables, $name)).$name4;
            var$5 = (-1);
            switch (jl_String_hashCode($i)) {
                case -1838656495:
                    if (!jl_String_equals($i, $rt_s(178)))
                        break a;
                    var$5 = 3;
                    break a;
                case 72655:
                    if (!jl_String_equals($i, $rt_s(179)))
                        break a;
                    var$5 = 0;
                    break a;
                case 66988604:
                    if (!jl_String_equals($i, $rt_s(180)))
                        break a;
                    var$5 = 1;
                    break a;
                case 782694408:
                    if (!jl_String_equals($i, $rt_s(181)))
                        break a;
                    var$5 = 2;
                    break a;
                default:
            }
        }
        b: {
            switch (var$5) {
                case 0:
                    break;
                case 1:
                    $i = ju_AbstractList_iterator($this.$floatVariables);
                    while (ju_AbstractList$1_hasNext($i)) {
                        $i_0 = ju_AbstractList$1_next($i);
                        if (jl_String_equals($i_0.$name7, $name)) {
                            $t = $value.$getType0();
                            tj_JavaishVal$JavaishType_$callClinit();
                            if ($t === tj_JavaishVal$JavaishType_FLOAT)
                                $i_0.$value4 = $value;
                            else if ($value.$getType0() !== tj_JavaishVal$JavaishType_INT)
                                tj_Error_TypeMismatch($rt_s(184), $value.$typeString(), $lineNumber);
                            else
                                $i_0.$value4 = tj_JavaishFloat__init_((tj_JavaishInt_getValue($value)).$value);
                        }
                    }
                    break b;
                case 2:
                    $i = ju_AbstractList_iterator($this.$boolVariables);
                    while (ju_AbstractList$1_hasNext($i)) {
                        $i_0 = ju_AbstractList$1_next($i);
                        if (jl_String_equals($i_0.$name8, $name)) {
                            $t = $value.$getType0();
                            tj_JavaishVal$JavaishType_$callClinit();
                            if ($t === tj_JavaishVal$JavaishType_BOOLEAN)
                                $i_0.$value5 = $value;
                            else
                                tj_Error_TypeMismatch($rt_s(185), $value.$typeString(), $lineNumber);
                        }
                    }
                    break b;
                case 3:
                    var$8 = ju_AbstractList_iterator($this.$stringVariables);
                    while (ju_AbstractList$1_hasNext(var$8)) {
                        $i = ju_AbstractList$1_next(var$8);
                        if (jl_String_equals($i.$name9, $name)) {
                            $i_0 = $value.$getType0();
                            tj_JavaishVal$JavaishType_$callClinit();
                            if ($i_0 === tj_JavaishVal$JavaishType_STRING)
                                $i.$value6 = $value;
                            else
                                tj_Error_TypeMismatch($rt_s(186), $value.$typeString(), $lineNumber);
                        }
                    }
                    break b;
                default:
                    break b;
            }
            $i = ju_AbstractList_iterator($this.$intVariables);
            while (ju_AbstractList$1_hasNext($i)) {
                $i_0 = ju_AbstractList$1_next($i);
                if (jl_String_equals($i_0.$name10, $name)) {
                    $t = $value.$getType0();
                    tj_JavaishVal$JavaishType_$callClinit();
                    if ($t === tj_JavaishVal$JavaishType_INT)
                        $i_0.$value7 = $value;
                    else
                        tj_Error_TypeMismatch($rt_s(187), $value.$typeString(), $lineNumber);
                }
            }
        }
    }
    function tj_Variables_getVariableValue($this, $name) {
        var $t, var$3, var$4, $i;
        a: {
            $t = ju_HashMap_get($this.$allVariables, $name);
            var$3 = $t.$name4;
            var$4 = (-1);
            switch (jl_String_hashCode(var$3)) {
                case -1838656495:
                    if (!jl_String_equals(var$3, $rt_s(178)))
                        break a;
                    var$4 = 3;
                    break a;
                case 72655:
                    if (!jl_String_equals(var$3, $rt_s(179)))
                        break a;
                    var$4 = 0;
                    break a;
                case 66988604:
                    if (!jl_String_equals(var$3, $rt_s(180)))
                        break a;
                    var$4 = 1;
                    break a;
                case 782694408:
                    if (!jl_String_equals(var$3, $rt_s(181)))
                        break a;
                    var$4 = 2;
                    break a;
                default:
            }
        }
        b: {
            switch (var$4) {
                case 0:
                    break;
                case 1:
                    $t = ju_AbstractList_iterator($this.$floatVariables);
                    while (ju_AbstractList$1_hasNext($t)) {
                        $i = ju_AbstractList$1_next($t);
                        if (jl_String_equals($i.$name7, $name))
                            return $i.$value4;
                    }
                    break b;
                case 2:
                    $t = ju_AbstractList_iterator($this.$boolVariables);
                    while (ju_AbstractList$1_hasNext($t)) {
                        $i = ju_AbstractList$1_next($t);
                        if (jl_String_equals($i.$name8, $name))
                            return $i.$value5;
                    }
                    break b;
                case 3:
                    $t = ju_AbstractList_iterator($this.$stringVariables);
                    while (ju_AbstractList$1_hasNext($t)) {
                        $i = ju_AbstractList$1_next($t);
                        if (jl_String_equals($i.$name9, $name))
                            return $i.$value6;
                    }
                    break b;
                default:
                    tj_JavaishVal$JavaishType_$callClinit();
                    if ($t !== tj_JavaishVal$JavaishType_BOOLEANLIST && $t !== tj_JavaishVal$JavaishType_FLOATLIST && $t !== tj_JavaishVal$JavaishType_INTLIST && $t !== tj_JavaishVal$JavaishType_STRINGLIST)
                        break b;
                    return tj_Variables_getList($this, $name);
            }
            $t = ju_AbstractList_iterator($this.$intVariables);
            while (ju_AbstractList$1_hasNext($t)) {
                $i = ju_AbstractList$1_next($t);
                if (jl_String_equals($i.$name10, $name))
                    return $i.$value7;
            }
        }
        return null;
    }
    function tj_Variables_getList($this, $name) {
        var $i, var$3, $t;
        a: {
            $i = (ju_HashMap_get($this.$allVariables, $name)).$name4;
            var$3 = (-1);
            switch (jl_String_hashCode($i)) {
                case -1618721555:
                    if (!jl_String_equals($i, $rt_s(75)))
                        break a;
                    var$3 = 0;
                    break a;
                case -1087271889:
                    if (!jl_String_equals($i, $rt_s(77)))
                        break a;
                    var$3 = 3;
                    break a;
                case 318725286:
                    if (!jl_String_equals($i, $rt_s(78)))
                        break a;
                    var$3 = 2;
                    break a;
                case 675960026:
                    if (!jl_String_equals($i, $rt_s(76)))
                        break a;
                    var$3 = 1;
                    break a;
                default:
            }
        }
        b: {
            switch (var$3) {
                case 0:
                    break;
                case 1:
                    $t = ju_AbstractList_iterator($this.$floatLists);
                    while (ju_AbstractList$1_hasNext($t)) {
                        $i = ju_AbstractList$1_next($t);
                        if (jl_String_equals($i.$name12, $name))
                            return tj_JavaishListVal__init_(tj_JavaishFloatList__init_($i.$value8.$value9));
                    }
                    break b;
                case 2:
                    $t = ju_AbstractList_iterator($this.$boolLists);
                    while (ju_AbstractList$1_hasNext($t)) {
                        $i = ju_AbstractList$1_next($t);
                        if (jl_String_equals($i.$name13, $name))
                            return tj_JavaishListVal__init_(tj_JavaishBooleanList__init_($i.$value10.$value11));
                    }
                    break b;
                case 3:
                    $t = ju_AbstractList_iterator($this.$stringLists);
                    while (ju_AbstractList$1_hasNext($t)) {
                        $i = ju_AbstractList$1_next($t);
                        if (jl_String_equals($i.$name14, $name))
                            return tj_JavaishListVal__init_(tj_JavaishStringList__init_($i.$value12.$value13));
                    }
                    break b;
                default:
                    break b;
            }
            $t = ju_AbstractList_iterator($this.$intLists);
            while (ju_AbstractList$1_hasNext($t)) {
                $i = ju_AbstractList$1_next($t);
                if (jl_String_equals($i.$name15, $name))
                    return tj_JavaishListVal__init_(tj_JavaishIntList__init_($i.$value14.$value15));
            }
        }
        return null;
    }
    function tj_Variables_getVariableType($this, $name) {
        return ju_HashMap_get($this.$allVariables, $name);
    }
    function tj_Variables_addList($this, $name, $type, $value, $lineNumber) {
        var $v;
        a: {
            if (ju_HashMap_containsKey($this.$allVariables, $name))
                tj_Error_VariableAlreadyExists($name, $lineNumber);
            else {
                b: {
                    ju_HashMap_put($this.$allVariables, $name, $type);
                    $v = $type.$name4;
                    $lineNumber = (-1);
                    switch (jl_String_hashCode($v)) {
                        case -1618721555:
                            if (!jl_String_equals($v, $rt_s(75)))
                                break b;
                            $lineNumber = 0;
                            break b;
                        case -1087271889:
                            if (!jl_String_equals($v, $rt_s(77)))
                                break b;
                            $lineNumber = 3;
                            break b;
                        case 318725286:
                            if (!jl_String_equals($v, $rt_s(78)))
                                break b;
                            $lineNumber = 2;
                            break b;
                        case 675960026:
                            if (!jl_String_equals($v, $rt_s(76)))
                                break b;
                            $lineNumber = 1;
                            break b;
                        default:
                    }
                }
                switch ($lineNumber) {
                    case 0:
                        break;
                    case 1:
                        if (!($value instanceof tj_JavaishFloatList)) {
                            tj_Error_TypeMismatch($rt_s(188), $value.$typeString(), 0);
                            break a;
                        }
                        $v = $value;
                        $type = $this.$floatLists;
                        $value = new tj_FloatList;
                        $value.$value8 = $v;
                        $value.$name12 = $name;
                        ju_ArrayList_add($type, $value);
                        break a;
                    case 2:
                        if (!($value instanceof tj_JavaishBooleanList)) {
                            tj_Error_TypeMismatch($rt_s(189), $value.$typeString(), 0);
                            break a;
                        }
                        $v = $value;
                        $type = $this.$boolLists;
                        $value = new tj_BoolList;
                        $value.$value10 = $v;
                        $value.$name13 = $name;
                        ju_ArrayList_add($type, $value);
                        break a;
                    case 3:
                        if (!($value instanceof tj_JavaishStringList)) {
                            tj_Error_TypeMismatch($rt_s(190), $value.$typeString(), 0);
                            break a;
                        }
                        $v = $value;
                        $type = $this.$stringLists;
                        $value = new tj_StringList;
                        $value.$value12 = $v;
                        $value.$name14 = $name;
                        ju_ArrayList_add($type, $value);
                        break a;
                    default:
                        break a;
                }
                if (!($value instanceof tj_JavaishIntList))
                    tj_Error_TypeMismatch($rt_s(191), $value.$typeString(), 0);
                else {
                    $v = $value;
                    $type = $this.$intLists;
                    $value = new tj_IntList;
                    $value.$value14 = $v;
                    $value.$name15 = $name;
                    ju_ArrayList_add($type, $value);
                }
            }
        }
    }
    function tj_Variables_removeVariable($this, $varName, $varType) {
        var $iterator, var$4;
        a: {
            ju_HashMap_remove($this.$allVariables, $varName);
            $iterator = $varType.$name4;
            var$4 = (-1);
            switch (jl_String_hashCode($iterator)) {
                case -1838656495:
                    if (!jl_String_equals($iterator, $rt_s(178)))
                        break a;
                    var$4 = 3;
                    break a;
                case -1618721555:
                    if (!jl_String_equals($iterator, $rt_s(75)))
                        break a;
                    var$4 = 4;
                    break a;
                case -1087271889:
                    if (!jl_String_equals($iterator, $rt_s(77)))
                        break a;
                    var$4 = 7;
                    break a;
                case 72655:
                    if (!jl_String_equals($iterator, $rt_s(179)))
                        break a;
                    var$4 = 0;
                    break a;
                case 66988604:
                    if (!jl_String_equals($iterator, $rt_s(180)))
                        break a;
                    var$4 = 1;
                    break a;
                case 318725286:
                    if (!jl_String_equals($iterator, $rt_s(78)))
                        break a;
                    var$4 = 6;
                    break a;
                case 675960026:
                    if (!jl_String_equals($iterator, $rt_s(76)))
                        break a;
                    var$4 = 5;
                    break a;
                case 782694408:
                    if (!jl_String_equals($iterator, $rt_s(181)))
                        break a;
                    var$4 = 2;
                    break a;
                default:
            }
        }
        b: {
            switch (var$4) {
                case 0:
                    break;
                case 1:
                    $iterator = ju_AbstractList_iterator($this.$floatVariables);
                    while (ju_AbstractList$1_hasNext($iterator)) {
                        if (jl_String_equals((ju_AbstractList$1_next($iterator)).$name7, $varName))
                            ju_AbstractList$1_remove($iterator);
                    }
                    break b;
                case 2:
                    $iterator = ju_AbstractList_iterator($this.$boolVariables);
                    while (ju_AbstractList$1_hasNext($iterator)) {
                        if (jl_String_equals((ju_AbstractList$1_next($iterator)).$name8, $varName))
                            ju_AbstractList$1_remove($iterator);
                    }
                    break b;
                case 3:
                    $iterator = ju_AbstractList_iterator($this.$stringVariables);
                    while (ju_AbstractList$1_hasNext($iterator)) {
                        if (jl_String_equals((ju_AbstractList$1_next($iterator)).$name9, $varName))
                            ju_AbstractList$1_remove($iterator);
                    }
                    break b;
                case 4:
                    $iterator = ju_AbstractList_iterator($this.$intLists);
                    while (ju_AbstractList$1_hasNext($iterator)) {
                        if (jl_String_equals((ju_AbstractList$1_next($iterator)).$name15, $varName))
                            ju_AbstractList$1_remove($iterator);
                    }
                    break b;
                case 5:
                    $iterator = ju_AbstractList_iterator($this.$floatLists);
                    while (ju_AbstractList$1_hasNext($iterator)) {
                        if (jl_String_equals((ju_AbstractList$1_next($iterator)).$name12, $varName))
                            ju_AbstractList$1_remove($iterator);
                    }
                    break b;
                case 6:
                    $iterator = ju_AbstractList_iterator($this.$boolLists);
                    while (ju_AbstractList$1_hasNext($iterator)) {
                        if (jl_String_equals((ju_AbstractList$1_next($iterator)).$name13, $varName))
                            ju_AbstractList$1_remove($iterator);
                    }
                    break b;
                case 7:
                    $iterator = ju_AbstractList_iterator($this.$stringLists);
                    while (ju_AbstractList$1_hasNext($iterator)) {
                        if (jl_String_equals((ju_AbstractList$1_next($iterator)).$name14, $varName))
                            ju_AbstractList$1_remove($iterator);
                    }
                    break b;
                default:
                    break b;
            }
            $iterator = ju_AbstractList_iterator($this.$intVariables);
            while (ju_AbstractList$1_hasNext($iterator)) {
                if (jl_String_equals((ju_AbstractList$1_next($iterator)).$name10, $varName))
                    ju_AbstractList$1_remove($iterator);
            }
        }
    }
    function tj_Parser() {
        var a = this; jl_Object.call(a);
        a.$source = null;
        a.$variables = null;
        a.$lineNumber4 = 0;
        a.$importedRobot = 0;
        a.$classStmt = null;
        a.$variableNames = null;
    }
    function tj_Parser__init_(var_0, var_1) {
        var var_2 = new tj_Parser();
        tj_Parser__init_0(var_2, var_0, var_1);
        return var_2;
    }
    function tj_Parser__init_0($this, $source, $variables) {
        var var$3;
        $this.$lineNumber4 = 0;
        $this.$importedRobot = 0;
        var$3 = new tj_ClassStmt;
        tj_Statements__init_(var$3);
        var$3.$line = (-1);
        tj_Statements$StmtType_$callClinit();
        var$3.$type1 = tj_Statements$StmtType_CLASS;
        var$3.$isBlock = 1;
        $this.$classStmt = var$3;
        $this.$variableNames = ju_ArrayList__init_();
        $this.$source = $source;
        $this.$variables = $variables;
    }
    function tj_Parser_removeIndents($this, $line) {
        var $i, $rString, $readingIndents, $c, var$6;
        $i = 0;
        $rString = $rt_s(2);
        $readingIndents = 1;
        while ($i < jl_String_length($line)) {
            $c = jl_String_charAt($line, $i);
            if ($c != 32 && $readingIndents) {
                $readingIndents = 0;
                var$6 = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_(var$6);
                jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$6, $rString), $c);
                $rString = jl_AbstractStringBuilder_toString(var$6);
            } else if (!$readingIndents) {
                var$6 = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_(var$6);
                jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$6, $rString), $c);
                $rString = jl_AbstractStringBuilder_toString(var$6);
            }
            $i = $i + 1 | 0;
        }
        return $rString;
    }
    function tj_Parser_parse($this) {
        var $parents, $lines, var$3, var$4, $expression, $commentStmt, $declaration, $varName, $columnVar, $varType, $varValue, $expressionType, $dec, $parent, $condition, $columnIC, $boolExpression, $parentE, $conditionE, $columnE, $boolExpressionE, $forVarName, $forListName, $forCondition, $forIncrementVar, $forIncrementVal, $columnFC, $columnFIV, $forConditionExpression, $forIncrementExpression, $whileCondition, $columnW, $whileBoolExpression, $returnVal, $hasReturn, $columnRe, $returnExpression, $returnStmt,
        $returnStmt2, $addVarName, $addChange, $columnA, $addExpression, $addStmt, $subtractVarName, $subtractChange, $columnS, $subtractExpression, $subtractStmt, $multiplyVarName, $multiplyChange, $columnM, $multiplyExpression, $multiplyStmt, $divideVarName, $divideChange, $columnD, $divideExpression, $divideStmt, $functionName, $functionArgs, $words, $arguments, $i, $argName, $argumentsArr, $removeAllVarName, $removeAllValue, $columnRAll, $removeAllExpression, $removeAllStmt, $removeVarName, $removeValue,
        $columnR, $removeValExpression, $removeStmt, $removeAtVarName, $removeAtLocation, $columnRA, $removeAtExpression, $removeAtStmt, $importName, $importStmt2, $robotStmt, $robotAction, $robotActionArgs, $robotActionArgExpressions, $arg, $argType, $columnArg, $robotType, $robotStmt2, $functionCall, $functionCallName, $functionCallArgs, $functionArgExpressions, $printStmt, $functionCallStmt, $showMsgBoxStmt, $assignment, $columnVarA, $expressionA, $assignmentStmt, $columnC;
        $parents = ju_ArrayList__init_();
        ju_ArrayList_add($parents, $this.$classStmt);
        $lines = (jl_String_split($this.$source, $rt_s(192))).data;
        var$3 = $lines.length;
        var$4 = 0;
        while (var$4 < var$3) {
            a: {
                $expression = tj_Parser_removeIndents($this, $lines[var$4]);
                $this.$lineNumber4 = $this.$lineNumber4 + 1 | 0;
                if (!jl_String_isEmpty(jl_String_trim($expression))) {
                    if (jl_String_startsWith0($expression, $rt_s(193))) {
                        $commentStmt = tj_CommentStmt__init_($this.$lineNumber4, $expression);
                        tj_Statements_addStatement(ju_ArrayList_get($parents, ju_ArrayList_size($parents) - 1 | 0), $commentStmt);
                    } else {
                        b: {
                            $declaration = (jl_String_split($expression, $rt_s(138))).data;
                            $varName = $declaration[0];
                            $columnVar = (-1);
                            switch (jl_String_hashCode($varName)) {
                                case -2060248300:
                                    if (!jl_String_equals($varName, $rt_s(194)))
                                        break b;
                                    $columnVar = 9;
                                    break b;
                                case -1331463047:
                                    if (!jl_String_equals($varName, $rt_s(195)))
                                        break b;
                                    $columnVar = 11;
                                    break b;
                                case -1184795739:
                                    if (!jl_String_equals($varName, $rt_s(196)))
                                        break b;
                                    $columnVar = 16;
                                    break b;
                                case -934610812:
                                    if (!jl_String_equals($varName, $rt_s(197)))
                                        break b;
                                    $columnVar = 14;
                                    break b;
                                case -934396624:
                                    if (!jl_String_equals($varName, $rt_s(198)))
                                        break b;
                                    $columnVar = 6;
                                    break b;
                                case -512823337:
                                    if (!jl_String_equals($varName, $rt_s(199)))
                                        break b;
                                    $columnVar = 15;
                                    break b;
                                case 125:
                                    if (!jl_String_equals($varName, $rt_s(27)))
                                        break b;
                                    $columnVar = 1;
                                    break b;
                                case 3357:
                                    if (!jl_String_equals($varName, $rt_s(200)))
                                        break b;
                                    $columnVar = 2;
                                    break b;
                                case 96417:
                                    if (!jl_String_equals($varName, $rt_s(201)))
                                        break b;
                                    $columnVar = 8;
                                    break b;
                                case 101577:
                                    if (!jl_String_equals($varName, $rt_s(202)))
                                        break b;
                                    $columnVar = 4;
                                    break b;
                                case 107035:
                                    if (!jl_String_equals($varName, $rt_s(203)))
                                        break b;
                                    $columnVar = 0;
                                    break b;
                                case 108685930:
                                    if (!jl_String_equals($varName, $rt_s(204)))
                                        break b;
                                    $columnVar = 17;
                                    break b;
                                case 113101617:
                                    if (!jl_String_equals($varName, $rt_s(205)))
                                        break b;
                                    $columnVar = 5;
                                    break b;
                                case 118556470:
                                    if (!jl_String_equals($varName, $rt_s(206)))
                                        break b;
                                    $columnVar = 3;
                                    break b;
                                case 653829668:
                                    if (!jl_String_equals($varName, $rt_s(207)))
                                        break b;
                                    $columnVar = 10;
                                    break b;
                                case 1098475774:
                                    if (!jl_String_equals($varName, $rt_s(208)))
                                        break b;
                                    $columnVar = 7;
                                    break b;
                                case 1282345597:
                                    if (!jl_String_equals($varName, $rt_s(209)))
                                        break b;
                                    $columnVar = 13;
                                    break b;
                                case 1380938712:
                                    if (!jl_String_equals($varName, $rt_s(210)))
                                        break b;
                                    $columnVar = 12;
                                    break b;
                                default:
                            }
                        }
                        switch ($columnVar) {
                            case 0:
                                $declaration = (tj_Parser_parseDeclaration($this, $expression)).data;
                                $varName = $declaration[0];
                                if (!tj_Parser_validVarName($this, $varName))
                                    tj_Error_InvalidVariableName($varName, $this.$lineNumber4);
                                if (tj_ReservedNames_isReserved($varName))
                                    tj_Error_ReservedName($varName, $this.$lineNumber4);
                                if (tj_Statements_containsVariable(ju_ArrayList_get($parents, ju_ArrayList_size($parents) - 1 | 0), $varName))
                                    tj_Error_VariableAlreadyExists($varName, $this.$lineNumber4);
                                else
                                    tj_Statements_addVariableName(ju_ArrayList_get($parents, ju_ArrayList_size($parents) - 1 | 0), $varName);
                                c: {
                                    $varType = tj_Parser_getType($this, $declaration[1]);
                                    $varValue = $declaration[2];
                                    $expressionType = jl_System_out();
                                    $dec = jl_StringBuilder__init_();
                                    jl_StringBuilder_append(jl_StringBuilder_append($dec, $rt_s(211)), $varValue);
                                    ji_PrintStream_println($expressionType, jl_StringBuilder_toString($dec));
                                    tj_Expression$ExpressionReturnType_$callClinit();
                                    $expressionType = tj_Expression$ExpressionReturnType_STRING;
                                    tj_Parser$1_$callClinit();
                                    switch (tj_Parser$1_$SwitchMap$trackerjo$javaish$JavaishVal$JavaishType.data[jl_Enum_ordinal($varType)]) {
                                        case 1:
                                            $expressionType = tj_Expression$ExpressionReturnType_STRING;
                                            break c;
                                        case 2:
                                            $expressionType = tj_Expression$ExpressionReturnType_INT;
                                            break c;
                                        case 3:
                                            $expressionType = tj_Expression$ExpressionReturnType_FLOAT;
                                            break c;
                                        case 4:
                                            $expressionType = tj_Expression$ExpressionReturnType_BOOL;
                                            break c;
                                        case 5:
                                            $expressionType = tj_Expression$ExpressionReturnType_INTLIST;
                                            break c;
                                        case 6:
                                            $expressionType = tj_Expression$ExpressionReturnType_FLOATLIST;
                                            break c;
                                        case 7:
                                            $expressionType = tj_Expression$ExpressionReturnType_STRINGLIST;
                                            break c;
                                        case 8:
                                            $expressionType = tj_Expression$ExpressionReturnType_BOOLEANLIST;
                                            break c;
                                        default:
                                    }
                                }
                                $columnVar = jl_String_indexOf2($expression, $varValue);
                                $expression = tj_Expression__init_1($varValue, $expressionType, $this.$lineNumber4, $columnVar);
                                $dec = tj_DeclarationStmt__init_($this.$lineNumber4, $varName, $varType, $expression);
                                tj_Statements_addStatement(ju_ArrayList_get($parents, ju_ArrayList_size($parents) - 1 | 0), $dec);
                                break a;
                            case 1:
                                $parent = ju_ArrayList_get($parents, ju_ArrayList_size($parents) - 1 | 0);
                                $columnVar = $declaration.length;
                                if ($columnVar > 2 && jl_String_equals($declaration[1], $rt_s(212)) && jl_String_equals($declaration[2], $rt_s(200))) {
                                    ju_ArrayList_remove($parents, ju_ArrayList_size($parents) - 1 | 0);
                                    tj_Statements_addStatement(ju_ArrayList_get($parents, ju_ArrayList_size($parents) - 1 | 0), $parent);
                                    $condition = tj_Parser_parseElseIf($this, $expression, $rt_s(200));
                                    $columnIC = jl_String_indexOf2($expression, $condition);
                                    $boolExpression = new tj_Expression;
                                    tj_Expression$ExpressionReturnType_$callClinit();
                                    tj_Expression__init_2($boolExpression, $condition, tj_Expression$ExpressionReturnType_BOOL, $this.$lineNumber4, $columnIC);
                                    ju_ArrayList_add($parents, tj_ElseIfStmt__init_($this.$lineNumber4, $boolExpression));
                                    break a;
                                }
                                if ($columnVar > 1 && jl_String_equals($declaration[1], $rt_s(212))) {
                                    ju_ArrayList_remove($parents, ju_ArrayList_size($parents) - 1 | 0);
                                    tj_Statements_addStatement(ju_ArrayList_get($parents, ju_ArrayList_size($parents) - 1 | 0), $parent);
                                    ju_ArrayList_add($parents, tj_ElseStmt__init_($this.$lineNumber4));
                                    break a;
                                }
                                ju_ArrayList_remove($parents, ju_ArrayList_size($parents) - 1 | 0);
                                tj_Statements_addStatement(ju_ArrayList_get($parents, ju_ArrayList_size($parents) - 1 | 0), $parent);
                                break a;
                            case 2:
                                break;
                            case 3:
                                $parentE = ju_ArrayList_get($parents, ju_ArrayList_size($parents) - 1 | 0);
                                ju_ArrayList_remove($parents, ju_ArrayList_size($parents) - 1 | 0);
                                tj_Statements_addStatement(ju_ArrayList_get($parents, ju_ArrayList_size($parents) - 1 | 0), $parentE);
                                if ($declaration.length > 1 && jl_String_equals($declaration[1], $rt_s(200))) {
                                    $conditionE = tj_Parser_parseElseIf($this, $expression, $rt_s(200));
                                    $columnE = jl_String_indexOf2($expression, $conditionE);
                                    $boolExpressionE = new tj_Expression;
                                    tj_Expression$ExpressionReturnType_$callClinit();
                                    tj_Expression__init_2($boolExpressionE, $conditionE, tj_Expression$ExpressionReturnType_BOOL, $this.$lineNumber4, $columnE);
                                    ju_ArrayList_add($parents, tj_ElseIfStmt__init_($this.$lineNumber4, $boolExpressionE));
                                    break a;
                                }
                                ju_ArrayList_add($parents, tj_ElseStmt__init_($this.$lineNumber4));
                                break a;
                            case 4:
                                if (!jl_String_equals($declaration[1], $rt_s(213))) {
                                    if (!jl_String_equals($declaration[1], $rt_s(214)))
                                        break a;
                                    $declaration = (tj_Parser_parseForEach($this, $expression)).data;
                                    $forVarName = $declaration[0];
                                    $forListName = $declaration[1];
                                    ju_ArrayList_add($parents, tj_ForEachStmt__init_($this.$lineNumber4, $forVarName, $forListName));
                                    break a;
                                }
                                $declaration = (tj_Parser_parseForWhen($this, $expression)).data;
                                $forCondition = $declaration[0];
                                $forIncrementVar = $declaration[2];
                                $forIncrementVal = $declaration[1];
                                $varName = jl_System_out();
                                $varType = jl_StringBuilder__init_();
                                jl_StringBuilder_append(jl_StringBuilder_append($varType, $rt_s(215)), $forCondition);
                                ji_PrintStream_println($varName, jl_StringBuilder_toString($varType));
                                $columnFC = jl_String_indexOf2($expression, $forCondition);
                                $columnFIV = jl_String_indexOf2($expression, $forIncrementVal);
                                $forConditionExpression = new tj_Expression;
                                tj_Expression$ExpressionReturnType_$callClinit();
                                tj_Expression__init_2($forConditionExpression, $forCondition, tj_Expression$ExpressionReturnType_STRING, $this.$lineNumber4, $columnFC);
                                $forIncrementExpression = tj_Expression__init_1($forIncrementVal, tj_Expression$ExpressionReturnType_NUMBER, $this.$lineNumber4, $columnFIV);
                                ju_ArrayList_add($parents, tj_ForWhenStmt__init_($this.$lineNumber4, $forConditionExpression, $forIncrementExpression, $forIncrementVar));
                                break a;
                            case 5:
                                $whileCondition = tj_Parser_parseLoop($this, $expression, $rt_s(205));
                                $columnW = jl_String_indexOf2($expression, $whileCondition);
                                $whileBoolExpression = new tj_Expression;
                                tj_Expression$ExpressionReturnType_$callClinit();
                                tj_Expression__init_2($whileBoolExpression, $whileCondition, tj_Expression$ExpressionReturnType_BOOL, $this.$lineNumber4, $columnW);
                                ju_ArrayList_add($parents, tj_WhileStmt__init_($this.$lineNumber4, $whileBoolExpression));
                                break a;
                            case 6:
                                $returnVal = tj_Parser_parseReturn($this, $expression);
                                $hasReturn = $returnVal === $rt_s(2) ? 0 : 1;
                                $columnRe = jl_String_indexOf2($expression, $returnVal);
                                $returnExpression = new tj_Expression;
                                tj_Expression$ExpressionReturnType_$callClinit();
                                tj_Expression__init_2($returnExpression, $returnVal, tj_Expression$ExpressionReturnType_STRING, $this.$lineNumber4, $columnRe);
                                $returnStmt = tj_ReturnStmt__init_($this.$lineNumber4, $returnExpression, $hasReturn);
                                tj_Statements_addStatement(ju_ArrayList_get($parents, ju_ArrayList_size($parents) - 1 | 0), $returnStmt);
                                break a;
                            case 7:
                                $returnStmt2 = new tj_ReturnStmt;
                                $columnIC = $this.$lineNumber4;
                                $varType = new tj_Expression;
                                tj_Expression$ExpressionReturnType_$callClinit();
                                tj_Expression__init_2($varType, $rt_s(2), tj_Expression$ExpressionReturnType_STRING, $columnIC, 0);
                                tj_ReturnStmt__init_0($returnStmt2, $columnIC, $varType, 0);
                                tj_Statements_addStatement(ju_ArrayList_get($parents, ju_ArrayList_size($parents) - 1 | 0), $returnStmt2);
                                break a;
                            case 8:
                                $declaration = (tj_Parser_parseMutationAS($this, $expression, $rt_s(201))).data;
                                $addVarName = $declaration[0];
                                $addChange = $declaration[1];
                                $columnA = jl_String_indexOf2($expression, $addChange);
                                $addExpression = new tj_Expression;
                                tj_Expression$ExpressionReturnType_$callClinit();
                                tj_Expression__init_2($addExpression, $addChange, tj_Expression$ExpressionReturnType_NUMBER, $this.$lineNumber4, $columnA);
                                $addStmt = new tj_MutationStmt;
                                $columnVar = $this.$lineNumber4;
                                tj_Statements$MutationType_$callClinit();
                                tj_MutationStmt__init_0($addStmt, $columnVar, $addVarName, $addExpression, tj_Statements$MutationType_ADD);
                                tj_Statements_addStatement(ju_ArrayList_get($parents, ju_ArrayList_size($parents) - 1 | 0), $addStmt);
                                break a;
                            case 9:
                                $declaration = (tj_Parser_parseMutationAS($this, $expression, $rt_s(194))).data;
                                $subtractVarName = $declaration[0];
                                $subtractChange = $declaration[1];
                                $columnS = jl_String_indexOf2($expression, $subtractChange);
                                $subtractExpression = new tj_Expression;
                                tj_Expression$ExpressionReturnType_$callClinit();
                                tj_Expression__init_2($subtractExpression, $subtractChange, tj_Expression$ExpressionReturnType_NUMBER, $this.$lineNumber4, $columnS);
                                $subtractStmt = new tj_MutationStmt;
                                $columnVar = $this.$lineNumber4;
                                tj_Statements$MutationType_$callClinit();
                                tj_MutationStmt__init_0($subtractStmt, $columnVar, $subtractVarName, $subtractExpression, tj_Statements$MutationType_SUBTRACT);
                                tj_Statements_addStatement(ju_ArrayList_get($parents, ju_ArrayList_size($parents) - 1 | 0), $subtractStmt);
                                break a;
                            case 10:
                                $declaration = (tj_Parser_parseMutationMD($this, $expression, $rt_s(207))).data;
                                $multiplyVarName = $declaration[1];
                                $multiplyChange = $declaration[0];
                                $columnM = jl_String_indexOf2($expression, $multiplyChange);
                                $multiplyExpression = new tj_Expression;
                                tj_Expression$ExpressionReturnType_$callClinit();
                                tj_Expression__init_2($multiplyExpression, $multiplyChange, tj_Expression$ExpressionReturnType_NUMBER, $this.$lineNumber4, $columnM);
                                $multiplyStmt = new tj_MutationStmt;
                                $columnVar = $this.$lineNumber4;
                                tj_Statements$MutationType_$callClinit();
                                tj_MutationStmt__init_0($multiplyStmt, $columnVar, $multiplyVarName, $multiplyExpression, tj_Statements$MutationType_MULTIPLY);
                                tj_Statements_addStatement(ju_ArrayList_get($parents, ju_ArrayList_size($parents) - 1 | 0), $multiplyStmt);
                                break a;
                            case 11:
                                $declaration = (tj_Parser_parseMutationMD($this, $expression, $rt_s(195))).data;
                                $divideVarName = $declaration[1];
                                $divideChange = $declaration[0];
                                $columnD = jl_String_indexOf2($expression, $divideChange);
                                $divideExpression = new tj_Expression;
                                tj_Expression$ExpressionReturnType_$callClinit();
                                tj_Expression__init_2($divideExpression, $divideChange, tj_Expression$ExpressionReturnType_NUMBER, $this.$lineNumber4, $columnD);
                                $divideStmt = new tj_MutationStmt;
                                $columnVar = $this.$lineNumber4;
                                tj_Statements$MutationType_$callClinit();
                                tj_MutationStmt__init_0($divideStmt, $columnVar, $divideVarName, $divideExpression, tj_Statements$MutationType_DIVIDE);
                                tj_Statements_addStatement(ju_ArrayList_get($parents, ju_ArrayList_size($parents) - 1 | 0), $divideStmt);
                                break a;
                            case 12:
                                $declaration = (tj_Parser_parseFunction($this, $expression)).data;
                                $functionName = $declaration[0];
                                if (!tj_Parser_validVarName($this, $functionName))
                                    tj_Error_InvalidFunctionName($functionName, $this.$lineNumber4);
                                if (tj_ReservedNames_isReserved($functionName))
                                    tj_Error_ReservedName($functionName, $this.$lineNumber4);
                                $varValue = jl_System_out();
                                $varName = jl_StringBuilder__init_();
                                jl_StringBuilder_append(jl_StringBuilder_append($varName, $rt_s(216)), $functionName);
                                ji_PrintStream_println($varValue, jl_StringBuilder_toString($varName));
                                if (tj_Statements_containsVariable(ju_ArrayList_get($parents, ju_ArrayList_size($parents) - 1 | 0), $functionName))
                                    tj_Error_VariableAlreadyExists($functionName, $this.$lineNumber4);
                                else
                                    tj_Statements_addVariableName(ju_ArrayList_get($parents, ju_ArrayList_size($parents) - 1 | 0), $functionName);
                                $functionArgs = jl_String_split($declaration[1], $rt_s(217));
                                $words = $functionArgs.data;
                                if ($words.length == 1 && jl_String_equals($words[0], $rt_s(2)))
                                    $functionArgs = $rt_createArray(jl_String, 0);
                                $arguments = ju_ArrayList__init_();
                                $i = 0;
                                while (true) {
                                    $words = $functionArgs.data;
                                    if ($i >= $words.length)
                                        break;
                                    if (!jl_String_isEmpty($words[$i])) {
                                        $words = (jl_String_split($words[$i], $rt_s(218))).data;
                                        if ($words.length != 2) {
                                            $parents = new jl_RuntimeException;
                                            $varName = $declaration[1];
                                            $columnVar = $this.$lineNumber4;
                                            $varType = jl_StringBuilder__init_();
                                            jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($varType, $rt_s(219)), $varName), $rt_s(220)), $columnVar);
                                            jl_RuntimeException__init_0($parents, jl_StringBuilder_toString($varType));
                                            $rt_throw($parents);
                                        }
                                        $argName = $words[1];
                                        ju_ArrayList_add($arguments, tj_Argument__init_(tj_Parser_getType($this, $words[0]), $argName));
                                    }
                                    $i = $i + 1 | 0;
                                }
                                $argumentsArr = ju_AbstractCollection_toArray($arguments, $rt_createArray(tj_Argument, ju_ArrayList_size($arguments)));
                                ju_ArrayList_add($parents, tj_FunctionStmt__init_($this.$lineNumber4, $functionName, $argumentsArr));
                                break a;
                            case 13:
                                $declaration = (tj_Parser_parseRemoveFrom($this, $expression, $rt_s(209))).data;
                                $removeAllVarName = $declaration[0];
                                $removeAllValue = $declaration[1];
                                $columnRAll = jl_String_indexOf2($expression, $removeAllValue);
                                $removeAllExpression = new tj_Expression;
                                tj_Expression$ExpressionReturnType_$callClinit();
                                tj_Expression__init_2($removeAllExpression, $removeAllValue, tj_Expression$ExpressionReturnType_STRING, $this.$lineNumber4, $columnRAll);
                                $removeAllStmt = tj_RemoveAllFromStmt__init_($this.$lineNumber4, $removeAllVarName, $removeAllExpression);
                                tj_Statements_addStatement(ju_ArrayList_get($parents, ju_ArrayList_size($parents) - 1 | 0), $removeAllStmt);
                                break a;
                            case 14:
                                $declaration = (tj_Parser_parseRemoveFrom($this, $expression, $rt_s(197))).data;
                                $removeVarName = $declaration[0];
                                $removeValue = $declaration[1];
                                $columnR = jl_String_indexOf2($expression, $removeValue);
                                $removeValExpression = new tj_Expression;
                                tj_Expression$ExpressionReturnType_$callClinit();
                                tj_Expression__init_2($removeValExpression, $removeValue, tj_Expression$ExpressionReturnType_STRING, $this.$lineNumber4, $columnR);
                                $removeStmt = tj_RemoveFromStmt__init_($this.$lineNumber4, $removeValExpression, $removeVarName);
                                tj_Statements_addStatement(ju_ArrayList_get($parents, ju_ArrayList_size($parents) - 1 | 0), $removeStmt);
                                break a;
                            case 15:
                                $declaration = (tj_Parser_parseRemoveAt($this, $expression)).data;
                                $removeAtVarName = $declaration[0];
                                $removeAtLocation = $declaration[1];
                                $columnRA = jl_String_indexOf2($expression, $removeAtLocation);
                                $removeAtExpression = new tj_Expression;
                                tj_Expression$ExpressionReturnType_$callClinit();
                                tj_Expression__init_2($removeAtExpression, $removeAtLocation, tj_Expression$ExpressionReturnType_NUMBER, $this.$lineNumber4, $columnRA);
                                $removeAtStmt = tj_RemoveAtStmt__init_($this.$lineNumber4, $removeAtExpression, $removeAtVarName);
                                tj_Statements_addStatement(ju_ArrayList_get($parents, ju_ArrayList_size($parents) - 1 | 0), $removeAtStmt);
                                break a;
                            case 16:
                                $importName = (tj_Parser_parseImport($this, $expression)).data[0];
                                $importStmt2 = tj_ImportStmt__init_($this.$lineNumber4, $importName);
                                tj_Statements_addStatement(ju_ArrayList_get($parents, ju_ArrayList_size($parents) - 1 | 0), $importStmt2);
                                $this.$importedRobot = 1;
                                break a;
                            case 17:
                                if (!$this.$importedRobot)
                                    tj_Error_RobotNotImported($this.$lineNumber4);
                                $robotStmt = tj_Parser_parseRobot($this, $expression);
                                $robotAction = tj_FunctionCall_getFunctionName($robotStmt);
                                $robotActionArgs = tj_FunctionCall_getArgs($robotStmt);
                                $robotActionArgExpressions = $rt_createArray(tj_Expression, ju_ArrayList_size($robotActionArgs));
                                $declaration = $robotActionArgExpressions.data;
                                $i = 0;
                                while ($i < ju_ArrayList_size($robotActionArgs)) {
                                    if (!jl_String_isEmpty(ju_ArrayList_get($robotActionArgs, $i))) {
                                        $arg = ju_ArrayList_get($robotActionArgs, $i);
                                        tj_Expression$ExpressionReturnType_$callClinit();
                                        $argType = tj_Expression$ExpressionReturnType_STRING;
                                        $columnArg = jl_String_indexOf2($expression, $arg);
                                        $declaration[$i] = tj_Expression__init_1($arg, $argType, $this.$lineNumber4, $columnArg);
                                    }
                                    $i = $i + 1 | 0;
                                }
                                $robotType = tj_Parser_getRobotType($this, $robotAction);
                                $robotStmt2 = tj_RobotStmt__init_($this.$lineNumber4, $robotType, $robotActionArgExpressions);
                                tj_Statements_addStatement(ju_ArrayList_get($parents, ju_ArrayList_size($parents) - 1 | 0), $robotStmt2);
                                break a;
                            default:
                                if (!jl_String_equals(tj_Parser_nextWord($this, $expression, jl_String_length($declaration[0]) + 1 | 0), $rt_s(221)) && !jl_String_equals(tj_Parser_nextWord($this, $expression, jl_String_length($declaration[0]) + 1 | 0), $rt_s(222))) {
                                    if (!tj_Parser_possibleFunctionName($this, $declaration[0], $parents)) {
                                        tj_Error_UnexpectedStmt($expression, $this.$lineNumber4);
                                        break a;
                                    }
                                    $functionCall = tj_Parser_parseFunctionCall($this, $expression);
                                    $functionCallName = tj_FunctionCall_getFunctionName($functionCall);
                                    $functionCallArgs = tj_FunctionCall_getArgs($functionCall);
                                    $functionArgExpressions = $rt_createArray(tj_Expression, ju_ArrayList_size($functionCallArgs));
                                    $declaration = $functionArgExpressions.data;
                                    $i = 0;
                                    while ($i < ju_ArrayList_size($functionCallArgs)) {
                                        if (!jl_String_isEmpty(ju_ArrayList_get($functionCallArgs, $i))) {
                                            $arg = ju_ArrayList_get($functionCallArgs, $i);
                                            tj_Expression$ExpressionReturnType_$callClinit();
                                            $argType = tj_Expression$ExpressionReturnType_STRING;
                                            $columnArg = jl_String_indexOf2($expression, $arg);
                                            $declaration[$i] = tj_Expression__init_1($arg, $argType, $this.$lineNumber4, $columnArg);
                                        }
                                        $i = $i + 1 | 0;
                                    }
                                    if (jl_String_equals($functionCallName, $rt_s(223))) {
                                        $columnVar = $declaration.length;
                                        if ($columnVar != 1)
                                            tj_Error_ArgumentLengthMismatch($rt_s(223), $this.$lineNumber4, 1, $columnVar);
                                        if (!ju_ArrayList_size(tj_FunctionCall_getArgs($functionCall)))
                                            tj_Error_ArgumentLengthMismatch($rt_s(223), $this.$lineNumber4, 1, 0);
                                        $printStmt = tj_PrintStmt__init_($this.$lineNumber4, $declaration[0]);
                                        tj_Statements_addStatement(ju_ArrayList_get($parents, ju_ArrayList_size($parents) - 1 | 0), $printStmt);
                                        break a;
                                    }
                                    if (!jl_String_equals($functionCallName, $rt_s(224))) {
                                        $functionCallStmt = tj_CallStmt__init_($this.$lineNumber4, $functionCallName, $functionArgExpressions);
                                        tj_Statements_addStatement(ju_ArrayList_get($parents, ju_ArrayList_size($parents) - 1 | 0), $functionCallStmt);
                                        break a;
                                    }
                                    $columnVar = $declaration.length;
                                    if ($columnVar != 1)
                                        tj_Error_ArgumentLengthMismatch($rt_s(224), $this.$lineNumber4, 1, $columnVar);
                                    if (!ju_ArrayList_size(tj_FunctionCall_getArgs($functionCall)))
                                        tj_Error_ArgumentLengthMismatch($rt_s(224), $this.$lineNumber4, 1, 0);
                                    $showMsgBoxStmt = tj_ShowMsgBoxStmt__init_($this.$lineNumber4, $declaration[0]);
                                    tj_Statements_addStatement(ju_ArrayList_get($parents, ju_ArrayList_size($parents) - 1 | 0), $showMsgBoxStmt);
                                    break a;
                                }
                                $assignment = tj_Parser_parseAssignment($this, $expression, $declaration[0]);
                                $columnVarA = jl_String_indexOf2($expression, $assignment);
                                $expressionA = new tj_Expression;
                                tj_Expression$ExpressionReturnType_$callClinit();
                                tj_Expression__init_2($expressionA, $assignment, tj_Expression$ExpressionReturnType_STRING, $this.$lineNumber4, $columnVarA);
                                $assignmentStmt = tj_AssignmentStmt__init_($this.$lineNumber4, $declaration[0], $expressionA);
                                tj_Statements_addStatement(ju_ArrayList_get($parents, ju_ArrayList_size($parents) - 1 | 0), $assignmentStmt);
                                break a;
                        }
                        $condition = tj_Parser_parseLoop($this, $expression, $rt_s(200));
                        $columnC = jl_String_indexOf2($expression, $condition);
                        $boolExpression = new tj_Expression;
                        tj_Expression$ExpressionReturnType_$callClinit();
                        tj_Expression__init_2($boolExpression, $condition, tj_Expression$ExpressionReturnType_BOOL, $this.$lineNumber4, $columnC);
                        ju_ArrayList_add($parents, tj_IfStmt__init_($this.$lineNumber4, $boolExpression));
                    }
                }
            }
            var$4 = var$4 + 1 | 0;
        }
        return ju_ArrayList_get($parents, 0);
    }
    function tj_Parser_validVarName($this, $str) {
        var $i, $c;
        $i = 0;
        while ($i < jl_String_length($str)) {
            $c = jl_String_charAt($str, $i);
            if (!jl_Character_isLetter($c) && $c != 95 && $i <= 0)
                return 0;
            $i = $i + 1 | 0;
        }
        return 1;
    }
    function tj_Parser_parseRobot($this, $line) {
        return tj_Parser_parseFunctionCall($this, jl_String_substring0($line, 6));
    }
    function tj_Parser_parseImport($this, $line) {
        var $i, $readingId, $readingName, $readingString, $readPeriod, $rString, $importName, $c, var$10, var$11;
        $i = 0;
        $readingId = 1;
        $readingName = 0;
        $readingString = 0;
        $readPeriod = 0;
        $rString = $rt_s(2);
        $importName = $rt_s(2);
        while ($i < jl_String_length($line)) {
            $c = jl_String_charAt($line, $i);
            if ($c == 34) {
                $readingString = $readingString ? 0 : 1;
                var$10 = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_(var$10);
                jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$10, $rString), $c);
                $rString = jl_AbstractStringBuilder_toString(var$10);
            } else if ($c == 32 && !$readingString) {
                if ($readingId && jl_String_equals($rString, $rt_s(196))) {
                    $readingId = 0;
                    $readingName = 1;
                    $rString = $rt_s(2);
                } else if ($readingName) {
                    $importName = $rString;
                    $rString = $rt_s(2);
                } else {
                    var$10 = new jl_StringBuilder;
                    jl_AbstractStringBuilder__init_(var$10);
                    jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$10, $rString), $c);
                    $rString = jl_AbstractStringBuilder_toString(var$10);
                }
            } else if ($c == 46 && !$readingString) {
                $readPeriod = 1;
                if ($readingName) {
                    $importName = $rString;
                    $rString = $rt_s(2);
                }
            } else {
                var$10 = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_(var$10);
                jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$10, $rString), $c);
                $rString = jl_AbstractStringBuilder_toString(var$10);
            }
            $i = $i + 1 | 0;
        }
        if (!$readPeriod)
            tj_Error_MissingPeriod($this.$lineNumber4);
        $line = jl_System_out();
        var$10 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$10);
        jl_StringBuilder_append(jl_StringBuilder_append(var$10, $rt_s(225)), $importName);
        ji_PrintStream_println($line, jl_AbstractStringBuilder_toString(var$10));
        var$11 = $rt_createArray(jl_String, 1);
        var$11.data[0] = $importName;
        return var$11;
    }
    function tj_Parser_parseRemoveFrom($this, $line, $type) {
        var $i, $readingId, $readingValue, $readingVar, $readingString, $readPeriod, $rString, $varName, $value, $c, $hasNext, var$14, var$15;
        $i = 0;
        $readingId = 1;
        $readingValue = 0;
        $readingVar = 0;
        $readingString = 0;
        $readPeriod = 0;
        $rString = $rt_s(2);
        $varName = $rt_s(2);
        $value = $rt_s(2);
        while ($i < jl_String_length($line)) {
            $c = jl_String_charAt($line, $i);
            $hasNext = $i >= (jl_String_length($line) - 1 | 0) ? 0 : 1;
            if ($hasNext)
                jl_String_charAt($line, $i + 1 | 0);
            if ($c == 34) {
                $readingString = $readingString ? 0 : 1;
                var$14 = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_(var$14);
                jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$14, $rString), $c);
                $rString = jl_AbstractStringBuilder_toString(var$14);
            } else if ($c == 32 && !$readingString) {
                if (jl_String_equals($rString, $type) && $readingId) {
                    $readingId = 0;
                    $readingValue = 1;
                    $rString = $rt_s(2);
                } else if ($readingValue && jl_String_equals(tj_Parser_nextWord($this, $line, $i + 1 | 0), $rt_s(226))) {
                    $readingValue = 0;
                    $readingVar = 1;
                    $value = $rString;
                    $rString = $rt_s(2);
                } else if (jl_String_equals($varName, $rt_s(2)) && $readingVar && jl_String_equals($rString, $rt_s(226)))
                    $rString = $rt_s(2);
                else {
                    var$15 = new jl_StringBuilder;
                    jl_AbstractStringBuilder__init_(var$15);
                    jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$15, $rString), $c);
                    $rString = jl_AbstractStringBuilder_toString(var$15);
                }
            } else if ($c == 46 && !$readingString && !$hasNext) {
                $readPeriod = 1;
                $varName = $rString;
                $rString = $rt_s(2);
            } else {
                var$14 = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_(var$14);
                jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$14, $rString), $c);
                $rString = jl_AbstractStringBuilder_toString(var$14);
            }
            $i = $i + 1 | 0;
        }
        if (!$readPeriod)
            tj_Error_MissingPeriod($this.$lineNumber4);
        return $rt_createArrayFromData(jl_String, [$varName, $value]);
    }
    function tj_Parser_parseRemoveAt($this, $line) {
        var $i, $readingId, $readingLocation, $readingVar, $readingString, $readPeriod, $rString, $varName, $location, $c, $hasNext, var$13;
        $i = 0;
        $readingId = 1;
        $readingLocation = 0;
        $readingVar = 0;
        $readingString = 0;
        $readPeriod = 0;
        $rString = $rt_s(2);
        $varName = $rt_s(2);
        $location = $rt_s(2);
        while ($i < jl_String_length($line)) {
            $c = jl_String_charAt($line, $i);
            $hasNext = $i >= (jl_String_length($line) - 1 | 0) ? 0 : 1;
            if ($hasNext)
                jl_String_charAt($line, $i + 1 | 0);
            if ($c == 34) {
                $readingString = $readingString ? 0 : 1;
                var$13 = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_(var$13);
                jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$13, $rString), $c);
                $rString = jl_AbstractStringBuilder_toString(var$13);
            } else if ($c == 32 && !$readingString) {
                if (jl_String_equals($rString, $rt_s(199)) && $readingId) {
                    $readingId = 0;
                    $readingVar = 1;
                    $rString = $rt_s(2);
                } else if ($readingVar && jl_String_equals(tj_Parser_nextWord($this, $line, $i + 1 | 0), $rt_s(227))) {
                    $readingVar = 0;
                    $readingLocation = 1;
                    $varName = $rString;
                    $rString = $rt_s(2);
                } else if (jl_String_equals($location, $rt_s(2)) && $readingLocation && jl_String_equals($rString, $rt_s(227)))
                    $rString = $rt_s(2);
                else {
                    var$13 = new jl_StringBuilder;
                    jl_AbstractStringBuilder__init_(var$13);
                    jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$13, $rString), $c);
                    $rString = jl_AbstractStringBuilder_toString(var$13);
                }
            } else if ($c == 46 && !$readingString && !$hasNext) {
                $readPeriod = 1;
                $location = $rString;
                $rString = $rt_s(2);
            } else {
                var$13 = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_(var$13);
                jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$13, $rString), $c);
                $rString = jl_AbstractStringBuilder_toString(var$13);
            }
            $i = $i + 1 | 0;
        }
        if (!$readPeriod)
            tj_Error_MissingPeriod($this.$lineNumber4);
        return $rt_createArrayFromData(jl_String, [$varName, $location]);
    }
    function tj_Parser_possibleFunctionName($this, $name, $parents) {
        var $functionName, var$4, var$5, var$6, var$7;
        $functionName = jl_System_out();
        var$4 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$4);
        jl_StringBuilder_append(jl_StringBuilder_append(var$4, $rt_s(228)), $name);
        ji_PrintStream_println($functionName, jl_AbstractStringBuilder_toString(var$4));
        if (!jl_String_contains($name, $rt_s(229)))
            return 0;
        $functionName = (jl_String_split($name, $rt_s(230))).data[0];
        if (!jl_String_equals($functionName, $rt_s(223)) && !jl_String_equals($functionName, $rt_s(224)) && !jl_String_equals($functionName, $rt_s(231)) && !jl_String_equals($functionName, $rt_s(232)) && !jl_String_equals($functionName, $rt_s(233)) && !jl_String_equals($functionName, $rt_s(234)) && !jl_String_equals($functionName, $rt_s(235))) {
            $name = jl_System_out();
            var$5 = tj_Statements_containsVariable(ju_ArrayList_get($parents, $parents.$size0 - 1 | 0), $functionName);
            var$6 = jl_String_contains($functionName, $rt_s(138));
            var$7 = jl_String_length($functionName);
            $parents = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($parents);
            var$4 = jl_StringBuilder_append(jl_StringBuilder_append($parents, $rt_s(216)), $functionName);
            jl_AbstractStringBuilder_append(var$4, 32);
            var$4 = jl_StringBuilder_append4(var$4, var$5);
            jl_AbstractStringBuilder_append(var$4, 32);
            var$4 = jl_StringBuilder_append4(var$4, var$6);
            jl_AbstractStringBuilder_append(var$4, 32);
            jl_StringBuilder_append0(var$4, var$7);
            ji_PrintStream_println($name, jl_AbstractStringBuilder_toString($parents));
            if (!jl_String_contains($functionName, $rt_s(138)) && jl_String_length($functionName))
                return 1;
            return 0;
        }
        return 1;
    }
    function tj_Parser_parseForEach($this, $line) {
        var $i, $readingId, $readingEach, $readingVar, $readingList, $readingString, $rString, $varName, $listName, $c, var$12;
        $i = 0;
        $readingId = 1;
        $readingEach = 0;
        $readingVar = 0;
        $readingList = 0;
        $readingString = 0;
        $rString = $rt_s(2);
        $varName = $rt_s(2);
        $listName = $rt_s(2);
        while ($i < jl_String_length($line)) {
            $c = jl_String_charAt($line, $i);
            if ($c == 34) {
                $readingString = $readingString ? 0 : 1;
                var$12 = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_(var$12);
                jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$12, $rString), $c);
                $rString = jl_AbstractStringBuilder_toString(var$12);
            } else if ($c == 32 && !$readingString) {
                if ($readingId && jl_String_equals($rString, $rt_s(202))) {
                    $readingId = 0;
                    $readingEach = 1;
                    $rString = $rt_s(2);
                } else if ($readingEach && jl_String_equals($rString, $rt_s(214))) {
                    $readingEach = 0;
                    $readingVar = 1;
                    $rString = $rt_s(2);
                } else if ($readingVar) {
                    $readingVar = 0;
                    $varName = $rString;
                    $rString = $rt_s(2);
                } else if (jl_String_equals($rString, $rt_s(236)) && !$readingList) {
                    $readingList = 1;
                    $rString = $rt_s(2);
                } else if ($readingList) {
                    $readingList = 0;
                    $listName = $rString;
                    $rString = $rt_s(2);
                } else {
                    var$12 = new jl_StringBuilder;
                    jl_AbstractStringBuilder__init_(var$12);
                    jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$12, $rString), $c);
                    $rString = jl_AbstractStringBuilder_toString(var$12);
                }
            } else if ($c == 123 && !$readingString && jl_String_equals($listName, $rt_s(2))) {
                $listName = $rString;
                $rString = $rt_s(2);
            } else {
                var$12 = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_(var$12);
                jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$12, $rString), $c);
                $rString = jl_AbstractStringBuilder_toString(var$12);
            }
            $i = $i + 1 | 0;
        }
        return $rt_createArrayFromData(jl_String, [$varName, $listName]);
    }
    function tj_Parser_parseForWhen($this, $line) {
        var $i, $readingId, $readingWhen, $readingCondition, $readingIncrementVar, $readingIncrementVal, $readingString, $readingExpression, $parenCount, $rString, $condition, $increment, $incrementVar, $c, var$16, var$17, var$18;
        $i = 0;
        $readingId = 1;
        $readingWhen = 0;
        $readingCondition = 0;
        $readingIncrementVar = 0;
        $readingIncrementVal = 0;
        $readingString = 0;
        $readingExpression = 0;
        $parenCount = 0;
        $rString = $rt_s(2);
        $condition = $rt_s(2);
        $increment = $rt_s(2);
        $incrementVar = $rt_s(2);
        while ($i < jl_String_length($line)) {
            $c = jl_String_charAt($line, $i);
            if ($c == 34) {
                $readingString = $readingString ? 0 : 1;
                var$16 = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_(var$16);
                jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$16, $rString), $c);
                $rString = jl_AbstractStringBuilder_toString(var$16);
            } else if (!$readingString && $c == 40) {
                $parenCount = $parenCount + 1 | 0;
                $readingExpression = 1;
                var$16 = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_(var$16);
                jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$16, $rString), $c);
                $rString = jl_AbstractStringBuilder_toString(var$16);
            } else if (!$readingString && $c == 41) {
                $parenCount = $parenCount + (-1) | 0;
                if ($parenCount) {
                    var$16 = new jl_StringBuilder;
                    jl_AbstractStringBuilder__init_(var$16);
                    jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$16, $rString), $c);
                    $rString = jl_AbstractStringBuilder_toString(var$16);
                } else {
                    $readingExpression = 0;
                    var$16 = new jl_StringBuilder;
                    jl_AbstractStringBuilder__init_(var$16);
                    jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$16, $rString), $c);
                    $rString = jl_AbstractStringBuilder_toString(var$16);
                }
            } else if ($readingExpression) {
                var$16 = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_(var$16);
                jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$16, $rString), $c);
                $rString = jl_AbstractStringBuilder_toString(var$16);
            } else {
                var$17 = $rt_compare($c, 32);
                if (!var$17 && !$readingString && !$readingExpression) {
                    if ($readingId && jl_String_equals($rString, $rt_s(202))) {
                        $readingId = 0;
                        $readingWhen = 1;
                        $rString = $rt_s(2);
                    } else if ($readingWhen && jl_String_equals($rString, $rt_s(213))) {
                        $readingWhen = 0;
                        $readingCondition = 1;
                        $rString = $rt_s(2);
                    } else if ($readingCondition && jl_String_equals(tj_Parser_nextWord($this, $line, $i + 1 | 0), $rt_s(110))) {
                        $readingCondition = 0;
                        $condition = $rString;
                        $rString = $rt_s(2);
                    } else if (jl_String_equals($rString, $rt_s(110))) {
                        $readingIncrementVar = 1;
                        $rString = $rt_s(2);
                    } else if ($readingIncrementVar && jl_String_equals(tj_Parser_nextWord($this, $line, $i + 1 | 0), $rt_s(237))) {
                        $readingIncrementVar = 0;
                        $readingIncrementVal = 1;
                        $i = $i + 3 | 0;
                        $incrementVar = $rString;
                        $rString = $rt_s(2);
                    } else if ($readingIncrementVal) {
                        $readingIncrementVal = 0;
                        $increment = $rString;
                        $rString = $rt_s(2);
                    } else {
                        var$16 = new jl_StringBuilder;
                        jl_AbstractStringBuilder__init_(var$16);
                        jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$16, $rString), $c);
                        $rString = jl_AbstractStringBuilder_toString(var$16);
                    }
                } else if ($c == 123 && !$readingString && jl_String_equals($increment, $rt_s(2)) && !$readingExpression) {
                    $increment = $rString;
                    $rString = $rt_s(2);
                } else if (!var$17 && $readingExpression) {
                    var$16 = new jl_StringBuilder;
                    jl_AbstractStringBuilder__init_(var$16);
                    jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$16, $rString), $c);
                    $rString = jl_AbstractStringBuilder_toString(var$16);
                } else {
                    var$18 = new jl_StringBuilder;
                    jl_AbstractStringBuilder__init_(var$18);
                    jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$18, $rString), $c);
                    $rString = jl_AbstractStringBuilder_toString(var$18);
                }
            }
            $i = $i + 1 | 0;
        }
        return $rt_createArrayFromData(jl_String, [$condition, $increment, $incrementVar]);
    }
    function tj_Parser_parseElseIf($this, $line, $id) {
        var $i, $readingBracket, $readingElse, $readingId, $readingCondition, $rString, $condition, $c, var$11;
        $i = 0;
        $readingBracket = 1;
        $readingElse = 0;
        $readingId = 0;
        $readingCondition = 0;
        $rString = $rt_s(2);
        $condition = $rt_s(2);
        while ($i < jl_String_length($line)) {
            $c = jl_String_charAt($line, $i);
            if ($c == 32 && !$readingCondition) {
                if (jl_String_equals($rString, $rt_s(27)) && $readingBracket) {
                    $readingBracket = 0;
                    $readingElse = 1;
                    $rString = $rt_s(2);
                } else if (jl_String_equals($rString, $rt_s(212)) && $readingElse) {
                    $readingElse = 0;
                    $readingId = 1;
                    $rString = $rt_s(2);
                } else if ($readingId && jl_String_equals($rString, $id)) {
                    $readingId = 0;
                    $readingCondition = 1;
                    $rString = $rt_s(2);
                } else if ($readingBracket && jl_String_equals($rString, $rt_s(206))) {
                    $readingBracket = 0;
                    $readingId = 1;
                    $rString = $rt_s(2);
                }
            } else if ($c != 123) {
                var$11 = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_(var$11);
                jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$11, $rString), $c);
                $rString = jl_AbstractStringBuilder_toString(var$11);
            } else {
                $condition = jl_String_charAt($rString, jl_String_length($rString) - 1 | 0) != 32 ? $rString : jl_String_substring($rString, 0, jl_String_length($rString) - 1 | 0);
                $rString = $rt_s(2);
            }
            $i = $i + 1 | 0;
        }
        return $condition;
    }
    function tj_Parser_parseAssignment($this, $line, $varName) {
        var $i, $readingName, $readingValue, $readingString, $readPeriod, $rString, $varValue, $c, $hasNext;
        $i = 0;
        $readingName = 1;
        $readingValue = 0;
        $readingString = 0;
        $readPeriod = 0;
        $rString = $rt_s(2);
        $varValue = $rt_s(2);
        while ($i < jl_String_length($line)) {
            $c = jl_String_charAt($line, $i);
            $hasNext = $i >= (jl_String_length($line) - 1 | 0) ? 0 : 1;
            if ($hasNext)
                jl_String_charAt($line, $i + 1 | 0);
            if ($c == 34) {
                $readingString = $readingString ? 0 : 1;
                $varName = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_($varName);
                jl_AbstractStringBuilder_append(jl_StringBuilder_append($varName, $rString), $c);
                $rString = jl_AbstractStringBuilder_toString($varName);
            } else if ($c == 32 && !$readingString) {
                if ($readingName) {
                    $readingName = 0;
                    $rString = $rt_s(2);
                } else if (!$readingName && !$readingValue && !(!jl_String_equals($rString, $rt_s(222)) && !jl_String_equals($rString, $rt_s(221)))) {
                    $readingValue = 1;
                    $rString = $rt_s(2);
                } else {
                    $varName = new jl_StringBuilder;
                    jl_AbstractStringBuilder__init_($varName);
                    jl_AbstractStringBuilder_append(jl_StringBuilder_append($varName, $rString), $c);
                    $rString = jl_AbstractStringBuilder_toString($varName);
                }
            } else if ($c == 46 && !$readingString && $readingValue && !$hasNext) {
                $readingValue = 0;
                $readPeriod = 1;
                $varValue = $rString;
                $rString = $rt_s(2);
            } else {
                $varName = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_($varName);
                jl_AbstractStringBuilder_append(jl_StringBuilder_append($varName, $rString), $c);
                $rString = jl_AbstractStringBuilder_toString($varName);
            }
            $i = $i + 1 | 0;
        }
        if (!$readPeriod)
            tj_Error_MissingPeriod($this.$lineNumber4);
        return $varValue;
    }
    function tj_Parser_parseFunctionCall($this, $line) {
        var $i, $readingName, $readingString, $readPeriod, $rString, $functionName, $args, $functionDepth, $c, $functionCall, var$12, var$13, var$14, var$15, var$16;
        $i = 0;
        $readingName = 1;
        $readingString = 0;
        $readPeriod = 0;
        $rString = $rt_s(2);
        $functionName = $rt_s(2);
        $args = ju_ArrayList__init_();
        $functionDepth = 0;
        while ($i < jl_String_length($line)) {
            a: {
                $c = jl_String_charAt($line, $i);
                if ($c == 34) {
                    $readingString = $readingString ? 0 : 1;
                    $functionCall = new jl_StringBuilder;
                    jl_AbstractStringBuilder__init_($functionCall);
                    jl_AbstractStringBuilder_append(jl_StringBuilder_append($functionCall, $rString), $c);
                    $rString = jl_AbstractStringBuilder_toString($functionCall);
                    break a;
                }
                var$12 = $rt_compare($c, 32);
                if (!var$12 && !$readingString) {
                    if ($readingName) {
                        $readingName = 0;
                        $functionName = $rString;
                        $rString = $rt_s(2);
                        break a;
                    }
                    $functionCall = new jl_StringBuilder;
                    jl_AbstractStringBuilder__init_($functionCall);
                    jl_AbstractStringBuilder_append(jl_StringBuilder_append($functionCall, $rString), $c);
                    $rString = jl_AbstractStringBuilder_toString($functionCall);
                    break a;
                }
                if ($readingName && $c == 40) {
                    $functionDepth = $functionDepth + 1 | 0;
                    $readingName = 0;
                    $functionName = $rString;
                    $rString = $rt_s(2);
                    break a;
                }
                var$13 = $rt_compare($c, 40);
                if (!var$13 && !$readingString) {
                    $functionDepth = $functionDepth + 1 | 0;
                    $functionCall = new jl_StringBuilder;
                    jl_AbstractStringBuilder__init_($functionCall);
                    jl_AbstractStringBuilder_append(jl_StringBuilder_append($functionCall, $rString), $c);
                    $rString = jl_AbstractStringBuilder_toString($functionCall);
                    break a;
                }
                if ($c == 44 && !$readingString) {
                    ju_ArrayList_add($args, $rString);
                    $rString = $rt_s(2);
                    break a;
                }
                var$14 = $rt_compare($c, 41);
                if (!var$14) {
                    $functionDepth = $functionDepth + (-1) | 0;
                    if (!$functionDepth) {
                        ju_ArrayList_add($args, $rString);
                        $rString = $rt_s(2);
                        break a;
                    }
                    $functionCall = new jl_StringBuilder;
                    jl_AbstractStringBuilder__init_($functionCall);
                    jl_AbstractStringBuilder_append(jl_StringBuilder_append($functionCall, $rString), $c);
                    $rString = jl_AbstractStringBuilder_toString($functionCall);
                    break a;
                }
                if ($c == 46 && !$readingString) {
                    $readPeriod = 1;
                    break a;
                }
                if (!(!var$12 && !var$13 && !var$14) && !$readingString) {
                    $functionCall = new jl_StringBuilder;
                    jl_AbstractStringBuilder__init_($functionCall);
                    jl_AbstractStringBuilder_append(jl_StringBuilder_append($functionCall, $rString), $c);
                    $rString = jl_AbstractStringBuilder_toString($functionCall);
                }
                if (!$readingString)
                    break a;
                $functionCall = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_($functionCall);
                jl_AbstractStringBuilder_append(jl_StringBuilder_append($functionCall, $rString), $c);
                $rString = jl_AbstractStringBuilder_toString($functionCall);
            }
            $i = $i + 1 | 0;
        }
        if (!$functionDepth) {
            if (!$readPeriod)
                tj_Error_MissingPeriod($this.$lineNumber4);
            $line = jl_System_out();
            $functionCall = jl_String_valueOf($args);
            $rString = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($rString);
            jl_StringBuilder_append(jl_StringBuilder_append($rString, $rt_s(216)), $functionCall);
            ji_PrintStream_println($line, jl_AbstractStringBuilder_toString($rString));
            $functionCall = new tj_FunctionCall;
            $functionCall.$functionName = $functionName;
            $functionCall.$args0 = $args;
            return $functionCall;
        }
        $i = $this.$lineNumber4;
        $line = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($line);
        jl_StringBuilder_append0(jl_StringBuilder_append($line, $rt_s(238)), $i);
        $line = jl_AbstractStringBuilder_toString($line);
        var$15 = $rt_createArray(jl_String, 2);
        var$16 = var$15.data;
        var$16[0] = $line;
        $line = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($line);
        jl_StringBuilder_append0($line, $i);
        var$16[1] = jl_AbstractStringBuilder_toString($line);
        tj_Error_errorLog$js_body$_1(otji_JS_wrap(var$15));
        $line = new jl_RuntimeException;
        $functionCall = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($functionCall);
        jl_StringBuilder_append0(jl_StringBuilder_append($functionCall, $rt_s(238)), $i);
        jl_Throwable__init_($line, jl_AbstractStringBuilder_toString($functionCall));
        $rt_throw($line);
    }
    function tj_Parser_parseFunction($this, $line) {
        var $i, $readingId, $readingName, $readingArgType, $readingArgName, $rString, $functionName, $args, $argType, $c, var$12, var$13, var$14, var$15;
        $i = 0;
        $readingId = 1;
        $readingName = 0;
        $readingArgType = 0;
        $readingArgName = 0;
        $rString = $rt_s(2);
        $functionName = $rt_s(2);
        $args = $rt_s(2);
        $argType = $rt_s(2);
        while ($i < jl_String_length($line)) {
            $c = jl_String_charAt($line, $i);
            var$12 = $rt_compare($c, 32);
            if (!var$12) {
                if (jl_String_equals($rString, $rt_s(210)) && $readingId) {
                    $readingId = 0;
                    $readingName = 1;
                    $rString = $rt_s(2);
                } else if ($readingName) {
                    $readingName = 0;
                    $readingArgType = 1;
                    $functionName = $rString;
                    $rString = $rt_s(2);
                } else if ($readingArgType) {
                    $readingArgType = 0;
                    $readingArgName = 1;
                    $argType = $rString;
                    $rString = $rt_s(2);
                } else if ($readingArgName && jl_String_contains($rString, $rt_s(217))) {
                    var$13 = new jl_StringBuilder;
                    jl_AbstractStringBuilder__init_(var$13);
                    $args = jl_StringBuilder_append(jl_StringBuilder_append(var$13, $args), $argType);
                    jl_AbstractStringBuilder_append($args, 58);
                    jl_AbstractStringBuilder_append(jl_StringBuilder_append($args, $rString), 44);
                    $args = jl_AbstractStringBuilder_toString(var$13);
                    $argType = $rt_s(2);
                    $readingArgType = 1;
                    $readingArgName = 0;
                    $rString = $rt_s(2);
                }
            } else if ($readingName && $c == 40) {
                $readingName = 0;
                $readingArgType = 1;
                $functionName = $rString;
                $rString = $rt_s(2);
            } else {
                var$14 = $rt_compare($c, 41);
                if (!var$14) {
                    if (!jl_String_equals($rString, $rt_s(2))) {
                        var$15 = new jl_StringBuilder;
                        jl_AbstractStringBuilder__init_(var$15);
                        var$13 = jl_StringBuilder_append(jl_StringBuilder_append(var$15, $args), $argType);
                        jl_AbstractStringBuilder_append(var$13, 58);
                        jl_StringBuilder_append(var$13, $rString);
                        $args = jl_AbstractStringBuilder_toString(var$15);
                    }
                    $readingArgType = 0;
                    $readingArgName = 0;
                    $rString = $rt_s(2);
                } else if (!(!var$12 && $c == 40 && !var$14)) {
                    var$13 = new jl_StringBuilder;
                    jl_AbstractStringBuilder__init_(var$13);
                    jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$13, $rString), $c);
                    $rString = jl_AbstractStringBuilder_toString(var$13);
                }
            }
            $i = $i + 1 | 0;
        }
        return $rt_createArrayFromData(jl_String, [$functionName, $args]);
    }
    function tj_Parser_parseMutationAS($this, $line, $type) {
        var $i, $readingType, $readingChange, $readingVar, $readingString, $readPeriod, $id, $rString, $varName, $change, $c, $hasNext, var$15;
        $i = 0;
        $readingType = 1;
        $readingChange = 0;
        $readingVar = 0;
        $readingString = 0;
        $readPeriod = 0;
        $id = $rt_s(239);
        if (jl_String_equals($type, $rt_s(194)))
            $id = $rt_s(226);
        $rString = $rt_s(2);
        $varName = $rt_s(2);
        $change = $rt_s(2);
        while ($i < jl_String_length($line)) {
            $c = jl_String_charAt($line, $i);
            $hasNext = $i >= (jl_String_length($line) - 1 | 0) ? 0 : 1;
            if ($hasNext)
                jl_String_charAt($line, $i + 1 | 0);
            if ($c == 34) {
                $readingString = $readingString ? 0 : 1;
                var$15 = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_(var$15);
                jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$15, $rString), $c);
                $rString = jl_AbstractStringBuilder_toString(var$15);
            } else if ($c == 32 && !$readingString) {
                if (jl_String_equals($rString, $type) && $readingType) {
                    $readingType = 0;
                    $readingChange = 1;
                    $rString = $rt_s(2);
                } else if ($readingChange && jl_String_equals(tj_Parser_nextWord($this, $line, $i + 1 | 0), $id)) {
                    $readingChange = 0;
                    $readingVar = 1;
                    $change = $rString;
                    $rString = $rt_s(2);
                } else if (jl_String_equals($varName, $rt_s(2)) && $readingVar && jl_String_equals($rString, $id))
                    $rString = $rt_s(2);
                else {
                    var$15 = new jl_StringBuilder;
                    jl_AbstractStringBuilder__init_(var$15);
                    jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$15, $rString), $c);
                    $rString = jl_AbstractStringBuilder_toString(var$15);
                }
            } else if ($c == 46 && !$readingString && !$hasNext) {
                $readPeriod = 1;
                $varName = $rString;
                $rString = $rt_s(2);
            } else {
                var$15 = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_(var$15);
                jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$15, $rString), $c);
                $rString = jl_AbstractStringBuilder_toString(var$15);
            }
            $i = $i + 1 | 0;
        }
        if (!$readPeriod)
            tj_Error_MissingPeriod($this.$lineNumber4);
        return $rt_createArrayFromData(jl_String, [$varName, $change]);
    }
    function tj_Parser_parseMutationMD($this, $line, $type) {
        var $i, $readingType, $readingChange, $readingVar, $readingString, $readPeriod, $rString, $varName, $change, $c, $hasNext, var$14, var$15;
        $i = 0;
        $readingType = 1;
        $readingChange = 0;
        $readingVar = 0;
        $readingString = 0;
        $readPeriod = 0;
        $rString = $rt_s(2);
        $varName = $rt_s(2);
        $change = $rt_s(2);
        while ($i < jl_String_length($line)) {
            $c = jl_String_charAt($line, $i);
            $hasNext = $i >= (jl_String_length($line) - 1 | 0) ? 0 : 1;
            if ($hasNext)
                jl_String_charAt($line, $i + 1 | 0);
            if ($c == 34) {
                $readingString = $readingString ? 0 : 1;
                var$14 = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_(var$14);
                jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$14, $rString), $c);
                $rString = jl_AbstractStringBuilder_toString(var$14);
            } else if ($c == 32 && !$readingString) {
                if (jl_String_equals($rString, $type) && $readingType) {
                    $readingType = 0;
                    $readingVar = 1;
                    $rString = $rt_s(2);
                } else if ($readingVar && jl_String_equals(tj_Parser_nextWord($this, $line, $i + 1 | 0), $rt_s(237))) {
                    $readingVar = 0;
                    $readingChange = 1;
                    $change = $rString;
                    $rString = $rt_s(2);
                } else if (jl_String_equals($varName, $rt_s(2)) && $readingChange && jl_String_equals($rString, $rt_s(237)))
                    $rString = $rt_s(2);
                else {
                    var$15 = new jl_StringBuilder;
                    jl_AbstractStringBuilder__init_(var$15);
                    jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$15, $rString), $c);
                    $rString = jl_AbstractStringBuilder_toString(var$15);
                }
            } else if ($c == 46 && !$readingString && !$hasNext) {
                $readPeriod = 1;
                $varName = $rString;
                $rString = $rt_s(2);
            } else {
                var$14 = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_(var$14);
                jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$14, $rString), $c);
                $rString = jl_AbstractStringBuilder_toString(var$14);
            }
            $i = $i + 1 | 0;
        }
        if (!$readPeriod)
            tj_Error_MissingPeriod($this.$lineNumber4);
        return $rt_createArrayFromData(jl_String, [$varName, $change]);
    }
    function tj_Parser_nextWord($this, $line, $i) {
        var $rString, $c, var$5;
        $rString = $rt_s(2);
        while ($i < jl_String_length($line)) {
            $c = jl_String_charAt($line, $i);
            if ($c == 32)
                return $rString;
            var$5 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_(var$5);
            jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$5, $rString), $c);
            $rString = jl_AbstractStringBuilder_toString(var$5);
            $i = $i + 1 | 0;
        }
        return $rString;
    }
    function tj_Parser_parseReturn($this, $line) {
        var $i, $readingId, $readPeriod, $rString, $returnVal, $c, $hasNext, var$9;
        $i = 0;
        $readingId = 1;
        $readPeriod = 0;
        $rString = $rt_s(2);
        $returnVal = $rt_s(2);
        while ($i < jl_String_length($line)) {
            $c = jl_String_charAt($line, $i);
            $hasNext = $i >= (jl_String_length($line) - 1 | 0) ? 0 : 1;
            if ($hasNext)
                jl_String_charAt($line, $i + 1 | 0);
            if ($c == 32) {
                if ($readingId && jl_String_equals($rString, $rt_s(198))) {
                    $readingId = 0;
                    $rString = $rt_s(2);
                } else {
                    var$9 = new jl_StringBuilder;
                    jl_AbstractStringBuilder__init_(var$9);
                    jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$9, $rString), $c);
                    $rString = jl_AbstractStringBuilder_toString(var$9);
                }
            } else if ($c == 46 && !$hasNext) {
                $readPeriod = 1;
                $returnVal = $rString;
                $rString = $rt_s(2);
            } else {
                var$9 = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_(var$9);
                jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$9, $rString), $c);
                $rString = jl_AbstractStringBuilder_toString(var$9);
            }
            $i = $i + 1 | 0;
        }
        if (!$readPeriod)
            tj_Error_MissingPeriod($this.$lineNumber4);
        return $returnVal;
    }
    function tj_Parser_parseLoop($this, $line, $id) {
        var $i, $readingId, $readingCondition, $rString, $condition, $c, var$9;
        $i = 0;
        $readingId = 1;
        $readingCondition = 0;
        $rString = $rt_s(2);
        $condition = $rt_s(2);
        while ($i < jl_String_length($line)) {
            $c = jl_String_charAt($line, $i);
            if ($c == 32 && !$readingCondition) {
                if ($readingId && jl_String_equals($rString, $id)) {
                    $readingId = 0;
                    $readingCondition = 1;
                    $rString = $rt_s(2);
                }
            } else if ($c != 123) {
                var$9 = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_(var$9);
                jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$9, $rString), $c);
                $rString = jl_AbstractStringBuilder_toString(var$9);
            } else {
                $condition = jl_String_charAt($rString, jl_String_length($rString) - 1 | 0) != 32 ? $rString : jl_String_substring($rString, 0, jl_String_length($rString) - 1 | 0);
                $rString = $rt_s(2);
            }
            $i = $i + 1 | 0;
        }
        return $condition;
    }
    function tj_Parser_parseDeclaration($this, $line) {
        var $i, $readingId, $readingType, $readingName, $readingValue, $readingString, $readPeriod, $varName, $varType, $varValue, $rString, $c, $hasNext, $nextChar, var$16, var$17, var$18, var$19;
        $i = 0;
        $readingId = 1;
        $readingType = 0;
        $readingName = 0;
        $readingValue = 0;
        $readingString = 0;
        $readPeriod = 0;
        $varName = $rt_s(2);
        $varType = $rt_s(2);
        $varValue = $rt_s(2);
        $rString = $rt_s(2);
        while ($i < jl_String_length($line)) {
            $c = jl_String_charAt($line, $i);
            $hasNext = $i >= (jl_String_length($line) - 1 | 0) ? 0 : 1;
            $nextChar = 32;
            if ($hasNext)
                $nextChar = jl_String_charAt($line, $i + 1 | 0);
            if ($c == 32 && !$readingValue) {
                if ($readingId && jl_String_equals($rString, $rt_s(203))) {
                    $readingId = 0;
                    $readingType = 1;
                    $rString = $rt_s(2);
                } else if ($readingType) {
                    $readingType = 0;
                    $readingName = 1;
                    $varType = $rString;
                    $rString = $rt_s(2);
                } else if ($readingName) {
                    $readingName = 0;
                    $varName = $rString;
                    $rString = $rt_s(2);
                } else if (!jl_String_equals($rString, $rt_s(222)) && !jl_String_equals($rString, $rt_s(240))) {
                    var$16 = new jl_StringBuilder;
                    jl_AbstractStringBuilder__init_(var$16);
                    jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$16, $rString), $c);
                    $rString = jl_AbstractStringBuilder_toString(var$16);
                } else {
                    $readingValue = 1;
                    $rString = $rt_s(2);
                }
            } else if ($c == 34) {
                if ($readingString) {
                    $readingString = 0;
                    var$16 = new jl_StringBuilder;
                    jl_AbstractStringBuilder__init_(var$16);
                    jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$16, $rString), $c);
                    $rString = jl_AbstractStringBuilder_toString(var$16);
                } else {
                    $readingString = 1;
                    var$17 = new jl_StringBuilder;
                    jl_AbstractStringBuilder__init_(var$17);
                    jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$17, $rString), $c);
                    $rString = jl_AbstractStringBuilder_toString(var$17);
                }
            } else if ($c == 46 && !$readingString && !($hasNext && $nextChar != 32)) {
                $readPeriod = 1;
                var$16 = $rString;
                $varValue = $rString;
                $rString = var$16;
            } else {
                var$16 = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_(var$16);
                jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$16, $rString), $c);
                $rString = jl_AbstractStringBuilder_toString(var$16);
            }
            $i = $i + 1 | 0;
        }
        if (!$readPeriod)
            tj_Error_MissingPeriod($this.$lineNumber4);
        ju_ArrayList_add($this.$variableNames, $varName);
        if (!$readingString)
            return $rt_createArrayFromData(jl_String, [$varName, $varType, $varValue]);
        $i = $this.$lineNumber4;
        $line = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($line);
        jl_StringBuilder_append0(jl_StringBuilder_append($line, $rt_s(241)), $i);
        $line = jl_AbstractStringBuilder_toString($line);
        var$18 = $rt_createArray(jl_String, 2);
        var$19 = var$18.data;
        var$19[0] = $line;
        $line = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($line);
        jl_StringBuilder_append0($line, $i);
        var$19[1] = jl_AbstractStringBuilder_toString($line);
        tj_Error_errorLog$js_body$_1(otji_JS_wrap(var$18));
        $line = new jl_RuntimeException;
        var$16 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$16);
        jl_StringBuilder_append0(jl_StringBuilder_append(var$16, $rt_s(241)), $i);
        jl_Throwable__init_($line, jl_AbstractStringBuilder_toString(var$16));
        $rt_throw($line);
    }
    function tj_Parser_getType($this, $type) {
        var var$2;
        a: {
            var$2 = (-1);
            switch (jl_String_hashCode($type)) {
                case -1808118735:
                    if (!jl_String_equals($type, $rt_s(186)))
                        break a;
                    var$2 = 0;
                    break a;
                case -1383386164:
                    if (!jl_String_equals($type, $rt_s(242)))
                        break a;
                    var$2 = 7;
                    break a;
                case -766441794:
                    if (!jl_String_equals($type, $rt_s(243)))
                        break a;
                    var$2 = 6;
                    break a;
                case 104431:
                    if (!jl_String_equals($type, $rt_s(244)))
                        break a;
                    var$2 = 1;
                    break a;
                case 3029738:
                    if (!jl_String_equals($type, $rt_s(245)))
                        break a;
                    var$2 = 3;
                    break a;
                case 97526364:
                    if (!jl_String_equals($type, $rt_s(246)))
                        break a;
                    var$2 = 2;
                    break a;
                case 100361105:
                    if (!jl_String_equals($type, $rt_s(247)))
                        break a;
                    var$2 = 5;
                    break a;
                case 1859653459:
                    if (!jl_String_equals($type, $rt_s(248)))
                        break a;
                    var$2 = 4;
                    break a;
                default:
            }
        }
        switch (var$2) {
            case 0:
                tj_JavaishVal$JavaishType_$callClinit();
                return tj_JavaishVal$JavaishType_STRING;
            case 1:
                tj_JavaishVal$JavaishType_$callClinit();
                return tj_JavaishVal$JavaishType_INT;
            case 2:
                tj_JavaishVal$JavaishType_$callClinit();
                return tj_JavaishVal$JavaishType_FLOAT;
            case 3:
                tj_JavaishVal$JavaishType_$callClinit();
                return tj_JavaishVal$JavaishType_BOOLEAN;
            case 4:
                tj_JavaishVal$JavaishType_$callClinit();
                return tj_JavaishVal$JavaishType_STRINGLIST;
            case 5:
                tj_JavaishVal$JavaishType_$callClinit();
                return tj_JavaishVal$JavaishType_INTLIST;
            case 6:
                tj_JavaishVal$JavaishType_$callClinit();
                return tj_JavaishVal$JavaishType_FLOATLIST;
            case 7:
                tj_JavaishVal$JavaishType_$callClinit();
                return tj_JavaishVal$JavaishType_BOOLEANLIST;
            default:
        }
        return null;
    }
    function tj_Parser_getRobotType($this, $robotType) {
        var var$2, $$je;
        a: {
            try {
                var$2 = tj_Statements$RobotType_valueOf(jl_String_toUpperCase($robotType));
            } catch ($$e) {
                $$je = $rt_wrapException($$e);
                if ($$je instanceof jl_IllegalArgumentException) {
                    break a;
                } else {
                    throw $$e;
                }
            }
            return var$2;
        }
        if (jl_String_equals($robotType, $rt_s(249)))
            return tj_Statements$RobotType_RANDOMEYES;
        if (jl_String_equals($robotType, $rt_s(250)))
            return tj_Statements$RobotType_LYINGBACK;
        if (jl_String_equals($robotType, $rt_s(251)))
            return tj_Statements$RobotType_LYINGBELLY;
        tj_Error_InvalidRobotAction($robotType, $this.$lineNumber4);
        return null;
    }
    function tj_Interpreter() {
        var a = this; jl_Object.call(a);
        a.$lineNumber = 0;
        a.$globalVariables = null;
    }
    function tj_Interpreter_interpretFunction($this, $statements, $args, $params, $name, $isGlobal) {
        var $localVariables, $i, var$8, $val, $arg, $returnVal, $ptr, $tmp;
        $ptr = 0;
        if ($rt_resuming()) {
            var $thread = $rt_nativeThread();
            $ptr = $thread.pop();$returnVal = $thread.pop();$arg = $thread.pop();$val = $thread.pop();var$8 = $thread.pop();$i = $thread.pop();$localVariables = $thread.pop();$isGlobal = $thread.pop();$name = $thread.pop();$params = $thread.pop();$args = $thread.pop();$statements = $thread.pop();$this = $thread.pop();
        }
        main: while (true) { switch ($ptr) {
        case 0:
            a: {
                $localVariables = tj_Variables__init_();
                if ($args !== null && $params !== null) {
                    $args = $args.data;
                    $params = $params.data;
                    $i = $args.length;
                    var$8 = $params.length;
                    if ($i != var$8)
                        tj_Error_ArgumentLengthMismatch($name, $this.$lineNumber, $i, var$8);
                    $i = 0;
                    while (true) {
                        if ($i >= var$8)
                            break a;
                        $val = $params[$i];
                        $arg = $args[$i];
                        if ($arg.$type !== $val.$getType0())
                            break;
                        tj_Variables_addVariable($localVariables, $arg.$name3, $arg.$type, $val, $this.$lineNumber);
                        $i = $i + 1 | 0;
                    }
                    tj_Error_ArgumentTypeMismatch($name, $this.$lineNumber, $arg.$type.$name4, $val.$typeString());
                    return null;
                }
            }
            $ptr = 1;
        case 1:
            $tmp = tj_Interpreter_interpretBody($this, $statements, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            $returnVal = $tmp;
            if ($returnVal !== null)
                return $returnVal;
            return null;
        default: $rt_invalidPointer();
        }}
        $rt_nativeThread().push($this, $statements, $args, $params, $name, $isGlobal, $localVariables, $i, var$8, $val, $arg, $returnVal, $ptr);
    }
    function tj_Interpreter_interpretBody($this, $statements, $funcVariables, $isGlobal) {
        var $pastResult, $localVariables, $returnVal, $statement, $ptr, $tmp;
        $ptr = 0;
        if ($rt_resuming()) {
            var $thread = $rt_nativeThread();
            $ptr = $thread.pop();$statement = $thread.pop();$returnVal = $thread.pop();$localVariables = $thread.pop();$pastResult = $thread.pop();$isGlobal = $thread.pop();$funcVariables = $thread.pop();$statements = $thread.pop();$this = $thread.pop();
        }
        main: while (true) { switch ($ptr) {
        case 0:
            $pastResult = tj_Result__init_(0);
            $localVariables = tj_Variables_clone($funcVariables);
            $returnVal = tj_Return__init_(0, null);
            $funcVariables = ju_AbstractList_iterator($statements);
            if (!ju_AbstractList$1_hasNext($funcVariables)) {
                if (!$returnVal.$hasReturn)
                    return null;
                return $returnVal.$value0;
            }
            $statement = ju_AbstractList$1_next($funcVariables);
            if ($returnVal.$hasReturn)
                return $returnVal.$value0;
            $ptr = 1;
        case 1:
            tj_Interpreter_interpretStmt($this, $statement, $localVariables, $isGlobal, $pastResult, $returnVal);
            if ($rt_suspending()) {
                break main;
            }
            if (!ju_AbstractList$1_hasNext($funcVariables)) {
                if (!$returnVal.$hasReturn)
                    return null;
                return $returnVal.$value0;
            }
            $statement = ju_AbstractList$1_next($funcVariables);
            if ($returnVal.$hasReturn)
                return $returnVal.$value0;
            continue main;
        default: $rt_invalidPointer();
        }}
        $rt_nativeThread().push($this, $statements, $funcVariables, $isGlobal, $pastResult, $localVariables, $returnVal, $statement, $ptr);
    }
    function tj_Interpreter_interpretStmt($this, $stmt, $localVariables, $isGlobal, $pastResult, $returnVal) {
        var $call, var$7, $assignment, var$9, var$10, var$11, var$12, $declaration, $elseifStmt, $elseStmt, $mutationStmt, $returnStmt, $function, $ifStmt, $whileStmt, $foreachStmt, $forwhenStmt, $printStmt, $showMsgBoxStmt, $removeAtStmt, $removeFromStmt, $removeAllFromStmt, $ptr, $tmp;
        $ptr = 0;
        if ($rt_resuming()) {
            var $thread = $rt_nativeThread();
            $ptr = $thread.pop();$removeAllFromStmt = $thread.pop();$removeFromStmt = $thread.pop();$removeAtStmt = $thread.pop();$showMsgBoxStmt = $thread.pop();$printStmt = $thread.pop();$forwhenStmt = $thread.pop();$foreachStmt = $thread.pop();$whileStmt = $thread.pop();$ifStmt = $thread.pop();$function = $thread.pop();$returnStmt = $thread.pop();$mutationStmt = $thread.pop();$elseStmt = $thread.pop();$elseifStmt = $thread.pop();$declaration = $thread.pop();var$12 = $thread.pop();var$11 = $thread.pop();var$10
            = $thread.pop();var$9 = $thread.pop();$assignment = $thread.pop();var$7 = $thread.pop();$call = $thread.pop();$returnVal = $thread.pop();$pastResult = $thread.pop();$isGlobal = $thread.pop();$localVariables = $thread.pop();$stmt = $thread.pop();$this = $thread.pop();
        }
        main: while (true) { switch ($ptr) {
        case 0:
            a: {
                $this.$lineNumber = $stmt.$getLine();
                tj_Statements_getTypeT($stmt);
                $call = tj_Statements_getTypeT($stmt);
                var$7 = (-1);
                switch (jl_String_hashCode($call)) {
                    case -2131401768:
                        if (!jl_String_equals($call, $rt_s(82)))
                            break a;
                        var$7 = 8;
                        break a;
                    case -1881067216:
                        if (!jl_String_equals($call, $rt_s(252)))
                            break a;
                        var$7 = 7;
                        break a;
                    case 2333:
                        if (!jl_String_equals($call, $rt_s(253)))
                            break a;
                        var$7 = 9;
                        break a;
                    case 2060894:
                        if (!jl_String_equals($call, $rt_s(254)))
                            break a;
                        var$7 = 2;
                        break a;
                    case 2131257:
                        if (!jl_String_equals($call, $rt_s(255)))
                            break a;
                        var$7 = 4;
                        break a;
                    case 40300074:
                        if (!jl_String_equals($call, $rt_s(256)))
                            break a;
                        var$7 = 11;
                        break a;
                    case 40843107:
                        if (!jl_String_equals($call, $rt_s(257)))
                            break a;
                        var$7 = 12;
                        break a;
                    case 76397197:
                        if (!jl_String_equals($call, $rt_s(258)))
                            break a;
                        var$7 = 13;
                        break a;
                    case 82563857:
                        if (!jl_String_equals($call, $rt_s(259)))
                            break a;
                        var$7 = 10;
                        break a;
                    case 124455258:
                        if (!jl_String_equals($call, $rt_s(260)))
                            break a;
                        var$7 = 3;
                        break a;
                    case 269804471:
                        if (!jl_String_equals($call, $rt_s(261)))
                            break a;
                        var$7 = 15;
                        break a;
                    case 1511355085:
                        if (!jl_String_equals($call, $rt_s(262)))
                            break a;
                        var$7 = 1;
                        break a;
                    case 1584208430:
                        if (!jl_String_equals($call, $rt_s(263)))
                            break a;
                        var$7 = 16;
                        break a;
                    case 1648263849:
                        if (!jl_String_equals($call, $rt_s(264)))
                            break a;
                        var$7 = 6;
                        break a;
                    case 1668381247:
                        if (!jl_String_equals($call, $rt_s(265)))
                            break a;
                        var$7 = 0;
                        break a;
                    case 1735465895:
                        if (!jl_String_equals($call, $rt_s(266)))
                            break a;
                        var$7 = 17;
                        break a;
                    case 2011295719:
                        if (!jl_String_equals($call, $rt_s(267)))
                            break a;
                        var$7 = 14;
                        break a;
                    case 2048140310:
                        if (!jl_String_equals($call, $rt_s(268)))
                            break a;
                        var$7 = 5;
                        break a;
                    default:
                }
            }
            b: {
                switch (var$7) {
                    case 0:
                        break;
                    case 1:
                        $assignment = $stmt;
                        $pastResult = $assignment.$name16;
                        $stmt = $assignment.$value16;
                        $ptr = 1;
                        continue main;
                    case 2:
                        $call = $stmt;
                        $pastResult = $call.$name17;
                        var$9 = $call.$params0;
                        if (var$9 === null)
                            var$9 = $rt_createArray(tj_Expression, 0);
                        if (var$9.data[0] === null)
                            var$9 = $rt_createArray(tj_Expression, 0);
                        if (!tj_Variables_functionExists($this.$globalVariables, $pastResult))
                            tj_Error_FunctionNotDeclared($pastResult, $this.$lineNumber);
                        else {
                            var$10 = tj_Variables_getFunctionArgs($this.$globalVariables, $pastResult);
                            $returnVal = tj_Variables_getFunctionBody($this.$globalVariables, $pastResult);
                            if (var$10 !== null) {
                                var$9 = var$9.data;
                                $call = ju_ArrayList__init_();
                                var$11 = var$9.length;
                                var$12 = 0;
                                if (var$12 < var$11) {
                                    $stmt = var$9[var$12];
                                    $ptr = 19;
                                    continue main;
                                }
                                var$9 = ju_AbstractCollection_toArray($call, $rt_createArray(tj_JavaishVal, $call.$size0));
                                $isGlobal = 0;
                                $ptr = 18;
                                continue main;
                            }
                            tj_Error_FunctionNotDeclared($pastResult, $this.$lineNumber);
                        }
                        break b;
                    case 3:
                        $declaration = $stmt;
                        $ptr = 2;
                        continue main;
                    case 4:
                        $stmt = $stmt.$body;
                        if ($pastResult.$pastResult0 == 1)
                            break b;
                        $isGlobal = 0;
                        $ptr = 14;
                        continue main;
                    case 5:
                        $elseifStmt = $stmt;
                        $stmt = $elseifStmt.$condition;
                        $elseStmt = $elseifStmt.$body;
                        $ptr = 3;
                        continue main;
                    case 6:
                        $mutationStmt = $stmt;
                        $ptr = 4;
                        continue main;
                    case 7:
                        $returnStmt = $stmt;
                        $pastResult = $returnStmt.$value17;
                        $stmt = null;
                        if (!$returnStmt.$hasReturn0) {
                            $returnVal.$hasReturn = 1;
                            $returnVal.$value0 = $stmt;
                            break b;
                        }
                        $ptr = 15;
                        continue main;
                    case 8:
                        $function = $stmt;
                        $stmt = $function.$name18;
                        var$10 = $function.$args1;
                        $pastResult = $function.$body;
                        if (!$isGlobal)
                            tj_Error_FunctionNotGlobal($stmt, $this.$lineNumber);
                        else
                            tj_Variables_addFunction($this.$globalVariables, $stmt, $pastResult, var$10, $this.$lineNumber);
                        break b;
                    case 9:
                        $ifStmt = $stmt;
                        $stmt = $ifStmt.$condition0;
                        $returnVal = $ifStmt.$body;
                        $ptr = 5;
                        continue main;
                    case 10:
                        $whileStmt = $stmt;
                        $ptr = 6;
                        continue main;
                    case 11:
                        $foreachStmt = $stmt;
                        $ptr = 7;
                        continue main;
                    case 12:
                        $forwhenStmt = $stmt;
                        $ptr = 8;
                        continue main;
                    case 13:
                        $printStmt = $stmt;
                        $ptr = 9;
                        continue main;
                    case 14:
                        $showMsgBoxStmt = $stmt;
                        $ptr = 10;
                        continue main;
                    case 15:
                        $removeAtStmt = $stmt;
                        $ptr = 11;
                        continue main;
                    case 16:
                        $removeFromStmt = $stmt;
                        $ptr = 12;
                        continue main;
                    case 17:
                        $removeAllFromStmt = $stmt;
                        $ptr = 13;
                        continue main;
                    default:
                        break b;
                }
            }
            return;
        case 1:
            $tmp = tj_Interpreter_evalExpression($this, $stmt, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            $stmt = $tmp;
            if (tj_Variables_isVariable($localVariables, $pastResult))
                tj_Variables_setVariableValue($localVariables, $pastResult, $stmt, $this.$lineNumber);
            else
                tj_Variables_setVariableValue($this.$globalVariables, $pastResult, $stmt, $this.$lineNumber);
            return;
        case 2:
            tj_Interpreter_evalDeclaration($this, $declaration, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            return;
        case 3:
            $tmp = tj_Interpreter_evalExpression($this, $stmt, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            $stmt = $tmp;
            $stmt = $stmt;
            $returnVal = jl_System_out();
            $declaration = $stmt.$value18;
            $isGlobal = $pastResult.$pastResult0;
            $call = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($call);
            jl_StringBuilder_append4(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($call, $rt_s(269)), $declaration), $rt_s(270)), $isGlobal);
            ji_PrintStream_println($returnVal, jl_AbstractStringBuilder_toString($call));
            if ($pastResult.$pastResult0 != 1 && $stmt.$value18.$value19 == 1) {
                $pastResult.$pastResult0 = 1;
                $isGlobal = 0;
                $ptr = 17;
                continue main;
            }
            return;
        case 4:
            tj_Interpreter_evalMutation($this, $mutationStmt, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            return;
        case 5:
            $tmp = tj_Interpreter_evalExpression($this, $stmt, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            $stmt = $tmp;
            if ($stmt.$value18.$value19 != 1) {
                $pastResult.$pastResult0 = 0;
                return;
            }
            $pastResult.$pastResult0 = 1;
            $isGlobal = 0;
            $ptr = 16;
            continue main;
        case 6:
            tj_Interpreter_evalWhile($this, $whileStmt, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            return;
        case 7:
            tj_Interpreter_evalForEach($this, $foreachStmt, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            return;
        case 8:
            tj_Interpreter_evalForWhen($this, $forwhenStmt, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            return;
        case 9:
            tj_Interpreter_evalPrint($this, $printStmt, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            return;
        case 10:
            tj_Interpreter_evalShowMsgBox($this, $showMsgBoxStmt, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            return;
        case 11:
            tj_Interpreter_evalRemoveAt($this, $removeAtStmt, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            return;
        case 12:
            tj_Interpreter_evalRemoveFrom($this, $removeFromStmt, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            return;
        case 13:
            tj_Interpreter_evalRemoveAllFrom($this, $removeAllFromStmt, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            return;
        case 14:
            tj_Interpreter_interpretBody($this, $stmt, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            return;
        case 15:
            $tmp = tj_Interpreter_evalExpression($this, $pastResult, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            $stmt = $tmp;
            $returnVal.$hasReturn = 1;
            $returnVal.$value0 = $stmt;
            return;
        case 16:
            tj_Interpreter_interpretBody($this, $returnVal, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            return;
        case 17:
            tj_Interpreter_interpretBody($this, $elseStmt, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            return;
        case 18:
            tj_Interpreter_interpretFunction($this, $returnVal, var$10, var$9, $pastResult, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            return;
        case 19:
            $tmp = tj_Interpreter_evalExpression($this, $stmt, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            $stmt = $tmp;
            ju_ArrayList_add($call, $stmt);
            var$12 = var$12 + 1 | 0;
            if (var$12 < var$11) {
                $stmt = var$9[var$12];
                continue main;
            }
            var$9 = ju_AbstractCollection_toArray($call, $rt_createArray(tj_JavaishVal, $call.$size0));
            $isGlobal = 0;
            $ptr = 18;
            continue main;
        default: $rt_invalidPointer();
        }}
        $rt_nativeThread().push($this, $stmt, $localVariables, $isGlobal, $pastResult, $returnVal, $call, var$7, $assignment, var$9, var$10, var$11, var$12, $declaration, $elseifStmt, $elseStmt, $mutationStmt, $returnStmt, $function, $ifStmt, $whileStmt, $foreachStmt, $forwhenStmt, $printStmt, $showMsgBoxStmt, $removeAtStmt, $removeFromStmt, $removeAllFromStmt, $ptr);
    }
    function tj_Interpreter_evalExpression($this, $expression, $localVariables, $isGlobal) {
        var $total, $operation, $comparison, $compVal, $isComp, var$9, var$10, var$11, $elmt, $listLength, $result, $bool, $valB, $cast, $floatElmt, $valF, $integer, $valI, $string, $valS, $function, $body, $args, $params, $paramVals, var$29, $param, $paramValsArr, $showInputBox, $listVal, $arrayName, $listL, $length, $resultO, $variable, $list, $type, $listExpressions, $listVals, $val, $listExpression, $intList, $listValI, $intListVal, $floatList, $floatListVal, $stringList, $stringListVal, $booleanList, $booleanListVal,
        $newVal, $valNot, $input, $index, $listValVal, $valFunc, $$je, $ptr, $tmp;
        $ptr = 0;
        if ($rt_resuming()) {
            var $thread = $rt_nativeThread();
            $ptr = $thread.pop();$valFunc = $thread.pop();$listValVal = $thread.pop();$index = $thread.pop();$input = $thread.pop();$valNot = $thread.pop();$newVal = $thread.pop();$booleanListVal = $thread.pop();$booleanList = $thread.pop();$stringListVal = $thread.pop();$stringList = $thread.pop();$floatListVal = $thread.pop();$floatList = $thread.pop();$intListVal = $thread.pop();$listValI = $thread.pop();$intList = $thread.pop();$listExpression = $thread.pop();$val = $thread.pop();$listVals = $thread.pop();$listExpressions
            = $thread.pop();$type = $thread.pop();$list = $thread.pop();$variable = $thread.pop();$resultO = $thread.pop();$length = $thread.pop();$listL = $thread.pop();$arrayName = $thread.pop();$listVal = $thread.pop();$showInputBox = $thread.pop();$paramValsArr = $thread.pop();$param = $thread.pop();var$29 = $thread.pop();$paramVals = $thread.pop();$params = $thread.pop();$args = $thread.pop();$body = $thread.pop();$function = $thread.pop();$valS = $thread.pop();$string = $thread.pop();$valI = $thread.pop();$integer
            = $thread.pop();$valF = $thread.pop();$floatElmt = $thread.pop();$cast = $thread.pop();$valB = $thread.pop();$bool = $thread.pop();$result = $thread.pop();$listLength = $thread.pop();$elmt = $thread.pop();var$11 = $thread.pop();var$10 = $thread.pop();var$9 = $thread.pop();$isComp = $thread.pop();$compVal = $thread.pop();$comparison = $thread.pop();$operation = $thread.pop();$total = $thread.pop();$isGlobal = $thread.pop();$localVariables = $thread.pop();$expression = $thread.pop();$this = $thread.pop();
        }
        main: while (true) { switch ($ptr) {
        case 0:
            $total = null;
            $operation = null;
            $comparison = null;
            $compVal = null;
            $isComp = 0;
            var$9 = (tj_Expression_getElements($expression)).data;
            var$10 = var$9.length;
            var$11 = 0;
            a: while (true) {
                if (var$11 >= var$10) {
                    if (!$isComp)
                        return $total;
                    return tj_Interpreter_performComparision($this, $comparison, $total, $compVal);
                }
                b: {
                    $elmt = var$9[var$11];
                    $expression = tj_Element_getTypeS($elmt);
                    $listLength = (-1);
                    switch (jl_String_hashCode($expression)) {
                        case -2131401768:
                            if (!jl_String_equals($expression, $rt_s(82)))
                                break b;
                            $listLength = 20;
                            break b;
                        case -1838656495:
                            if (!jl_String_equals($expression, $rt_s(178)))
                                break b;
                            $listLength = 18;
                            break b;
                        case -1618932450:
                            if (!jl_String_equals($expression, $rt_s(271)))
                                break b;
                            $listLength = 9;
                            break b;
                        case -1583968932:
                            if (!jl_String_equals($expression, $rt_s(272)))
                                break b;
                            $listLength = 11;
                            break b;
                        case -1310359912:
                            if (!jl_String_equals($expression, $rt_s(273)))
                                break b;
                            $listLength = 5;
                            break b;
                        case -1112834937:
                            if (!jl_String_equals($expression, $rt_s(274)))
                                break b;
                            $listLength = 10;
                            break b;
                        case -715433377:
                            if (!jl_String_equals($expression, $rt_s(275)))
                                break b;
                            $listLength = 24;
                            break b;
                        case -466959748:
                            if (!jl_String_equals($expression, $rt_s(276)))
                                break b;
                            $listLength = 19;
                            break b;
                        case 2531:
                            if (!jl_String_equals($expression, $rt_s(277)))
                                break b;
                            $listLength = 16;
                            break b;
                        case 64951:
                            if (!jl_String_equals($expression, $rt_s(278)))
                                break b;
                            $listLength = 0;
                            break b;
                        case 77491:
                            if (!jl_String_equals($expression, $rt_s(279)))
                                break b;
                            $listLength = 14;
                            break b;
                        case 2044650:
                            if (!jl_String_equals($expression, $rt_s(280)))
                                break b;
                            $listLength = 1;
                            break b;
                        case 2061119:
                            if (!jl_String_equals($expression, $rt_s(281)))
                                break b;
                            $listLength = 2;
                            break b;
                        case 2336926:
                            if (!jl_String_equals($expression, $rt_s(282)))
                                break b;
                            $listLength = 23;
                            break b;
                        case 2459034:
                            if (!jl_String_equals($expression, $rt_s(283)))
                                break b;
                            $listLength = 17;
                            break b;
                        case 66219796:
                            if (!jl_String_equals($expression, $rt_s(284)))
                                break b;
                            $listLength = 4;
                            break b;
                        case 66988604:
                            if (!jl_String_equals($expression, $rt_s(180)))
                                break b;
                            $listLength = 6;
                            break b;
                        case 73363536:
                            if (!jl_String_equals($expression, $rt_s(285)))
                                break b;
                            $listLength = 12;
                            break b;
                        case 360410235:
                            if (!jl_String_equals($expression, $rt_s(286)))
                                break b;
                            $listLength = 8;
                            break b;
                        case 899970467:
                            if (!jl_String_equals($expression, $rt_s(287)))
                                break b;
                            $listLength = 22;
                            break b;
                        case 972152550:
                            if (!jl_String_equals($expression, $rt_s(288)))
                                break b;
                            $listLength = 7;
                            break b;
                        case 1022422664:
                            if (!jl_String_equals($expression, $rt_s(289)))
                                break b;
                            $listLength = 15;
                            break b;
                        case 1436456484:
                            if (!jl_String_equals($expression, $rt_s(290)))
                                break b;
                            $listLength = 13;
                            break b;
                        case 1871384510:
                            if (!jl_String_equals($expression, $rt_s(291)))
                                break b;
                            $listLength = 21;
                            break b;
                        case 2016833657:
                            if (!jl_String_equals($expression, $rt_s(292)))
                                break b;
                            $listLength = 3;
                            break b;
                        default:
                    }
                }
                c: {
                    d: {
                        e: {
                            f: {
                                switch ($listLength) {
                                    case 0:
                                        $result = tj_Interpreter_performComparision($this, $comparison, $total, $compVal);
                                        if ($result === null)
                                            break a;
                                        if (!jl_Boolean_booleanValue(tj_JavaishBoolean_getValue($result)))
                                            return tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                        $total = null;
                                        $operation = null;
                                        $comparison = null;
                                        $compVal = null;
                                        $isComp = 0;
                                        break c;
                                    case 1:
                                        $bool = $elmt;
                                        $valB = tj_JavaishBoolean__init_(jl_Boolean_valueOf(tj_BoolElmt_getValue($bool)));
                                        if (!$isComp) {
                                            $total = tj_Interpreter_performOperation($this, $operation, $total, $valB);
                                            break c;
                                        }
                                        $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $valB);
                                        break c;
                                    case 2:
                                        $cast = $elmt;
                                        $expression = $cast.$element;
                                        $ptr = 1;
                                        continue main;
                                    case 3:
                                        tj_Interpreter$Operator_$callClinit();
                                        $operation = tj_Interpreter$Operator_DIVIDE;
                                        break c;
                                    case 4:
                                        tj_Interpreter$Operator_$callClinit();
                                        $comparison = tj_Interpreter$Operator_EQUAL;
                                        $isComp = 1;
                                        break c;
                                    case 5:
                                        $expression = $elmt.$expression;
                                        $ptr = 2;
                                        continue main;
                                    case 6:
                                        $floatElmt = $elmt;
                                        $valF = tj_JavaishFloat__init_(tj_FloatElmt_getValue($floatElmt));
                                        if (!$isComp) {
                                            $total = tj_Interpreter_performOperation($this, $operation, $total, $valF);
                                            break c;
                                        }
                                        $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $valF);
                                        break c;
                                    case 7:
                                        tj_Interpreter$Operator_$callClinit();
                                        $comparison = tj_Interpreter$Operator_GREATER_THAN;
                                        $isComp = 1;
                                        break c;
                                    case 8:
                                        tj_Interpreter$Operator_$callClinit();
                                        $comparison = tj_Interpreter$Operator_GREATER_THAN_EQUAL;
                                        $isComp = 1;
                                        break c;
                                    case 9:
                                        $integer = $elmt;
                                        $valI = tj_JavaishInt__init_(tj_IntElmt_getValue($integer));
                                        if (!$isComp) {
                                            $total = tj_Interpreter_performOperation($this, $operation, $total, $valI);
                                            break c;
                                        }
                                        $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $valI);
                                        break c;
                                    case 10:
                                        tj_Interpreter$Operator_$callClinit();
                                        $comparison = tj_Interpreter$Operator_LESS_THAN;
                                        $isComp = 1;
                                        break c;
                                    case 11:
                                        tj_Interpreter$Operator_$callClinit();
                                        $comparison = tj_Interpreter$Operator_LESS_THAN_EQUAL;
                                        $isComp = 1;
                                        break c;
                                    case 12:
                                        tj_Interpreter$Operator_$callClinit();
                                        $operation = tj_Interpreter$Operator_MINUS;
                                        break c;
                                    case 13:
                                        tj_Interpreter$Operator_$callClinit();
                                        $operation = tj_Interpreter$Operator_MULTIPLY;
                                        break c;
                                    case 14:
                                        $expression = $elmt.$expression0;
                                        $ptr = 3;
                                        continue main;
                                    case 15:
                                        tj_Interpreter$Operator_$callClinit();
                                        $comparison = tj_Interpreter$Operator_NOT_EQUAL;
                                        $isComp = 1;
                                        break c;
                                    case 16:
                                        break f;
                                    case 17:
                                        tj_Interpreter$Operator_$callClinit();
                                        $operation = tj_Interpreter$Operator_PLUS;
                                        break c;
                                    case 18:
                                        $string = $elmt;
                                        $valS = tj_JavaishString__init_(tj_StringElmt_getValue($string));
                                        if (!$isComp) {
                                            $total = tj_Interpreter_performOperation($this, $operation, $total, $valS);
                                            break c;
                                        }
                                        $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $valS);
                                        break c;
                                    case 19:
                                        break e;
                                    case 20:
                                        $function = $elmt;
                                        $body = tj_Variables_getFunctionBody($this.$globalVariables, tj_FunctionElmt_getName($function));
                                        $args = tj_Variables_getFunctionArgs($this.$globalVariables, tj_FunctionElmt_getName($function));
                                        $params = (tj_FunctionElmt_getParams($function)).data;
                                        $paramVals = ju_ArrayList__init_();
                                        $listLength = $params.length;
                                        var$29 = 0;
                                        if (var$29 < $listLength) {
                                            $param = $params[var$29];
                                            $ptr = 7;
                                            continue main;
                                        }
                                        $paramValsArr = ju_AbstractCollection_toArray($paramVals, $rt_createArray(tj_JavaishVal, ju_ArrayList_size($paramVals)));
                                        $expression = tj_FunctionElmt_getName($function);
                                        $listLength = 0;
                                        $ptr = 6;
                                        continue main;
                                    case 21:
                                        $showInputBox = $elmt;
                                        $ptr = 4;
                                        continue main;
                                    case 22:
                                        $listVal = $elmt;
                                        $expression = tj_ListValElmt_getIndex($listVal);
                                        $ptr = 5;
                                        continue main;
                                    case 23:
                                        break d;
                                    case 24:
                                        $arrayName = tj_ArrayLengthElmt_getArrayName($elmt);
                                        if (tj_Variables_isVariable($localVariables, $arrayName))
                                            $expression = tj_Variables_getVariableValue($localVariables, $arrayName);
                                        else {
                                            if (!tj_Variables_isVariable($this.$globalVariables, $arrayName)) {
                                                tj_Error_VariableNotDeclared($arrayName, $this.$lineNumber);
                                                return null;
                                            }
                                            $expression = tj_Variables_getVariableValue($this.$globalVariables, $arrayName);
                                        }
                                        if (!($expression instanceof tj_JavaishListVal)) {
                                            tj_Error_TypeMismatch($rt_s(293), $expression.$typeString(), $this.$lineNumber);
                                            return null;
                                        }
                                        $listL = tj_JavaishListVal_getValue($expression);
                                        $length = tj_JavaishInt__init_($listL.$getLength());
                                        if (!$isComp)
                                            $total = tj_Interpreter_performOperation($this, $operation, $total, $length);
                                        else
                                            $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $length);
                                        break c;
                                    default:
                                }
                                break c;
                            }
                            $resultO = tj_Interpreter_performComparision($this, $comparison, $total, $compVal);
                            if ($resultO === null)
                                return null;
                            if (jl_Boolean_booleanValue(tj_JavaishBoolean_getValue($resultO)) == 1)
                                return tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                            $total = null;
                            $operation = null;
                            $compVal = null;
                            $isComp = 0;
                            break c;
                        }
                        $variable = $elmt;
                        if (tj_Variables_isVariable($localVariables, tj_VariableElmt_getName($variable)))
                            $expression = tj_Variables_getVariableValue($localVariables, tj_VariableElmt_getName($variable));
                        else {
                            if (!tj_Variables_isVariable($this.$globalVariables, tj_VariableElmt_getName($variable))) {
                                tj_Error_VariableNotDeclared(tj_VariableElmt_getName($variable), $this.$lineNumber);
                                return null;
                            }
                            $expression = tj_Variables_getVariableValue($this.$globalVariables, tj_VariableElmt_getName($variable));
                        }
                        if (!$isComp) {
                            $total = tj_Interpreter_performOperation($this, $operation, $total, $expression);
                            break c;
                        }
                        $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $expression);
                        break c;
                    }
                    $list = $elmt;
                    $type = tj_ListElmt_getListType($list);
                    $listExpressions = tj_ListElmt_getList($list);
                    $listVals = ju_ArrayList__init_();
                    $val = ju_AbstractList_iterator($listExpressions);
                    if (ju_AbstractList$1_hasNext($val)) {
                        $listExpression = ju_AbstractList$1_next($val);
                        $ptr = 8;
                        continue main;
                    }
                    g: {
                        $expression = jl_Enum_toString($type);
                        $listLength = (-1);
                        switch (jl_String_hashCode($expression)) {
                            case -1618721555:
                                if (!jl_String_equals($expression, $rt_s(75)))
                                    break g;
                                $listLength = 0;
                                break g;
                            case -1087271889:
                                if (!jl_String_equals($expression, $rt_s(77)))
                                    break g;
                                $listLength = 2;
                                break g;
                            case 318725286:
                                if (!jl_String_equals($expression, $rt_s(78)))
                                    break g;
                                $listLength = 3;
                                break g;
                            case 675960026:
                                if (!jl_String_equals($expression, $rt_s(76)))
                                    break g;
                                $listLength = 1;
                                break g;
                            default:
                        }
                    }
                    h: {
                        switch ($listLength) {
                            case 0:
                                $intList = ju_ArrayList__init_();
                                $expression = ju_AbstractList_iterator($listVals);
                                while (ju_AbstractList$1_hasNext($expression)) {
                                    $listValI = ju_AbstractList$1_next($expression);
                                    if (!($listValI instanceof tj_JavaishInt)) {
                                        tj_Error_TypeMismatch($rt_s(187), $listValI.$typeString(), $this.$lineNumber);
                                        return null;
                                    }
                                    ju_ArrayList_add($intList, $listValI);
                                }
                                $intListVal = tj_JavaishIntList__init_($intList);
                                if (!$isComp) {
                                    if ($operation === null) {
                                        $total = tj_JavaishListVal__init_($intListVal);
                                        break h;
                                    }
                                    tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(191), $this.$lineNumber);
                                    break h;
                                }
                                if ($operation === null) {
                                    $compVal = tj_JavaishListVal__init_($intListVal);
                                    break h;
                                }
                                tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(191), $this.$lineNumber);
                                break h;
                            case 1:
                                $floatList = ju_ArrayList__init_();
                                $expression = ju_AbstractList_iterator($listVals);
                                while (ju_AbstractList$1_hasNext($expression)) {
                                    $listValI = ju_AbstractList$1_next($expression);
                                    if (!($listValI instanceof tj_JavaishFloat)) {
                                        tj_Error_TypeMismatch($rt_s(184), $listValI.$typeString(), $this.$lineNumber);
                                        return null;
                                    }
                                    ju_ArrayList_add($floatList, $listValI);
                                }
                                $floatListVal = tj_JavaishFloatList__init_($floatList);
                                if (!$isComp) {
                                    if ($operation === null) {
                                        $total = tj_JavaishListVal__init_($floatListVal);
                                        break h;
                                    }
                                    tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(188), $this.$lineNumber);
                                    break h;
                                }
                                if ($operation === null) {
                                    $compVal = tj_JavaishListVal__init_($floatListVal);
                                    break h;
                                }
                                tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(188), $this.$lineNumber);
                                break h;
                            case 2:
                                $stringList = ju_ArrayList__init_();
                                $val = ju_AbstractList_iterator($listVals);
                                while (ju_AbstractList$1_hasNext($val)) {
                                    $listValI = ju_AbstractList$1_next($val);
                                    if (!($listValI instanceof tj_JavaishString)) {
                                        tj_Error_TypeMismatch($rt_s(186), $listValI.$typeString(), $this.$lineNumber);
                                        return null;
                                    }
                                    ju_ArrayList_add($stringList, $listValI);
                                }
                                $stringListVal = tj_JavaishStringList__init_($stringList);
                                if (!$isComp) {
                                    if ($operation === null) {
                                        $total = tj_JavaishListVal__init_($stringListVal);
                                        break h;
                                    }
                                    tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(190), $this.$lineNumber);
                                    break h;
                                }
                                if ($operation === null) {
                                    $compVal = tj_JavaishListVal__init_($stringListVal);
                                    break h;
                                }
                                tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(190), $this.$lineNumber);
                                break h;
                            case 3:
                                $booleanList = ju_ArrayList__init_();
                                $expression = ju_AbstractList_iterator($listVals);
                                while (ju_AbstractList$1_hasNext($expression)) {
                                    $listValI = ju_AbstractList$1_next($expression);
                                    if (!($listValI instanceof tj_JavaishBoolean)) {
                                        tj_Error_TypeMismatch($rt_s(185), $listValI.$typeString(), $this.$lineNumber);
                                        return null;
                                    }
                                    ju_ArrayList_add($booleanList, $listValI);
                                }
                                $booleanListVal = tj_JavaishBooleanList__init_($booleanList);
                                if (!$isComp) {
                                    if ($operation === null) {
                                        $total = tj_JavaishListVal__init_($booleanListVal);
                                        break h;
                                    }
                                    tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(189), $this.$lineNumber);
                                    break h;
                                }
                                if ($operation === null) {
                                    $compVal = tj_JavaishListVal__init_($booleanListVal);
                                    break h;
                                }
                                tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(189), $this.$lineNumber);
                                break h;
                            default:
                        }
                    }
                }
                var$11 = var$11 + 1 | 0;
            }
            return null;
        case 1:
            i: {
                $tmp = tj_Interpreter_evalExpression($this, $expression, $localVariables, $isGlobal);
                if ($rt_suspending()) {
                    break main;
                }
                $val = $tmp;
                $expression = jl_Enum_toString($cast.$castType);
                $listLength = (-1);
                switch (jl_String_hashCode($expression)) {
                    case -1838656495:
                        if (!jl_String_equals($expression, $rt_s(178)))
                            break i;
                        $listLength = 2;
                        break i;
                    case 72655:
                        if (!jl_String_equals($expression, $rt_s(179)))
                            break i;
                        $listLength = 1;
                        break i;
                    case 66988604:
                        if (!jl_String_equals($expression, $rt_s(180)))
                            break i;
                        $listLength = 0;
                        break i;
                    default:
                }
            }
            j: {
                switch ($listLength) {
                    case 0:
                        if ($val instanceof tj_JavaishFloat) {
                            $expression = $val;
                            break j;
                        }
                        try {
                            $listValI = $val;
                            if ($val instanceof tj_JavaishInt) {
                                $listValI = $val;
                                $expression = new tj_JavaishFloat;
                                $listValI = $expression;
                                tj_JavaishFloat__init_0($expression, jl_Integer_intValue(tj_JavaishInt_getValue($val)));
                            } else {
                                $listValI = $val;
                                if (!($val instanceof tj_JavaishString))
                                    $expression = $val;
                                else {
                                    $listValI = $val;
                                    $expression = new tj_JavaishFloat;
                                    $listValI = $expression;
                                    tj_JavaishFloat__init_0($expression, jl_Float_parseFloat(tj_JavaishString_getValue($val)));
                                }
                            }
                            break j;
                        } catch ($$e) {
                            $$je = $rt_wrapException($$e);
                            if ($$je instanceof jl_Exception) {
                            } else {
                                throw $$e;
                            }
                        }
                        tj_Error_UnableToParse($listValI.$typeString(), $this.$lineNumber, $rt_s(246));
                        $expression = $listValI;
                        break j;
                    case 1:
                        if ($val instanceof tj_JavaishInt) {
                            $expression = $val;
                            break j;
                        }
                        try {
                            $listValI = $val;
                            if ($val instanceof tj_JavaishFloat) {
                                $listValI = $val;
                                $expression = new tj_JavaishInt;
                                $listValI = $expression;
                                tj_JavaishInt__init_0($expression, jl_Math_round(jl_Float_floatValue(tj_JavaishFloat_getValue($val))));
                            } else {
                                $listValI = $val;
                                if (!($val instanceof tj_JavaishString))
                                    $expression = $val;
                                else {
                                    $listValI = $val;
                                    $expression = new tj_JavaishInt;
                                    $listValI = $expression;
                                    tj_JavaishInt__init_0($expression, jl_Integer_parseInt0(tj_JavaishString_getValue($val)));
                                }
                            }
                            break j;
                        } catch ($$e) {
                            $$je = $rt_wrapException($$e);
                            if ($$je instanceof jl_Exception) {
                            } else {
                                throw $$e;
                            }
                        }
                        tj_Error_UnableToParse($rt_s(187), $this.$lineNumber, $listValI.$typeString());
                        $expression = $listValI;
                        break j;
                    case 2:
                        if ($val instanceof tj_JavaishString) {
                            $expression = $val;
                            break j;
                        }
                        try {
                            $listValI = $val;
                            if ($val instanceof tj_JavaishFloat) {
                                $listValI = $val;
                                $expression = new tj_JavaishString;
                                $listValI = $expression;
                                tj_JavaishString__init_0($expression, jl_Float_toString(jl_Float_floatValue(tj_JavaishFloat_getValue($val))));
                            } else {
                                $listValI = $val;
                                if (!($val instanceof tj_JavaishInt))
                                    $expression = $val;
                                else {
                                    $listValI = $val;
                                    $expression = new tj_JavaishString;
                                    $listValI = $expression;
                                    tj_JavaishString__init_0($expression, jl_Integer_toString(jl_Integer_intValue(tj_JavaishInt_getValue($val))));
                                }
                            }
                            break j;
                        } catch ($$e) {
                            $$je = $rt_wrapException($$e);
                            if ($$je instanceof jl_Exception) {
                            } else {
                                throw $$e;
                            }
                        }
                        tj_Error_UnableToParse($listValI.$typeString(), $this.$lineNumber, $rt_s(186));
                        $expression = $listValI;
                        break j;
                    default:
                }
                $expression = $val;
            }
            if (!$isComp)
                $total = tj_Interpreter_performOperation($this, $operation, $total, $expression);
            else
                $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $expression);
            k: while (true) {
                var$11 = var$11 + 1 | 0;
                if (var$11 >= var$10) {
                    if (!$isComp)
                        return $total;
                    return tj_Interpreter_performComparision($this, $comparison, $total, $compVal);
                }
                l: {
                    $elmt = var$9[var$11];
                    $expression = tj_Element_getTypeS($elmt);
                    $listLength = (-1);
                    switch (jl_String_hashCode($expression)) {
                        case -2131401768:
                            if (!jl_String_equals($expression, $rt_s(82)))
                                break l;
                            $listLength = 20;
                            break l;
                        case -1838656495:
                            if (!jl_String_equals($expression, $rt_s(178)))
                                break l;
                            $listLength = 18;
                            break l;
                        case -1618932450:
                            if (!jl_String_equals($expression, $rt_s(271)))
                                break l;
                            $listLength = 9;
                            break l;
                        case -1583968932:
                            if (!jl_String_equals($expression, $rt_s(272)))
                                break l;
                            $listLength = 11;
                            break l;
                        case -1310359912:
                            if (!jl_String_equals($expression, $rt_s(273)))
                                break l;
                            $listLength = 5;
                            break l;
                        case -1112834937:
                            if (!jl_String_equals($expression, $rt_s(274)))
                                break l;
                            $listLength = 10;
                            break l;
                        case -715433377:
                            if (!jl_String_equals($expression, $rt_s(275)))
                                break l;
                            $listLength = 24;
                            break l;
                        case -466959748:
                            if (!jl_String_equals($expression, $rt_s(276)))
                                break l;
                            $listLength = 19;
                            break l;
                        case 2531:
                            if (!jl_String_equals($expression, $rt_s(277)))
                                break l;
                            $listLength = 16;
                            break l;
                        case 64951:
                            if (!jl_String_equals($expression, $rt_s(278)))
                                break l;
                            $listLength = 0;
                            break l;
                        case 77491:
                            if (!jl_String_equals($expression, $rt_s(279)))
                                break l;
                            $listLength = 14;
                            break l;
                        case 2044650:
                            if (!jl_String_equals($expression, $rt_s(280)))
                                break l;
                            $listLength = 1;
                            break l;
                        case 2061119:
                            if (!jl_String_equals($expression, $rt_s(281)))
                                break l;
                            $listLength = 2;
                            break l;
                        case 2336926:
                            if (!jl_String_equals($expression, $rt_s(282)))
                                break l;
                            $listLength = 23;
                            break l;
                        case 2459034:
                            if (!jl_String_equals($expression, $rt_s(283)))
                                break l;
                            $listLength = 17;
                            break l;
                        case 66219796:
                            if (!jl_String_equals($expression, $rt_s(284)))
                                break l;
                            $listLength = 4;
                            break l;
                        case 66988604:
                            if (!jl_String_equals($expression, $rt_s(180)))
                                break l;
                            $listLength = 6;
                            break l;
                        case 73363536:
                            if (!jl_String_equals($expression, $rt_s(285)))
                                break l;
                            $listLength = 12;
                            break l;
                        case 360410235:
                            if (!jl_String_equals($expression, $rt_s(286)))
                                break l;
                            $listLength = 8;
                            break l;
                        case 899970467:
                            if (!jl_String_equals($expression, $rt_s(287)))
                                break l;
                            $listLength = 22;
                            break l;
                        case 972152550:
                            if (!jl_String_equals($expression, $rt_s(288)))
                                break l;
                            $listLength = 7;
                            break l;
                        case 1022422664:
                            if (!jl_String_equals($expression, $rt_s(289)))
                                break l;
                            $listLength = 15;
                            break l;
                        case 1436456484:
                            if (!jl_String_equals($expression, $rt_s(290)))
                                break l;
                            $listLength = 13;
                            break l;
                        case 1871384510:
                            if (!jl_String_equals($expression, $rt_s(291)))
                                break l;
                            $listLength = 21;
                            break l;
                        case 2016833657:
                            if (!jl_String_equals($expression, $rt_s(292)))
                                break l;
                            $listLength = 3;
                            break l;
                        default:
                    }
                }
                m: {
                    n: {
                        g: {
                            switch ($listLength) {
                                case 0:
                                    $result = tj_Interpreter_performComparision($this, $comparison, $total, $compVal);
                                    if ($result === null)
                                        break k;
                                    if (!jl_Boolean_booleanValue(tj_JavaishBoolean_getValue($result)))
                                        return tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    $total = null;
                                    $operation = null;
                                    $comparison = null;
                                    $compVal = null;
                                    $isComp = 0;
                                    continue k;
                                case 1:
                                    $bool = $elmt;
                                    $valB = tj_JavaishBoolean__init_(jl_Boolean_valueOf(tj_BoolElmt_getValue($bool)));
                                    if (!$isComp) {
                                        $total = tj_Interpreter_performOperation($this, $operation, $total, $valB);
                                        continue k;
                                    }
                                    $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $valB);
                                    continue k;
                                case 2:
                                    $cast = $elmt;
                                    $expression = $cast.$element;
                                    continue main;
                                case 3:
                                    tj_Interpreter$Operator_$callClinit();
                                    $operation = tj_Interpreter$Operator_DIVIDE;
                                    continue k;
                                case 4:
                                    tj_Interpreter$Operator_$callClinit();
                                    $comparison = tj_Interpreter$Operator_EQUAL;
                                    $isComp = 1;
                                    continue k;
                                case 5:
                                    $expression = $elmt.$expression;
                                    $ptr = 2;
                                    continue main;
                                case 6:
                                    $floatElmt = $elmt;
                                    $valF = tj_JavaishFloat__init_(tj_FloatElmt_getValue($floatElmt));
                                    if (!$isComp) {
                                        $total = tj_Interpreter_performOperation($this, $operation, $total, $valF);
                                        continue k;
                                    }
                                    $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $valF);
                                    continue k;
                                case 7:
                                    tj_Interpreter$Operator_$callClinit();
                                    $comparison = tj_Interpreter$Operator_GREATER_THAN;
                                    $isComp = 1;
                                    continue k;
                                case 8:
                                    tj_Interpreter$Operator_$callClinit();
                                    $comparison = tj_Interpreter$Operator_GREATER_THAN_EQUAL;
                                    $isComp = 1;
                                    continue k;
                                case 9:
                                    $integer = $elmt;
                                    $valI = tj_JavaishInt__init_(tj_IntElmt_getValue($integer));
                                    if (!$isComp) {
                                        $total = tj_Interpreter_performOperation($this, $operation, $total, $valI);
                                        continue k;
                                    }
                                    $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $valI);
                                    continue k;
                                case 10:
                                    tj_Interpreter$Operator_$callClinit();
                                    $comparison = tj_Interpreter$Operator_LESS_THAN;
                                    $isComp = 1;
                                    continue k;
                                case 11:
                                    tj_Interpreter$Operator_$callClinit();
                                    $comparison = tj_Interpreter$Operator_LESS_THAN_EQUAL;
                                    $isComp = 1;
                                    continue k;
                                case 12:
                                    tj_Interpreter$Operator_$callClinit();
                                    $operation = tj_Interpreter$Operator_MINUS;
                                    continue k;
                                case 13:
                                    tj_Interpreter$Operator_$callClinit();
                                    $operation = tj_Interpreter$Operator_MULTIPLY;
                                    continue k;
                                case 14:
                                    $expression = $elmt.$expression0;
                                    $ptr = 3;
                                    continue main;
                                case 15:
                                    tj_Interpreter$Operator_$callClinit();
                                    $comparison = tj_Interpreter$Operator_NOT_EQUAL;
                                    $isComp = 1;
                                    continue k;
                                case 16:
                                    break g;
                                case 17:
                                    tj_Interpreter$Operator_$callClinit();
                                    $operation = tj_Interpreter$Operator_PLUS;
                                    continue k;
                                case 18:
                                    $string = $elmt;
                                    $valS = tj_JavaishString__init_(tj_StringElmt_getValue($string));
                                    if (!$isComp) {
                                        $total = tj_Interpreter_performOperation($this, $operation, $total, $valS);
                                        continue k;
                                    }
                                    $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $valS);
                                    continue k;
                                case 19:
                                    break n;
                                case 20:
                                    $function = $elmt;
                                    $body = tj_Variables_getFunctionBody($this.$globalVariables, tj_FunctionElmt_getName($function));
                                    $args = tj_Variables_getFunctionArgs($this.$globalVariables, tj_FunctionElmt_getName($function));
                                    $params = (tj_FunctionElmt_getParams($function)).data;
                                    $paramVals = ju_ArrayList__init_();
                                    $listLength = $params.length;
                                    var$29 = 0;
                                    if (var$29 < $listLength) {
                                        $param = $params[var$29];
                                        $ptr = 7;
                                        continue main;
                                    }
                                    $paramValsArr = ju_AbstractCollection_toArray($paramVals, $rt_createArray(tj_JavaishVal, ju_ArrayList_size($paramVals)));
                                    $expression = tj_FunctionElmt_getName($function);
                                    $listLength = 0;
                                    $ptr = 6;
                                    continue main;
                                case 21:
                                    $showInputBox = $elmt;
                                    $ptr = 4;
                                    continue main;
                                case 22:
                                    $listVal = $elmt;
                                    $expression = tj_ListValElmt_getIndex($listVal);
                                    $ptr = 5;
                                    continue main;
                                case 23:
                                    break m;
                                case 24:
                                    $arrayName = tj_ArrayLengthElmt_getArrayName($elmt);
                                    if (tj_Variables_isVariable($localVariables, $arrayName))
                                        $expression = tj_Variables_getVariableValue($localVariables, $arrayName);
                                    else {
                                        if (!tj_Variables_isVariable($this.$globalVariables, $arrayName)) {
                                            tj_Error_VariableNotDeclared($arrayName, $this.$lineNumber);
                                            return null;
                                        }
                                        $expression = tj_Variables_getVariableValue($this.$globalVariables, $arrayName);
                                    }
                                    if (!($expression instanceof tj_JavaishListVal)) {
                                        tj_Error_TypeMismatch($rt_s(293), $expression.$typeString(), $this.$lineNumber);
                                        return null;
                                    }
                                    $listL = tj_JavaishListVal_getValue($expression);
                                    $length = tj_JavaishInt__init_($listL.$getLength());
                                    if (!$isComp)
                                        $total = tj_Interpreter_performOperation($this, $operation, $total, $length);
                                    else
                                        $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $length);
                                    continue k;
                                default:
                            }
                            continue k;
                        }
                        $resultO = tj_Interpreter_performComparision($this, $comparison, $total, $compVal);
                        if ($resultO === null)
                            return null;
                        if (jl_Boolean_booleanValue(tj_JavaishBoolean_getValue($resultO)) == 1)
                            return tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                        $total = null;
                        $operation = null;
                        $compVal = null;
                        $isComp = 0;
                        continue k;
                    }
                    $variable = $elmt;
                    if (tj_Variables_isVariable($localVariables, tj_VariableElmt_getName($variable)))
                        $expression = tj_Variables_getVariableValue($localVariables, tj_VariableElmt_getName($variable));
                    else {
                        if (!tj_Variables_isVariable($this.$globalVariables, tj_VariableElmt_getName($variable))) {
                            tj_Error_VariableNotDeclared(tj_VariableElmt_getName($variable), $this.$lineNumber);
                            return null;
                        }
                        $expression = tj_Variables_getVariableValue($this.$globalVariables, tj_VariableElmt_getName($variable));
                    }
                    if (!$isComp) {
                        $total = tj_Interpreter_performOperation($this, $operation, $total, $expression);
                        continue k;
                    }
                    $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $expression);
                    continue k;
                }
                $list = $elmt;
                $type = tj_ListElmt_getListType($list);
                $listExpressions = tj_ListElmt_getList($list);
                $listVals = ju_ArrayList__init_();
                $val = ju_AbstractList_iterator($listExpressions);
                if (ju_AbstractList$1_hasNext($val)) {
                    $listExpression = ju_AbstractList$1_next($val);
                    $ptr = 8;
                    continue main;
                }
                o: {
                    $expression = jl_Enum_toString($type);
                    $listLength = (-1);
                    switch (jl_String_hashCode($expression)) {
                        case -1618721555:
                            if (!jl_String_equals($expression, $rt_s(75)))
                                break o;
                            $listLength = 0;
                            break o;
                        case -1087271889:
                            if (!jl_String_equals($expression, $rt_s(77)))
                                break o;
                            $listLength = 2;
                            break o;
                        case 318725286:
                            if (!jl_String_equals($expression, $rt_s(78)))
                                break o;
                            $listLength = 3;
                            break o;
                        case 675960026:
                            if (!jl_String_equals($expression, $rt_s(76)))
                                break o;
                            $listLength = 1;
                            break o;
                        default:
                    }
                }
                p: {
                    switch ($listLength) {
                        case 0:
                            $intList = ju_ArrayList__init_();
                            $expression = ju_AbstractList_iterator($listVals);
                            while (ju_AbstractList$1_hasNext($expression)) {
                                $listValI = ju_AbstractList$1_next($expression);
                                if (!($listValI instanceof tj_JavaishInt)) {
                                    tj_Error_TypeMismatch($rt_s(187), $listValI.$typeString(), $this.$lineNumber);
                                    return null;
                                }
                                ju_ArrayList_add($intList, $listValI);
                            }
                            $intListVal = tj_JavaishIntList__init_($intList);
                            if (!$isComp) {
                                if ($operation === null) {
                                    $total = tj_JavaishListVal__init_($intListVal);
                                    break p;
                                }
                                tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(191), $this.$lineNumber);
                                break p;
                            }
                            if ($operation === null) {
                                $compVal = tj_JavaishListVal__init_($intListVal);
                                break p;
                            }
                            tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(191), $this.$lineNumber);
                            break p;
                        case 1:
                            $floatList = ju_ArrayList__init_();
                            $expression = ju_AbstractList_iterator($listVals);
                            while (ju_AbstractList$1_hasNext($expression)) {
                                $listValI = ju_AbstractList$1_next($expression);
                                if (!($listValI instanceof tj_JavaishFloat)) {
                                    tj_Error_TypeMismatch($rt_s(184), $listValI.$typeString(), $this.$lineNumber);
                                    return null;
                                }
                                ju_ArrayList_add($floatList, $listValI);
                            }
                            $floatListVal = tj_JavaishFloatList__init_($floatList);
                            if (!$isComp) {
                                if ($operation === null) {
                                    $total = tj_JavaishListVal__init_($floatListVal);
                                    break p;
                                }
                                tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(188), $this.$lineNumber);
                                break p;
                            }
                            if ($operation === null) {
                                $compVal = tj_JavaishListVal__init_($floatListVal);
                                break p;
                            }
                            tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(188), $this.$lineNumber);
                            break p;
                        case 2:
                            $stringList = ju_ArrayList__init_();
                            $val = ju_AbstractList_iterator($listVals);
                            while (ju_AbstractList$1_hasNext($val)) {
                                $listValI = ju_AbstractList$1_next($val);
                                if (!($listValI instanceof tj_JavaishString)) {
                                    tj_Error_TypeMismatch($rt_s(186), $listValI.$typeString(), $this.$lineNumber);
                                    return null;
                                }
                                ju_ArrayList_add($stringList, $listValI);
                            }
                            $stringListVal = tj_JavaishStringList__init_($stringList);
                            if (!$isComp) {
                                if ($operation === null) {
                                    $total = tj_JavaishListVal__init_($stringListVal);
                                    break p;
                                }
                                tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(190), $this.$lineNumber);
                                break p;
                            }
                            if ($operation === null) {
                                $compVal = tj_JavaishListVal__init_($stringListVal);
                                break p;
                            }
                            tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(190), $this.$lineNumber);
                            break p;
                        case 3:
                            $booleanList = ju_ArrayList__init_();
                            $expression = ju_AbstractList_iterator($listVals);
                            while (ju_AbstractList$1_hasNext($expression)) {
                                $listValI = ju_AbstractList$1_next($expression);
                                if (!($listValI instanceof tj_JavaishBoolean)) {
                                    tj_Error_TypeMismatch($rt_s(185), $listValI.$typeString(), $this.$lineNumber);
                                    return null;
                                }
                                ju_ArrayList_add($booleanList, $listValI);
                            }
                            $booleanListVal = tj_JavaishBooleanList__init_($booleanList);
                            if (!$isComp) {
                                if ($operation === null) {
                                    $total = tj_JavaishListVal__init_($booleanListVal);
                                    break p;
                                }
                                tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(189), $this.$lineNumber);
                                break p;
                            }
                            if ($operation === null) {
                                $compVal = tj_JavaishListVal__init_($booleanListVal);
                                break p;
                            }
                            tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(189), $this.$lineNumber);
                            break p;
                        default:
                    }
                }
            }
            return null;
        case 2:
            $tmp = tj_Interpreter_evalExpression($this, $expression, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            $newVal = $tmp;
            if (!$isComp)
                $total = tj_Interpreter_performOperation($this, $operation, $total, $newVal);
            else
                $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $newVal);
            q: while (true) {
                var$11 = var$11 + 1 | 0;
                if (var$11 >= var$10) {
                    if (!$isComp)
                        return $total;
                    return tj_Interpreter_performComparision($this, $comparison, $total, $compVal);
                }
                r: {
                    $elmt = var$9[var$11];
                    $expression = tj_Element_getTypeS($elmt);
                    $listLength = (-1);
                    switch (jl_String_hashCode($expression)) {
                        case -2131401768:
                            if (!jl_String_equals($expression, $rt_s(82)))
                                break r;
                            $listLength = 20;
                            break r;
                        case -1838656495:
                            if (!jl_String_equals($expression, $rt_s(178)))
                                break r;
                            $listLength = 18;
                            break r;
                        case -1618932450:
                            if (!jl_String_equals($expression, $rt_s(271)))
                                break r;
                            $listLength = 9;
                            break r;
                        case -1583968932:
                            if (!jl_String_equals($expression, $rt_s(272)))
                                break r;
                            $listLength = 11;
                            break r;
                        case -1310359912:
                            if (!jl_String_equals($expression, $rt_s(273)))
                                break r;
                            $listLength = 5;
                            break r;
                        case -1112834937:
                            if (!jl_String_equals($expression, $rt_s(274)))
                                break r;
                            $listLength = 10;
                            break r;
                        case -715433377:
                            if (!jl_String_equals($expression, $rt_s(275)))
                                break r;
                            $listLength = 24;
                            break r;
                        case -466959748:
                            if (!jl_String_equals($expression, $rt_s(276)))
                                break r;
                            $listLength = 19;
                            break r;
                        case 2531:
                            if (!jl_String_equals($expression, $rt_s(277)))
                                break r;
                            $listLength = 16;
                            break r;
                        case 64951:
                            if (!jl_String_equals($expression, $rt_s(278)))
                                break r;
                            $listLength = 0;
                            break r;
                        case 77491:
                            if (!jl_String_equals($expression, $rt_s(279)))
                                break r;
                            $listLength = 14;
                            break r;
                        case 2044650:
                            if (!jl_String_equals($expression, $rt_s(280)))
                                break r;
                            $listLength = 1;
                            break r;
                        case 2061119:
                            if (!jl_String_equals($expression, $rt_s(281)))
                                break r;
                            $listLength = 2;
                            break r;
                        case 2336926:
                            if (!jl_String_equals($expression, $rt_s(282)))
                                break r;
                            $listLength = 23;
                            break r;
                        case 2459034:
                            if (!jl_String_equals($expression, $rt_s(283)))
                                break r;
                            $listLength = 17;
                            break r;
                        case 66219796:
                            if (!jl_String_equals($expression, $rt_s(284)))
                                break r;
                            $listLength = 4;
                            break r;
                        case 66988604:
                            if (!jl_String_equals($expression, $rt_s(180)))
                                break r;
                            $listLength = 6;
                            break r;
                        case 73363536:
                            if (!jl_String_equals($expression, $rt_s(285)))
                                break r;
                            $listLength = 12;
                            break r;
                        case 360410235:
                            if (!jl_String_equals($expression, $rt_s(286)))
                                break r;
                            $listLength = 8;
                            break r;
                        case 899970467:
                            if (!jl_String_equals($expression, $rt_s(287)))
                                break r;
                            $listLength = 22;
                            break r;
                        case 972152550:
                            if (!jl_String_equals($expression, $rt_s(288)))
                                break r;
                            $listLength = 7;
                            break r;
                        case 1022422664:
                            if (!jl_String_equals($expression, $rt_s(289)))
                                break r;
                            $listLength = 15;
                            break r;
                        case 1436456484:
                            if (!jl_String_equals($expression, $rt_s(290)))
                                break r;
                            $listLength = 13;
                            break r;
                        case 1871384510:
                            if (!jl_String_equals($expression, $rt_s(291)))
                                break r;
                            $listLength = 21;
                            break r;
                        case 2016833657:
                            if (!jl_String_equals($expression, $rt_s(292)))
                                break r;
                            $listLength = 3;
                            break r;
                        default:
                    }
                }
                s: {
                    f: {
                        t: {
                            switch ($listLength) {
                                case 0:
                                    $result = tj_Interpreter_performComparision($this, $comparison, $total, $compVal);
                                    if ($result === null)
                                        break q;
                                    if (!jl_Boolean_booleanValue(tj_JavaishBoolean_getValue($result)))
                                        return tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    $total = null;
                                    $operation = null;
                                    $comparison = null;
                                    $compVal = null;
                                    $isComp = 0;
                                    continue q;
                                case 1:
                                    $bool = $elmt;
                                    $valB = tj_JavaishBoolean__init_(jl_Boolean_valueOf(tj_BoolElmt_getValue($bool)));
                                    if (!$isComp) {
                                        $total = tj_Interpreter_performOperation($this, $operation, $total, $valB);
                                        continue q;
                                    }
                                    $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $valB);
                                    continue q;
                                case 2:
                                    $cast = $elmt;
                                    $expression = $cast.$element;
                                    $ptr = 1;
                                    continue main;
                                case 3:
                                    tj_Interpreter$Operator_$callClinit();
                                    $operation = tj_Interpreter$Operator_DIVIDE;
                                    continue q;
                                case 4:
                                    tj_Interpreter$Operator_$callClinit();
                                    $comparison = tj_Interpreter$Operator_EQUAL;
                                    $isComp = 1;
                                    continue q;
                                case 5:
                                    $expression = $elmt.$expression;
                                    continue main;
                                case 6:
                                    $floatElmt = $elmt;
                                    $valF = tj_JavaishFloat__init_(tj_FloatElmt_getValue($floatElmt));
                                    if (!$isComp) {
                                        $total = tj_Interpreter_performOperation($this, $operation, $total, $valF);
                                        continue q;
                                    }
                                    $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $valF);
                                    continue q;
                                case 7:
                                    tj_Interpreter$Operator_$callClinit();
                                    $comparison = tj_Interpreter$Operator_GREATER_THAN;
                                    $isComp = 1;
                                    continue q;
                                case 8:
                                    tj_Interpreter$Operator_$callClinit();
                                    $comparison = tj_Interpreter$Operator_GREATER_THAN_EQUAL;
                                    $isComp = 1;
                                    continue q;
                                case 9:
                                    $integer = $elmt;
                                    $valI = tj_JavaishInt__init_(tj_IntElmt_getValue($integer));
                                    if (!$isComp) {
                                        $total = tj_Interpreter_performOperation($this, $operation, $total, $valI);
                                        continue q;
                                    }
                                    $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $valI);
                                    continue q;
                                case 10:
                                    tj_Interpreter$Operator_$callClinit();
                                    $comparison = tj_Interpreter$Operator_LESS_THAN;
                                    $isComp = 1;
                                    continue q;
                                case 11:
                                    tj_Interpreter$Operator_$callClinit();
                                    $comparison = tj_Interpreter$Operator_LESS_THAN_EQUAL;
                                    $isComp = 1;
                                    continue q;
                                case 12:
                                    tj_Interpreter$Operator_$callClinit();
                                    $operation = tj_Interpreter$Operator_MINUS;
                                    continue q;
                                case 13:
                                    tj_Interpreter$Operator_$callClinit();
                                    $operation = tj_Interpreter$Operator_MULTIPLY;
                                    continue q;
                                case 14:
                                    $expression = $elmt.$expression0;
                                    $ptr = 3;
                                    continue main;
                                case 15:
                                    tj_Interpreter$Operator_$callClinit();
                                    $comparison = tj_Interpreter$Operator_NOT_EQUAL;
                                    $isComp = 1;
                                    continue q;
                                case 16:
                                    break t;
                                case 17:
                                    tj_Interpreter$Operator_$callClinit();
                                    $operation = tj_Interpreter$Operator_PLUS;
                                    continue q;
                                case 18:
                                    $string = $elmt;
                                    $valS = tj_JavaishString__init_(tj_StringElmt_getValue($string));
                                    if (!$isComp) {
                                        $total = tj_Interpreter_performOperation($this, $operation, $total, $valS);
                                        continue q;
                                    }
                                    $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $valS);
                                    continue q;
                                case 19:
                                    break f;
                                case 20:
                                    $function = $elmt;
                                    $body = tj_Variables_getFunctionBody($this.$globalVariables, tj_FunctionElmt_getName($function));
                                    $args = tj_Variables_getFunctionArgs($this.$globalVariables, tj_FunctionElmt_getName($function));
                                    $params = (tj_FunctionElmt_getParams($function)).data;
                                    $paramVals = ju_ArrayList__init_();
                                    $listLength = $params.length;
                                    var$29 = 0;
                                    if (var$29 < $listLength) {
                                        $param = $params[var$29];
                                        $ptr = 7;
                                        continue main;
                                    }
                                    $paramValsArr = ju_AbstractCollection_toArray($paramVals, $rt_createArray(tj_JavaishVal, ju_ArrayList_size($paramVals)));
                                    $expression = tj_FunctionElmt_getName($function);
                                    $listLength = 0;
                                    $ptr = 6;
                                    continue main;
                                case 21:
                                    $showInputBox = $elmt;
                                    $ptr = 4;
                                    continue main;
                                case 22:
                                    $listVal = $elmt;
                                    $expression = tj_ListValElmt_getIndex($listVal);
                                    $ptr = 5;
                                    continue main;
                                case 23:
                                    break s;
                                case 24:
                                    $arrayName = tj_ArrayLengthElmt_getArrayName($elmt);
                                    if (tj_Variables_isVariable($localVariables, $arrayName))
                                        $expression = tj_Variables_getVariableValue($localVariables, $arrayName);
                                    else {
                                        if (!tj_Variables_isVariable($this.$globalVariables, $arrayName)) {
                                            tj_Error_VariableNotDeclared($arrayName, $this.$lineNumber);
                                            return null;
                                        }
                                        $expression = tj_Variables_getVariableValue($this.$globalVariables, $arrayName);
                                    }
                                    if (!($expression instanceof tj_JavaishListVal)) {
                                        tj_Error_TypeMismatch($rt_s(293), $expression.$typeString(), $this.$lineNumber);
                                        return null;
                                    }
                                    $listL = tj_JavaishListVal_getValue($expression);
                                    $length = tj_JavaishInt__init_($listL.$getLength());
                                    if (!$isComp)
                                        $total = tj_Interpreter_performOperation($this, $operation, $total, $length);
                                    else
                                        $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $length);
                                    continue q;
                                default:
                            }
                            continue q;
                        }
                        $resultO = tj_Interpreter_performComparision($this, $comparison, $total, $compVal);
                        if ($resultO === null)
                            return null;
                        if (jl_Boolean_booleanValue(tj_JavaishBoolean_getValue($resultO)) == 1)
                            return tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                        $total = null;
                        $operation = null;
                        $compVal = null;
                        $isComp = 0;
                        continue q;
                    }
                    $variable = $elmt;
                    if (tj_Variables_isVariable($localVariables, tj_VariableElmt_getName($variable)))
                        $expression = tj_Variables_getVariableValue($localVariables, tj_VariableElmt_getName($variable));
                    else {
                        if (!tj_Variables_isVariable($this.$globalVariables, tj_VariableElmt_getName($variable))) {
                            tj_Error_VariableNotDeclared(tj_VariableElmt_getName($variable), $this.$lineNumber);
                            return null;
                        }
                        $expression = tj_Variables_getVariableValue($this.$globalVariables, tj_VariableElmt_getName($variable));
                    }
                    if (!$isComp) {
                        $total = tj_Interpreter_performOperation($this, $operation, $total, $expression);
                        continue q;
                    }
                    $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $expression);
                    continue q;
                }
                $list = $elmt;
                $type = tj_ListElmt_getListType($list);
                $listExpressions = tj_ListElmt_getList($list);
                $listVals = ju_ArrayList__init_();
                $val = ju_AbstractList_iterator($listExpressions);
                if (ju_AbstractList$1_hasNext($val)) {
                    $listExpression = ju_AbstractList$1_next($val);
                    $ptr = 8;
                    continue main;
                }
                u: {
                    $expression = jl_Enum_toString($type);
                    $listLength = (-1);
                    switch (jl_String_hashCode($expression)) {
                        case -1618721555:
                            if (!jl_String_equals($expression, $rt_s(75)))
                                break u;
                            $listLength = 0;
                            break u;
                        case -1087271889:
                            if (!jl_String_equals($expression, $rt_s(77)))
                                break u;
                            $listLength = 2;
                            break u;
                        case 318725286:
                            if (!jl_String_equals($expression, $rt_s(78)))
                                break u;
                            $listLength = 3;
                            break u;
                        case 675960026:
                            if (!jl_String_equals($expression, $rt_s(76)))
                                break u;
                            $listLength = 1;
                            break u;
                        default:
                    }
                }
                v: {
                    switch ($listLength) {
                        case 0:
                            $intList = ju_ArrayList__init_();
                            $expression = ju_AbstractList_iterator($listVals);
                            while (ju_AbstractList$1_hasNext($expression)) {
                                $listValI = ju_AbstractList$1_next($expression);
                                if (!($listValI instanceof tj_JavaishInt)) {
                                    tj_Error_TypeMismatch($rt_s(187), $listValI.$typeString(), $this.$lineNumber);
                                    return null;
                                }
                                ju_ArrayList_add($intList, $listValI);
                            }
                            $intListVal = tj_JavaishIntList__init_($intList);
                            if (!$isComp) {
                                if ($operation === null) {
                                    $total = tj_JavaishListVal__init_($intListVal);
                                    break v;
                                }
                                tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(191), $this.$lineNumber);
                                break v;
                            }
                            if ($operation === null) {
                                $compVal = tj_JavaishListVal__init_($intListVal);
                                break v;
                            }
                            tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(191), $this.$lineNumber);
                            break v;
                        case 1:
                            $floatList = ju_ArrayList__init_();
                            $expression = ju_AbstractList_iterator($listVals);
                            while (ju_AbstractList$1_hasNext($expression)) {
                                $listValI = ju_AbstractList$1_next($expression);
                                if (!($listValI instanceof tj_JavaishFloat)) {
                                    tj_Error_TypeMismatch($rt_s(184), $listValI.$typeString(), $this.$lineNumber);
                                    return null;
                                }
                                ju_ArrayList_add($floatList, $listValI);
                            }
                            $floatListVal = tj_JavaishFloatList__init_($floatList);
                            if (!$isComp) {
                                if ($operation === null) {
                                    $total = tj_JavaishListVal__init_($floatListVal);
                                    break v;
                                }
                                tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(188), $this.$lineNumber);
                                break v;
                            }
                            if ($operation === null) {
                                $compVal = tj_JavaishListVal__init_($floatListVal);
                                break v;
                            }
                            tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(188), $this.$lineNumber);
                            break v;
                        case 2:
                            $stringList = ju_ArrayList__init_();
                            $val = ju_AbstractList_iterator($listVals);
                            while (ju_AbstractList$1_hasNext($val)) {
                                $listValI = ju_AbstractList$1_next($val);
                                if (!($listValI instanceof tj_JavaishString)) {
                                    tj_Error_TypeMismatch($rt_s(186), $listValI.$typeString(), $this.$lineNumber);
                                    return null;
                                }
                                ju_ArrayList_add($stringList, $listValI);
                            }
                            $stringListVal = tj_JavaishStringList__init_($stringList);
                            if (!$isComp) {
                                if ($operation === null) {
                                    $total = tj_JavaishListVal__init_($stringListVal);
                                    break v;
                                }
                                tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(190), $this.$lineNumber);
                                break v;
                            }
                            if ($operation === null) {
                                $compVal = tj_JavaishListVal__init_($stringListVal);
                                break v;
                            }
                            tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(190), $this.$lineNumber);
                            break v;
                        case 3:
                            $booleanList = ju_ArrayList__init_();
                            $expression = ju_AbstractList_iterator($listVals);
                            while (ju_AbstractList$1_hasNext($expression)) {
                                $listValI = ju_AbstractList$1_next($expression);
                                if (!($listValI instanceof tj_JavaishBoolean)) {
                                    tj_Error_TypeMismatch($rt_s(185), $listValI.$typeString(), $this.$lineNumber);
                                    return null;
                                }
                                ju_ArrayList_add($booleanList, $listValI);
                            }
                            $booleanListVal = tj_JavaishBooleanList__init_($booleanList);
                            if (!$isComp) {
                                if ($operation === null) {
                                    $total = tj_JavaishListVal__init_($booleanListVal);
                                    break v;
                                }
                                tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(189), $this.$lineNumber);
                                break v;
                            }
                            if ($operation === null) {
                                $compVal = tj_JavaishListVal__init_($booleanListVal);
                                break v;
                            }
                            tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(189), $this.$lineNumber);
                            break v;
                        default:
                    }
                }
            }
            return null;
        case 3:
            $tmp = tj_Interpreter_evalExpression($this, $expression, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            $valNot = $tmp;
            if (!($valNot instanceof tj_JavaishBoolean))
                tj_Error_TypeMismatch($rt_s(185), $valNot.$typeString(), $this.$lineNumber);
            else {
                $expression = jl_Boolean_booleanValue(tj_JavaishBoolean_getValue($valNot)) != 1 ? tj_JavaishBoolean__init_(jl_Boolean_valueOf(1)) : tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                if (!$isComp)
                    $total = tj_Interpreter_performOperation($this, $operation, $total, $expression);
                else
                    $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $expression);
            }
            w: while (true) {
                var$11 = var$11 + 1 | 0;
                if (var$11 >= var$10) {
                    if (!$isComp)
                        return $total;
                    return tj_Interpreter_performComparision($this, $comparison, $total, $compVal);
                }
                x: {
                    $elmt = var$9[var$11];
                    $expression = tj_Element_getTypeS($elmt);
                    $listLength = (-1);
                    switch (jl_String_hashCode($expression)) {
                        case -2131401768:
                            if (!jl_String_equals($expression, $rt_s(82)))
                                break x;
                            $listLength = 20;
                            break x;
                        case -1838656495:
                            if (!jl_String_equals($expression, $rt_s(178)))
                                break x;
                            $listLength = 18;
                            break x;
                        case -1618932450:
                            if (!jl_String_equals($expression, $rt_s(271)))
                                break x;
                            $listLength = 9;
                            break x;
                        case -1583968932:
                            if (!jl_String_equals($expression, $rt_s(272)))
                                break x;
                            $listLength = 11;
                            break x;
                        case -1310359912:
                            if (!jl_String_equals($expression, $rt_s(273)))
                                break x;
                            $listLength = 5;
                            break x;
                        case -1112834937:
                            if (!jl_String_equals($expression, $rt_s(274)))
                                break x;
                            $listLength = 10;
                            break x;
                        case -715433377:
                            if (!jl_String_equals($expression, $rt_s(275)))
                                break x;
                            $listLength = 24;
                            break x;
                        case -466959748:
                            if (!jl_String_equals($expression, $rt_s(276)))
                                break x;
                            $listLength = 19;
                            break x;
                        case 2531:
                            if (!jl_String_equals($expression, $rt_s(277)))
                                break x;
                            $listLength = 16;
                            break x;
                        case 64951:
                            if (!jl_String_equals($expression, $rt_s(278)))
                                break x;
                            $listLength = 0;
                            break x;
                        case 77491:
                            if (!jl_String_equals($expression, $rt_s(279)))
                                break x;
                            $listLength = 14;
                            break x;
                        case 2044650:
                            if (!jl_String_equals($expression, $rt_s(280)))
                                break x;
                            $listLength = 1;
                            break x;
                        case 2061119:
                            if (!jl_String_equals($expression, $rt_s(281)))
                                break x;
                            $listLength = 2;
                            break x;
                        case 2336926:
                            if (!jl_String_equals($expression, $rt_s(282)))
                                break x;
                            $listLength = 23;
                            break x;
                        case 2459034:
                            if (!jl_String_equals($expression, $rt_s(283)))
                                break x;
                            $listLength = 17;
                            break x;
                        case 66219796:
                            if (!jl_String_equals($expression, $rt_s(284)))
                                break x;
                            $listLength = 4;
                            break x;
                        case 66988604:
                            if (!jl_String_equals($expression, $rt_s(180)))
                                break x;
                            $listLength = 6;
                            break x;
                        case 73363536:
                            if (!jl_String_equals($expression, $rt_s(285)))
                                break x;
                            $listLength = 12;
                            break x;
                        case 360410235:
                            if (!jl_String_equals($expression, $rt_s(286)))
                                break x;
                            $listLength = 8;
                            break x;
                        case 899970467:
                            if (!jl_String_equals($expression, $rt_s(287)))
                                break x;
                            $listLength = 22;
                            break x;
                        case 972152550:
                            if (!jl_String_equals($expression, $rt_s(288)))
                                break x;
                            $listLength = 7;
                            break x;
                        case 1022422664:
                            if (!jl_String_equals($expression, $rt_s(289)))
                                break x;
                            $listLength = 15;
                            break x;
                        case 1436456484:
                            if (!jl_String_equals($expression, $rt_s(290)))
                                break x;
                            $listLength = 13;
                            break x;
                        case 1871384510:
                            if (!jl_String_equals($expression, $rt_s(291)))
                                break x;
                            $listLength = 21;
                            break x;
                        case 2016833657:
                            if (!jl_String_equals($expression, $rt_s(292)))
                                break x;
                            $listLength = 3;
                            break x;
                        default:
                    }
                }
                y: {
                    z: {
                        ba: {
                            switch ($listLength) {
                                case 0:
                                    $result = tj_Interpreter_performComparision($this, $comparison, $total, $compVal);
                                    if ($result === null)
                                        break w;
                                    if (!jl_Boolean_booleanValue(tj_JavaishBoolean_getValue($result)))
                                        return tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    $total = null;
                                    $operation = null;
                                    $comparison = null;
                                    $compVal = null;
                                    $isComp = 0;
                                    continue w;
                                case 1:
                                    $bool = $elmt;
                                    $valB = tj_JavaishBoolean__init_(jl_Boolean_valueOf(tj_BoolElmt_getValue($bool)));
                                    if (!$isComp) {
                                        $total = tj_Interpreter_performOperation($this, $operation, $total, $valB);
                                        continue w;
                                    }
                                    $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $valB);
                                    continue w;
                                case 2:
                                    $cast = $elmt;
                                    $expression = $cast.$element;
                                    $ptr = 1;
                                    continue main;
                                case 3:
                                    tj_Interpreter$Operator_$callClinit();
                                    $operation = tj_Interpreter$Operator_DIVIDE;
                                    continue w;
                                case 4:
                                    tj_Interpreter$Operator_$callClinit();
                                    $comparison = tj_Interpreter$Operator_EQUAL;
                                    $isComp = 1;
                                    continue w;
                                case 5:
                                    $expression = $elmt.$expression;
                                    $ptr = 2;
                                    continue main;
                                case 6:
                                    $floatElmt = $elmt;
                                    $valF = tj_JavaishFloat__init_(tj_FloatElmt_getValue($floatElmt));
                                    if (!$isComp) {
                                        $total = tj_Interpreter_performOperation($this, $operation, $total, $valF);
                                        continue w;
                                    }
                                    $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $valF);
                                    continue w;
                                case 7:
                                    tj_Interpreter$Operator_$callClinit();
                                    $comparison = tj_Interpreter$Operator_GREATER_THAN;
                                    $isComp = 1;
                                    continue w;
                                case 8:
                                    tj_Interpreter$Operator_$callClinit();
                                    $comparison = tj_Interpreter$Operator_GREATER_THAN_EQUAL;
                                    $isComp = 1;
                                    continue w;
                                case 9:
                                    $integer = $elmt;
                                    $valI = tj_JavaishInt__init_(tj_IntElmt_getValue($integer));
                                    if (!$isComp) {
                                        $total = tj_Interpreter_performOperation($this, $operation, $total, $valI);
                                        continue w;
                                    }
                                    $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $valI);
                                    continue w;
                                case 10:
                                    tj_Interpreter$Operator_$callClinit();
                                    $comparison = tj_Interpreter$Operator_LESS_THAN;
                                    $isComp = 1;
                                    continue w;
                                case 11:
                                    tj_Interpreter$Operator_$callClinit();
                                    $comparison = tj_Interpreter$Operator_LESS_THAN_EQUAL;
                                    $isComp = 1;
                                    continue w;
                                case 12:
                                    tj_Interpreter$Operator_$callClinit();
                                    $operation = tj_Interpreter$Operator_MINUS;
                                    continue w;
                                case 13:
                                    tj_Interpreter$Operator_$callClinit();
                                    $operation = tj_Interpreter$Operator_MULTIPLY;
                                    continue w;
                                case 14:
                                    $expression = $elmt.$expression0;
                                    continue main;
                                case 15:
                                    tj_Interpreter$Operator_$callClinit();
                                    $comparison = tj_Interpreter$Operator_NOT_EQUAL;
                                    $isComp = 1;
                                    continue w;
                                case 16:
                                    break ba;
                                case 17:
                                    tj_Interpreter$Operator_$callClinit();
                                    $operation = tj_Interpreter$Operator_PLUS;
                                    continue w;
                                case 18:
                                    $string = $elmt;
                                    $valS = tj_JavaishString__init_(tj_StringElmt_getValue($string));
                                    if (!$isComp) {
                                        $total = tj_Interpreter_performOperation($this, $operation, $total, $valS);
                                        continue w;
                                    }
                                    $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $valS);
                                    continue w;
                                case 19:
                                    break z;
                                case 20:
                                    $function = $elmt;
                                    $body = tj_Variables_getFunctionBody($this.$globalVariables, tj_FunctionElmt_getName($function));
                                    $args = tj_Variables_getFunctionArgs($this.$globalVariables, tj_FunctionElmt_getName($function));
                                    $params = (tj_FunctionElmt_getParams($function)).data;
                                    $paramVals = ju_ArrayList__init_();
                                    $listLength = $params.length;
                                    var$29 = 0;
                                    if (var$29 < $listLength) {
                                        $param = $params[var$29];
                                        $ptr = 7;
                                        continue main;
                                    }
                                    $paramValsArr = ju_AbstractCollection_toArray($paramVals, $rt_createArray(tj_JavaishVal, ju_ArrayList_size($paramVals)));
                                    $expression = tj_FunctionElmt_getName($function);
                                    $listLength = 0;
                                    $ptr = 6;
                                    continue main;
                                case 21:
                                    $showInputBox = $elmt;
                                    $ptr = 4;
                                    continue main;
                                case 22:
                                    $listVal = $elmt;
                                    $expression = tj_ListValElmt_getIndex($listVal);
                                    $ptr = 5;
                                    continue main;
                                case 23:
                                    break y;
                                case 24:
                                    $arrayName = tj_ArrayLengthElmt_getArrayName($elmt);
                                    if (tj_Variables_isVariable($localVariables, $arrayName))
                                        $expression = tj_Variables_getVariableValue($localVariables, $arrayName);
                                    else {
                                        if (!tj_Variables_isVariable($this.$globalVariables, $arrayName)) {
                                            tj_Error_VariableNotDeclared($arrayName, $this.$lineNumber);
                                            return null;
                                        }
                                        $expression = tj_Variables_getVariableValue($this.$globalVariables, $arrayName);
                                    }
                                    if (!($expression instanceof tj_JavaishListVal)) {
                                        tj_Error_TypeMismatch($rt_s(293), $expression.$typeString(), $this.$lineNumber);
                                        return null;
                                    }
                                    $listL = tj_JavaishListVal_getValue($expression);
                                    $length = tj_JavaishInt__init_($listL.$getLength());
                                    if (!$isComp)
                                        $total = tj_Interpreter_performOperation($this, $operation, $total, $length);
                                    else
                                        $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $length);
                                    continue w;
                                default:
                            }
                            continue w;
                        }
                        $resultO = tj_Interpreter_performComparision($this, $comparison, $total, $compVal);
                        if ($resultO === null)
                            return null;
                        if (jl_Boolean_booleanValue(tj_JavaishBoolean_getValue($resultO)) == 1)
                            return tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                        $total = null;
                        $operation = null;
                        $compVal = null;
                        $isComp = 0;
                        continue w;
                    }
                    $variable = $elmt;
                    if (tj_Variables_isVariable($localVariables, tj_VariableElmt_getName($variable)))
                        $expression = tj_Variables_getVariableValue($localVariables, tj_VariableElmt_getName($variable));
                    else {
                        if (!tj_Variables_isVariable($this.$globalVariables, tj_VariableElmt_getName($variable))) {
                            tj_Error_VariableNotDeclared(tj_VariableElmt_getName($variable), $this.$lineNumber);
                            return null;
                        }
                        $expression = tj_Variables_getVariableValue($this.$globalVariables, tj_VariableElmt_getName($variable));
                    }
                    if (!$isComp) {
                        $total = tj_Interpreter_performOperation($this, $operation, $total, $expression);
                        continue w;
                    }
                    $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $expression);
                    continue w;
                }
                $list = $elmt;
                $type = tj_ListElmt_getListType($list);
                $listExpressions = tj_ListElmt_getList($list);
                $listVals = ju_ArrayList__init_();
                $val = ju_AbstractList_iterator($listExpressions);
                if (ju_AbstractList$1_hasNext($val)) {
                    $listExpression = ju_AbstractList$1_next($val);
                    $ptr = 8;
                    continue main;
                }
                bb: {
                    $expression = jl_Enum_toString($type);
                    $listLength = (-1);
                    switch (jl_String_hashCode($expression)) {
                        case -1618721555:
                            if (!jl_String_equals($expression, $rt_s(75)))
                                break bb;
                            $listLength = 0;
                            break bb;
                        case -1087271889:
                            if (!jl_String_equals($expression, $rt_s(77)))
                                break bb;
                            $listLength = 2;
                            break bb;
                        case 318725286:
                            if (!jl_String_equals($expression, $rt_s(78)))
                                break bb;
                            $listLength = 3;
                            break bb;
                        case 675960026:
                            if (!jl_String_equals($expression, $rt_s(76)))
                                break bb;
                            $listLength = 1;
                            break bb;
                        default:
                    }
                }
                bc: {
                    switch ($listLength) {
                        case 0:
                            $intList = ju_ArrayList__init_();
                            $expression = ju_AbstractList_iterator($listVals);
                            while (ju_AbstractList$1_hasNext($expression)) {
                                $listValI = ju_AbstractList$1_next($expression);
                                if (!($listValI instanceof tj_JavaishInt)) {
                                    tj_Error_TypeMismatch($rt_s(187), $listValI.$typeString(), $this.$lineNumber);
                                    return null;
                                }
                                ju_ArrayList_add($intList, $listValI);
                            }
                            $intListVal = tj_JavaishIntList__init_($intList);
                            if (!$isComp) {
                                if ($operation === null) {
                                    $total = tj_JavaishListVal__init_($intListVal);
                                    break bc;
                                }
                                tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(191), $this.$lineNumber);
                                break bc;
                            }
                            if ($operation === null) {
                                $compVal = tj_JavaishListVal__init_($intListVal);
                                break bc;
                            }
                            tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(191), $this.$lineNumber);
                            break bc;
                        case 1:
                            $floatList = ju_ArrayList__init_();
                            $expression = ju_AbstractList_iterator($listVals);
                            while (ju_AbstractList$1_hasNext($expression)) {
                                $listValI = ju_AbstractList$1_next($expression);
                                if (!($listValI instanceof tj_JavaishFloat)) {
                                    tj_Error_TypeMismatch($rt_s(184), $listValI.$typeString(), $this.$lineNumber);
                                    return null;
                                }
                                ju_ArrayList_add($floatList, $listValI);
                            }
                            $floatListVal = tj_JavaishFloatList__init_($floatList);
                            if (!$isComp) {
                                if ($operation === null) {
                                    $total = tj_JavaishListVal__init_($floatListVal);
                                    break bc;
                                }
                                tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(188), $this.$lineNumber);
                                break bc;
                            }
                            if ($operation === null) {
                                $compVal = tj_JavaishListVal__init_($floatListVal);
                                break bc;
                            }
                            tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(188), $this.$lineNumber);
                            break bc;
                        case 2:
                            $stringList = ju_ArrayList__init_();
                            $val = ju_AbstractList_iterator($listVals);
                            while (ju_AbstractList$1_hasNext($val)) {
                                $listValI = ju_AbstractList$1_next($val);
                                if (!($listValI instanceof tj_JavaishString)) {
                                    tj_Error_TypeMismatch($rt_s(186), $listValI.$typeString(), $this.$lineNumber);
                                    return null;
                                }
                                ju_ArrayList_add($stringList, $listValI);
                            }
                            $stringListVal = tj_JavaishStringList__init_($stringList);
                            if (!$isComp) {
                                if ($operation === null) {
                                    $total = tj_JavaishListVal__init_($stringListVal);
                                    break bc;
                                }
                                tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(190), $this.$lineNumber);
                                break bc;
                            }
                            if ($operation === null) {
                                $compVal = tj_JavaishListVal__init_($stringListVal);
                                break bc;
                            }
                            tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(190), $this.$lineNumber);
                            break bc;
                        case 3:
                            $booleanList = ju_ArrayList__init_();
                            $expression = ju_AbstractList_iterator($listVals);
                            while (ju_AbstractList$1_hasNext($expression)) {
                                $listValI = ju_AbstractList$1_next($expression);
                                if (!($listValI instanceof tj_JavaishBoolean)) {
                                    tj_Error_TypeMismatch($rt_s(185), $listValI.$typeString(), $this.$lineNumber);
                                    return null;
                                }
                                ju_ArrayList_add($booleanList, $listValI);
                            }
                            $booleanListVal = tj_JavaishBooleanList__init_($booleanList);
                            if (!$isComp) {
                                if ($operation === null) {
                                    $total = tj_JavaishListVal__init_($booleanListVal);
                                    break bc;
                                }
                                tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(189), $this.$lineNumber);
                                break bc;
                            }
                            if ($operation === null) {
                                $compVal = tj_JavaishListVal__init_($booleanListVal);
                                break bc;
                            }
                            tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(189), $this.$lineNumber);
                            break bc;
                        default:
                    }
                }
            }
            return null;
        case 4:
            $tmp = tj_Interpreter_evalShowInputBox($this, $showInputBox, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            $input = $tmp;
            if (!$isComp)
                $total = tj_Interpreter_performOperation($this, $operation, $total, $input);
            else
                $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $input);
            q: while (true) {
                var$11 = var$11 + 1 | 0;
                if (var$11 >= var$10) {
                    if (!$isComp)
                        return $total;
                    return tj_Interpreter_performComparision($this, $comparison, $total, $compVal);
                }
                r: {
                    $elmt = var$9[var$11];
                    $expression = tj_Element_getTypeS($elmt);
                    $listLength = (-1);
                    switch (jl_String_hashCode($expression)) {
                        case -2131401768:
                            if (!jl_String_equals($expression, $rt_s(82)))
                                break r;
                            $listLength = 20;
                            break r;
                        case -1838656495:
                            if (!jl_String_equals($expression, $rt_s(178)))
                                break r;
                            $listLength = 18;
                            break r;
                        case -1618932450:
                            if (!jl_String_equals($expression, $rt_s(271)))
                                break r;
                            $listLength = 9;
                            break r;
                        case -1583968932:
                            if (!jl_String_equals($expression, $rt_s(272)))
                                break r;
                            $listLength = 11;
                            break r;
                        case -1310359912:
                            if (!jl_String_equals($expression, $rt_s(273)))
                                break r;
                            $listLength = 5;
                            break r;
                        case -1112834937:
                            if (!jl_String_equals($expression, $rt_s(274)))
                                break r;
                            $listLength = 10;
                            break r;
                        case -715433377:
                            if (!jl_String_equals($expression, $rt_s(275)))
                                break r;
                            $listLength = 24;
                            break r;
                        case -466959748:
                            if (!jl_String_equals($expression, $rt_s(276)))
                                break r;
                            $listLength = 19;
                            break r;
                        case 2531:
                            if (!jl_String_equals($expression, $rt_s(277)))
                                break r;
                            $listLength = 16;
                            break r;
                        case 64951:
                            if (!jl_String_equals($expression, $rt_s(278)))
                                break r;
                            $listLength = 0;
                            break r;
                        case 77491:
                            if (!jl_String_equals($expression, $rt_s(279)))
                                break r;
                            $listLength = 14;
                            break r;
                        case 2044650:
                            if (!jl_String_equals($expression, $rt_s(280)))
                                break r;
                            $listLength = 1;
                            break r;
                        case 2061119:
                            if (!jl_String_equals($expression, $rt_s(281)))
                                break r;
                            $listLength = 2;
                            break r;
                        case 2336926:
                            if (!jl_String_equals($expression, $rt_s(282)))
                                break r;
                            $listLength = 23;
                            break r;
                        case 2459034:
                            if (!jl_String_equals($expression, $rt_s(283)))
                                break r;
                            $listLength = 17;
                            break r;
                        case 66219796:
                            if (!jl_String_equals($expression, $rt_s(284)))
                                break r;
                            $listLength = 4;
                            break r;
                        case 66988604:
                            if (!jl_String_equals($expression, $rt_s(180)))
                                break r;
                            $listLength = 6;
                            break r;
                        case 73363536:
                            if (!jl_String_equals($expression, $rt_s(285)))
                                break r;
                            $listLength = 12;
                            break r;
                        case 360410235:
                            if (!jl_String_equals($expression, $rt_s(286)))
                                break r;
                            $listLength = 8;
                            break r;
                        case 899970467:
                            if (!jl_String_equals($expression, $rt_s(287)))
                                break r;
                            $listLength = 22;
                            break r;
                        case 972152550:
                            if (!jl_String_equals($expression, $rt_s(288)))
                                break r;
                            $listLength = 7;
                            break r;
                        case 1022422664:
                            if (!jl_String_equals($expression, $rt_s(289)))
                                break r;
                            $listLength = 15;
                            break r;
                        case 1436456484:
                            if (!jl_String_equals($expression, $rt_s(290)))
                                break r;
                            $listLength = 13;
                            break r;
                        case 1871384510:
                            if (!jl_String_equals($expression, $rt_s(291)))
                                break r;
                            $listLength = 21;
                            break r;
                        case 2016833657:
                            if (!jl_String_equals($expression, $rt_s(292)))
                                break r;
                            $listLength = 3;
                            break r;
                        default:
                    }
                }
                s: {
                    f: {
                        t: {
                            switch ($listLength) {
                                case 0:
                                    $result = tj_Interpreter_performComparision($this, $comparison, $total, $compVal);
                                    if ($result === null)
                                        break q;
                                    if (!jl_Boolean_booleanValue(tj_JavaishBoolean_getValue($result)))
                                        return tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    $total = null;
                                    $operation = null;
                                    $comparison = null;
                                    $compVal = null;
                                    $isComp = 0;
                                    continue q;
                                case 1:
                                    $bool = $elmt;
                                    $valB = tj_JavaishBoolean__init_(jl_Boolean_valueOf(tj_BoolElmt_getValue($bool)));
                                    if (!$isComp) {
                                        $total = tj_Interpreter_performOperation($this, $operation, $total, $valB);
                                        continue q;
                                    }
                                    $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $valB);
                                    continue q;
                                case 2:
                                    $cast = $elmt;
                                    $expression = $cast.$element;
                                    $ptr = 1;
                                    continue main;
                                case 3:
                                    tj_Interpreter$Operator_$callClinit();
                                    $operation = tj_Interpreter$Operator_DIVIDE;
                                    continue q;
                                case 4:
                                    tj_Interpreter$Operator_$callClinit();
                                    $comparison = tj_Interpreter$Operator_EQUAL;
                                    $isComp = 1;
                                    continue q;
                                case 5:
                                    $expression = $elmt.$expression;
                                    $ptr = 2;
                                    continue main;
                                case 6:
                                    $floatElmt = $elmt;
                                    $valF = tj_JavaishFloat__init_(tj_FloatElmt_getValue($floatElmt));
                                    if (!$isComp) {
                                        $total = tj_Interpreter_performOperation($this, $operation, $total, $valF);
                                        continue q;
                                    }
                                    $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $valF);
                                    continue q;
                                case 7:
                                    tj_Interpreter$Operator_$callClinit();
                                    $comparison = tj_Interpreter$Operator_GREATER_THAN;
                                    $isComp = 1;
                                    continue q;
                                case 8:
                                    tj_Interpreter$Operator_$callClinit();
                                    $comparison = tj_Interpreter$Operator_GREATER_THAN_EQUAL;
                                    $isComp = 1;
                                    continue q;
                                case 9:
                                    $integer = $elmt;
                                    $valI = tj_JavaishInt__init_(tj_IntElmt_getValue($integer));
                                    if (!$isComp) {
                                        $total = tj_Interpreter_performOperation($this, $operation, $total, $valI);
                                        continue q;
                                    }
                                    $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $valI);
                                    continue q;
                                case 10:
                                    tj_Interpreter$Operator_$callClinit();
                                    $comparison = tj_Interpreter$Operator_LESS_THAN;
                                    $isComp = 1;
                                    continue q;
                                case 11:
                                    tj_Interpreter$Operator_$callClinit();
                                    $comparison = tj_Interpreter$Operator_LESS_THAN_EQUAL;
                                    $isComp = 1;
                                    continue q;
                                case 12:
                                    tj_Interpreter$Operator_$callClinit();
                                    $operation = tj_Interpreter$Operator_MINUS;
                                    continue q;
                                case 13:
                                    tj_Interpreter$Operator_$callClinit();
                                    $operation = tj_Interpreter$Operator_MULTIPLY;
                                    continue q;
                                case 14:
                                    $expression = $elmt.$expression0;
                                    $ptr = 3;
                                    continue main;
                                case 15:
                                    tj_Interpreter$Operator_$callClinit();
                                    $comparison = tj_Interpreter$Operator_NOT_EQUAL;
                                    $isComp = 1;
                                    continue q;
                                case 16:
                                    break t;
                                case 17:
                                    tj_Interpreter$Operator_$callClinit();
                                    $operation = tj_Interpreter$Operator_PLUS;
                                    continue q;
                                case 18:
                                    $string = $elmt;
                                    $valS = tj_JavaishString__init_(tj_StringElmt_getValue($string));
                                    if (!$isComp) {
                                        $total = tj_Interpreter_performOperation($this, $operation, $total, $valS);
                                        continue q;
                                    }
                                    $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $valS);
                                    continue q;
                                case 19:
                                    break f;
                                case 20:
                                    $function = $elmt;
                                    $body = tj_Variables_getFunctionBody($this.$globalVariables, tj_FunctionElmt_getName($function));
                                    $args = tj_Variables_getFunctionArgs($this.$globalVariables, tj_FunctionElmt_getName($function));
                                    $params = (tj_FunctionElmt_getParams($function)).data;
                                    $paramVals = ju_ArrayList__init_();
                                    $listLength = $params.length;
                                    var$29 = 0;
                                    if (var$29 < $listLength) {
                                        $param = $params[var$29];
                                        $ptr = 7;
                                        continue main;
                                    }
                                    $paramValsArr = ju_AbstractCollection_toArray($paramVals, $rt_createArray(tj_JavaishVal, ju_ArrayList_size($paramVals)));
                                    $expression = tj_FunctionElmt_getName($function);
                                    $listLength = 0;
                                    $ptr = 6;
                                    continue main;
                                case 21:
                                    $showInputBox = $elmt;
                                    continue main;
                                case 22:
                                    $listVal = $elmt;
                                    $expression = tj_ListValElmt_getIndex($listVal);
                                    $ptr = 5;
                                    continue main;
                                case 23:
                                    break s;
                                case 24:
                                    $arrayName = tj_ArrayLengthElmt_getArrayName($elmt);
                                    if (tj_Variables_isVariable($localVariables, $arrayName))
                                        $expression = tj_Variables_getVariableValue($localVariables, $arrayName);
                                    else {
                                        if (!tj_Variables_isVariable($this.$globalVariables, $arrayName)) {
                                            tj_Error_VariableNotDeclared($arrayName, $this.$lineNumber);
                                            return null;
                                        }
                                        $expression = tj_Variables_getVariableValue($this.$globalVariables, $arrayName);
                                    }
                                    if (!($expression instanceof tj_JavaishListVal)) {
                                        tj_Error_TypeMismatch($rt_s(293), $expression.$typeString(), $this.$lineNumber);
                                        return null;
                                    }
                                    $listL = tj_JavaishListVal_getValue($expression);
                                    $length = tj_JavaishInt__init_($listL.$getLength());
                                    if (!$isComp)
                                        $total = tj_Interpreter_performOperation($this, $operation, $total, $length);
                                    else
                                        $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $length);
                                    continue q;
                                default:
                            }
                            continue q;
                        }
                        $resultO = tj_Interpreter_performComparision($this, $comparison, $total, $compVal);
                        if ($resultO === null)
                            return null;
                        if (jl_Boolean_booleanValue(tj_JavaishBoolean_getValue($resultO)) == 1)
                            return tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                        $total = null;
                        $operation = null;
                        $compVal = null;
                        $isComp = 0;
                        continue q;
                    }
                    $variable = $elmt;
                    if (tj_Variables_isVariable($localVariables, tj_VariableElmt_getName($variable)))
                        $expression = tj_Variables_getVariableValue($localVariables, tj_VariableElmt_getName($variable));
                    else {
                        if (!tj_Variables_isVariable($this.$globalVariables, tj_VariableElmt_getName($variable))) {
                            tj_Error_VariableNotDeclared(tj_VariableElmt_getName($variable), $this.$lineNumber);
                            return null;
                        }
                        $expression = tj_Variables_getVariableValue($this.$globalVariables, tj_VariableElmt_getName($variable));
                    }
                    if (!$isComp) {
                        $total = tj_Interpreter_performOperation($this, $operation, $total, $expression);
                        continue q;
                    }
                    $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $expression);
                    continue q;
                }
                $list = $elmt;
                $type = tj_ListElmt_getListType($list);
                $listExpressions = tj_ListElmt_getList($list);
                $listVals = ju_ArrayList__init_();
                $val = ju_AbstractList_iterator($listExpressions);
                if (ju_AbstractList$1_hasNext($val)) {
                    $listExpression = ju_AbstractList$1_next($val);
                    $ptr = 8;
                    continue main;
                }
                u: {
                    $expression = jl_Enum_toString($type);
                    $listLength = (-1);
                    switch (jl_String_hashCode($expression)) {
                        case -1618721555:
                            if (!jl_String_equals($expression, $rt_s(75)))
                                break u;
                            $listLength = 0;
                            break u;
                        case -1087271889:
                            if (!jl_String_equals($expression, $rt_s(77)))
                                break u;
                            $listLength = 2;
                            break u;
                        case 318725286:
                            if (!jl_String_equals($expression, $rt_s(78)))
                                break u;
                            $listLength = 3;
                            break u;
                        case 675960026:
                            if (!jl_String_equals($expression, $rt_s(76)))
                                break u;
                            $listLength = 1;
                            break u;
                        default:
                    }
                }
                v: {
                    switch ($listLength) {
                        case 0:
                            $intList = ju_ArrayList__init_();
                            $expression = ju_AbstractList_iterator($listVals);
                            while (ju_AbstractList$1_hasNext($expression)) {
                                $listValI = ju_AbstractList$1_next($expression);
                                if (!($listValI instanceof tj_JavaishInt)) {
                                    tj_Error_TypeMismatch($rt_s(187), $listValI.$typeString(), $this.$lineNumber);
                                    return null;
                                }
                                ju_ArrayList_add($intList, $listValI);
                            }
                            $intListVal = tj_JavaishIntList__init_($intList);
                            if (!$isComp) {
                                if ($operation === null) {
                                    $total = tj_JavaishListVal__init_($intListVal);
                                    break v;
                                }
                                tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(191), $this.$lineNumber);
                                break v;
                            }
                            if ($operation === null) {
                                $compVal = tj_JavaishListVal__init_($intListVal);
                                break v;
                            }
                            tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(191), $this.$lineNumber);
                            break v;
                        case 1:
                            $floatList = ju_ArrayList__init_();
                            $expression = ju_AbstractList_iterator($listVals);
                            while (ju_AbstractList$1_hasNext($expression)) {
                                $listValI = ju_AbstractList$1_next($expression);
                                if (!($listValI instanceof tj_JavaishFloat)) {
                                    tj_Error_TypeMismatch($rt_s(184), $listValI.$typeString(), $this.$lineNumber);
                                    return null;
                                }
                                ju_ArrayList_add($floatList, $listValI);
                            }
                            $floatListVal = tj_JavaishFloatList__init_($floatList);
                            if (!$isComp) {
                                if ($operation === null) {
                                    $total = tj_JavaishListVal__init_($floatListVal);
                                    break v;
                                }
                                tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(188), $this.$lineNumber);
                                break v;
                            }
                            if ($operation === null) {
                                $compVal = tj_JavaishListVal__init_($floatListVal);
                                break v;
                            }
                            tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(188), $this.$lineNumber);
                            break v;
                        case 2:
                            $stringList = ju_ArrayList__init_();
                            $val = ju_AbstractList_iterator($listVals);
                            while (ju_AbstractList$1_hasNext($val)) {
                                $listValI = ju_AbstractList$1_next($val);
                                if (!($listValI instanceof tj_JavaishString)) {
                                    tj_Error_TypeMismatch($rt_s(186), $listValI.$typeString(), $this.$lineNumber);
                                    return null;
                                }
                                ju_ArrayList_add($stringList, $listValI);
                            }
                            $stringListVal = tj_JavaishStringList__init_($stringList);
                            if (!$isComp) {
                                if ($operation === null) {
                                    $total = tj_JavaishListVal__init_($stringListVal);
                                    break v;
                                }
                                tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(190), $this.$lineNumber);
                                break v;
                            }
                            if ($operation === null) {
                                $compVal = tj_JavaishListVal__init_($stringListVal);
                                break v;
                            }
                            tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(190), $this.$lineNumber);
                            break v;
                        case 3:
                            $booleanList = ju_ArrayList__init_();
                            $expression = ju_AbstractList_iterator($listVals);
                            while (ju_AbstractList$1_hasNext($expression)) {
                                $listValI = ju_AbstractList$1_next($expression);
                                if (!($listValI instanceof tj_JavaishBoolean)) {
                                    tj_Error_TypeMismatch($rt_s(185), $listValI.$typeString(), $this.$lineNumber);
                                    return null;
                                }
                                ju_ArrayList_add($booleanList, $listValI);
                            }
                            $booleanListVal = tj_JavaishBooleanList__init_($booleanList);
                            if (!$isComp) {
                                if ($operation === null) {
                                    $total = tj_JavaishListVal__init_($booleanListVal);
                                    break v;
                                }
                                tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(189), $this.$lineNumber);
                                break v;
                            }
                            if ($operation === null) {
                                $compVal = tj_JavaishListVal__init_($booleanListVal);
                                break v;
                            }
                            tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(189), $this.$lineNumber);
                            break v;
                        default:
                    }
                }
            }
            return null;
        case 5:
            $tmp = tj_Interpreter_evalExpression($this, $expression, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            $index = $tmp;
            if (!($index instanceof tj_JavaishInt)) {
                tj_Error_TypeMismatch($rt_s(187), $index.$typeString(), $this.$lineNumber);
                return null;
            }
            $expression = $index;
            if (tj_Variables_isVariable($localVariables, tj_ListValElmt_getListName($listVal)))
                $val = tj_JavaishListVal_getValue(tj_Variables_getVariableValue($localVariables, tj_ListValElmt_getListName($listVal)));
            else {
                if (!tj_Variables_isVariable($this.$globalVariables, tj_ListValElmt_getListName($listVal))) {
                    tj_Error_VariableNotDeclared(tj_ListValElmt_getListName($listVal), $this.$lineNumber);
                    return null;
                }
                $val = tj_JavaishListVal_getValue(tj_Variables_getVariableValue($this.$globalVariables, tj_ListValElmt_getListName($listVal)));
            }
            $listLength = $val.$getLength();
            if (jl_Integer_intValue(tj_JavaishInt_getValue($expression)) >= $listLength) {
                tj_Error_IndexOutOfBounds(jl_Integer_intValue(tj_JavaishInt_getValue($expression)), $this.$lineNumber, $listLength);
                return null;
            }
            $listValVal = $val.$getValue1(jl_Integer_intValue(tj_JavaishInt_getValue($expression)));
            if (!$isComp)
                $total = tj_Interpreter_performOperation($this, $operation, $total, $listValVal);
            else
                $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $listValVal);
            x: while (true) {
                var$11 = var$11 + 1 | 0;
                if (var$11 >= var$10) {
                    if (!$isComp)
                        return $total;
                    return tj_Interpreter_performComparision($this, $comparison, $total, $compVal);
                }
                bd: {
                    $elmt = var$9[var$11];
                    $expression = tj_Element_getTypeS($elmt);
                    $listLength = (-1);
                    switch (jl_String_hashCode($expression)) {
                        case -2131401768:
                            if (!jl_String_equals($expression, $rt_s(82)))
                                break bd;
                            $listLength = 20;
                            break bd;
                        case -1838656495:
                            if (!jl_String_equals($expression, $rt_s(178)))
                                break bd;
                            $listLength = 18;
                            break bd;
                        case -1618932450:
                            if (!jl_String_equals($expression, $rt_s(271)))
                                break bd;
                            $listLength = 9;
                            break bd;
                        case -1583968932:
                            if (!jl_String_equals($expression, $rt_s(272)))
                                break bd;
                            $listLength = 11;
                            break bd;
                        case -1310359912:
                            if (!jl_String_equals($expression, $rt_s(273)))
                                break bd;
                            $listLength = 5;
                            break bd;
                        case -1112834937:
                            if (!jl_String_equals($expression, $rt_s(274)))
                                break bd;
                            $listLength = 10;
                            break bd;
                        case -715433377:
                            if (!jl_String_equals($expression, $rt_s(275)))
                                break bd;
                            $listLength = 24;
                            break bd;
                        case -466959748:
                            if (!jl_String_equals($expression, $rt_s(276)))
                                break bd;
                            $listLength = 19;
                            break bd;
                        case 2531:
                            if (!jl_String_equals($expression, $rt_s(277)))
                                break bd;
                            $listLength = 16;
                            break bd;
                        case 64951:
                            if (!jl_String_equals($expression, $rt_s(278)))
                                break bd;
                            $listLength = 0;
                            break bd;
                        case 77491:
                            if (!jl_String_equals($expression, $rt_s(279)))
                                break bd;
                            $listLength = 14;
                            break bd;
                        case 2044650:
                            if (!jl_String_equals($expression, $rt_s(280)))
                                break bd;
                            $listLength = 1;
                            break bd;
                        case 2061119:
                            if (!jl_String_equals($expression, $rt_s(281)))
                                break bd;
                            $listLength = 2;
                            break bd;
                        case 2336926:
                            if (!jl_String_equals($expression, $rt_s(282)))
                                break bd;
                            $listLength = 23;
                            break bd;
                        case 2459034:
                            if (!jl_String_equals($expression, $rt_s(283)))
                                break bd;
                            $listLength = 17;
                            break bd;
                        case 66219796:
                            if (!jl_String_equals($expression, $rt_s(284)))
                                break bd;
                            $listLength = 4;
                            break bd;
                        case 66988604:
                            if (!jl_String_equals($expression, $rt_s(180)))
                                break bd;
                            $listLength = 6;
                            break bd;
                        case 73363536:
                            if (!jl_String_equals($expression, $rt_s(285)))
                                break bd;
                            $listLength = 12;
                            break bd;
                        case 360410235:
                            if (!jl_String_equals($expression, $rt_s(286)))
                                break bd;
                            $listLength = 8;
                            break bd;
                        case 899970467:
                            if (!jl_String_equals($expression, $rt_s(287)))
                                break bd;
                            $listLength = 22;
                            break bd;
                        case 972152550:
                            if (!jl_String_equals($expression, $rt_s(288)))
                                break bd;
                            $listLength = 7;
                            break bd;
                        case 1022422664:
                            if (!jl_String_equals($expression, $rt_s(289)))
                                break bd;
                            $listLength = 15;
                            break bd;
                        case 1436456484:
                            if (!jl_String_equals($expression, $rt_s(290)))
                                break bd;
                            $listLength = 13;
                            break bd;
                        case 1871384510:
                            if (!jl_String_equals($expression, $rt_s(291)))
                                break bd;
                            $listLength = 21;
                            break bd;
                        case 2016833657:
                            if (!jl_String_equals($expression, $rt_s(292)))
                                break bd;
                            $listLength = 3;
                            break bd;
                        default:
                    }
                }
                be: {
                    ba: {
                        bf: {
                            switch ($listLength) {
                                case 0:
                                    $result = tj_Interpreter_performComparision($this, $comparison, $total, $compVal);
                                    if ($result === null)
                                        break x;
                                    if (!jl_Boolean_booleanValue(tj_JavaishBoolean_getValue($result)))
                                        return tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    $total = null;
                                    $operation = null;
                                    $comparison = null;
                                    $compVal = null;
                                    $isComp = 0;
                                    continue x;
                                case 1:
                                    $bool = $elmt;
                                    $valB = tj_JavaishBoolean__init_(jl_Boolean_valueOf(tj_BoolElmt_getValue($bool)));
                                    if (!$isComp) {
                                        $total = tj_Interpreter_performOperation($this, $operation, $total, $valB);
                                        continue x;
                                    }
                                    $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $valB);
                                    continue x;
                                case 2:
                                    $cast = $elmt;
                                    $expression = $cast.$element;
                                    $ptr = 1;
                                    continue main;
                                case 3:
                                    tj_Interpreter$Operator_$callClinit();
                                    $operation = tj_Interpreter$Operator_DIVIDE;
                                    continue x;
                                case 4:
                                    tj_Interpreter$Operator_$callClinit();
                                    $comparison = tj_Interpreter$Operator_EQUAL;
                                    $isComp = 1;
                                    continue x;
                                case 5:
                                    $expression = $elmt.$expression;
                                    $ptr = 2;
                                    continue main;
                                case 6:
                                    $floatElmt = $elmt;
                                    $valF = tj_JavaishFloat__init_(tj_FloatElmt_getValue($floatElmt));
                                    if (!$isComp) {
                                        $total = tj_Interpreter_performOperation($this, $operation, $total, $valF);
                                        continue x;
                                    }
                                    $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $valF);
                                    continue x;
                                case 7:
                                    tj_Interpreter$Operator_$callClinit();
                                    $comparison = tj_Interpreter$Operator_GREATER_THAN;
                                    $isComp = 1;
                                    continue x;
                                case 8:
                                    tj_Interpreter$Operator_$callClinit();
                                    $comparison = tj_Interpreter$Operator_GREATER_THAN_EQUAL;
                                    $isComp = 1;
                                    continue x;
                                case 9:
                                    $integer = $elmt;
                                    $valI = tj_JavaishInt__init_(tj_IntElmt_getValue($integer));
                                    if (!$isComp) {
                                        $total = tj_Interpreter_performOperation($this, $operation, $total, $valI);
                                        continue x;
                                    }
                                    $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $valI);
                                    continue x;
                                case 10:
                                    tj_Interpreter$Operator_$callClinit();
                                    $comparison = tj_Interpreter$Operator_LESS_THAN;
                                    $isComp = 1;
                                    continue x;
                                case 11:
                                    tj_Interpreter$Operator_$callClinit();
                                    $comparison = tj_Interpreter$Operator_LESS_THAN_EQUAL;
                                    $isComp = 1;
                                    continue x;
                                case 12:
                                    tj_Interpreter$Operator_$callClinit();
                                    $operation = tj_Interpreter$Operator_MINUS;
                                    continue x;
                                case 13:
                                    tj_Interpreter$Operator_$callClinit();
                                    $operation = tj_Interpreter$Operator_MULTIPLY;
                                    continue x;
                                case 14:
                                    $expression = $elmt.$expression0;
                                    $ptr = 3;
                                    continue main;
                                case 15:
                                    tj_Interpreter$Operator_$callClinit();
                                    $comparison = tj_Interpreter$Operator_NOT_EQUAL;
                                    $isComp = 1;
                                    continue x;
                                case 16:
                                    break bf;
                                case 17:
                                    tj_Interpreter$Operator_$callClinit();
                                    $operation = tj_Interpreter$Operator_PLUS;
                                    continue x;
                                case 18:
                                    $string = $elmt;
                                    $valS = tj_JavaishString__init_(tj_StringElmt_getValue($string));
                                    if (!$isComp) {
                                        $total = tj_Interpreter_performOperation($this, $operation, $total, $valS);
                                        continue x;
                                    }
                                    $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $valS);
                                    continue x;
                                case 19:
                                    break ba;
                                case 20:
                                    $function = $elmt;
                                    $body = tj_Variables_getFunctionBody($this.$globalVariables, tj_FunctionElmt_getName($function));
                                    $args = tj_Variables_getFunctionArgs($this.$globalVariables, tj_FunctionElmt_getName($function));
                                    $params = (tj_FunctionElmt_getParams($function)).data;
                                    $paramVals = ju_ArrayList__init_();
                                    $listLength = $params.length;
                                    var$29 = 0;
                                    if (var$29 < $listLength) {
                                        $param = $params[var$29];
                                        $ptr = 7;
                                        continue main;
                                    }
                                    $paramValsArr = ju_AbstractCollection_toArray($paramVals, $rt_createArray(tj_JavaishVal, ju_ArrayList_size($paramVals)));
                                    $expression = tj_FunctionElmt_getName($function);
                                    $listLength = 0;
                                    $ptr = 6;
                                    continue main;
                                case 21:
                                    $showInputBox = $elmt;
                                    $ptr = 4;
                                    continue main;
                                case 22:
                                    $listVal = $elmt;
                                    $expression = tj_ListValElmt_getIndex($listVal);
                                    continue main;
                                case 23:
                                    break be;
                                case 24:
                                    $arrayName = tj_ArrayLengthElmt_getArrayName($elmt);
                                    if (tj_Variables_isVariable($localVariables, $arrayName))
                                        $expression = tj_Variables_getVariableValue($localVariables, $arrayName);
                                    else {
                                        if (!tj_Variables_isVariable($this.$globalVariables, $arrayName)) {
                                            tj_Error_VariableNotDeclared($arrayName, $this.$lineNumber);
                                            return null;
                                        }
                                        $expression = tj_Variables_getVariableValue($this.$globalVariables, $arrayName);
                                    }
                                    if (!($expression instanceof tj_JavaishListVal)) {
                                        tj_Error_TypeMismatch($rt_s(293), $expression.$typeString(), $this.$lineNumber);
                                        return null;
                                    }
                                    $listL = tj_JavaishListVal_getValue($expression);
                                    $length = tj_JavaishInt__init_($listL.$getLength());
                                    if (!$isComp)
                                        $total = tj_Interpreter_performOperation($this, $operation, $total, $length);
                                    else
                                        $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $length);
                                    continue x;
                                default:
                            }
                            continue x;
                        }
                        $resultO = tj_Interpreter_performComparision($this, $comparison, $total, $compVal);
                        if ($resultO === null)
                            return null;
                        if (jl_Boolean_booleanValue(tj_JavaishBoolean_getValue($resultO)) == 1)
                            return tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                        $total = null;
                        $operation = null;
                        $compVal = null;
                        $isComp = 0;
                        continue x;
                    }
                    $variable = $elmt;
                    if (tj_Variables_isVariable($localVariables, tj_VariableElmt_getName($variable)))
                        $expression = tj_Variables_getVariableValue($localVariables, tj_VariableElmt_getName($variable));
                    else {
                        if (!tj_Variables_isVariable($this.$globalVariables, tj_VariableElmt_getName($variable))) {
                            tj_Error_VariableNotDeclared(tj_VariableElmt_getName($variable), $this.$lineNumber);
                            return null;
                        }
                        $expression = tj_Variables_getVariableValue($this.$globalVariables, tj_VariableElmt_getName($variable));
                    }
                    if (!$isComp) {
                        $total = tj_Interpreter_performOperation($this, $operation, $total, $expression);
                        continue x;
                    }
                    $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $expression);
                    continue x;
                }
                $list = $elmt;
                $type = tj_ListElmt_getListType($list);
                $listExpressions = tj_ListElmt_getList($list);
                $listVals = ju_ArrayList__init_();
                $val = ju_AbstractList_iterator($listExpressions);
                if (ju_AbstractList$1_hasNext($val)) {
                    $listExpression = ju_AbstractList$1_next($val);
                    $ptr = 8;
                    continue main;
                }
                bg: {
                    $expression = jl_Enum_toString($type);
                    $listLength = (-1);
                    switch (jl_String_hashCode($expression)) {
                        case -1618721555:
                            if (!jl_String_equals($expression, $rt_s(75)))
                                break bg;
                            $listLength = 0;
                            break bg;
                        case -1087271889:
                            if (!jl_String_equals($expression, $rt_s(77)))
                                break bg;
                            $listLength = 2;
                            break bg;
                        case 318725286:
                            if (!jl_String_equals($expression, $rt_s(78)))
                                break bg;
                            $listLength = 3;
                            break bg;
                        case 675960026:
                            if (!jl_String_equals($expression, $rt_s(76)))
                                break bg;
                            $listLength = 1;
                            break bg;
                        default:
                    }
                }
                bh: {
                    switch ($listLength) {
                        case 0:
                            $intList = ju_ArrayList__init_();
                            $expression = ju_AbstractList_iterator($listVals);
                            while (ju_AbstractList$1_hasNext($expression)) {
                                $listValI = ju_AbstractList$1_next($expression);
                                if (!($listValI instanceof tj_JavaishInt)) {
                                    tj_Error_TypeMismatch($rt_s(187), $listValI.$typeString(), $this.$lineNumber);
                                    return null;
                                }
                                ju_ArrayList_add($intList, $listValI);
                            }
                            $intListVal = tj_JavaishIntList__init_($intList);
                            if (!$isComp) {
                                if ($operation === null) {
                                    $total = tj_JavaishListVal__init_($intListVal);
                                    break bh;
                                }
                                tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(191), $this.$lineNumber);
                                break bh;
                            }
                            if ($operation === null) {
                                $compVal = tj_JavaishListVal__init_($intListVal);
                                break bh;
                            }
                            tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(191), $this.$lineNumber);
                            break bh;
                        case 1:
                            $floatList = ju_ArrayList__init_();
                            $expression = ju_AbstractList_iterator($listVals);
                            while (ju_AbstractList$1_hasNext($expression)) {
                                $listValI = ju_AbstractList$1_next($expression);
                                if (!($listValI instanceof tj_JavaishFloat)) {
                                    tj_Error_TypeMismatch($rt_s(184), $listValI.$typeString(), $this.$lineNumber);
                                    return null;
                                }
                                ju_ArrayList_add($floatList, $listValI);
                            }
                            $floatListVal = tj_JavaishFloatList__init_($floatList);
                            if (!$isComp) {
                                if ($operation === null) {
                                    $total = tj_JavaishListVal__init_($floatListVal);
                                    break bh;
                                }
                                tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(188), $this.$lineNumber);
                                break bh;
                            }
                            if ($operation === null) {
                                $compVal = tj_JavaishListVal__init_($floatListVal);
                                break bh;
                            }
                            tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(188), $this.$lineNumber);
                            break bh;
                        case 2:
                            $stringList = ju_ArrayList__init_();
                            $val = ju_AbstractList_iterator($listVals);
                            while (ju_AbstractList$1_hasNext($val)) {
                                $listValI = ju_AbstractList$1_next($val);
                                if (!($listValI instanceof tj_JavaishString)) {
                                    tj_Error_TypeMismatch($rt_s(186), $listValI.$typeString(), $this.$lineNumber);
                                    return null;
                                }
                                ju_ArrayList_add($stringList, $listValI);
                            }
                            $stringListVal = tj_JavaishStringList__init_($stringList);
                            if (!$isComp) {
                                if ($operation === null) {
                                    $total = tj_JavaishListVal__init_($stringListVal);
                                    break bh;
                                }
                                tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(190), $this.$lineNumber);
                                break bh;
                            }
                            if ($operation === null) {
                                $compVal = tj_JavaishListVal__init_($stringListVal);
                                break bh;
                            }
                            tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(190), $this.$lineNumber);
                            break bh;
                        case 3:
                            $booleanList = ju_ArrayList__init_();
                            $expression = ju_AbstractList_iterator($listVals);
                            while (ju_AbstractList$1_hasNext($expression)) {
                                $listValI = ju_AbstractList$1_next($expression);
                                if (!($listValI instanceof tj_JavaishBoolean)) {
                                    tj_Error_TypeMismatch($rt_s(185), $listValI.$typeString(), $this.$lineNumber);
                                    return null;
                                }
                                ju_ArrayList_add($booleanList, $listValI);
                            }
                            $booleanListVal = tj_JavaishBooleanList__init_($booleanList);
                            if (!$isComp) {
                                if ($operation === null) {
                                    $total = tj_JavaishListVal__init_($booleanListVal);
                                    break bh;
                                }
                                tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(189), $this.$lineNumber);
                                break bh;
                            }
                            if ($operation === null) {
                                $compVal = tj_JavaishListVal__init_($booleanListVal);
                                break bh;
                            }
                            tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(189), $this.$lineNumber);
                            break bh;
                        default:
                    }
                }
            }
            return null;
        case 6:
            $tmp = tj_Interpreter_interpretFunction($this, $body, $args, $paramValsArr, $expression, $listLength);
            if ($rt_suspending()) {
                break main;
            }
            $valFunc = $tmp;
            if (!$isComp)
                $total = tj_Interpreter_performOperation($this, $operation, $total, $valFunc);
            else
                $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $valFunc);
            q: while (true) {
                var$11 = var$11 + 1 | 0;
                if (var$11 >= var$10) {
                    if (!$isComp)
                        return $total;
                    return tj_Interpreter_performComparision($this, $comparison, $total, $compVal);
                }
                r: {
                    $elmt = var$9[var$11];
                    $expression = tj_Element_getTypeS($elmt);
                    $listLength = (-1);
                    switch (jl_String_hashCode($expression)) {
                        case -2131401768:
                            if (!jl_String_equals($expression, $rt_s(82)))
                                break r;
                            $listLength = 20;
                            break r;
                        case -1838656495:
                            if (!jl_String_equals($expression, $rt_s(178)))
                                break r;
                            $listLength = 18;
                            break r;
                        case -1618932450:
                            if (!jl_String_equals($expression, $rt_s(271)))
                                break r;
                            $listLength = 9;
                            break r;
                        case -1583968932:
                            if (!jl_String_equals($expression, $rt_s(272)))
                                break r;
                            $listLength = 11;
                            break r;
                        case -1310359912:
                            if (!jl_String_equals($expression, $rt_s(273)))
                                break r;
                            $listLength = 5;
                            break r;
                        case -1112834937:
                            if (!jl_String_equals($expression, $rt_s(274)))
                                break r;
                            $listLength = 10;
                            break r;
                        case -715433377:
                            if (!jl_String_equals($expression, $rt_s(275)))
                                break r;
                            $listLength = 24;
                            break r;
                        case -466959748:
                            if (!jl_String_equals($expression, $rt_s(276)))
                                break r;
                            $listLength = 19;
                            break r;
                        case 2531:
                            if (!jl_String_equals($expression, $rt_s(277)))
                                break r;
                            $listLength = 16;
                            break r;
                        case 64951:
                            if (!jl_String_equals($expression, $rt_s(278)))
                                break r;
                            $listLength = 0;
                            break r;
                        case 77491:
                            if (!jl_String_equals($expression, $rt_s(279)))
                                break r;
                            $listLength = 14;
                            break r;
                        case 2044650:
                            if (!jl_String_equals($expression, $rt_s(280)))
                                break r;
                            $listLength = 1;
                            break r;
                        case 2061119:
                            if (!jl_String_equals($expression, $rt_s(281)))
                                break r;
                            $listLength = 2;
                            break r;
                        case 2336926:
                            if (!jl_String_equals($expression, $rt_s(282)))
                                break r;
                            $listLength = 23;
                            break r;
                        case 2459034:
                            if (!jl_String_equals($expression, $rt_s(283)))
                                break r;
                            $listLength = 17;
                            break r;
                        case 66219796:
                            if (!jl_String_equals($expression, $rt_s(284)))
                                break r;
                            $listLength = 4;
                            break r;
                        case 66988604:
                            if (!jl_String_equals($expression, $rt_s(180)))
                                break r;
                            $listLength = 6;
                            break r;
                        case 73363536:
                            if (!jl_String_equals($expression, $rt_s(285)))
                                break r;
                            $listLength = 12;
                            break r;
                        case 360410235:
                            if (!jl_String_equals($expression, $rt_s(286)))
                                break r;
                            $listLength = 8;
                            break r;
                        case 899970467:
                            if (!jl_String_equals($expression, $rt_s(287)))
                                break r;
                            $listLength = 22;
                            break r;
                        case 972152550:
                            if (!jl_String_equals($expression, $rt_s(288)))
                                break r;
                            $listLength = 7;
                            break r;
                        case 1022422664:
                            if (!jl_String_equals($expression, $rt_s(289)))
                                break r;
                            $listLength = 15;
                            break r;
                        case 1436456484:
                            if (!jl_String_equals($expression, $rt_s(290)))
                                break r;
                            $listLength = 13;
                            break r;
                        case 1871384510:
                            if (!jl_String_equals($expression, $rt_s(291)))
                                break r;
                            $listLength = 21;
                            break r;
                        case 2016833657:
                            if (!jl_String_equals($expression, $rt_s(292)))
                                break r;
                            $listLength = 3;
                            break r;
                        default:
                    }
                }
                s: {
                    f: {
                        t: {
                            switch ($listLength) {
                                case 0:
                                    $result = tj_Interpreter_performComparision($this, $comparison, $total, $compVal);
                                    if ($result === null)
                                        break q;
                                    if (!jl_Boolean_booleanValue(tj_JavaishBoolean_getValue($result)))
                                        return tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    $total = null;
                                    $operation = null;
                                    $comparison = null;
                                    $compVal = null;
                                    $isComp = 0;
                                    continue q;
                                case 1:
                                    $bool = $elmt;
                                    $valB = tj_JavaishBoolean__init_(jl_Boolean_valueOf(tj_BoolElmt_getValue($bool)));
                                    if (!$isComp) {
                                        $total = tj_Interpreter_performOperation($this, $operation, $total, $valB);
                                        continue q;
                                    }
                                    $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $valB);
                                    continue q;
                                case 2:
                                    $cast = $elmt;
                                    $expression = $cast.$element;
                                    $ptr = 1;
                                    continue main;
                                case 3:
                                    tj_Interpreter$Operator_$callClinit();
                                    $operation = tj_Interpreter$Operator_DIVIDE;
                                    continue q;
                                case 4:
                                    tj_Interpreter$Operator_$callClinit();
                                    $comparison = tj_Interpreter$Operator_EQUAL;
                                    $isComp = 1;
                                    continue q;
                                case 5:
                                    $expression = $elmt.$expression;
                                    $ptr = 2;
                                    continue main;
                                case 6:
                                    $floatElmt = $elmt;
                                    $valF = tj_JavaishFloat__init_(tj_FloatElmt_getValue($floatElmt));
                                    if (!$isComp) {
                                        $total = tj_Interpreter_performOperation($this, $operation, $total, $valF);
                                        continue q;
                                    }
                                    $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $valF);
                                    continue q;
                                case 7:
                                    tj_Interpreter$Operator_$callClinit();
                                    $comparison = tj_Interpreter$Operator_GREATER_THAN;
                                    $isComp = 1;
                                    continue q;
                                case 8:
                                    tj_Interpreter$Operator_$callClinit();
                                    $comparison = tj_Interpreter$Operator_GREATER_THAN_EQUAL;
                                    $isComp = 1;
                                    continue q;
                                case 9:
                                    $integer = $elmt;
                                    $valI = tj_JavaishInt__init_(tj_IntElmt_getValue($integer));
                                    if (!$isComp) {
                                        $total = tj_Interpreter_performOperation($this, $operation, $total, $valI);
                                        continue q;
                                    }
                                    $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $valI);
                                    continue q;
                                case 10:
                                    tj_Interpreter$Operator_$callClinit();
                                    $comparison = tj_Interpreter$Operator_LESS_THAN;
                                    $isComp = 1;
                                    continue q;
                                case 11:
                                    tj_Interpreter$Operator_$callClinit();
                                    $comparison = tj_Interpreter$Operator_LESS_THAN_EQUAL;
                                    $isComp = 1;
                                    continue q;
                                case 12:
                                    tj_Interpreter$Operator_$callClinit();
                                    $operation = tj_Interpreter$Operator_MINUS;
                                    continue q;
                                case 13:
                                    tj_Interpreter$Operator_$callClinit();
                                    $operation = tj_Interpreter$Operator_MULTIPLY;
                                    continue q;
                                case 14:
                                    $expression = $elmt.$expression0;
                                    $ptr = 3;
                                    continue main;
                                case 15:
                                    tj_Interpreter$Operator_$callClinit();
                                    $comparison = tj_Interpreter$Operator_NOT_EQUAL;
                                    $isComp = 1;
                                    continue q;
                                case 16:
                                    break t;
                                case 17:
                                    tj_Interpreter$Operator_$callClinit();
                                    $operation = tj_Interpreter$Operator_PLUS;
                                    continue q;
                                case 18:
                                    $string = $elmt;
                                    $valS = tj_JavaishString__init_(tj_StringElmt_getValue($string));
                                    if (!$isComp) {
                                        $total = tj_Interpreter_performOperation($this, $operation, $total, $valS);
                                        continue q;
                                    }
                                    $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $valS);
                                    continue q;
                                case 19:
                                    break f;
                                case 20:
                                    $function = $elmt;
                                    $body = tj_Variables_getFunctionBody($this.$globalVariables, tj_FunctionElmt_getName($function));
                                    $args = tj_Variables_getFunctionArgs($this.$globalVariables, tj_FunctionElmt_getName($function));
                                    $params = (tj_FunctionElmt_getParams($function)).data;
                                    $paramVals = ju_ArrayList__init_();
                                    $listLength = $params.length;
                                    var$29 = 0;
                                    if (var$29 < $listLength) {
                                        $param = $params[var$29];
                                        $ptr = 7;
                                        continue main;
                                    }
                                    $paramValsArr = ju_AbstractCollection_toArray($paramVals, $rt_createArray(tj_JavaishVal, ju_ArrayList_size($paramVals)));
                                    $expression = tj_FunctionElmt_getName($function);
                                    $listLength = 0;
                                    continue main;
                                case 21:
                                    $showInputBox = $elmt;
                                    $ptr = 4;
                                    continue main;
                                case 22:
                                    $listVal = $elmt;
                                    $expression = tj_ListValElmt_getIndex($listVal);
                                    $ptr = 5;
                                    continue main;
                                case 23:
                                    break s;
                                case 24:
                                    $arrayName = tj_ArrayLengthElmt_getArrayName($elmt);
                                    if (tj_Variables_isVariable($localVariables, $arrayName))
                                        $expression = tj_Variables_getVariableValue($localVariables, $arrayName);
                                    else {
                                        if (!tj_Variables_isVariable($this.$globalVariables, $arrayName)) {
                                            tj_Error_VariableNotDeclared($arrayName, $this.$lineNumber);
                                            return null;
                                        }
                                        $expression = tj_Variables_getVariableValue($this.$globalVariables, $arrayName);
                                    }
                                    if (!($expression instanceof tj_JavaishListVal)) {
                                        tj_Error_TypeMismatch($rt_s(293), $expression.$typeString(), $this.$lineNumber);
                                        return null;
                                    }
                                    $listL = tj_JavaishListVal_getValue($expression);
                                    $length = tj_JavaishInt__init_($listL.$getLength());
                                    if (!$isComp)
                                        $total = tj_Interpreter_performOperation($this, $operation, $total, $length);
                                    else
                                        $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $length);
                                    continue q;
                                default:
                            }
                            continue q;
                        }
                        $resultO = tj_Interpreter_performComparision($this, $comparison, $total, $compVal);
                        if ($resultO === null)
                            return null;
                        if (jl_Boolean_booleanValue(tj_JavaishBoolean_getValue($resultO)) == 1)
                            return tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                        $total = null;
                        $operation = null;
                        $compVal = null;
                        $isComp = 0;
                        continue q;
                    }
                    $variable = $elmt;
                    if (tj_Variables_isVariable($localVariables, tj_VariableElmt_getName($variable)))
                        $expression = tj_Variables_getVariableValue($localVariables, tj_VariableElmt_getName($variable));
                    else {
                        if (!tj_Variables_isVariable($this.$globalVariables, tj_VariableElmt_getName($variable))) {
                            tj_Error_VariableNotDeclared(tj_VariableElmt_getName($variable), $this.$lineNumber);
                            return null;
                        }
                        $expression = tj_Variables_getVariableValue($this.$globalVariables, tj_VariableElmt_getName($variable));
                    }
                    if (!$isComp) {
                        $total = tj_Interpreter_performOperation($this, $operation, $total, $expression);
                        continue q;
                    }
                    $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $expression);
                    continue q;
                }
                $list = $elmt;
                $type = tj_ListElmt_getListType($list);
                $listExpressions = tj_ListElmt_getList($list);
                $listVals = ju_ArrayList__init_();
                $val = ju_AbstractList_iterator($listExpressions);
                if (ju_AbstractList$1_hasNext($val)) {
                    $listExpression = ju_AbstractList$1_next($val);
                    $ptr = 8;
                    continue main;
                }
                u: {
                    $expression = jl_Enum_toString($type);
                    $listLength = (-1);
                    switch (jl_String_hashCode($expression)) {
                        case -1618721555:
                            if (!jl_String_equals($expression, $rt_s(75)))
                                break u;
                            $listLength = 0;
                            break u;
                        case -1087271889:
                            if (!jl_String_equals($expression, $rt_s(77)))
                                break u;
                            $listLength = 2;
                            break u;
                        case 318725286:
                            if (!jl_String_equals($expression, $rt_s(78)))
                                break u;
                            $listLength = 3;
                            break u;
                        case 675960026:
                            if (!jl_String_equals($expression, $rt_s(76)))
                                break u;
                            $listLength = 1;
                            break u;
                        default:
                    }
                }
                v: {
                    switch ($listLength) {
                        case 0:
                            $intList = ju_ArrayList__init_();
                            $expression = ju_AbstractList_iterator($listVals);
                            while (ju_AbstractList$1_hasNext($expression)) {
                                $listValI = ju_AbstractList$1_next($expression);
                                if (!($listValI instanceof tj_JavaishInt)) {
                                    tj_Error_TypeMismatch($rt_s(187), $listValI.$typeString(), $this.$lineNumber);
                                    return null;
                                }
                                ju_ArrayList_add($intList, $listValI);
                            }
                            $intListVal = tj_JavaishIntList__init_($intList);
                            if (!$isComp) {
                                if ($operation === null) {
                                    $total = tj_JavaishListVal__init_($intListVal);
                                    break v;
                                }
                                tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(191), $this.$lineNumber);
                                break v;
                            }
                            if ($operation === null) {
                                $compVal = tj_JavaishListVal__init_($intListVal);
                                break v;
                            }
                            tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(191), $this.$lineNumber);
                            break v;
                        case 1:
                            $floatList = ju_ArrayList__init_();
                            $expression = ju_AbstractList_iterator($listVals);
                            while (ju_AbstractList$1_hasNext($expression)) {
                                $listValI = ju_AbstractList$1_next($expression);
                                if (!($listValI instanceof tj_JavaishFloat)) {
                                    tj_Error_TypeMismatch($rt_s(184), $listValI.$typeString(), $this.$lineNumber);
                                    return null;
                                }
                                ju_ArrayList_add($floatList, $listValI);
                            }
                            $floatListVal = tj_JavaishFloatList__init_($floatList);
                            if (!$isComp) {
                                if ($operation === null) {
                                    $total = tj_JavaishListVal__init_($floatListVal);
                                    break v;
                                }
                                tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(188), $this.$lineNumber);
                                break v;
                            }
                            if ($operation === null) {
                                $compVal = tj_JavaishListVal__init_($floatListVal);
                                break v;
                            }
                            tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(188), $this.$lineNumber);
                            break v;
                        case 2:
                            $stringList = ju_ArrayList__init_();
                            $val = ju_AbstractList_iterator($listVals);
                            while (ju_AbstractList$1_hasNext($val)) {
                                $listValI = ju_AbstractList$1_next($val);
                                if (!($listValI instanceof tj_JavaishString)) {
                                    tj_Error_TypeMismatch($rt_s(186), $listValI.$typeString(), $this.$lineNumber);
                                    return null;
                                }
                                ju_ArrayList_add($stringList, $listValI);
                            }
                            $stringListVal = tj_JavaishStringList__init_($stringList);
                            if (!$isComp) {
                                if ($operation === null) {
                                    $total = tj_JavaishListVal__init_($stringListVal);
                                    break v;
                                }
                                tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(190), $this.$lineNumber);
                                break v;
                            }
                            if ($operation === null) {
                                $compVal = tj_JavaishListVal__init_($stringListVal);
                                break v;
                            }
                            tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(190), $this.$lineNumber);
                            break v;
                        case 3:
                            $booleanList = ju_ArrayList__init_();
                            $expression = ju_AbstractList_iterator($listVals);
                            while (ju_AbstractList$1_hasNext($expression)) {
                                $listValI = ju_AbstractList$1_next($expression);
                                if (!($listValI instanceof tj_JavaishBoolean)) {
                                    tj_Error_TypeMismatch($rt_s(185), $listValI.$typeString(), $this.$lineNumber);
                                    return null;
                                }
                                ju_ArrayList_add($booleanList, $listValI);
                            }
                            $booleanListVal = tj_JavaishBooleanList__init_($booleanList);
                            if (!$isComp) {
                                if ($operation === null) {
                                    $total = tj_JavaishListVal__init_($booleanListVal);
                                    break v;
                                }
                                tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(189), $this.$lineNumber);
                                break v;
                            }
                            if ($operation === null) {
                                $compVal = tj_JavaishListVal__init_($booleanListVal);
                                break v;
                            }
                            tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(189), $this.$lineNumber);
                            break v;
                        default:
                    }
                }
            }
            return null;
        case 7:
            $tmp = tj_Interpreter_evalExpression($this, $param, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            $expression = $tmp;
            ju_ArrayList_add($paramVals, $expression);
            var$29 = var$29 + 1 | 0;
            if (var$29 < $listLength) {
                $param = $params[var$29];
                continue main;
            }
            $paramValsArr = ju_AbstractCollection_toArray($paramVals, $rt_createArray(tj_JavaishVal, ju_ArrayList_size($paramVals)));
            $expression = tj_FunctionElmt_getName($function);
            $listLength = 0;
            $ptr = 6;
            continue main;
        case 8:
            $tmp = tj_Interpreter_evalExpression($this, $listExpression, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            $expression = $tmp;
            ju_ArrayList_add($listVals, $expression);
            a: while (true) {
                if (ju_AbstractList$1_hasNext($val)) {
                    $listExpression = ju_AbstractList$1_next($val);
                    continue main;
                }
                b: {
                    $expression = jl_Enum_toString($type);
                    $listLength = (-1);
                    switch (jl_String_hashCode($expression)) {
                        case -1618721555:
                            if (!jl_String_equals($expression, $rt_s(75)))
                                break b;
                            $listLength = 0;
                            break b;
                        case -1087271889:
                            if (!jl_String_equals($expression, $rt_s(77)))
                                break b;
                            $listLength = 2;
                            break b;
                        case 318725286:
                            if (!jl_String_equals($expression, $rt_s(78)))
                                break b;
                            $listLength = 3;
                            break b;
                        case 675960026:
                            if (!jl_String_equals($expression, $rt_s(76)))
                                break b;
                            $listLength = 1;
                            break b;
                        default:
                    }
                }
                bi: {
                    switch ($listLength) {
                        case 0:
                            $intList = ju_ArrayList__init_();
                            $expression = ju_AbstractList_iterator($listVals);
                            while (ju_AbstractList$1_hasNext($expression)) {
                                $listValI = ju_AbstractList$1_next($expression);
                                if (!($listValI instanceof tj_JavaishInt)) {
                                    tj_Error_TypeMismatch($rt_s(187), $listValI.$typeString(), $this.$lineNumber);
                                    return null;
                                }
                                ju_ArrayList_add($intList, $listValI);
                            }
                            $intListVal = tj_JavaishIntList__init_($intList);
                            if (!$isComp) {
                                if ($operation === null) {
                                    $total = tj_JavaishListVal__init_($intListVal);
                                    break bi;
                                }
                                tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(191), $this.$lineNumber);
                                break bi;
                            }
                            if ($operation === null) {
                                $compVal = tj_JavaishListVal__init_($intListVal);
                                break bi;
                            }
                            tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(191), $this.$lineNumber);
                            break bi;
                        case 1:
                            $floatList = ju_ArrayList__init_();
                            $expression = ju_AbstractList_iterator($listVals);
                            while (ju_AbstractList$1_hasNext($expression)) {
                                $listValI = ju_AbstractList$1_next($expression);
                                if (!($listValI instanceof tj_JavaishFloat)) {
                                    tj_Error_TypeMismatch($rt_s(184), $listValI.$typeString(), $this.$lineNumber);
                                    return null;
                                }
                                ju_ArrayList_add($floatList, $listValI);
                            }
                            $floatListVal = tj_JavaishFloatList__init_($floatList);
                            if (!$isComp) {
                                if ($operation === null) {
                                    $total = tj_JavaishListVal__init_($floatListVal);
                                    break bi;
                                }
                                tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(188), $this.$lineNumber);
                                break bi;
                            }
                            if ($operation === null) {
                                $compVal = tj_JavaishListVal__init_($floatListVal);
                                break bi;
                            }
                            tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(188), $this.$lineNumber);
                            break bi;
                        case 2:
                            $stringList = ju_ArrayList__init_();
                            $val = ju_AbstractList_iterator($listVals);
                            while (ju_AbstractList$1_hasNext($val)) {
                                $listValI = ju_AbstractList$1_next($val);
                                if (!($listValI instanceof tj_JavaishString)) {
                                    tj_Error_TypeMismatch($rt_s(186), $listValI.$typeString(), $this.$lineNumber);
                                    return null;
                                }
                                ju_ArrayList_add($stringList, $listValI);
                            }
                            $stringListVal = tj_JavaishStringList__init_($stringList);
                            if (!$isComp) {
                                if ($operation === null) {
                                    $total = tj_JavaishListVal__init_($stringListVal);
                                    break bi;
                                }
                                tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(190), $this.$lineNumber);
                                break bi;
                            }
                            if ($operation === null) {
                                $compVal = tj_JavaishListVal__init_($stringListVal);
                                break bi;
                            }
                            tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(190), $this.$lineNumber);
                            break bi;
                        case 3:
                            $booleanList = ju_ArrayList__init_();
                            $expression = ju_AbstractList_iterator($listVals);
                            while (ju_AbstractList$1_hasNext($expression)) {
                                $listValI = ju_AbstractList$1_next($expression);
                                if (!($listValI instanceof tj_JavaishBoolean)) {
                                    tj_Error_TypeMismatch($rt_s(185), $listValI.$typeString(), $this.$lineNumber);
                                    return null;
                                }
                                ju_ArrayList_add($booleanList, $listValI);
                            }
                            $booleanListVal = tj_JavaishBooleanList__init_($booleanList);
                            if (!$isComp) {
                                if ($operation === null) {
                                    $total = tj_JavaishListVal__init_($booleanListVal);
                                    break bi;
                                }
                                tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(189), $this.$lineNumber);
                                break bi;
                            }
                            if ($operation === null) {
                                $compVal = tj_JavaishListVal__init_($booleanListVal);
                                break bi;
                            }
                            tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(189), $this.$lineNumber);
                            break bi;
                        default:
                    }
                }
                bj: while (true) {
                    var$11 = var$11 + 1 | 0;
                    if (var$11 >= var$10) {
                        if (!$isComp)
                            return $total;
                        return tj_Interpreter_performComparision($this, $comparison, $total, $compVal);
                    }
                    bk: {
                        $elmt = var$9[var$11];
                        $expression = tj_Element_getTypeS($elmt);
                        $listLength = (-1);
                        switch (jl_String_hashCode($expression)) {
                            case -2131401768:
                                if (!jl_String_equals($expression, $rt_s(82)))
                                    break bk;
                                $listLength = 20;
                                break bk;
                            case -1838656495:
                                if (!jl_String_equals($expression, $rt_s(178)))
                                    break bk;
                                $listLength = 18;
                                break bk;
                            case -1618932450:
                                if (!jl_String_equals($expression, $rt_s(271)))
                                    break bk;
                                $listLength = 9;
                                break bk;
                            case -1583968932:
                                if (!jl_String_equals($expression, $rt_s(272)))
                                    break bk;
                                $listLength = 11;
                                break bk;
                            case -1310359912:
                                if (!jl_String_equals($expression, $rt_s(273)))
                                    break bk;
                                $listLength = 5;
                                break bk;
                            case -1112834937:
                                if (!jl_String_equals($expression, $rt_s(274)))
                                    break bk;
                                $listLength = 10;
                                break bk;
                            case -715433377:
                                if (!jl_String_equals($expression, $rt_s(275)))
                                    break bk;
                                $listLength = 24;
                                break bk;
                            case -466959748:
                                if (!jl_String_equals($expression, $rt_s(276)))
                                    break bk;
                                $listLength = 19;
                                break bk;
                            case 2531:
                                if (!jl_String_equals($expression, $rt_s(277)))
                                    break bk;
                                $listLength = 16;
                                break bk;
                            case 64951:
                                if (!jl_String_equals($expression, $rt_s(278)))
                                    break bk;
                                $listLength = 0;
                                break bk;
                            case 77491:
                                if (!jl_String_equals($expression, $rt_s(279)))
                                    break bk;
                                $listLength = 14;
                                break bk;
                            case 2044650:
                                if (!jl_String_equals($expression, $rt_s(280)))
                                    break bk;
                                $listLength = 1;
                                break bk;
                            case 2061119:
                                if (!jl_String_equals($expression, $rt_s(281)))
                                    break bk;
                                $listLength = 2;
                                break bk;
                            case 2336926:
                                if (!jl_String_equals($expression, $rt_s(282)))
                                    break bk;
                                $listLength = 23;
                                break bk;
                            case 2459034:
                                if (!jl_String_equals($expression, $rt_s(283)))
                                    break bk;
                                $listLength = 17;
                                break bk;
                            case 66219796:
                                if (!jl_String_equals($expression, $rt_s(284)))
                                    break bk;
                                $listLength = 4;
                                break bk;
                            case 66988604:
                                if (!jl_String_equals($expression, $rt_s(180)))
                                    break bk;
                                $listLength = 6;
                                break bk;
                            case 73363536:
                                if (!jl_String_equals($expression, $rt_s(285)))
                                    break bk;
                                $listLength = 12;
                                break bk;
                            case 360410235:
                                if (!jl_String_equals($expression, $rt_s(286)))
                                    break bk;
                                $listLength = 8;
                                break bk;
                            case 899970467:
                                if (!jl_String_equals($expression, $rt_s(287)))
                                    break bk;
                                $listLength = 22;
                                break bk;
                            case 972152550:
                                if (!jl_String_equals($expression, $rt_s(288)))
                                    break bk;
                                $listLength = 7;
                                break bk;
                            case 1022422664:
                                if (!jl_String_equals($expression, $rt_s(289)))
                                    break bk;
                                $listLength = 15;
                                break bk;
                            case 1436456484:
                                if (!jl_String_equals($expression, $rt_s(290)))
                                    break bk;
                                $listLength = 13;
                                break bk;
                            case 1871384510:
                                if (!jl_String_equals($expression, $rt_s(291)))
                                    break bk;
                                $listLength = 21;
                                break bk;
                            case 2016833657:
                                if (!jl_String_equals($expression, $rt_s(292)))
                                    break bk;
                                $listLength = 3;
                                break bk;
                            default:
                        }
                    }
                    bl: {
                        bm: {
                            switch ($listLength) {
                                case 0:
                                    $result = tj_Interpreter_performComparision($this, $comparison, $total, $compVal);
                                    if ($result === null)
                                        break a;
                                    if (!jl_Boolean_booleanValue(tj_JavaishBoolean_getValue($result)))
                                        return tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    $total = null;
                                    $operation = null;
                                    $comparison = null;
                                    $compVal = null;
                                    $isComp = 0;
                                    continue bj;
                                case 1:
                                    $bool = $elmt;
                                    $valB = tj_JavaishBoolean__init_(jl_Boolean_valueOf(tj_BoolElmt_getValue($bool)));
                                    if (!$isComp) {
                                        $total = tj_Interpreter_performOperation($this, $operation, $total, $valB);
                                        continue bj;
                                    }
                                    $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $valB);
                                    continue bj;
                                case 2:
                                    $cast = $elmt;
                                    $expression = $cast.$element;
                                    $ptr = 1;
                                    continue main;
                                case 3:
                                    tj_Interpreter$Operator_$callClinit();
                                    $operation = tj_Interpreter$Operator_DIVIDE;
                                    continue bj;
                                case 4:
                                    tj_Interpreter$Operator_$callClinit();
                                    $comparison = tj_Interpreter$Operator_EQUAL;
                                    $isComp = 1;
                                    continue bj;
                                case 5:
                                    $expression = $elmt.$expression;
                                    $ptr = 2;
                                    continue main;
                                case 6:
                                    $floatElmt = $elmt;
                                    $valF = tj_JavaishFloat__init_(tj_FloatElmt_getValue($floatElmt));
                                    if (!$isComp) {
                                        $total = tj_Interpreter_performOperation($this, $operation, $total, $valF);
                                        continue bj;
                                    }
                                    $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $valF);
                                    continue bj;
                                case 7:
                                    tj_Interpreter$Operator_$callClinit();
                                    $comparison = tj_Interpreter$Operator_GREATER_THAN;
                                    $isComp = 1;
                                    continue bj;
                                case 8:
                                    tj_Interpreter$Operator_$callClinit();
                                    $comparison = tj_Interpreter$Operator_GREATER_THAN_EQUAL;
                                    $isComp = 1;
                                    continue bj;
                                case 9:
                                    $integer = $elmt;
                                    $valI = tj_JavaishInt__init_(tj_IntElmt_getValue($integer));
                                    if (!$isComp) {
                                        $total = tj_Interpreter_performOperation($this, $operation, $total, $valI);
                                        continue bj;
                                    }
                                    $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $valI);
                                    continue bj;
                                case 10:
                                    tj_Interpreter$Operator_$callClinit();
                                    $comparison = tj_Interpreter$Operator_LESS_THAN;
                                    $isComp = 1;
                                    continue bj;
                                case 11:
                                    tj_Interpreter$Operator_$callClinit();
                                    $comparison = tj_Interpreter$Operator_LESS_THAN_EQUAL;
                                    $isComp = 1;
                                    continue bj;
                                case 12:
                                    tj_Interpreter$Operator_$callClinit();
                                    $operation = tj_Interpreter$Operator_MINUS;
                                    continue bj;
                                case 13:
                                    tj_Interpreter$Operator_$callClinit();
                                    $operation = tj_Interpreter$Operator_MULTIPLY;
                                    continue bj;
                                case 14:
                                    $expression = $elmt.$expression0;
                                    $ptr = 3;
                                    continue main;
                                case 15:
                                    tj_Interpreter$Operator_$callClinit();
                                    $comparison = tj_Interpreter$Operator_NOT_EQUAL;
                                    $isComp = 1;
                                    continue bj;
                                case 16:
                                    break bm;
                                case 17:
                                    tj_Interpreter$Operator_$callClinit();
                                    $operation = tj_Interpreter$Operator_PLUS;
                                    continue bj;
                                case 18:
                                    $string = $elmt;
                                    $valS = tj_JavaishString__init_(tj_StringElmt_getValue($string));
                                    if (!$isComp) {
                                        $total = tj_Interpreter_performOperation($this, $operation, $total, $valS);
                                        continue bj;
                                    }
                                    $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $valS);
                                    continue bj;
                                case 19:
                                    break bl;
                                case 20:
                                    $function = $elmt;
                                    $body = tj_Variables_getFunctionBody($this.$globalVariables, tj_FunctionElmt_getName($function));
                                    $args = tj_Variables_getFunctionArgs($this.$globalVariables, tj_FunctionElmt_getName($function));
                                    $params = (tj_FunctionElmt_getParams($function)).data;
                                    $paramVals = ju_ArrayList__init_();
                                    $listLength = $params.length;
                                    var$29 = 0;
                                    if (var$29 < $listLength) {
                                        $param = $params[var$29];
                                        $ptr = 7;
                                        continue main;
                                    }
                                    $paramValsArr = ju_AbstractCollection_toArray($paramVals, $rt_createArray(tj_JavaishVal, ju_ArrayList_size($paramVals)));
                                    $expression = tj_FunctionElmt_getName($function);
                                    $listLength = 0;
                                    $ptr = 6;
                                    continue main;
                                case 21:
                                    $showInputBox = $elmt;
                                    $ptr = 4;
                                    continue main;
                                case 22:
                                    $listVal = $elmt;
                                    $expression = tj_ListValElmt_getIndex($listVal);
                                    $ptr = 5;
                                    continue main;
                                case 23:
                                    break bj;
                                case 24:
                                    $arrayName = tj_ArrayLengthElmt_getArrayName($elmt);
                                    if (tj_Variables_isVariable($localVariables, $arrayName))
                                        $expression = tj_Variables_getVariableValue($localVariables, $arrayName);
                                    else {
                                        if (!tj_Variables_isVariable($this.$globalVariables, $arrayName)) {
                                            tj_Error_VariableNotDeclared($arrayName, $this.$lineNumber);
                                            return null;
                                        }
                                        $expression = tj_Variables_getVariableValue($this.$globalVariables, $arrayName);
                                    }
                                    if (!($expression instanceof tj_JavaishListVal)) {
                                        tj_Error_TypeMismatch($rt_s(293), $expression.$typeString(), $this.$lineNumber);
                                        return null;
                                    }
                                    $listL = tj_JavaishListVal_getValue($expression);
                                    $length = tj_JavaishInt__init_($listL.$getLength());
                                    if (!$isComp)
                                        $total = tj_Interpreter_performOperation($this, $operation, $total, $length);
                                    else
                                        $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $length);
                                    continue bj;
                                default:
                            }
                            continue bj;
                        }
                        $resultO = tj_Interpreter_performComparision($this, $comparison, $total, $compVal);
                        if ($resultO === null)
                            return null;
                        if (jl_Boolean_booleanValue(tj_JavaishBoolean_getValue($resultO)) == 1)
                            return tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                        $total = null;
                        $operation = null;
                        $compVal = null;
                        $isComp = 0;
                        continue bj;
                    }
                    $variable = $elmt;
                    if (tj_Variables_isVariable($localVariables, tj_VariableElmt_getName($variable)))
                        $expression = tj_Variables_getVariableValue($localVariables, tj_VariableElmt_getName($variable));
                    else {
                        if (!tj_Variables_isVariable($this.$globalVariables, tj_VariableElmt_getName($variable))) {
                            tj_Error_VariableNotDeclared(tj_VariableElmt_getName($variable), $this.$lineNumber);
                            return null;
                        }
                        $expression = tj_Variables_getVariableValue($this.$globalVariables, tj_VariableElmt_getName($variable));
                    }
                    if (!$isComp) {
                        $total = tj_Interpreter_performOperation($this, $operation, $total, $expression);
                        continue;
                    }
                    $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $expression);
                }
                $list = $elmt;
                $type = tj_ListElmt_getListType($list);
                $listExpressions = tj_ListElmt_getList($list);
                $listVals = ju_ArrayList__init_();
                $val = ju_AbstractList_iterator($listExpressions);
            }
            return null;
        default: $rt_invalidPointer();
        }}
        $rt_nativeThread().push($this, $expression, $localVariables, $isGlobal, $total, $operation, $comparison, $compVal, $isComp, var$9, var$10, var$11, $elmt, $listLength, $result, $bool, $valB, $cast, $floatElmt, $valF, $integer, $valI, $string, $valS, $function, $body, $args, $params, $paramVals, var$29, $param, $paramValsArr, $showInputBox, $listVal, $arrayName, $listL, $length, $resultO, $variable, $list, $type, $listExpressions, $listVals, $val, $listExpression, $intList, $listValI, $intListVal, $floatList,
        $floatListVal, $stringList, $stringListVal, $booleanList, $booleanListVal, $newVal, $valNot, $input, $index, $listValVal, $valFunc, $ptr);
    }
    function tj_Interpreter_performComparision($this, $comparison, $left, $right) {
        var $result, var$5, var$6;
        a: {
            $result = null;
            var$5 = jl_Enum_toString($comparison);
            var$6 = (-1);
            switch (jl_String_hashCode(var$5)) {
                case -1583968932:
                    if (!jl_String_equals(var$5, $rt_s(272)))
                        break a;
                    var$6 = 4;
                    break a;
                case -1112834937:
                    if (!jl_String_equals(var$5, $rt_s(274)))
                        break a;
                    var$6 = 2;
                    break a;
                case 66219796:
                    if (!jl_String_equals(var$5, $rt_s(284)))
                        break a;
                    var$6 = 0;
                    break a;
                case 360410235:
                    if (!jl_String_equals(var$5, $rt_s(286)))
                        break a;
                    var$6 = 5;
                    break a;
                case 972152550:
                    if (!jl_String_equals(var$5, $rt_s(288)))
                        break a;
                    var$6 = 3;
                    break a;
                case 1022422664:
                    if (!jl_String_equals(var$5, $rt_s(289)))
                        break a;
                    var$6 = 1;
                    break a;
                default:
            }
        }
        b: {
            switch (var$6) {
                case 0:
                    $comparison = $left.$getType0();
                    tj_JavaishVal$JavaishType_$callClinit();
                    if ($comparison === tj_JavaishVal$JavaishType_STRING && $right.$getType0() === tj_JavaishVal$JavaishType_STRING) {
                        if (!jl_String_equals(tj_JavaishString_getValue($left), tj_JavaishString_getValue($right))) {
                            $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                            break b;
                        }
                        $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                        break b;
                    }
                    if ($left.$getType0() !== tj_JavaishVal$JavaishType_STRING && $right.$getType0() !== tj_JavaishVal$JavaishType_STRING) {
                        if ($left.$getType0() === tj_JavaishVal$JavaishType_BOOLEAN && $right.$getType0() === tj_JavaishVal$JavaishType_BOOLEAN) {
                            if (tj_JavaishBoolean_getValue($left) !== tj_JavaishBoolean_getValue($right)) {
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                break b;
                            }
                            $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                            break b;
                        }
                        if ($left.$getType0() !== tj_JavaishVal$JavaishType_BOOLEAN && $right.$getType0() !== tj_JavaishVal$JavaishType_BOOLEAN) {
                            if ($left.$getType0() === tj_JavaishVal$JavaishType_INT && $right.$getType0() === tj_JavaishVal$JavaishType_INT) {
                                if (tj_JavaishInt_getValue($left) !== tj_JavaishInt_getValue($right)) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break b;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break b;
                            }
                            if ($left.$getType0() === tj_JavaishVal$JavaishType_INT && $right.$getType0() === tj_JavaishVal$JavaishType_FLOAT) {
                                if (jl_Integer_intValue(tj_JavaishInt_getValue($left)) !== jl_Float_floatValue(tj_JavaishFloat_getValue($right))) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break b;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break b;
                            }
                            if ($left.$getType0() === tj_JavaishVal$JavaishType_FLOAT && $right.$getType0() === tj_JavaishVal$JavaishType_INT) {
                                if (jl_Float_floatValue(tj_JavaishFloat_getValue($left)) !== jl_Integer_intValue(tj_JavaishInt_getValue($right))) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break b;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break b;
                            }
                            if (tj_JavaishFloat_getValue($left) !== tj_JavaishFloat_getValue($right)) {
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                break b;
                            }
                            $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                            break b;
                        }
                        tj_Error_TypeMismatch($rt_s(185), $rt_s(294), $this.$lineNumber);
                        return null;
                    }
                    tj_Error_TypeMismatch($rt_s(186), $rt_s(295), $this.$lineNumber);
                    return null;
                case 1:
                    $comparison = $left.$getType0();
                    tj_JavaishVal$JavaishType_$callClinit();
                    if ($comparison === tj_JavaishVal$JavaishType_STRING && $right.$getType0() === tj_JavaishVal$JavaishType_STRING) {
                        if (jl_String_equals(tj_JavaishString_getValue($left), tj_JavaishString_getValue($right))) {
                            $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                            break b;
                        }
                        $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                        break b;
                    }
                    if ($left.$getType0() !== tj_JavaishVal$JavaishType_STRING && $right.$getType0() !== tj_JavaishVal$JavaishType_STRING) {
                        if ($left.$getType0() === tj_JavaishVal$JavaishType_BOOLEAN && $right.$getType0() === tj_JavaishVal$JavaishType_BOOLEAN) {
                            if (tj_JavaishBoolean_getValue($left) === tj_JavaishBoolean_getValue($right)) {
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                break b;
                            }
                            $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                            break b;
                        }
                        if ($left.$getType0() !== tj_JavaishVal$JavaishType_BOOLEAN && $right.$getType0() !== tj_JavaishVal$JavaishType_BOOLEAN) {
                            if ($left.$getType0() === tj_JavaishVal$JavaishType_INT && $right.$getType0() === tj_JavaishVal$JavaishType_INT) {
                                if (tj_JavaishInt_getValue($left) === tj_JavaishInt_getValue($right)) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break b;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break b;
                            }
                            if ($left.$getType0() === tj_JavaishVal$JavaishType_INT && $right.$getType0() === tj_JavaishVal$JavaishType_FLOAT) {
                                if (jl_Integer_intValue(tj_JavaishInt_getValue($left)) === jl_Float_floatValue(tj_JavaishFloat_getValue($right))) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break b;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break b;
                            }
                            if ($left.$getType0() === tj_JavaishVal$JavaishType_FLOAT && $right.$getType0() === tj_JavaishVal$JavaishType_INT) {
                                if (jl_Float_floatValue(tj_JavaishFloat_getValue($left)) === jl_Integer_intValue(tj_JavaishInt_getValue($right))) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break b;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break b;
                            }
                            if (tj_JavaishFloat_getValue($left) === tj_JavaishFloat_getValue($right)) {
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                break b;
                            }
                            $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                            break b;
                        }
                        tj_Error_TypeMismatch($rt_s(185), $rt_s(294), $this.$lineNumber);
                        return null;
                    }
                    tj_Error_TypeMismatch($rt_s(186), $rt_s(295), $this.$lineNumber);
                    return null;
                case 2:
                    $comparison = $left.$getType0();
                    tj_JavaishVal$JavaishType_$callClinit();
                    if ($comparison !== tj_JavaishVal$JavaishType_STRING && $right.$getType0() !== tj_JavaishVal$JavaishType_STRING) {
                        if ($left.$getType0() !== tj_JavaishVal$JavaishType_BOOLEAN && $right.$getType0() !== tj_JavaishVal$JavaishType_BOOLEAN) {
                            if ($left.$getType0() === tj_JavaishVal$JavaishType_INT && $right.$getType0() === tj_JavaishVal$JavaishType_INT) {
                                if (jl_Integer_intValue(tj_JavaishInt_getValue($left)) >= jl_Integer_intValue(tj_JavaishInt_getValue($right))) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break b;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break b;
                            }
                            if ($left.$getType0() === tj_JavaishVal$JavaishType_INT && $right.$getType0() === tj_JavaishVal$JavaishType_FLOAT) {
                                if (jl_Integer_intValue(tj_JavaishInt_getValue($left)) >= jl_Float_floatValue(tj_JavaishFloat_getValue($right))) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break b;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break b;
                            }
                            if ($left.$getType0() === tj_JavaishVal$JavaishType_FLOAT && $right.$getType0() === tj_JavaishVal$JavaishType_INT) {
                                if (jl_Float_floatValue(tj_JavaishFloat_getValue($left)) >= jl_Integer_intValue(tj_JavaishInt_getValue($right))) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break b;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break b;
                            }
                            if (jl_Float_floatValue(tj_JavaishFloat_getValue($left)) >= jl_Float_floatValue(tj_JavaishFloat_getValue($right))) {
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                break b;
                            }
                            $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                            break b;
                        }
                        tj_Error_TypeMismatch($rt_s(296), $rt_s(185), $this.$lineNumber);
                        return null;
                    }
                    tj_Error_TypeMismatch($rt_s(296), $rt_s(186), $this.$lineNumber);
                    return null;
                case 3:
                    $comparison = $left.$getType0();
                    tj_JavaishVal$JavaishType_$callClinit();
                    if ($comparison !== tj_JavaishVal$JavaishType_STRING && $right.$getType0() !== tj_JavaishVal$JavaishType_STRING) {
                        if ($left.$getType0() !== tj_JavaishVal$JavaishType_BOOLEAN && $right.$getType0() !== tj_JavaishVal$JavaishType_BOOLEAN) {
                            if ($left.$getType0() === tj_JavaishVal$JavaishType_INT && $right.$getType0() === tj_JavaishVal$JavaishType_INT) {
                                if (jl_Integer_intValue(tj_JavaishInt_getValue($left)) <= jl_Integer_intValue(tj_JavaishInt_getValue($right))) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break b;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break b;
                            }
                            if ($left.$getType0() === tj_JavaishVal$JavaishType_INT && $right.$getType0() === tj_JavaishVal$JavaishType_FLOAT) {
                                if (jl_Integer_intValue(tj_JavaishInt_getValue($left)) <= jl_Float_floatValue(tj_JavaishFloat_getValue($right))) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break b;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break b;
                            }
                            if ($left.$getType0() === tj_JavaishVal$JavaishType_FLOAT && $right.$getType0() === tj_JavaishVal$JavaishType_INT) {
                                if (jl_Float_floatValue(tj_JavaishFloat_getValue($left)) <= jl_Integer_intValue(tj_JavaishInt_getValue($right))) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break b;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break b;
                            }
                            if (jl_Float_floatValue(tj_JavaishFloat_getValue($left)) <= jl_Float_floatValue(tj_JavaishFloat_getValue($right))) {
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                break b;
                            }
                            $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                            break b;
                        }
                        tj_Error_TypeMismatch($rt_s(296), $rt_s(185), $this.$lineNumber);
                        return null;
                    }
                    tj_Error_TypeMismatch($rt_s(296), $rt_s(186), $this.$lineNumber);
                    return null;
                case 4:
                    $comparison = $left.$getType0();
                    tj_JavaishVal$JavaishType_$callClinit();
                    if ($comparison !== tj_JavaishVal$JavaishType_STRING && $right.$getType0() !== tj_JavaishVal$JavaishType_STRING) {
                        if ($left.$getType0() !== tj_JavaishVal$JavaishType_BOOLEAN && $right.$getType0() !== tj_JavaishVal$JavaishType_BOOLEAN) {
                            if ($left.$getType0() === tj_JavaishVal$JavaishType_INT && $right.$getType0() === tj_JavaishVal$JavaishType_INT) {
                                if (jl_Integer_intValue(tj_JavaishInt_getValue($left)) > jl_Integer_intValue(tj_JavaishInt_getValue($right))) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break b;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break b;
                            }
                            if ($left.$getType0() === tj_JavaishVal$JavaishType_INT && $right.$getType0() === tj_JavaishVal$JavaishType_FLOAT) {
                                if (jl_Integer_intValue(tj_JavaishInt_getValue($left)) > jl_Float_floatValue(tj_JavaishFloat_getValue($right))) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break b;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break b;
                            }
                            if ($left.$getType0() === tj_JavaishVal$JavaishType_FLOAT && $right.$getType0() === tj_JavaishVal$JavaishType_INT) {
                                if (jl_Float_floatValue(tj_JavaishFloat_getValue($left)) > jl_Integer_intValue(tj_JavaishInt_getValue($right))) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break b;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break b;
                            }
                            if (jl_Float_floatValue(tj_JavaishFloat_getValue($left)) > jl_Float_floatValue(tj_JavaishFloat_getValue($right))) {
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                break b;
                            }
                            $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                            break b;
                        }
                        tj_Error_TypeMismatch($rt_s(296), $rt_s(185), $this.$lineNumber);
                        return null;
                    }
                    tj_Error_TypeMismatch($rt_s(296), $rt_s(186), $this.$lineNumber);
                    return null;
                case 5:
                    $comparison = $left.$getType0();
                    tj_JavaishVal$JavaishType_$callClinit();
                    if ($comparison !== tj_JavaishVal$JavaishType_STRING && $right.$getType0() !== tj_JavaishVal$JavaishType_STRING) {
                        if ($left.$getType0() !== tj_JavaishVal$JavaishType_BOOLEAN && $right.$getType0() !== tj_JavaishVal$JavaishType_BOOLEAN) {
                            if ($left.$getType0() === tj_JavaishVal$JavaishType_INT && $right.$getType0() === tj_JavaishVal$JavaishType_INT) {
                                if (jl_Integer_intValue(tj_JavaishInt_getValue($left)) < jl_Integer_intValue(tj_JavaishInt_getValue($right))) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break b;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break b;
                            }
                            if ($left.$getType0() === tj_JavaishVal$JavaishType_INT && $right.$getType0() === tj_JavaishVal$JavaishType_FLOAT) {
                                if (jl_Integer_intValue(tj_JavaishInt_getValue($left)) < jl_Float_floatValue(tj_JavaishFloat_getValue($right))) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break b;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break b;
                            }
                            if ($left.$getType0() === tj_JavaishVal$JavaishType_FLOAT && $right.$getType0() === tj_JavaishVal$JavaishType_INT) {
                                if (jl_Float_floatValue(tj_JavaishFloat_getValue($left)) < jl_Integer_intValue(tj_JavaishInt_getValue($right))) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break b;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break b;
                            }
                            if (jl_Float_floatValue(tj_JavaishFloat_getValue($left)) < jl_Float_floatValue(tj_JavaishFloat_getValue($right))) {
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                break b;
                            }
                            $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                            break b;
                        }
                        tj_Error_TypeMismatch($rt_s(296), $rt_s(185), $this.$lineNumber);
                        return null;
                    }
                    tj_Error_TypeMismatch($rt_s(296), $rt_s(186), $this.$lineNumber);
                    return null;
                default:
            }
        }
        return $result;
    }
    function tj_Interpreter_performOperation($this, $operation, $total, $val2) {
        var $result, var$5, var$6;
        $result = null;
        if ($operation === null)
            return $val2;
        a: {
            var$5 = jl_Enum_toString($operation);
            var$6 = (-1);
            switch (jl_String_hashCode(var$5)) {
                case 2459034:
                    if (!jl_String_equals(var$5, $rt_s(283)))
                        break a;
                    var$6 = 0;
                    break a;
                case 73363536:
                    if (!jl_String_equals(var$5, $rt_s(285)))
                        break a;
                    var$6 = 3;
                    break a;
                case 1436456484:
                    if (!jl_String_equals(var$5, $rt_s(290)))
                        break a;
                    var$6 = 1;
                    break a;
                case 2016833657:
                    if (!jl_String_equals(var$5, $rt_s(292)))
                        break a;
                    var$6 = 2;
                    break a;
                default:
            }
        }
        b: {
            switch (var$6) {
                case 0:
                    var$6 = $total instanceof tj_JavaishString;
                    if (var$6) {
                        if (!($val2 instanceof tj_JavaishString)) {
                            tj_Error_TypeMismatch($rt_s(186), $val2.$typeString(), $this.$lineNumber);
                            return null;
                        }
                        $result = new tj_JavaishString;
                        $operation = tj_JavaishString_getValue($total);
                        $total = tj_JavaishString_getValue($val2);
                        $val2 = jl_StringBuilder__init_();
                        jl_StringBuilder_append(jl_StringBuilder_append($val2, $operation), $total);
                        tj_JavaishString__init_0($result, jl_StringBuilder_toString($val2));
                        break b;
                    }
                    if ($val2 instanceof tj_JavaishString) {
                        if (!var$6) {
                            tj_Error_TypeMismatch($rt_s(186), $total.$typeString(), $this.$lineNumber);
                            return null;
                        }
                        $result = new tj_JavaishString;
                        $operation = tj_JavaishString_getValue($total);
                        $total = tj_JavaishString_getValue($val2);
                        $val2 = jl_StringBuilder__init_();
                        jl_StringBuilder_append(jl_StringBuilder_append($val2, $operation), $total);
                        tj_JavaishString__init_0($result, jl_StringBuilder_toString($val2));
                        break b;
                    }
                    if ($total instanceof tj_JavaishFloat) {
                        if (!($val2 instanceof tj_JavaishInt)) {
                            $result = tj_JavaishFloat__init_(jl_Float_floatValue(tj_JavaishFloat_getValue($total)) + jl_Float_floatValue(tj_JavaishFloat_getValue($val2)));
                            break b;
                        }
                        $result = tj_JavaishFloat__init_(jl_Float_floatValue(tj_JavaishFloat_getValue($total)) + jl_Integer_intValue(tj_JavaishInt_getValue($val2)));
                        break b;
                    }
                    if (!($val2 instanceof tj_JavaishFloat)) {
                        $result = tj_JavaishInt__init_(jl_Integer_intValue(tj_JavaishInt_getValue($total)) + jl_Integer_intValue(tj_JavaishInt_getValue($val2)) | 0);
                        break b;
                    }
                    if (!($total instanceof tj_JavaishInt)) {
                        $result = tj_JavaishFloat__init_(jl_Float_floatValue(tj_JavaishFloat_getValue($total)) + jl_Float_floatValue(tj_JavaishFloat_getValue($val2)));
                        break b;
                    }
                    $result = tj_JavaishFloat__init_(jl_Integer_intValue(tj_JavaishInt_getValue($total)) + jl_Float_floatValue(tj_JavaishFloat_getValue($val2)));
                    break b;
                case 1:
                    if (!($total instanceof tj_JavaishString) && !($val2 instanceof tj_JavaishString)) {
                        if ($total instanceof tj_JavaishFloat) {
                            if (!($val2 instanceof tj_JavaishInt)) {
                                $result = tj_JavaishFloat__init_(jl_Float_floatValue(tj_JavaishFloat_getValue($total)) * jl_Float_floatValue(tj_JavaishFloat_getValue($val2)));
                                break b;
                            }
                            $result = tj_JavaishFloat__init_(jl_Float_floatValue(tj_JavaishFloat_getValue($total)) * jl_Integer_intValue(tj_JavaishInt_getValue($val2)));
                            break b;
                        }
                        if (!($val2 instanceof tj_JavaishFloat)) {
                            $result = tj_JavaishInt__init_($rt_imul(jl_Integer_intValue(tj_JavaishInt_getValue($total)), jl_Integer_intValue(tj_JavaishInt_getValue($val2))));
                            break b;
                        }
                        if (!($total instanceof tj_JavaishInt)) {
                            $result = tj_JavaishFloat__init_(jl_Float_floatValue(tj_JavaishFloat_getValue($total)) * jl_Float_floatValue(tj_JavaishFloat_getValue($val2)));
                            break b;
                        }
                        $result = tj_JavaishFloat__init_(jl_Integer_intValue(tj_JavaishInt_getValue($total)) * jl_Float_floatValue(tj_JavaishFloat_getValue($val2)));
                        break b;
                    }
                    tj_Error_TypeMismatch($rt_s(296), $rt_s(186), $this.$lineNumber);
                    return null;
                case 2:
                    if (!($total instanceof tj_JavaishString) && !($val2 instanceof tj_JavaishString)) {
                        if ($total instanceof tj_JavaishFloat) {
                            if (!($val2 instanceof tj_JavaishInt)) {
                                $result = tj_JavaishFloat__init_(jl_Float_floatValue(tj_JavaishFloat_getValue($total)) / jl_Float_floatValue(tj_JavaishFloat_getValue($val2)));
                                break b;
                            }
                            $result = tj_JavaishFloat__init_(jl_Float_floatValue(tj_JavaishFloat_getValue($total)) / jl_Integer_intValue(tj_JavaishInt_getValue($val2)));
                            break b;
                        }
                        if (!($val2 instanceof tj_JavaishFloat)) {
                            $result = tj_JavaishInt__init_(jl_Integer_intValue(tj_JavaishInt_getValue($total)) / jl_Integer_intValue(tj_JavaishInt_getValue($val2)) | 0);
                            break b;
                        }
                        if (!($total instanceof tj_JavaishInt)) {
                            $result = tj_JavaishFloat__init_(jl_Float_floatValue(tj_JavaishFloat_getValue($total)) / jl_Float_floatValue(tj_JavaishFloat_getValue($val2)));
                            break b;
                        }
                        $result = tj_JavaishFloat__init_(jl_Integer_intValue(tj_JavaishInt_getValue($total)) / jl_Float_floatValue(tj_JavaishFloat_getValue($val2)));
                        break b;
                    }
                    tj_Error_TypeMismatch($rt_s(296), $rt_s(186), $this.$lineNumber);
                    return null;
                case 3:
                    if (!($total instanceof tj_JavaishString) && !($val2 instanceof tj_JavaishString)) {
                        if ($total instanceof tj_JavaishFloat) {
                            if (!($val2 instanceof tj_JavaishInt)) {
                                $result = tj_JavaishFloat__init_(jl_Float_floatValue(tj_JavaishFloat_getValue($total)) - jl_Float_floatValue(tj_JavaishFloat_getValue($val2)));
                                break b;
                            }
                            $result = tj_JavaishFloat__init_(jl_Float_floatValue(tj_JavaishFloat_getValue($total)) - jl_Integer_intValue(tj_JavaishInt_getValue($val2)));
                            break b;
                        }
                        if (!($val2 instanceof tj_JavaishFloat)) {
                            $result = tj_JavaishInt__init_(jl_Integer_intValue(tj_JavaishInt_getValue($total)) - jl_Integer_intValue(tj_JavaishInt_getValue($val2)) | 0);
                            break b;
                        }
                        if (!($total instanceof tj_JavaishInt)) {
                            $result = tj_JavaishFloat__init_(jl_Float_floatValue(tj_JavaishFloat_getValue($total)) - jl_Float_floatValue(tj_JavaishFloat_getValue($val2)));
                            break b;
                        }
                        $result = tj_JavaishFloat__init_(jl_Integer_intValue(tj_JavaishInt_getValue($total)) - jl_Float_floatValue(tj_JavaishFloat_getValue($val2)));
                        break b;
                    }
                    tj_Error_TypeMismatch($rt_s(296), $rt_s(186), $this.$lineNumber);
                    return null;
                default:
            }
        }
        return $result;
    }
    function tj_Interpreter_evalDeclaration($this, $declaration, $localVariables, $isGlobal) {
        var $type, $listVal, $list, var$7, $value, var$9, $ptr, $tmp;
        $ptr = 0;
        if ($rt_resuming()) {
            var $thread = $rt_nativeThread();
            $ptr = $thread.pop();var$9 = $thread.pop();$value = $thread.pop();var$7 = $thread.pop();$list = $thread.pop();$listVal = $thread.pop();$type = $thread.pop();$isGlobal = $thread.pop();$localVariables = $thread.pop();$declaration = $thread.pop();$this = $thread.pop();
        }
        main: while (true) { switch ($ptr) {
        case 0:
            $type = $declaration.$varType;
            $listVal = jl_System_out();
            $list = jl_String_valueOf($declaration.$varType);
            var$7 = $declaration.$name19;
            $value = jl_String_valueOf($declaration.$value20);
            var$9 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_(var$9);
            jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$9, $rt_s(297)), $list), $rt_s(298)), var$7), $rt_s(299)), $value);
            ji_PrintStream_println($listVal, jl_AbstractStringBuilder_toString(var$9));
            $value = $declaration.$value20;
            $ptr = 1;
        case 1:
            $tmp = tj_Interpreter_evalExpression($this, $value, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            $value = $tmp;
            if ($type === $value.$getType0()) {
                if (!$isGlobal) {
                    tj_JavaishVal$JavaishType_$callClinit();
                    if ($type !== tj_JavaishVal$JavaishType_LIST)
                        tj_Variables_addVariable($localVariables, $declaration.$name19, $type, $value, $this.$lineNumber);
                    else {
                        $listVal = $value.$getValue0();
                        tj_Variables_addList($localVariables, $declaration.$name19, $type, $listVal.$list, $this.$lineNumber);
                    }
                } else {
                    tj_JavaishVal$JavaishType_$callClinit();
                    if ($type !== tj_JavaishVal$JavaishType_LIST)
                        tj_Variables_addVariable($this.$globalVariables, $declaration.$name19, $type, $value, $this.$lineNumber);
                    else {
                        $listVal = $value.$getValue0();
                        tj_Variables_addList($this.$globalVariables, $declaration.$name19, $type, $listVal.$list, $this.$lineNumber);
                    }
                }
                return;
            }
            tj_JavaishVal$JavaishType_$callClinit();
            if ($type === tj_JavaishVal$JavaishType_FLOAT && $value.$getType0() === tj_JavaishVal$JavaishType_INT) {
                if (!$isGlobal)
                    tj_Variables_addVariable($localVariables, $declaration.$name19, $type, tj_JavaishFloat__init_((tj_JavaishInt_getValue($value)).$value), $this.$lineNumber);
                else
                    tj_Variables_addVariable($this.$globalVariables, $declaration.$name19, $type, tj_JavaishFloat__init_((tj_JavaishInt_getValue($value)).$value), $this.$lineNumber);
                return;
            }
            if ($value.$getType0() === tj_JavaishVal$JavaishType_LIST) {
                $list = $value.$list;
                if ($list.$getType0() === $type) {
                    if (!$isGlobal)
                        tj_Variables_addList($localVariables, $declaration.$name19, $type, $list, $this.$lineNumber);
                    else
                        tj_Variables_addList($this.$globalVariables, $declaration.$name19, $type, $list, $this.$lineNumber);
                    return;
                }
            }
            tj_Error_TypeMismatch($type.$name4, $value.$typeString(), $this.$lineNumber);
            return;
        default: $rt_invalidPointer();
        }}
        $rt_nativeThread().push($this, $declaration, $localVariables, $isGlobal, $type, $listVal, $list, var$7, $value, var$9, $ptr);
    }
    function tj_Interpreter_evalPrint($this, $printStmt, $localVariables, $isGlobal) {
        var $expression, $value, $message, $consoleLog, var$8, var$9, $ptr, $tmp;
        $ptr = 0;
        if ($rt_resuming()) {
            var $thread = $rt_nativeThread();
            $ptr = $thread.pop();var$9 = $thread.pop();var$8 = $thread.pop();$consoleLog = $thread.pop();$message = $thread.pop();$value = $thread.pop();$expression = $thread.pop();$isGlobal = $thread.pop();$localVariables = $thread.pop();$printStmt = $thread.pop();$this = $thread.pop();
        }
        main: while (true) { switch ($ptr) {
        case 0:
            $expression = $printStmt.$value21;
            $ptr = 1;
        case 1:
            $tmp = tj_Interpreter_evalExpression($this, $expression, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            $value = $tmp;
            if ($value === null)
                return;
            ji_PrintStream_println1(jl_System_out(), $value.$getValue0());
            $message = ($value.$getValue0()).$toString();
            $consoleLog = $rt_createArray(jl_String, 2);
            var$8 = $consoleLog.data;
            var$8[0] = $message;
            var$9 = $this.$lineNumber;
            $printStmt = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($printStmt);
            jl_StringBuilder_append0($printStmt, var$9);
            var$8[1] = jl_AbstractStringBuilder_toString($printStmt);
            $rt_globals.addConsoleLog(otji_JS_wrap($consoleLog));
            return;
        default: $rt_invalidPointer();
        }}
        $rt_nativeThread().push($this, $printStmt, $localVariables, $isGlobal, $expression, $value, $message, $consoleLog, var$8, var$9, $ptr);
    }
    function tj_Interpreter_evalWhile($this, $whileStmt, $localVariables, $isGlobal) {
        var $condition, $result, var$6, $ptr, $tmp;
        $ptr = 0;
        if ($rt_resuming()) {
            var $thread = $rt_nativeThread();
            $ptr = $thread.pop();var$6 = $thread.pop();$result = $thread.pop();$condition = $thread.pop();$isGlobal = $thread.pop();$localVariables = $thread.pop();$whileStmt = $thread.pop();$this = $thread.pop();
        }
        main: while (true) { switch ($ptr) {
        case 0:
            $condition = $whileStmt.$condition1;
            $ptr = 1;
        case 1:
            $tmp = tj_Interpreter_evalExpression($this, $condition, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            $result = $tmp;
            if ($result === null)
                return;
            if ($result.$value18.$value19 != 1)
                return;
            $result = $whileStmt.$body;
            var$6 = 0;
            $ptr = 2;
        case 2:
            tj_Interpreter_interpretBody($this, $result, $localVariables, var$6);
            if ($rt_suspending()) {
                break main;
            }
            $ptr = 3;
        case 3:
            $tmp = tj_Interpreter_evalExpression($this, $condition, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            $result = $tmp;
            if ($result === null)
                return;
            if ($result.$value18.$value19 != 1)
                return;
            $result = $whileStmt.$body;
            var$6 = 0;
            $ptr = 2;
            continue main;
        default: $rt_invalidPointer();
        }}
        $rt_nativeThread().push($this, $whileStmt, $localVariables, $isGlobal, $condition, $result, var$6, $ptr);
    }
    function tj_Interpreter_evalForEach($this, $foreachStmt, $localVariables, $isGlobal) {
        var $tempVarName, $listName, $intList, $listValI, $list, $listVals, $ptr, $tmp;
        $ptr = 0;
        if ($rt_resuming()) {
            var $thread = $rt_nativeThread();
            $ptr = $thread.pop();$listVals = $thread.pop();$list = $thread.pop();$listValI = $thread.pop();$intList = $thread.pop();$listName = $thread.pop();$tempVarName = $thread.pop();$isGlobal = $thread.pop();$localVariables = $thread.pop();$foreachStmt = $thread.pop();$this = $thread.pop();
        }
        main: while (true) { switch ($ptr) {
        case 0:
            $tempVarName = $foreachStmt.$tempVar;
            $listName = $foreachStmt.$listVar;
            if (tj_Variables_isVariable($localVariables, $listName))
                $intList = tj_Variables_getVariableValue($localVariables, $listName);
            else {
                if (!tj_Variables_isVariable($this.$globalVariables, $listName)) {
                    tj_Error_VariableNotDeclared($listName, $this.$lineNumber);
                    return;
                }
                $intList = tj_Variables_getVariableValue($this.$globalVariables, $listName);
            }
            $listValI = $intList.$getType0();
            tj_JavaishVal$JavaishType_$callClinit();
            if ($listValI !== tj_JavaishVal$JavaishType_LIST) {
                tj_Error_TypeMismatch($rt_s(293), $intList.$typeString(), $this.$lineNumber);
                return;
            }
            a: {
                $list = $intList.$list;
                if ($list.$getType0() === tj_JavaishVal$JavaishType_STRINGLIST) {
                    $listVals = $list.$value13;
                    if ($listVals === null) {
                        tj_Error_ListEmpty($this.$lineNumber, $listName);
                        return;
                    }
                    if (!$isGlobal)
                        tj_Variables_addVariable($localVariables, $tempVarName, tj_JavaishVal$JavaishType_STRING, tj_JavaishString__init_($rt_s(2)), $this.$lineNumber);
                    else
                        tj_Variables_addVariable($this.$globalVariables, $tempVarName, tj_JavaishVal$JavaishType_STRING, tj_JavaishString__init_($rt_s(2)), $this.$lineNumber);
                    $intList = ju_AbstractList_iterator($listVals);
                    if (!ju_AbstractList$1_hasNext($intList))
                        break a;
                    $listValI = ju_AbstractList$1_next($intList);
                    if (tj_Variables_isVariable($localVariables, $tempVarName))
                        tj_Variables_setVariableValue($localVariables, $tempVarName, $listValI, $this.$lineNumber);
                    else
                        tj_Variables_setVariableValue($this.$globalVariables, $tempVarName, $listValI, $this.$lineNumber);
                    $listValI = $foreachStmt.$body;
                    $isGlobal = 0;
                    $ptr = 1;
                    continue main;
                }
                if ($list.$getType0() === tj_JavaishVal$JavaishType_BOOLEANLIST) {
                    $listVals = $list.$value11;
                    if ($listVals === null) {
                        tj_Error_ListEmpty($this.$lineNumber, $listName);
                        return;
                    }
                    if (!$isGlobal)
                        tj_Variables_addVariable($localVariables, $tempVarName, tj_JavaishVal$JavaishType_BOOLEAN, tj_JavaishBoolean__init_(jl_Boolean_valueOf(0)), $this.$lineNumber);
                    else
                        tj_Variables_addVariable($this.$globalVariables, $tempVarName, tj_JavaishVal$JavaishType_BOOLEAN, tj_JavaishBoolean__init_(jl_Boolean_valueOf(0)), $this.$lineNumber);
                    $intList = ju_AbstractList_iterator($listVals);
                    if (!ju_AbstractList$1_hasNext($intList))
                        break a;
                    $listValI = ju_AbstractList$1_next($intList);
                    if (tj_Variables_isVariable($localVariables, $tempVarName))
                        tj_Variables_setVariableValue($localVariables, $tempVarName, $listValI, $this.$lineNumber);
                    else
                        tj_Variables_setVariableValue($this.$globalVariables, $tempVarName, $listValI, $this.$lineNumber);
                    $listValI = $foreachStmt.$body;
                    $isGlobal = 0;
                    $ptr = 2;
                    continue main;
                }
                if ($list.$getType0() === tj_JavaishVal$JavaishType_INTLIST) {
                    $listVals = $list.$value15;
                    if ($listVals === null) {
                        tj_Error_ListEmpty($this.$lineNumber, $listName);
                        return;
                    }
                    if (!$isGlobal)
                        tj_Variables_addVariable($localVariables, $tempVarName, tj_JavaishVal$JavaishType_INT, tj_JavaishInt__init_(0), $this.$lineNumber);
                    else
                        tj_Variables_addVariable($this.$globalVariables, $tempVarName, tj_JavaishVal$JavaishType_INT, tj_JavaishInt__init_(0), $this.$lineNumber);
                    $intList = ju_AbstractList_iterator($listVals);
                    if (!ju_AbstractList$1_hasNext($intList))
                        break a;
                    $listValI = ju_AbstractList$1_next($intList);
                    if (tj_Variables_isVariable($localVariables, $tempVarName))
                        tj_Variables_setVariableValue($localVariables, $tempVarName, $listValI, $this.$lineNumber);
                    else
                        tj_Variables_setVariableValue($this.$globalVariables, $tempVarName, $listValI, $this.$lineNumber);
                    $listValI = $foreachStmt.$body;
                    $isGlobal = 0;
                    $ptr = 3;
                    continue main;
                }
                if ($list.$getType0() !== tj_JavaishVal$JavaishType_FLOATLIST) {
                    tj_Error_TypeMismatch($rt_s(293), $intList.$typeString(), $this.$lineNumber);
                    return;
                }
                $listVals = $list.$value9;
                if ($listVals === null) {
                    tj_Error_ListEmpty($this.$lineNumber, $listName);
                    return;
                }
                if (!$isGlobal)
                    tj_Variables_addVariable($localVariables, $tempVarName, tj_JavaishVal$JavaishType_FLOAT, tj_JavaishFloat__init_(0.0), $this.$lineNumber);
                else
                    tj_Variables_addVariable($this.$globalVariables, $tempVarName, tj_JavaishVal$JavaishType_FLOAT, tj_JavaishFloat__init_(0.0), $this.$lineNumber);
                $intList = ju_AbstractList_iterator($listVals);
                if (ju_AbstractList$1_hasNext($intList)) {
                    $listValI = ju_AbstractList$1_next($intList);
                    if (tj_Variables_isVariable($localVariables, $tempVarName))
                        tj_Variables_setVariableValue($localVariables, $tempVarName, $listValI, $this.$lineNumber);
                    else
                        tj_Variables_setVariableValue($this.$globalVariables, $tempVarName, $listValI, $this.$lineNumber);
                    $listValI = $foreachStmt.$body;
                    $isGlobal = 0;
                    $ptr = 4;
                    continue main;
                }
            }
            return;
        case 1:
            tj_Interpreter_interpretBody($this, $listValI, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            if (!ju_AbstractList$1_hasNext($intList))
                return;
            $listValI = ju_AbstractList$1_next($intList);
            if (tj_Variables_isVariable($localVariables, $tempVarName))
                tj_Variables_setVariableValue($localVariables, $tempVarName, $listValI, $this.$lineNumber);
            else
                tj_Variables_setVariableValue($this.$globalVariables, $tempVarName, $listValI, $this.$lineNumber);
            $listValI = $foreachStmt.$body;
            $isGlobal = 0;
            continue main;
        case 2:
            tj_Interpreter_interpretBody($this, $listValI, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            if (!ju_AbstractList$1_hasNext($intList))
                return;
            $listValI = ju_AbstractList$1_next($intList);
            if (tj_Variables_isVariable($localVariables, $tempVarName))
                tj_Variables_setVariableValue($localVariables, $tempVarName, $listValI, $this.$lineNumber);
            else
                tj_Variables_setVariableValue($this.$globalVariables, $tempVarName, $listValI, $this.$lineNumber);
            $listValI = $foreachStmt.$body;
            $isGlobal = 0;
            continue main;
        case 3:
            tj_Interpreter_interpretBody($this, $listValI, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            if (!ju_AbstractList$1_hasNext($intList))
                return;
            $listValI = ju_AbstractList$1_next($intList);
            if (tj_Variables_isVariable($localVariables, $tempVarName))
                tj_Variables_setVariableValue($localVariables, $tempVarName, $listValI, $this.$lineNumber);
            else
                tj_Variables_setVariableValue($this.$globalVariables, $tempVarName, $listValI, $this.$lineNumber);
            $listValI = $foreachStmt.$body;
            $isGlobal = 0;
            continue main;
        case 4:
            tj_Interpreter_interpretBody($this, $listValI, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            if (!ju_AbstractList$1_hasNext($intList))
                return;
            $listValI = ju_AbstractList$1_next($intList);
            if (tj_Variables_isVariable($localVariables, $tempVarName))
                tj_Variables_setVariableValue($localVariables, $tempVarName, $listValI, $this.$lineNumber);
            else
                tj_Variables_setVariableValue($this.$globalVariables, $tempVarName, $listValI, $this.$lineNumber);
            $listValI = $foreachStmt.$body;
            $isGlobal = 0;
            continue main;
        default: $rt_invalidPointer();
        }}
        $rt_nativeThread().push($this, $foreachStmt, $localVariables, $isGlobal, $tempVarName, $listName, $intList, $listValI, $list, $listVals, $ptr);
    }
    function tj_Interpreter_evalForWhen($this, $forwhenStmt, $localVariables, $isGlobal) {
        var $incVarName, $incResult, $condition, $result, var$8, $incExpression, $incVal2, $incInt, $ptr, $tmp;
        $ptr = 0;
        if ($rt_resuming()) {
            var $thread = $rt_nativeThread();
            $ptr = $thread.pop();$incInt = $thread.pop();$incVal2 = $thread.pop();$incExpression = $thread.pop();var$8 = $thread.pop();$result = $thread.pop();$condition = $thread.pop();$incResult = $thread.pop();$incVarName = $thread.pop();$isGlobal = $thread.pop();$localVariables = $thread.pop();$forwhenStmt = $thread.pop();$this = $thread.pop();
        }
        main: while (true) { switch ($ptr) {
        case 0:
            $incVarName = $forwhenStmt.$incVar;
            if (!$isGlobal) {
                if (!tj_Variables_isVariable($localVariables, $incVarName)) {
                    tj_JavaishVal$JavaishType_$callClinit();
                    tj_Variables_addVariable($localVariables, $incVarName, tj_JavaishVal$JavaishType_INT, tj_JavaishInt__init_(0), $this.$lineNumber);
                }
            } else if (!tj_Variables_isVariable($this.$globalVariables, $incVarName)) {
                $incResult = $this.$globalVariables;
                tj_JavaishVal$JavaishType_$callClinit();
                tj_Variables_addVariable($incResult, $incVarName, tj_JavaishVal$JavaishType_INT, tj_JavaishInt__init_(0), $this.$lineNumber);
            }
            $condition = $forwhenStmt.$condition2;
            $ptr = 1;
        case 1:
            $tmp = tj_Interpreter_evalExpression($this, $condition, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            $result = $tmp;
            if ($result === null)
                return;
            if ($result.$value18.$value19 != 1)
                return;
            $result = $forwhenStmt.$body;
            var$8 = 0;
            $ptr = 2;
        case 2:
            tj_Interpreter_interpretBody($this, $result, $localVariables, var$8);
            if ($rt_suspending()) {
                break main;
            }
            $result = !$isGlobal ? tj_Variables_getVariableValue($localVariables, $incVarName) : tj_Variables_getVariableValue($this.$globalVariables, $incVarName);
            if ($result === null)
                return;
            $incExpression = $forwhenStmt.$increment;
            $ptr = 3;
        case 3:
            $tmp = tj_Interpreter_evalExpression($this, $incExpression, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            $incVal2 = $tmp;
            tj_Interpreter$Operator_$callClinit();
            $incResult = tj_Interpreter_performOperation($this, tj_Interpreter$Operator_PLUS, $result, $incVal2);
            $result = $incResult.$getType0();
            tj_JavaishVal$JavaishType_$callClinit();
            if ($result !== tj_JavaishVal$JavaishType_INT) {
                tj_Error_TypeMismatch($rt_s(187), $incResult.$typeString(), $this.$lineNumber);
                return;
            }
            $incInt = $incResult;
            if (!$isGlobal)
                tj_Variables_setVariableValue($localVariables, $incVarName, $incInt, $this.$lineNumber);
            else
                tj_Variables_setVariableValue($this.$globalVariables, $incVarName, $incInt, $this.$lineNumber);
            $ptr = 4;
        case 4:
            $tmp = tj_Interpreter_evalExpression($this, $condition, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            $result = $tmp;
            if ($result === null)
                return;
            if ($result.$value18.$value19 != 1)
                return;
            $result = $forwhenStmt.$body;
            var$8 = 0;
            $ptr = 2;
            continue main;
        default: $rt_invalidPointer();
        }}
        $rt_nativeThread().push($this, $forwhenStmt, $localVariables, $isGlobal, $incVarName, $incResult, $condition, $result, var$8, $incExpression, $incVal2, $incInt, $ptr);
    }
    function tj_Interpreter_evalShowMsgBox($this, $showMsgStmt, $localVariables, $isGlobal) {
        var $expression, $value, var$6, $e, $$je, $ptr, $tmp;
        $ptr = 0;
        if ($rt_resuming()) {
            var $thread = $rt_nativeThread();
            $ptr = $thread.pop();$e = $thread.pop();var$6 = $thread.pop();$value = $thread.pop();$expression = $thread.pop();$isGlobal = $thread.pop();$localVariables = $thread.pop();$showMsgStmt = $thread.pop();$this = $thread.pop();
        }
        main: while (true) { switch ($ptr) {
        case 0:
            $expression = $showMsgStmt.$value22;
            $ptr = 1;
        case 1:
            $tmp = tj_Interpreter_evalExpression($this, $expression, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            $value = $tmp;
            if ($value === null)
                return;
            try {
                juc_TimeUnit_$callClinit();
                $showMsgStmt = juc_TimeUnit_MILLISECONDS;
                var$6 = Long_fromInt(100);
                $ptr = 2;
                continue main;
            } catch ($$e) {
                $$je = $rt_wrapException($$e);
                if ($$je instanceof jl_InterruptedException) {
                    $e = $$je;
                } else {
                    throw $$e;
                }
            }
            $e.$printStackTrace();
            $rt_globals.alert($rt_ustr(($value.$getValue0()).$toString()));
            return;
        case 2:
            a: {
                try {
                    juc_TimeUnit_sleep($showMsgStmt, var$6);
                    if ($rt_suspending()) {
                        break main;
                    }
                    break a;
                } catch ($$e) {
                    $$je = $rt_wrapException($$e);
                    if ($$je instanceof jl_InterruptedException) {
                        $e = $$je;
                    } else {
                        throw $$e;
                    }
                }
                $e.$printStackTrace();
            }
            $rt_globals.alert($rt_ustr(($value.$getValue0()).$toString()));
            return;
        default: $rt_invalidPointer();
        }}
        $rt_nativeThread().push($this, $showMsgStmt, $localVariables, $isGlobal, $expression, $value, var$6, $e, $ptr);
    }
    function tj_Interpreter_evalShowInputBox($this, $showInputBoxElmt, $localVariables, $isGlobal) {
        var $value, $expression, var$6, $e, $$je, $ptr, $tmp;
        $ptr = 0;
        if ($rt_resuming()) {
            var $thread = $rt_nativeThread();
            $ptr = $thread.pop();$e = $thread.pop();var$6 = $thread.pop();$expression = $thread.pop();$value = $thread.pop();$isGlobal = $thread.pop();$localVariables = $thread.pop();$showInputBoxElmt = $thread.pop();$this = $thread.pop();
        }
        main: while (true) { switch ($ptr) {
        case 0:
            $value = null;
            $expression = $showInputBoxElmt.$value2;
            if ($expression === null) {
                try {
                    juc_TimeUnit_$callClinit();
                    $showInputBoxElmt = juc_TimeUnit_MILLISECONDS;
                    var$6 = Long_fromInt(100);
                    $ptr = 2;
                    continue main;
                } catch ($$e) {
                    $$je = $rt_wrapException($$e);
                    if ($$je instanceof jl_InterruptedException) {
                        $e = $$je;
                    } else {
                        throw $$e;
                    }
                }
                $e.$printStackTrace();
                return tj_JavaishString__init_($rt_str($rt_globals.prompt($rt_ustr(($value.$getValue0()).$toString()))));
            }
            $ptr = 1;
        case 1:
            $tmp = tj_Interpreter_evalExpression($this, $expression, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            $value = $tmp;
            try {
                juc_TimeUnit_$callClinit();
                $showInputBoxElmt = juc_TimeUnit_MILLISECONDS;
                var$6 = Long_fromInt(100);
                $ptr = 2;
                continue main;
            } catch ($$e) {
                $$je = $rt_wrapException($$e);
                if ($$je instanceof jl_InterruptedException) {
                    $e = $$je;
                } else {
                    throw $$e;
                }
            }
            $e.$printStackTrace();
            return tj_JavaishString__init_($rt_str($rt_globals.prompt($rt_ustr(($value.$getValue0()).$toString()))));
        case 2:
            a: {
                try {
                    juc_TimeUnit_sleep($showInputBoxElmt, var$6);
                    if ($rt_suspending()) {
                        break main;
                    }
                    break a;
                } catch ($$e) {
                    $$je = $rt_wrapException($$e);
                    if ($$je instanceof jl_InterruptedException) {
                        $e = $$je;
                    } else {
                        throw $$e;
                    }
                }
                $e.$printStackTrace();
            }
            return tj_JavaishString__init_($rt_str($rt_globals.prompt($rt_ustr(($value.$getValue0()).$toString()))));
        default: $rt_invalidPointer();
        }}
        $rt_nativeThread().push($this, $showInputBoxElmt, $localVariables, $isGlobal, $value, $expression, var$6, $e, $ptr);
    }
    function tj_Interpreter_evalMutation($this, $mutationStmt, $localVariables, $isGlobal) {
        var $type, $name, $varType, $value, $newVal, $list, $ptr, $tmp;
        $ptr = 0;
        if ($rt_resuming()) {
            var $thread = $rt_nativeThread();
            $ptr = $thread.pop();$list = $thread.pop();$newVal = $thread.pop();$value = $thread.pop();$varType = $thread.pop();$name = $thread.pop();$type = $thread.pop();$isGlobal = $thread.pop();$localVariables = $thread.pop();$mutationStmt = $thread.pop();$this = $thread.pop();
        }
        main: while (true) { switch ($ptr) {
        case 0:
            $type = $mutationStmt.$mutationType;
            $name = $mutationStmt.$varName;
            $varType = tj_Variables_getVariableType($this.$globalVariables, $name);
            $mutationStmt = $mutationStmt.$value23;
            $ptr = 1;
        case 1:
            $tmp = tj_Interpreter_evalExpression($this, $mutationStmt, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            $value = $tmp;
            tj_JavaishVal$JavaishType_$callClinit();
            if ($varType !== tj_JavaishVal$JavaishType_STRINGLIST && $varType !== tj_JavaishVal$JavaishType_BOOLEANLIST && $varType !== tj_JavaishVal$JavaishType_INTLIST && $varType !== tj_JavaishVal$JavaishType_FLOATLIST) {
                $mutationStmt = tj_Variables_isVariable($localVariables, $name) ? tj_Variables_getVariableValue($localVariables, $name) : tj_Variables_getVariableValue($this.$globalVariables, $name);
                if ($mutationStmt === null) {
                    tj_Error_VariableNotDeclared($name, $this.$lineNumber);
                    return;
                }
                if ($mutationStmt.$getType0() === tj_JavaishVal$JavaishType_STRING) {
                    tj_Statements$MutationType_$callClinit();
                    if ($type !== tj_Statements$MutationType_ADD) {
                        tj_Error_CantPerformMutation($mutationStmt.$typeString(), $this.$lineNumber);
                        return;
                    }
                }
                $newVal = tj_Interpreter_performOperation($this, tj_Interpreter_mutationTypeToOperator($this, $type), $mutationStmt, $value);
                if (tj_Variables_isVariable($localVariables, $name)) {
                    tj_Variables_setVariableValue($localVariables, $name, $newVal, $this.$lineNumber);
                    return;
                }
                tj_Variables_setVariableValue($this.$globalVariables, $name, $newVal, $this.$lineNumber);
                return;
            }
            $mutationStmt = tj_Variables_isVariable($localVariables, $name) ? (tj_Variables_getList($localVariables, $name)).$list : (tj_Variables_getList($this.$globalVariables, $name)).$list;
            if ($mutationStmt === null) {
                tj_Error_VariableNotDeclared($name, $this.$lineNumber);
                return;
            }
            $list = tj_Interpreter_performListOperation($this, tj_Interpreter_mutationTypeToOperator($this, $type), $mutationStmt, $value, 0);
            if (tj_Variables_isVariable($localVariables, $name)) {
                tj_Variables_setVariableValue($localVariables, $name, tj_JavaishListVal__init_($list), $this.$lineNumber);
                return;
            }
            tj_Variables_setVariableValue($this.$globalVariables, $name, tj_JavaishListVal__init_($list), $this.$lineNumber);
            return;
        default: $rt_invalidPointer();
        }}
        $rt_nativeThread().push($this, $mutationStmt, $localVariables, $isGlobal, $type, $name, $varType, $value, $newVal, $list, $ptr);
    }
    function tj_Interpreter_evalRemoveAt($this, $removeAtStmt, $localVariables, $isGlobal) {
        var $name, $varType, $index, $indexVal, $list, $ptr, $tmp;
        $ptr = 0;
        if ($rt_resuming()) {
            var $thread = $rt_nativeThread();
            $ptr = $thread.pop();$list = $thread.pop();$indexVal = $thread.pop();$index = $thread.pop();$varType = $thread.pop();$name = $thread.pop();$isGlobal = $thread.pop();$localVariables = $thread.pop();$removeAtStmt = $thread.pop();$this = $thread.pop();
        }
        main: while (true) { switch ($ptr) {
        case 0:
            $name = $removeAtStmt.$listName0;
            $varType = tj_Variables_getVariableType($this.$globalVariables, $name);
            $removeAtStmt = $removeAtStmt.$location;
            $ptr = 1;
        case 1:
            $tmp = tj_Interpreter_evalExpression($this, $removeAtStmt, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            $index = $tmp;
            tj_JavaishVal$JavaishType_$callClinit();
            if ($varType !== tj_JavaishVal$JavaishType_STRINGLIST && $varType !== tj_JavaishVal$JavaishType_BOOLEANLIST && $varType !== tj_JavaishVal$JavaishType_INTLIST && $varType !== tj_JavaishVal$JavaishType_FLOATLIST) {
                tj_Error_TypeMismatch($rt_s(293), $varType.$name4, $this.$lineNumber);
                return;
            }
            $varType = tj_Variables_isVariable($localVariables, $name) ? (tj_Variables_getList($localVariables, $name)).$list : (tj_Variables_getList($this.$globalVariables, $name)).$list;
            if ($varType === null) {
                tj_Error_VariableNotDeclared($name, $this.$lineNumber);
                return;
            }
            if ($index.$getType0() !== tj_JavaishVal$JavaishType_INT) {
                tj_Error_TypeMismatch($rt_s(187), $index.$typeString(), $this.$lineNumber);
                return;
            }
            $indexVal = (tj_JavaishInt_getValue($index)).$value;
            tj_Interpreter$Operator_$callClinit();
            $list = tj_Interpreter_performListOperation($this, tj_Interpreter$Operator_REMOVEAT, $varType, null, $indexVal);
            if (tj_Variables_isVariable($localVariables, $name)) {
                tj_Variables_setVariableValue($localVariables, $name, tj_JavaishListVal__init_($list), $this.$lineNumber);
                return;
            }
            tj_Variables_setVariableValue($this.$globalVariables, $name, tj_JavaishListVal__init_($list), $this.$lineNumber);
            return;
        default: $rt_invalidPointer();
        }}
        $rt_nativeThread().push($this, $removeAtStmt, $localVariables, $isGlobal, $name, $varType, $index, $indexVal, $list, $ptr);
    }
    function tj_Interpreter_evalRemoveFrom($this, $removeFromStmt, $localVariables, $isGlobal) {
        var $name, $varType, $value, $list, $ptr, $tmp;
        $ptr = 0;
        if ($rt_resuming()) {
            var $thread = $rt_nativeThread();
            $ptr = $thread.pop();$list = $thread.pop();$value = $thread.pop();$varType = $thread.pop();$name = $thread.pop();$isGlobal = $thread.pop();$localVariables = $thread.pop();$removeFromStmt = $thread.pop();$this = $thread.pop();
        }
        main: while (true) { switch ($ptr) {
        case 0:
            $name = $removeFromStmt.$listName1;
            $varType = tj_Variables_getVariableType($this.$globalVariables, $name);
            $removeFromStmt = $removeFromStmt.$value24;
            $ptr = 1;
        case 1:
            $tmp = tj_Interpreter_evalExpression($this, $removeFromStmt, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            $value = $tmp;
            tj_JavaishVal$JavaishType_$callClinit();
            if ($varType !== tj_JavaishVal$JavaishType_STRINGLIST && $varType !== tj_JavaishVal$JavaishType_BOOLEANLIST && $varType !== tj_JavaishVal$JavaishType_INTLIST && $varType !== tj_JavaishVal$JavaishType_FLOATLIST)
                return;
            $removeFromStmt = tj_Variables_isVariable($localVariables, $name) ? (tj_Variables_getList($localVariables, $name)).$list : (tj_Variables_getList($this.$globalVariables, $name)).$list;
            if ($removeFromStmt === null) {
                tj_Error_VariableNotDeclared($name, $this.$lineNumber);
                return;
            }
            tj_Interpreter$Operator_$callClinit();
            $list = tj_Interpreter_performListOperation($this, tj_Interpreter$Operator_REMOVEFROM, $removeFromStmt, $value, 0);
            $removeFromStmt = jl_System_out();
            $varType = $list.$listString();
            $value = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($value);
            jl_StringBuilder_append(jl_StringBuilder_append($value, $rt_s(300)), $varType);
            ji_PrintStream_println($removeFromStmt, jl_AbstractStringBuilder_toString($value));
            if (tj_Variables_isVariable($localVariables, $name)) {
                tj_Variables_setVariableValue($localVariables, $name, tj_JavaishListVal__init_($list), $this.$lineNumber);
                return;
            }
            tj_Variables_setVariableValue($this.$globalVariables, $name, tj_JavaishListVal__init_($list), $this.$lineNumber);
            return;
        default: $rt_invalidPointer();
        }}
        $rt_nativeThread().push($this, $removeFromStmt, $localVariables, $isGlobal, $name, $varType, $value, $list, $ptr);
    }
    function tj_Interpreter_evalRemoveAllFrom($this, $removeAllFromStmt, $localVariables, $isGlobal) {
        var $name, $varType, $value, $list, $ptr, $tmp;
        $ptr = 0;
        if ($rt_resuming()) {
            var $thread = $rt_nativeThread();
            $ptr = $thread.pop();$list = $thread.pop();$value = $thread.pop();$varType = $thread.pop();$name = $thread.pop();$isGlobal = $thread.pop();$localVariables = $thread.pop();$removeAllFromStmt = $thread.pop();$this = $thread.pop();
        }
        main: while (true) { switch ($ptr) {
        case 0:
            $name = $removeAllFromStmt.$listName2;
            $varType = tj_Variables_getVariableType($this.$globalVariables, $name);
            $removeAllFromStmt = $removeAllFromStmt.$value25;
            $ptr = 1;
        case 1:
            $tmp = tj_Interpreter_evalExpression($this, $removeAllFromStmt, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            $value = $tmp;
            tj_JavaishVal$JavaishType_$callClinit();
            if ($varType !== tj_JavaishVal$JavaishType_STRINGLIST && $varType !== tj_JavaishVal$JavaishType_BOOLEANLIST && $varType !== tj_JavaishVal$JavaishType_INTLIST && $varType !== tj_JavaishVal$JavaishType_FLOATLIST)
                return;
            $removeAllFromStmt = tj_Variables_isVariable($localVariables, $name) ? (tj_Variables_getList($localVariables, $name)).$list : (tj_Variables_getList($this.$globalVariables, $name)).$list;
            if ($removeAllFromStmt === null) {
                tj_Error_VariableNotDeclared($name, $this.$lineNumber);
                return;
            }
            tj_Interpreter$Operator_$callClinit();
            $list = tj_Interpreter_performListOperation($this, tj_Interpreter$Operator_REMOVEALLFROM, $removeAllFromStmt, $value, 0);
            $removeAllFromStmt = jl_System_out();
            $varType = $list.$listString();
            $value = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($value);
            jl_StringBuilder_append(jl_StringBuilder_append($value, $rt_s(300)), $varType);
            ji_PrintStream_println($removeAllFromStmt, jl_AbstractStringBuilder_toString($value));
            if (tj_Variables_isVariable($localVariables, $name)) {
                tj_Variables_setVariableValue($localVariables, $name, tj_JavaishListVal__init_($list), $this.$lineNumber);
                return;
            }
            tj_Variables_setVariableValue($this.$globalVariables, $name, tj_JavaishListVal__init_($list), $this.$lineNumber);
            return;
        default: $rt_invalidPointer();
        }}
        $rt_nativeThread().push($this, $removeAllFromStmt, $localVariables, $isGlobal, $name, $varType, $value, $list, $ptr);
    }
    function tj_Interpreter_performListOperation($this, $operation, $list, $val, $index) {
        var $result, $listInnerType, $i, $valType, $booleanListVal, $floatListVal, $intVal, $intListVal, $stringListVal, $booleanVal, $stringVal;
        a: {
            $result = null;
            $listInnerType = jl_Enum_toString($operation);
            $i = (-1);
            switch (jl_String_hashCode($listInnerType)) {
                case 2459034:
                    if (!jl_String_equals($listInnerType, $rt_s(283)))
                        break a;
                    $i = 0;
                    break a;
                case 269804471:
                    if (!jl_String_equals($listInnerType, $rt_s(261)))
                        break a;
                    $i = 1;
                    break a;
                case 1584208430:
                    if (!jl_String_equals($listInnerType, $rt_s(263)))
                        break a;
                    $i = 2;
                    break a;
                case 1735465895:
                    if (!jl_String_equals($listInnerType, $rt_s(266)))
                        break a;
                    $i = 3;
                    break a;
                default:
            }
        }
        b: {
            switch ($i) {
                case 0:
                    $listInnerType = $list.$getInnerType();
                    $valType = $val.$getType0();
                    if ($listInnerType !== $valType) {
                        tj_Error_TypeMismatch(jl_Enum_toString($listInnerType), jl_Enum_toString($valType), $this.$lineNumber);
                        return null;
                    }
                    $operation = $list.$getType0();
                    tj_JavaishVal$JavaishType_$callClinit();
                    if ($operation === tj_JavaishVal$JavaishType_BOOLEANLIST) {
                        $booleanListVal = tj_JavaishBooleanList_getList($list);
                        ju_ArrayList_add($booleanListVal, $val);
                        $result = tj_JavaishBooleanList__init_($booleanListVal);
                        break b;
                    }
                    if ($list.$getType0() === tj_JavaishVal$JavaishType_FLOATLIST) {
                        $floatListVal = tj_JavaishFloatList_getList($list);
                        if ($val.$getType0() !== tj_JavaishVal$JavaishType_INT)
                            ju_ArrayList_add($floatListVal, $val);
                        else {
                            $intVal = $val;
                            ju_ArrayList_add($floatListVal, tj_JavaishFloat__init_(jl_Integer_intValue(tj_JavaishInt_getValue($intVal))));
                        }
                        $result = tj_JavaishFloatList__init_($floatListVal);
                        break b;
                    }
                    if ($list.$getType0() === tj_JavaishVal$JavaishType_INTLIST) {
                        $intListVal = tj_JavaishIntList_getList($list);
                        ju_ArrayList_add($intListVal, $val);
                        $result = tj_JavaishIntList__init_($intListVal);
                        break b;
                    }
                    if ($list.$getType0() !== tj_JavaishVal$JavaishType_STRINGLIST)
                        break b;
                    $stringListVal = tj_JavaishStringList_getList($list);
                    ju_ArrayList_add($stringListVal, $val);
                    $result = tj_JavaishStringList__init_($stringListVal);
                    break b;
                case 1:
                    $operation = $list.$getType0();
                    tj_JavaishVal$JavaishType_$callClinit();
                    if ($operation === tj_JavaishVal$JavaishType_BOOLEANLIST) {
                        $booleanListVal = tj_JavaishBooleanList_getList($list);
                        ju_ArrayList_remove($booleanListVal, $index);
                        $result = tj_JavaishBooleanList__init_($booleanListVal);
                        break b;
                    }
                    if ($list.$getType0() === tj_JavaishVal$JavaishType_FLOATLIST) {
                        $floatListVal = tj_JavaishFloatList_getList($list);
                        ju_ArrayList_remove($floatListVal, $index);
                        $result = tj_JavaishFloatList__init_($floatListVal);
                        break b;
                    }
                    if ($list.$getType0() === tj_JavaishVal$JavaishType_INTLIST) {
                        $intListVal = tj_JavaishIntList_getList($list);
                        ju_ArrayList_remove($intListVal, $index);
                        $result = tj_JavaishIntList__init_($intListVal);
                        break b;
                    }
                    if ($list.$getType0() !== tj_JavaishVal$JavaishType_STRINGLIST)
                        break b;
                    $stringListVal = tj_JavaishStringList_getList($list);
                    ju_ArrayList_remove($stringListVal, $index);
                    $result = tj_JavaishStringList__init_($stringListVal);
                    break b;
                case 2:
                    $operation = $list.$getType0();
                    tj_JavaishVal$JavaishType_$callClinit();
                    if ($operation === tj_JavaishVal$JavaishType_BOOLEANLIST) {
                        $booleanListVal = tj_JavaishBooleanList_getList($list);
                        $booleanVal = $val;
                        $i = 0;
                        c: {
                            while (true) {
                                if ($i >= ju_ArrayList_size($booleanListVal))
                                    break c;
                                if (tj_JavaishBoolean_getValue(ju_ArrayList_get($booleanListVal, $i)) === tj_JavaishBoolean_getValue($booleanVal))
                                    break;
                                $i = $i + 1 | 0;
                            }
                            ju_ArrayList_remove($booleanListVal, $i);
                        }
                        $result = tj_JavaishBooleanList__init_($booleanListVal);
                        break b;
                    }
                    if ($list.$getType0() === tj_JavaishVal$JavaishType_FLOATLIST) {
                        $floatListVal = tj_JavaishFloatList_getList($list);
                        if ($val.$getType0() !== tj_JavaishVal$JavaishType_INT)
                            $operation = $val;
                        else {
                            $intVal = $val;
                            $operation = tj_JavaishFloat__init_(jl_Integer_intValue(tj_JavaishInt_getValue($intVal)));
                        }
                        $i = 0;
                        d: {
                            while (true) {
                                if ($i >= ju_ArrayList_size($floatListVal))
                                    break d;
                                if (tj_JavaishFloat_getValue(ju_ArrayList_get($floatListVal, $i)) === tj_JavaishFloat_getValue($operation))
                                    break;
                                $i = $i + 1 | 0;
                            }
                            ju_ArrayList_remove($floatListVal, $i);
                        }
                        $result = tj_JavaishFloatList__init_($floatListVal);
                        break b;
                    }
                    if ($list.$getType0() !== tj_JavaishVal$JavaishType_INTLIST) {
                        if ($list.$getType0() !== tj_JavaishVal$JavaishType_STRINGLIST)
                            break b;
                        $stringListVal = tj_JavaishStringList_getList($list);
                        $stringVal = $val;
                        $i = 0;
                        e: {
                            while (true) {
                                if ($i >= ju_ArrayList_size($stringListVal))
                                    break e;
                                if (jl_String_equals(tj_JavaishString_getValue(ju_ArrayList_get($stringListVal, $i)), tj_JavaishString_getValue($stringVal)))
                                    break;
                                $i = $i + 1 | 0;
                            }
                            ju_ArrayList_remove($stringListVal, $i);
                        }
                        $result = tj_JavaishStringList__init_($stringListVal);
                        break b;
                    }
                    $intListVal = tj_JavaishIntList_getList($list);
                    $intVal = $val;
                    $i = 0;
                    f: {
                        while (true) {
                            if ($i >= ju_ArrayList_size($intListVal))
                                break f;
                            if (tj_JavaishInt_getValue(ju_ArrayList_get($intListVal, $i)) === tj_JavaishInt_getValue($intVal))
                                break;
                            $i = $i + 1 | 0;
                        }
                        ju_ArrayList_remove($intListVal, $i);
                    }
                    $result = tj_JavaishIntList__init_($intListVal);
                    $operation = jl_System_out();
                    $list = jl_String_valueOf(tj_JavaishInt_getType($intVal));
                    $index = ju_ArrayList_size($intListVal);
                    $val = jl_StringBuilder__init_();
                    jl_StringBuilder_append0(jl_StringBuilder_append3(jl_StringBuilder_append(jl_StringBuilder_append($val, $rt_s(301)), $list), 32), $index);
                    ji_PrintStream_println($operation, jl_StringBuilder_toString($val));
                    break b;
                case 3:
                    $operation = $list.$getType0();
                    tj_JavaishVal$JavaishType_$callClinit();
                    if ($operation === tj_JavaishVal$JavaishType_BOOLEANLIST) {
                        $booleanListVal = tj_JavaishBooleanList_getList($list);
                        $booleanVal = $val;
                        $i = 0;
                        while ($i < ju_ArrayList_size($booleanListVal)) {
                            if (tj_JavaishBoolean_getValue(ju_ArrayList_get($booleanListVal, $i)) === tj_JavaishBoolean_getValue($booleanVal)) {
                                ju_ArrayList_remove($booleanListVal, $i);
                                $i = $i + (-1) | 0;
                            }
                            $i = $i + 1 | 0;
                        }
                        $result = tj_JavaishBooleanList__init_($booleanListVal);
                        break b;
                    }
                    if ($list.$getType0() === tj_JavaishVal$JavaishType_FLOATLIST) {
                        $floatListVal = tj_JavaishFloatList_getList($list);
                        if ($val.$getType0() !== tj_JavaishVal$JavaishType_INT)
                            $operation = $val;
                        else {
                            $intVal = $val;
                            $operation = tj_JavaishFloat__init_(jl_Integer_intValue(tj_JavaishInt_getValue($intVal)));
                        }
                        $i = 0;
                        while ($i < ju_ArrayList_size($floatListVal)) {
                            if (tj_JavaishFloat_getValue(ju_ArrayList_get($floatListVal, $i)) === tj_JavaishFloat_getValue($operation)) {
                                ju_ArrayList_remove($floatListVal, $i);
                                $i = $i + (-1) | 0;
                            }
                            $i = $i + 1 | 0;
                        }
                        $result = tj_JavaishFloatList__init_($floatListVal);
                        break b;
                    }
                    if ($list.$getType0() === tj_JavaishVal$JavaishType_INTLIST) {
                        $intListVal = tj_JavaishIntList_getList($list);
                        $intVal = $val;
                        $i = 0;
                        while ($i < ju_ArrayList_size($intListVal)) {
                            if (tj_JavaishInt_getValue(ju_ArrayList_get($intListVal, $i)) === tj_JavaishInt_getValue($intVal)) {
                                ju_ArrayList_remove($intListVal, $i);
                                $i = $i + (-1) | 0;
                            }
                            $i = $i + 1 | 0;
                        }
                        $result = tj_JavaishIntList__init_($intListVal);
                        break b;
                    }
                    if ($list.$getType0() !== tj_JavaishVal$JavaishType_STRINGLIST)
                        break b;
                    $stringListVal = tj_JavaishStringList_getList($list);
                    $stringVal = $val;
                    $i = 0;
                    while ($i < ju_ArrayList_size($stringListVal)) {
                        if (jl_String_equals(tj_JavaishString_getValue(ju_ArrayList_get($stringListVal, $i)), tj_JavaishString_getValue($stringVal))) {
                            ju_ArrayList_remove($stringListVal, $i);
                            $i = $i + (-1) | 0;
                        }
                        $i = $i + 1 | 0;
                    }
                    $result = tj_JavaishStringList__init_($stringListVal);
                    break b;
                default:
            }
        }
        return $result;
    }
    function tj_Interpreter_mutationTypeToOperator($this, $type) {
        var var$2, var$3;
        a: {
            var$2 = $type.$name4;
            var$3 = (-1);
            switch (jl_String_hashCode(var$2)) {
                case -1277621484:
                    if (!jl_String_equals(var$2, $rt_s(302)))
                        break a;
                    var$3 = 1;
                    break a;
                case 64641:
                    if (!jl_String_equals(var$2, $rt_s(303)))
                        break a;
                    var$3 = 0;
                    break a;
                case 1436456484:
                    if (!jl_String_equals(var$2, $rt_s(290)))
                        break a;
                    var$3 = 2;
                    break a;
                case 2016833657:
                    if (!jl_String_equals(var$2, $rt_s(292)))
                        break a;
                    var$3 = 3;
                    break a;
                default:
            }
        }
        switch (var$3) {
            case 0:
                tj_Interpreter$Operator_$callClinit();
                return tj_Interpreter$Operator_PLUS;
            case 1:
                tj_Interpreter$Operator_$callClinit();
                return tj_Interpreter$Operator_MINUS;
            case 2:
                tj_Interpreter$Operator_$callClinit();
                return tj_Interpreter$Operator_MULTIPLY;
            case 3:
                tj_Interpreter$Operator_$callClinit();
                return tj_Interpreter$Operator_DIVIDE;
            default:
        }
        return null;
    }
    var jl_AutoCloseable = $rt_classWithoutFields(0);
    var ji_Closeable = $rt_classWithoutFields(0);
    var ji_Flushable = $rt_classWithoutFields(0);
    var ji_OutputStream = $rt_classWithoutFields();
    function ji_FilterOutputStream() {
        ji_OutputStream.call(this);
        this.$out0 = null;
    }
    function ji_PrintStream() {
        var a = this; ji_FilterOutputStream.call(a);
        a.$autoFlush = 0;
        a.$errorState = 0;
        a.$sb = null;
        a.$buffer0 = null;
        a.$charset = null;
    }
    function ji_PrintStream__init_(var_0, var_1) {
        var var_2 = new ji_PrintStream();
        ji_PrintStream__init_0(var_2, var_0, var_1);
        return var_2;
    }
    function ji_PrintStream__init_0($this, $out, $autoFlush) {
        $this.$out0 = $out;
        $out = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($out);
        $this.$sb = $out;
        $this.$buffer0 = $rt_createCharArray(32);
        $this.$autoFlush = $autoFlush;
        jnci_UTF8Charset_$callClinit();
        $this.$charset = jnci_UTF8Charset_INSTANCE;
    }
    function ji_PrintStream_write($this, $b, $off, $len) {
        var var$4, $$je;
        var$4 = $this.$out0;
        if (var$4 === null)
            $this.$errorState = 1;
        if (!($this.$errorState ? 0 : 1))
            return;
        a: {
            try {
                var$4.$write2($b, $off, $len);
                break a;
            } catch ($$e) {
                $$je = $rt_wrapException($$e);
                if ($$je instanceof ji_IOException) {
                } else {
                    throw $$e;
                }
            }
            $this.$errorState = 1;
        }
    }
    function ji_PrintStream_print($this, $s) {
        jl_AbstractStringBuilder_append1($this.$sb, $s);
        ji_PrintStream_printSB($this);
    }
    function ji_PrintStream_println0($this, $i) {
        jl_AbstractStringBuilder_append(jl_StringBuilder_append0($this.$sb, $i), 10);
        ji_PrintStream_printSB($this);
    }
    function ji_PrintStream_println($this, $s) {
        var var$2;
        var$2 = $this.$sb;
        jl_AbstractStringBuilder_append1(var$2, $s);
        jl_AbstractStringBuilder_append(var$2, 10);
        ji_PrintStream_printSB($this);
    }
    function ji_PrintStream_println1($this, $s) {
        jl_AbstractStringBuilder_append(jl_StringBuilder_append($this.$sb, $s), 10);
        ji_PrintStream_printSB($this);
    }
    function ji_PrintStream_printSB($this) {
        var var$1, var$2, $buffer, var$4, var$5, var$6, var$7, var$8, var$9, var$10, var$11;
        var$1 = $this.$sb;
        var$2 = var$1.$length0;
        $buffer = $this.$buffer0;
        if (var$2 > $buffer.data.length)
            $buffer = $rt_createCharArray(var$2);
        var$4 = 0;
        var$5 = 0;
        if (var$4 > var$2) {
            var$1 = new jl_IndexOutOfBoundsException;
            jl_Throwable__init_(var$1, $rt_s(304));
            $rt_throw(var$1);
        }
        while (var$4 < var$2) {
            var$6 = $buffer.data;
            var$7 = var$5 + 1 | 0;
            var$8 = var$1.$buffer.data;
            var$9 = var$4 + 1 | 0;
            var$6[var$5] = var$8[var$4];
            var$5 = var$7;
            var$4 = var$9;
        }
        var$6 = $buffer.data;
        var$1 = jn_CharBuffer_wrap($buffer, 0, var$2 - 0 | 0);
        $buffer = $rt_createByteArray(jl_Math_max(16, jl_Math_min(var$6.length, 1024)));
        var$10 = jn_ByteBuffer_wrap($buffer);
        var$11 = jnci_UTF8Charset_newEncoder($this.$charset);
        jnc_CodingErrorAction_$callClinit();
        var$11 = jnc_CharsetEncoder_onUnmappableCharacter(jnc_CharsetEncoder_onMalformedInput(var$11, jnc_CodingErrorAction_REPLACE), jnc_CodingErrorAction_REPLACE);
        while (true) {
            var$5 = jnc_CoderResult_isOverflow(jnc_CharsetEncoder_encode(var$11, var$1, var$10, 1));
            ji_PrintStream_write($this, $buffer, 0, var$10.$position);
            jn_ByteBuffer_clear(var$10);
            if (!var$5)
                break;
        }
        while (true) {
            var$5 = jnc_CoderResult_isOverflow(jnc_CharsetEncoder_flush(var$11, var$10));
            ji_PrintStream_write($this, $buffer, 0, var$10.$position);
            jn_ByteBuffer_clear(var$10);
            if (!var$5)
                break;
        }
        $this.$sb.$length0 = 0;
    }
    function otcic_ConsoleOutputStream() {
        ji_OutputStream.call(this);
        this.$buffer1 = null;
    }
    function otcic_ConsoleOutputStream__init_($this) {
        $this.$buffer1 = $rt_createByteArray(1);
    }
    var otcic_StdoutOutputStream = $rt_classWithoutFields(otcic_ConsoleOutputStream);
    var otcic_StdoutOutputStream_INSTANCE = null;
    function otcic_StdoutOutputStream_write($this, $b, $off, $len) {
        var var$4;
        var$4 = 0;
        while (var$4 < $len) {
            $rt_putStdout($b.data[var$4 + $off | 0] & 255);
            var$4 = var$4 + 1 | 0;
        }
    }
    function otcic_StdoutOutputStream__clinit_() {
        var var$1;
        var$1 = new otcic_StdoutOutputStream;
        otcic_ConsoleOutputStream__init_(var$1);
        otcic_StdoutOutputStream_INSTANCE = var$1;
    }
    function tj_State() {
        var a = this; jl_Object.call(a);
        a.$statements = null;
        a.$globalVariables2 = null;
        a.$localVariables = null;
        a.$pastResult = null;
        a.$returnVal = null;
        a.$currentLine = 0;
        a.$isGlobal = 0;
        a.$isLoop = 0;
        a.$currentRuntimeLine = 0;
        a.$isComplete = 0;
        a.$inForWhenLoop0 = 0;
        a.$forIndex0 = 0;
        a.$loopStartLine = 0;
        a.$states = null;
    }
    function tj_State__init_(var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10, var_11, var_12) {
        var var_13 = new tj_State();
        tj_State__init_0(var_13, var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10, var_11, var_12);
        return var_13;
    }
    function tj_State__init_0($this, $statements, $globalVariables, $localVariables, $pastResult, $returnVal, $currentLine, $isGlobal, $isComplete, $currentRuntimeLine, $isLoop, $loopStartLine, $forIndex, $inForWhenLoop) {
        $this.$currentRuntimeLine = 0;
        $this.$inForWhenLoop0 = 0;
        $this.$forIndex0 = 0;
        $this.$loopStartLine = 0;
        $this.$states = ju_ArrayList__init_();
        $this.$statements = $statements;
        $this.$globalVariables2 = $globalVariables;
        $this.$localVariables = $localVariables;
        $this.$pastResult = $pastResult;
        $this.$returnVal = $returnVal;
        $this.$currentLine = $currentLine;
        $this.$isGlobal = $isGlobal;
        $this.$isComplete = $isComplete;
        $this.$currentRuntimeLine = $currentRuntimeLine;
        $this.$isLoop = $isLoop;
        $this.$loopStartLine = $loopStartLine;
        $this.$forIndex0 = $forIndex;
        $this.$inForWhenLoop0 = $inForWhenLoop;
    }
    function tj_State_setForIndex($this, $forIndex) {
        $this.$forIndex0 = $forIndex;
    }
    function tj_State_getCurrentLine($this) {
        return $this.$currentLine;
    }
    function tj_State_incrementCurrentLine($this) {
        $this.$currentLine = $this.$currentLine + 1 | 0;
    }
    function tj_State_addState($this, $state) {
        ju_ArrayList_add($this.$states, $state);
    }
    function tj_State_removeLastState($this) {
        var var$1;
        var$1 = $this.$states;
        ju_ArrayList_remove(var$1, var$1.$size0 - 1 | 0);
    }
    function tj_State_getLastState($this) {
        var var$1, var$2;
        var$1 = $this.$states;
        var$2 = var$1.$size0;
        if (var$2 ? 0 : 1)
            return $this;
        return ju_ArrayList_get(var$1, var$2 - 1 | 0);
    }
    function tj_State_setComplete($this, $complete) {
        var var$2, var$3, var$4, var$5, var$6, var$7;
        $this.$isComplete = $complete;
        if ($complete) {
            var$2 = $this.$states;
            var$3 = var$2.$array;
            $complete = 0;
            var$4 = var$2.$size0;
            var$5 = null;
            if ($complete > var$4) {
                var$2 = new jl_IllegalArgumentException;
                jl_Exception__init_(var$2);
                $rt_throw(var$2);
            }
            while ($complete < var$4) {
                var$6 = var$3.data;
                var$7 = $complete + 1 | 0;
                var$6[$complete] = var$5;
                $complete = var$7;
            }
            var$2.$size0 = 0;
            var$2.$modCount = var$2.$modCount + 1 | 0;
        }
    }
    function tj_Result() {
        jl_Object.call(this);
        this.$pastResult0 = 0;
    }
    function tj_Result__init_(var_0) {
        var var_1 = new tj_Result();
        tj_Result__init_0(var_1, var_0);
        return var_1;
    }
    function tj_Result__init_0($this, $pastResult) {
        $this.$pastResult0 = $pastResult;
    }
    function tj_Return() {
        var a = this; jl_Object.call(a);
        a.$hasReturn = 0;
        a.$value0 = null;
    }
    function tj_Return__init_(var_0, var_1) {
        var var_2 = new tj_Return();
        tj_Return__init_0(var_2, var_0, var_1);
        return var_2;
    }
    function tj_Return__init_0($this, $hasReturn, $value) {
        $this.$hasReturn = $hasReturn;
        $this.$value0 = $value;
    }
    function tj_Return_getValue($this) {
        return $this.$value0;
    }
    function tj_Debugger() {
        var a = this; jl_Object.call(a);
        a.$lineNumber2 = 0;
        a.$currentState = null;
        a.$globalVariables3 = null;
        a.$inForWhenLoop = 0;
        a.$forIndex = 0;
    }
    function tj_Debugger_debugLine($this, $line, $state) {
        var $prevState, $statements, $loopStart, $returnVal, $localVariables, $pastResult, $isGlobal, $stmt, var$11, var$12, $ptr, $tmp;
        $ptr = 0;
        if ($rt_resuming()) {
            var $thread = $rt_nativeThread();
            $ptr = $thread.pop();var$12 = $thread.pop();var$11 = $thread.pop();$stmt = $thread.pop();$isGlobal = $thread.pop();$pastResult = $thread.pop();$localVariables = $thread.pop();$returnVal = $thread.pop();$loopStart = $thread.pop();$statements = $thread.pop();$prevState = $thread.pop();$state = $thread.pop();$line = $thread.pop();$this = $thread.pop();
        }
        main: while (true) { switch ($ptr) {
        case 0:
            if ($state.$states.$size0 <= 0) {
                $this.$currentState = $state;
                $this.$globalVariables3 = $state.$globalVariables2;
            } else {
                $prevState = tj_State_getLastState($state);
                $this.$currentState = $prevState;
                $statements = $prevState.$statements;
                $this.$globalVariables3 = $prevState.$globalVariables2;
                if ($prevState.$isLoop) {
                    $prevState = $state.$states;
                    $loopStart = $prevState.$size0;
                    if ($loopStart <= 1) {
                        $this.$forIndex = $state.$forIndex0;
                        $this.$inForWhenLoop = $state.$inForWhenLoop0;
                    } else {
                        $prevState = ju_ArrayList_get($prevState, $loopStart - 2 | 0);
                        $this.$forIndex = $prevState.$forIndex0;
                        $this.$inForWhenLoop = $prevState.$inForWhenLoop0;
                    }
                }
                $prevState = $this.$currentState;
                if ($prevState.$currentLine >= $statements.$size0) {
                    if (!$prevState.$isLoop) {
                        ji_PrintStream_println(jl_System_out(), $rt_s(305));
                        tj_State_removeLastState($state);
                        $this.$currentState = tj_State_getLastState($state);
                    } else {
                        ji_PrintStream_println(jl_System_out(), $rt_s(306));
                        $loopStart = $this.$currentState.$loopStartLine;
                        tj_State_removeLastState($state);
                        if (!$state.$states.$size0)
                            $this.$currentState = $state;
                        else
                            $this.$currentState = tj_State_getLastState($state);
                        $this.$currentState.$currentLine = $loopStart;
                    }
                    if (!$state.$states.$size0)
                        $state.$isGlobal = 1;
                    $this.$currentState.$globalVariables2 = $this.$globalVariables3;
                }
            }
            $this.$lineNumber2 = $this.$currentState.$currentLine;
            $prevState = jl_System_out();
            $line = $this.$lineNumber2;
            $returnVal = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($returnVal);
            jl_StringBuilder_append0(jl_StringBuilder_append($returnVal, $rt_s(307)), $line);
            ji_PrintStream_println($prevState, jl_AbstractStringBuilder_toString($returnVal));
            $prevState = jl_System_out();
            $line = $this.$currentState.$statements.$size0;
            $returnVal = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($returnVal);
            jl_StringBuilder_append0(jl_StringBuilder_append($returnVal, $rt_s(308)), $line);
            ji_PrintStream_println($prevState, jl_AbstractStringBuilder_toString($returnVal));
            $prevState = $this.$currentState;
            $statements = $prevState.$statements;
            $localVariables = $prevState.$localVariables;
            $pastResult = $prevState.$pastResult;
            $returnVal = $prevState.$returnVal;
            $isGlobal = $prevState.$isGlobal;
            $line = $this.$lineNumber2;
            if ($line >= $statements.$size0) {
                tj_State_setComplete($prevState, 1);
                return $this.$currentState;
            }
            $stmt = ju_ArrayList_get($statements, $line);
            $prevState = jl_System_out();
            var$11 = jl_String_valueOf($stmt);
            $line = $this.$lineNumber2;
            var$12 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_(var$12);
            var$11 = jl_StringBuilder_append(jl_StringBuilder_append(var$12, $rt_s(309)), var$11);
            jl_AbstractStringBuilder_append(var$11, 32);
            jl_StringBuilder_append0(var$11, $line);
            ji_PrintStream_println($prevState, jl_AbstractStringBuilder_toString(var$12));
            $ptr = 1;
        case 1:
            tj_Debugger_interpretStmt($this, $stmt, $localVariables, $isGlobal, $pastResult, $returnVal);
            if ($rt_suspending()) {
                break main;
            }
            $this.$currentState.$currentRuntimeLine = $stmt.$getLine();
            tj_State_incrementCurrentLine($this.$currentState);
            $prevState = jl_System_out();
            $line = $this.$currentState.$currentLine;
            $returnVal = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($returnVal);
            jl_StringBuilder_append0(jl_StringBuilder_append($returnVal, $rt_s(307)), $line);
            ji_PrintStream_println($prevState, jl_AbstractStringBuilder_toString($returnVal));
            $prevState = jl_System_out();
            $line = $this.$currentState.$states.$size0;
            $returnVal = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($returnVal);
            jl_StringBuilder_append0(jl_StringBuilder_append($returnVal, $rt_s(308)), $line);
            ji_PrintStream_println($prevState, jl_AbstractStringBuilder_toString($returnVal));
            $prevState = jl_System_out();
            $line = $statements.$size0;
            $returnVal = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($returnVal);
            jl_StringBuilder_append0(jl_StringBuilder_append($returnVal, $rt_s(310)), $line);
            ji_PrintStream_println($prevState, jl_AbstractStringBuilder_toString($returnVal));
            if (!$isGlobal)
                return $state;
            $state = $this.$currentState;
            if ($state.$currentLine >= $statements.$size0 && !$state.$states.$size0)
                tj_State_setComplete($state, 1);
            $state = jl_System_out();
            $line = $this.$currentState.$states.$size0;
            $prevState = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($prevState);
            jl_StringBuilder_append0(jl_StringBuilder_append($prevState, $rt_s(308)), $line);
            ji_PrintStream_println($state, jl_AbstractStringBuilder_toString($prevState));
            return $this.$currentState;
        default: $rt_invalidPointer();
        }}
        $rt_nativeThread().push($this, $line, $state, $prevState, $statements, $loopStart, $returnVal, $localVariables, $pastResult, $isGlobal, $stmt, var$11, var$12, $ptr);
    }
    function tj_Debugger_interpretFunction($this, $statements, $args, $params, $name, $isGlobal) {
        var $localVariables, var$7, var$8, var$9, $i, $val, $arg, var$13, $returnVal, $ptr, $tmp;
        $ptr = 0;
        if ($rt_resuming()) {
            var $thread = $rt_nativeThread();
            $ptr = $thread.pop();$returnVal = $thread.pop();var$13 = $thread.pop();$arg = $thread.pop();$val = $thread.pop();$i = $thread.pop();var$9 = $thread.pop();var$8 = $thread.pop();var$7 = $thread.pop();$localVariables = $thread.pop();$isGlobal = $thread.pop();$name = $thread.pop();$params = $thread.pop();$args = $thread.pop();$statements = $thread.pop();$this = $thread.pop();
        }
        main: while (true) { switch ($ptr) {
        case 0:
            a: {
                $localVariables = tj_Variables__init_();
                if ($args !== null && $params !== null) {
                    b: {
                        $args = $args.data;
                        $params = $params.data;
                        var$7 = $args.length;
                        var$8 = $params.length;
                        if (var$7 != var$8) {
                            tj_Error_ArgumentLengthMismatch($name, $this.$lineNumber2, var$7, var$8);
                            var$9 = 0;
                            while (true) {
                                if (var$9 >= var$7)
                                    break b;
                                var$9 = var$9 + 1 | 0;
                            }
                        }
                    }
                    $i = 0;
                    while (true) {
                        if ($i >= var$8)
                            break a;
                        $val = $params[$i];
                        $arg = $args[$i];
                        if ($arg.$type !== $val.$getType0())
                            break;
                        tj_Variables_addVariable($localVariables, $arg.$name3, $arg.$type, $val, $this.$lineNumber2);
                        $i = $i + 1 | 0;
                    }
                    tj_Error_ArgumentTypeMismatch($name, $this.$lineNumber2, $arg.$type.$name4, $val.$typeString());
                    return null;
                }
            }
            $name = tj_Result__init_(0);
            var$13 = tj_Variables__init_0($localVariables);
            $val = tj_Return__init_(0, null);
            $statements = ju_AbstractList_iterator($statements);
            if (!ju_AbstractList$1_hasNext($statements))
                $returnVal = !$val.$hasReturn ? null : $val.$value0;
            else {
                $returnVal = ju_AbstractList$1_next($statements);
                if (!$val.$hasReturn) {
                    $ptr = 1;
                    continue main;
                }
                $returnVal = $val.$value0;
            }
            if ($returnVal !== null)
                return $returnVal;
            return null;
        case 1:
            tj_Debugger_interpretStmt($this, $returnVal, var$13, $isGlobal, $name, $val);
            if ($rt_suspending()) {
                break main;
            }
            if (!ju_AbstractList$1_hasNext($statements))
                $returnVal = !$val.$hasReturn ? null : $val.$value0;
            else {
                $returnVal = ju_AbstractList$1_next($statements);
                if (!$val.$hasReturn) {
                    continue main;
                }
                $returnVal = $val.$value0;
            }
            if ($returnVal !== null)
                return $returnVal;
            return null;
        default: $rt_invalidPointer();
        }}
        $rt_nativeThread().push($this, $statements, $args, $params, $name, $isGlobal, $localVariables, var$7, var$8, var$9, $i, $val, $arg, var$13, $returnVal, $ptr);
    }
    function tj_Debugger_interpretStmt($this, $stmt, $localVariables, $isGlobal, $pastResult, $returnVal) {
        var var$6, $assignment, $call, var$9, var$10, var$11, var$12, $declaration, $elseStmt, $elseifStmt, $ifStmt, $mutationStmt, $returnStmt, $function, $whileStmt, $forwhenStmt, $printStmt, $showMsgBoxStmt, $removeAtStmt, $removeFromStmt, $removeAllFromStmt, $ptr, $tmp;
        $ptr = 0;
        if ($rt_resuming()) {
            var $thread = $rt_nativeThread();
            $ptr = $thread.pop();$removeAllFromStmt = $thread.pop();$removeFromStmt = $thread.pop();$removeAtStmt = $thread.pop();$showMsgBoxStmt = $thread.pop();$printStmt = $thread.pop();$forwhenStmt = $thread.pop();$whileStmt = $thread.pop();$function = $thread.pop();$returnStmt = $thread.pop();$mutationStmt = $thread.pop();$ifStmt = $thread.pop();$elseifStmt = $thread.pop();$elseStmt = $thread.pop();$declaration = $thread.pop();var$12 = $thread.pop();var$11 = $thread.pop();var$10 = $thread.pop();var$9 =
            $thread.pop();$call = $thread.pop();$assignment = $thread.pop();var$6 = $thread.pop();$returnVal = $thread.pop();$pastResult = $thread.pop();$isGlobal = $thread.pop();$localVariables = $thread.pop();$stmt = $thread.pop();$this = $thread.pop();
        }
        main: while (true) { switch ($ptr) {
        case 0:
            a: {
                var$6 = $stmt.$getLine();
                $this.$lineNumber2 = var$6;
                tj_Debugger$1_$callClinit();
                switch (tj_Debugger$1_$SwitchMap$trackerjo$javaish$Statements$StmtType.data[$stmt.$type1.$ordinal0]) {
                    case 1:
                        break;
                    case 2:
                        $assignment = $stmt;
                        $pastResult = $assignment.$name16;
                        $stmt = $assignment.$value16;
                        $ptr = 1;
                        continue main;
                    case 3:
                        $call = $stmt;
                        $assignment = $call.$name17;
                        var$9 = $call.$params0;
                        if (var$9 === null)
                            var$9 = $rt_createArray(tj_Expression, 0);
                        if (var$9.data[0] === null)
                            var$9 = $rt_createArray(tj_Expression, 0);
                        if (!tj_Variables_functionExists($this.$globalVariables3, $assignment))
                            tj_Error_FunctionNotDeclared($assignment, $this.$lineNumber2);
                        else {
                            var$10 = tj_Variables_getFunctionArgs($this.$globalVariables3, $assignment);
                            $stmt = tj_Variables_getFunctionBody($this.$globalVariables3, $assignment);
                            if (var$10 === null)
                                tj_Error_FunctionNotDeclared($assignment, $this.$lineNumber2);
                            else {
                                var$9 = var$9.data;
                                $pastResult = ju_ArrayList__init_();
                                var$11 = var$9.length;
                                var$6 = 0;
                                if (var$6 < var$11) {
                                    $returnVal = var$9[var$6];
                                    $ptr = 14;
                                    continue main;
                                }
                                ju_AbstractCollection_toArray($pastResult, $rt_createArray(tj_JavaishVal, $pastResult.$size0));
                                $returnVal = tj_Result__init_(0);
                                var$12 = (ju_HashMap_get($this.$globalVariables3.$functions, $assignment)).$lineNumber3;
                                $call = tj_Return__init_(0, null);
                                $pastResult = tj_State__init_($stmt, $this.$globalVariables3, $localVariables, $returnVal, $call, 0, 0, 0, var$12, 0, 0, 0, 0);
                                tj_State_addState($this.$currentState, $pastResult);
                                $stmt = jl_System_out();
                                $localVariables = new jl_StringBuilder;
                                jl_AbstractStringBuilder__init_($localVariables);
                                jl_StringBuilder_append(jl_StringBuilder_append($localVariables, $rt_s(311)), $assignment);
                                ji_PrintStream_println($stmt, jl_AbstractStringBuilder_toString($localVariables));
                                ji_PrintStream_println0(jl_System_out(), $this.$currentState.$states.$size0);
                            }
                        }
                        break a;
                    case 4:
                        $declaration = $stmt;
                        $ptr = 2;
                        continue main;
                    case 5:
                        $elseStmt = $stmt;
                        $stmt = $elseStmt.$body;
                        if ($pastResult.$pastResult0 != 1) {
                            $returnVal = tj_Result__init_(0);
                            $assignment = tj_Return__init_(0, null);
                            $pastResult = tj_State__init_($stmt, $this.$globalVariables3, $localVariables, $returnVal, $assignment, 0, 0, 0, $elseStmt.$line, 0, 0, 0, 0);
                            tj_State_addState($this.$currentState, $pastResult);
                        }
                        break a;
                    case 6:
                        $elseifStmt = $stmt;
                        $stmt = $elseifStmt.$condition;
                        $ifStmt = $elseifStmt.$body;
                        $ptr = 3;
                        continue main;
                    case 7:
                        $mutationStmt = $stmt;
                        $ptr = 4;
                        continue main;
                    case 8:
                        $returnStmt = $stmt;
                        $pastResult = $returnStmt.$value17;
                        $stmt = null;
                        if (!$returnStmt.$hasReturn0) {
                            $returnVal.$hasReturn = 1;
                            $returnVal.$value0 = $stmt;
                            break a;
                        }
                        $ptr = 13;
                        continue main;
                    case 9:
                        $function = $stmt;
                        $pastResult = $function.$name18;
                        var$9 = $function.$args1;
                        $localVariables = $function.$body;
                        if (!$isGlobal)
                            tj_Error_FunctionNotGlobal($pastResult, var$6);
                        else
                            tj_Variables_addFunction($this.$globalVariables3, $pastResult, $localVariables, var$9, var$6);
                        break a;
                    case 10:
                        $ifStmt = $stmt;
                        $ptr = 5;
                        continue main;
                    case 11:
                        $whileStmt = $stmt;
                        $stmt = tj_WhileStmt_getCondition($whileStmt);
                        $ptr = 6;
                        continue main;
                    case 12:
                        tj_Debugger_evalForEach($this, $stmt, $localVariables, $isGlobal);
                        break a;
                    case 13:
                        $forwhenStmt = $stmt;
                        $ptr = 7;
                        continue main;
                    case 14:
                        $printStmt = $stmt;
                        $ptr = 8;
                        continue main;
                    case 15:
                        $showMsgBoxStmt = $stmt;
                        $ptr = 9;
                        continue main;
                    case 16:
                        $removeAtStmt = $stmt;
                        $ptr = 10;
                        continue main;
                    case 17:
                        $removeFromStmt = $stmt;
                        $ptr = 11;
                        continue main;
                    case 18:
                        $removeAllFromStmt = $stmt;
                        $ptr = 12;
                        continue main;
                    default:
                        break a;
                }
            }
            return;
        case 1:
            $tmp = tj_Debugger_evalExpression($this, $stmt, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            $stmt = $tmp;
            if (tj_Variables_isVariable($localVariables, $pastResult))
                tj_Variables_setVariableValue($localVariables, $pastResult, $stmt, $this.$lineNumber2);
            else
                tj_Variables_setVariableValue($this.$globalVariables3, $pastResult, $stmt, $this.$lineNumber2);
            return;
        case 2:
            tj_Debugger_evalDeclaration($this, $declaration, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            return;
        case 3:
            $tmp = tj_Debugger_evalExpression($this, $stmt, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            $stmt = $tmp;
            $stmt = $stmt;
            $returnVal = jl_System_out();
            $elseStmt = $stmt.$value18;
            $isGlobal = $pastResult.$pastResult0;
            $assignment = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($assignment);
            jl_StringBuilder_append4(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($assignment, $rt_s(269)), $elseStmt), $rt_s(270)), $isGlobal);
            ji_PrintStream_println($returnVal, jl_AbstractStringBuilder_toString($assignment));
            if ($pastResult.$pastResult0 != 1 && $stmt.$value18.$value19 == 1) {
                $pastResult.$pastResult0 = 1;
                $stmt = tj_Result__init_(0);
                $pastResult = tj_Return__init_(0, null);
                $returnVal = tj_State__init_($ifStmt, $this.$globalVariables3, $localVariables, $stmt, $pastResult, 0, 0, 0, $elseifStmt.$line, 0, 0, 0, 0);
                tj_State_addState($this.$currentState, $returnVal);
            }
            return;
        case 4:
            tj_Debugger_evalMutation($this, $mutationStmt, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            return;
        case 5:
            tj_Debugger_evalIf($this, $ifStmt, $localVariables, $isGlobal, $pastResult);
            if ($rt_suspending()) {
                break main;
            }
            return;
        case 6:
            $tmp = tj_Debugger_evalExpression($this, $stmt, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            $stmt = $tmp;
            if ($stmt !== null && jl_Boolean_booleanValue(tj_JavaishBoolean_getValue($stmt)) == 1) {
                $stmt = tj_Result__init_(0);
                $isGlobal = tj_WhileStmt_getLine($whileStmt);
                $pastResult = tj_Return__init_(0, null);
                $returnVal = tj_State__init_(tj_Statements_getBody($whileStmt), $this.$globalVariables3, $localVariables, $stmt, $pastResult, 0, 0, 0, $isGlobal, 1, tj_State_getCurrentLine($this.$currentState), 0, 0);
                tj_State_addState($this.$currentState, $returnVal);
            }
            return;
        case 7:
            tj_Debugger_evalForWhen($this, $forwhenStmt, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            return;
        case 8:
            tj_Debugger_evalPrint($this, $printStmt, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            return;
        case 9:
            tj_Debugger_evalShowMsgBox($this, $showMsgBoxStmt, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            return;
        case 10:
            tj_Debugger_evalRemoveAt($this, $removeAtStmt, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            return;
        case 11:
            tj_Debugger_evalRemoveFrom($this, $removeFromStmt, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            return;
        case 12:
            tj_Debugger_evalRemoveAllFrom($this, $removeAllFromStmt, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            return;
        case 13:
            $tmp = tj_Debugger_evalExpression($this, $pastResult, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            $stmt = $tmp;
            $returnVal.$hasReturn = 1;
            $returnVal.$value0 = $stmt;
            return;
        case 14:
            $tmp = tj_Debugger_evalExpression($this, $returnVal, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            $returnVal = $tmp;
            ju_ArrayList_add($pastResult, $returnVal);
            var$6 = var$6 + 1 | 0;
            if (var$6 >= var$11) {
                ju_AbstractCollection_toArray($pastResult, $rt_createArray(tj_JavaishVal, $pastResult.$size0));
                $returnVal = tj_Result__init_(0);
                var$12 = (ju_HashMap_get($this.$globalVariables3.$functions, $assignment)).$lineNumber3;
                $call = tj_Return__init_(0, null);
                $pastResult = tj_State__init_($stmt, $this.$globalVariables3, $localVariables, $returnVal, $call, 0, 0, 0, var$12, 0, 0, 0, 0);
                tj_State_addState($this.$currentState, $pastResult);
                $stmt = jl_System_out();
                $localVariables = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_($localVariables);
                jl_StringBuilder_append(jl_StringBuilder_append($localVariables, $rt_s(311)), $assignment);
                ji_PrintStream_println($stmt, jl_AbstractStringBuilder_toString($localVariables));
                ji_PrintStream_println0(jl_System_out(), $this.$currentState.$states.$size0);
                return;
            }
            $returnVal = var$9[var$6];
            continue main;
        default: $rt_invalidPointer();
        }}
        $rt_nativeThread().push($this, $stmt, $localVariables, $isGlobal, $pastResult, $returnVal, var$6, $assignment, $call, var$9, var$10, var$11, var$12, $declaration, $elseStmt, $elseifStmt, $ifStmt, $mutationStmt, $returnStmt, $function, $whileStmt, $forwhenStmt, $printStmt, $showMsgBoxStmt, $removeAtStmt, $removeFromStmt, $removeAllFromStmt, $ptr);
    }
    function tj_Debugger_evalExpression($this, $expression, $localVariables, $isGlobal) {
        var $total, $operation, $comparison, $compVal, $isComp, var$9, var$10, var$11, $elmt, $result, $bool, $valB, $cast, $floatElmt, $valF, $integer, $valI, $string, $valS, $function, $body, $args, $params, $paramVals, $listLength, var$29, $param, $paramValsArr, $showInputBox, $listVal, $arrayName, $listL, $length, $resultO, $variable, $list, $type, $listExpressions, $listVals, $listExpression, $intList, $listValI, $intListVal, $floatList, $floatListVal, $stringList, $stringListVal, $booleanList, $booleanListVal,
        $valNot, $val, $newVal, $expressionElmt, $input, $index, $listValVal, $valFunc, $$je, $ptr, $tmp;
        $ptr = 0;
        if ($rt_resuming()) {
            var $thread = $rt_nativeThread();
            $ptr = $thread.pop();$valFunc = $thread.pop();$listValVal = $thread.pop();$index = $thread.pop();$input = $thread.pop();$expressionElmt = $thread.pop();$newVal = $thread.pop();$val = $thread.pop();$valNot = $thread.pop();$booleanListVal = $thread.pop();$booleanList = $thread.pop();$stringListVal = $thread.pop();$stringList = $thread.pop();$floatListVal = $thread.pop();$floatList = $thread.pop();$intListVal = $thread.pop();$listValI = $thread.pop();$intList = $thread.pop();$listExpression = $thread.pop();$listVals
            = $thread.pop();$listExpressions = $thread.pop();$type = $thread.pop();$list = $thread.pop();$variable = $thread.pop();$resultO = $thread.pop();$length = $thread.pop();$listL = $thread.pop();$arrayName = $thread.pop();$listVal = $thread.pop();$showInputBox = $thread.pop();$paramValsArr = $thread.pop();$param = $thread.pop();var$29 = $thread.pop();$listLength = $thread.pop();$paramVals = $thread.pop();$params = $thread.pop();$args = $thread.pop();$body = $thread.pop();$function = $thread.pop();$valS
            = $thread.pop();$string = $thread.pop();$valI = $thread.pop();$integer = $thread.pop();$valF = $thread.pop();$floatElmt = $thread.pop();$cast = $thread.pop();$valB = $thread.pop();$bool = $thread.pop();$result = $thread.pop();$elmt = $thread.pop();var$11 = $thread.pop();var$10 = $thread.pop();var$9 = $thread.pop();$isComp = $thread.pop();$compVal = $thread.pop();$comparison = $thread.pop();$operation = $thread.pop();$total = $thread.pop();$isGlobal = $thread.pop();$localVariables = $thread.pop();$expression
            = $thread.pop();$this = $thread.pop();
        }
        main: while (true) { switch ($ptr) {
        case 0:
            $total = null;
            $operation = null;
            $comparison = null;
            $compVal = null;
            $isComp = 0;
            var$9 = (tj_Expression_getElements($expression)).data;
            var$10 = var$9.length;
            var$11 = 0;
            a: while (true) {
                if (var$11 >= var$10) {
                    if (!$isComp)
                        return $total;
                    return tj_Debugger_performComparision($this, $comparison, $total, $compVal);
                }
                b: {
                    c: {
                        d: {
                            e: {
                                $elmt = var$9[var$11];
                                tj_Debugger$1_$callClinit();
                                switch (tj_Debugger$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element_getType($elmt))]) {
                                    case 1:
                                        $result = tj_Debugger_performComparision($this, $comparison, $total, $compVal);
                                        if ($result === null)
                                            break a;
                                        if (!jl_Boolean_booleanValue(tj_JavaishBoolean_getValue($result)))
                                            return tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                        $total = null;
                                        $operation = null;
                                        $comparison = null;
                                        $compVal = null;
                                        $isComp = 0;
                                        break b;
                                    case 2:
                                        $expression = $elmt.$expression0;
                                        $ptr = 1;
                                        continue main;
                                    case 3:
                                        $bool = $elmt;
                                        $valB = tj_JavaishBoolean__init_(jl_Boolean_valueOf(tj_BoolElmt_getValue($bool)));
                                        if (!$isComp) {
                                            $total = tj_Debugger_performOperation($this, $operation, $total, $valB);
                                            break b;
                                        }
                                        $compVal = tj_Debugger_performOperation($this, $operation, $compVal, $valB);
                                        break b;
                                    case 4:
                                        $cast = $elmt;
                                        $expression = $cast.$element;
                                        $ptr = 2;
                                        continue main;
                                    case 5:
                                        tj_Debugger$Operator_$callClinit();
                                        $operation = tj_Debugger$Operator_DIVIDE;
                                        break b;
                                    case 6:
                                        tj_Debugger$Operator_$callClinit();
                                        $comparison = tj_Debugger$Operator_EQUAL;
                                        $isComp = 1;
                                        break b;
                                    case 7:
                                        $expression = $elmt.$expression;
                                        $ptr = 3;
                                        continue main;
                                    case 8:
                                        $floatElmt = $elmt;
                                        $valF = tj_JavaishFloat__init_(tj_FloatElmt_getValue($floatElmt));
                                        if (!$isComp) {
                                            $total = tj_Debugger_performOperation($this, $operation, $total, $valF);
                                            break b;
                                        }
                                        $compVal = tj_Debugger_performOperation($this, $operation, $compVal, $valF);
                                        break b;
                                    case 9:
                                        tj_Debugger$Operator_$callClinit();
                                        $comparison = tj_Debugger$Operator_GREATER_THAN;
                                        $isComp = 1;
                                        break b;
                                    case 10:
                                        tj_Debugger$Operator_$callClinit();
                                        $comparison = tj_Debugger$Operator_GREATER_THAN_EQUAL;
                                        $isComp = 1;
                                        break b;
                                    case 11:
                                        $integer = $elmt;
                                        $valI = tj_JavaishInt__init_(tj_IntElmt_getValue($integer));
                                        if (!$isComp) {
                                            $total = tj_Debugger_performOperation($this, $operation, $total, $valI);
                                            break b;
                                        }
                                        $compVal = tj_Debugger_performOperation($this, $operation, $compVal, $valI);
                                        break b;
                                    case 12:
                                        tj_Debugger$Operator_$callClinit();
                                        $comparison = tj_Debugger$Operator_LESS_THAN;
                                        $isComp = 1;
                                        break b;
                                    case 13:
                                        tj_Debugger$Operator_$callClinit();
                                        $comparison = tj_Debugger$Operator_LESS_THAN_EQUAL;
                                        $isComp = 1;
                                        break b;
                                    case 14:
                                        tj_Debugger$Operator_$callClinit();
                                        $operation = tj_Debugger$Operator_MINUS;
                                        break b;
                                    case 15:
                                        tj_Debugger$Operator_$callClinit();
                                        $operation = tj_Debugger$Operator_MULTIPLY;
                                        break b;
                                    case 16:
                                        tj_Debugger$Operator_$callClinit();
                                        $comparison = tj_Debugger$Operator_NOT_EQUAL;
                                        $isComp = 1;
                                        break b;
                                    case 17:
                                        break e;
                                    case 18:
                                        tj_Debugger$Operator_$callClinit();
                                        $operation = tj_Debugger$Operator_PLUS;
                                        break b;
                                    case 19:
                                        $string = $elmt;
                                        $valS = tj_JavaishString__init_(tj_StringElmt_getValue($string));
                                        if (!$isComp) {
                                            $total = tj_Debugger_performOperation($this, $operation, $total, $valS);
                                            break b;
                                        }
                                        $compVal = tj_Debugger_performOperation($this, $operation, $compVal, $valS);
                                        break b;
                                    case 20:
                                        break d;
                                    case 21:
                                        $function = $elmt;
                                        $body = tj_Variables_getFunctionBody($this.$globalVariables3, tj_FunctionElmt_getName($function));
                                        $args = tj_Variables_getFunctionArgs($this.$globalVariables3, tj_FunctionElmt_getName($function));
                                        $params = (tj_FunctionElmt_getParams($function)).data;
                                        $paramVals = ju_ArrayList__init_();
                                        $listLength = $params.length;
                                        var$29 = 0;
                                        if (var$29 < $listLength) {
                                            $param = $params[var$29];
                                            $ptr = 7;
                                            continue main;
                                        }
                                        $paramValsArr = ju_AbstractCollection_toArray($paramVals, $rt_createArray(tj_JavaishVal, ju_ArrayList_size($paramVals)));
                                        $expression = tj_FunctionElmt_getName($function);
                                        $listLength = 0;
                                        $ptr = 6;
                                        continue main;
                                    case 22:
                                        $showInputBox = $elmt;
                                        $ptr = 4;
                                        continue main;
                                    case 23:
                                        $listVal = $elmt;
                                        $expression = tj_ListValElmt_getIndex($listVal);
                                        $ptr = 5;
                                        continue main;
                                    case 24:
                                        break c;
                                    case 25:
                                        $arrayName = tj_ArrayLengthElmt_getArrayName($elmt);
                                        if (tj_Variables_isVariable($localVariables, $arrayName))
                                            $expression = tj_Variables_getVariableValue($localVariables, $arrayName);
                                        else {
                                            if (!tj_Variables_isVariable($this.$globalVariables3, $arrayName)) {
                                                tj_Error_VariableNotDeclared($arrayName, $this.$lineNumber2);
                                                return null;
                                            }
                                            $expression = tj_Variables_getVariableValue($this.$globalVariables3, $arrayName);
                                        }
                                        if (!($expression instanceof tj_JavaishListVal)) {
                                            tj_Error_TypeMismatch($rt_s(293), $expression.$typeString(), $this.$lineNumber2);
                                            return null;
                                        }
                                        $listL = tj_JavaishListVal_getValue($expression);
                                        $length = tj_JavaishInt__init_($listL.$getLength());
                                        if (!$isComp)
                                            $total = tj_Debugger_performOperation($this, $operation, $total, $length);
                                        else
                                            $compVal = tj_Debugger_performOperation($this, $operation, $compVal, $length);
                                        break b;
                                    default:
                                }
                                break b;
                            }
                            $resultO = tj_Debugger_performComparision($this, $comparison, $total, $compVal);
                            if ($resultO === null)
                                return null;
                            if (jl_Boolean_booleanValue(tj_JavaishBoolean_getValue($resultO)) == 1)
                                return tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                            $total = null;
                            $operation = null;
                            $compVal = null;
                            $isComp = 0;
                            break b;
                        }
                        $variable = $elmt;
                        if (tj_Variables_isVariable($localVariables, tj_VariableElmt_getName($variable)))
                            $expression = tj_Variables_getVariableValue($localVariables, tj_VariableElmt_getName($variable));
                        else {
                            if (!tj_Variables_isVariable($this.$globalVariables3, tj_VariableElmt_getName($variable))) {
                                tj_Error_VariableNotDeclared(tj_VariableElmt_getName($variable), $this.$lineNumber2);
                                return null;
                            }
                            $expression = tj_Variables_getVariableValue($this.$globalVariables3, tj_VariableElmt_getName($variable));
                        }
                        if (!$isComp) {
                            $total = tj_Debugger_performOperation($this, $operation, $total, $expression);
                            break b;
                        }
                        $compVal = tj_Debugger_performOperation($this, $operation, $compVal, $expression);
                        break b;
                    }
                    $list = $elmt;
                    $type = tj_ListElmt_getListType($list);
                    $listExpressions = tj_ListElmt_getList($list);
                    $listVals = ju_ArrayList__init_();
                    $expression = ju_AbstractList_iterator($listExpressions);
                    if (ju_AbstractList$1_hasNext($expression)) {
                        $listExpression = ju_AbstractList$1_next($expression);
                        $ptr = 8;
                        continue main;
                    }
                    switch (tj_Debugger$1_$SwitchMap$trackerjo$javaish$JavaishVal$JavaishType.data[jl_Enum_ordinal($type)]) {
                        case 5:
                            $intList = ju_ArrayList__init_();
                            $expression = ju_AbstractList_iterator($listVals);
                            while (ju_AbstractList$1_hasNext($expression)) {
                                $listValI = ju_AbstractList$1_next($expression);
                                if (!($listValI instanceof tj_JavaishInt)) {
                                    tj_Error_TypeMismatch($rt_s(187), $listValI.$typeString(), $this.$lineNumber2);
                                    return null;
                                }
                                ju_ArrayList_add($intList, $listValI);
                            }
                            $intListVal = tj_JavaishIntList__init_($intList);
                            if (!$isComp) {
                                if ($operation === null) {
                                    $total = tj_JavaishListVal__init_($intListVal);
                                    break b;
                                }
                                tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(191), $this.$lineNumber2);
                                break b;
                            }
                            if ($operation === null) {
                                $compVal = tj_JavaishListVal__init_($intListVal);
                                break b;
                            }
                            tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(191), $this.$lineNumber2);
                            break b;
                        case 6:
                            $floatList = ju_ArrayList__init_();
                            $expression = ju_AbstractList_iterator($listVals);
                            while (ju_AbstractList$1_hasNext($expression)) {
                                $listValI = ju_AbstractList$1_next($expression);
                                if (!($listValI instanceof tj_JavaishFloat)) {
                                    tj_Error_TypeMismatch($rt_s(184), $listValI.$typeString(), $this.$lineNumber2);
                                    return null;
                                }
                                ju_ArrayList_add($floatList, $listValI);
                            }
                            $floatListVal = tj_JavaishFloatList__init_($floatList);
                            if (!$isComp) {
                                if ($operation === null) {
                                    $total = tj_JavaishListVal__init_($floatListVal);
                                    break b;
                                }
                                tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(188), $this.$lineNumber2);
                                break b;
                            }
                            if ($operation === null) {
                                $compVal = tj_JavaishListVal__init_($floatListVal);
                                break b;
                            }
                            tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(188), $this.$lineNumber2);
                            break b;
                        case 7:
                            $stringList = ju_ArrayList__init_();
                            $expression = ju_AbstractList_iterator($listVals);
                            while (ju_AbstractList$1_hasNext($expression)) {
                                $listValI = ju_AbstractList$1_next($expression);
                                if (!($listValI instanceof tj_JavaishString)) {
                                    tj_Error_TypeMismatch($rt_s(186), $listValI.$typeString(), $this.$lineNumber2);
                                    return null;
                                }
                                ju_ArrayList_add($stringList, $listValI);
                            }
                            $stringListVal = tj_JavaishStringList__init_($stringList);
                            if (!$isComp) {
                                if ($operation === null) {
                                    $total = tj_JavaishListVal__init_($stringListVal);
                                    break b;
                                }
                                tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(190), $this.$lineNumber2);
                                break b;
                            }
                            if ($operation === null) {
                                $compVal = tj_JavaishListVal__init_($stringListVal);
                                break b;
                            }
                            tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(190), $this.$lineNumber2);
                            break b;
                        case 8:
                            $booleanList = ju_ArrayList__init_();
                            $expression = ju_AbstractList_iterator($listVals);
                            while (ju_AbstractList$1_hasNext($expression)) {
                                $listValI = ju_AbstractList$1_next($expression);
                                if (!($listValI instanceof tj_JavaishBoolean)) {
                                    tj_Error_TypeMismatch($rt_s(185), $listValI.$typeString(), $this.$lineNumber2);
                                    return null;
                                }
                                ju_ArrayList_add($booleanList, $listValI);
                            }
                            $booleanListVal = tj_JavaishBooleanList__init_($booleanList);
                            if (!$isComp) {
                                if ($operation === null) {
                                    $total = tj_JavaishListVal__init_($booleanListVal);
                                    break b;
                                }
                                tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(189), $this.$lineNumber2);
                                break b;
                            }
                            if ($operation === null) {
                                $compVal = tj_JavaishListVal__init_($booleanListVal);
                                break b;
                            }
                            tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(189), $this.$lineNumber2);
                            break b;
                        default:
                    }
                }
                var$11 = var$11 + 1 | 0;
            }
            return null;
        case 1:
            $tmp = tj_Debugger_evalExpression($this, $expression, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            $valNot = $tmp;
            if (!($valNot instanceof tj_JavaishBoolean))
                tj_Error_TypeMismatch($rt_s(185), $valNot.$typeString(), $this.$lineNumber2);
            else {
                $expression = jl_Boolean_booleanValue(tj_JavaishBoolean_getValue($valNot)) != 1 ? tj_JavaishBoolean__init_(jl_Boolean_valueOf(1)) : tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                if (!$isComp)
                    $total = tj_Debugger_performOperation($this, $operation, $total, $expression);
                else
                    $compVal = tj_Debugger_performOperation($this, $operation, $compVal, $expression);
            }
            e: while (true) {
                var$11 = var$11 + 1 | 0;
                if (var$11 >= var$10) {
                    if (!$isComp)
                        return $total;
                    return tj_Debugger_performComparision($this, $comparison, $total, $compVal);
                }
                f: {
                    g: {
                        h: {
                            $elmt = var$9[var$11];
                            tj_Debugger$1_$callClinit();
                            switch (tj_Debugger$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element_getType($elmt))]) {
                                case 1:
                                    $result = tj_Debugger_performComparision($this, $comparison, $total, $compVal);
                                    if ($result === null)
                                        break e;
                                    if (!jl_Boolean_booleanValue(tj_JavaishBoolean_getValue($result)))
                                        return tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    $total = null;
                                    $operation = null;
                                    $comparison = null;
                                    $compVal = null;
                                    $isComp = 0;
                                    continue e;
                                case 2:
                                    $expression = $elmt.$expression0;
                                    continue main;
                                case 3:
                                    $bool = $elmt;
                                    $valB = tj_JavaishBoolean__init_(jl_Boolean_valueOf(tj_BoolElmt_getValue($bool)));
                                    if (!$isComp) {
                                        $total = tj_Debugger_performOperation($this, $operation, $total, $valB);
                                        continue e;
                                    }
                                    $compVal = tj_Debugger_performOperation($this, $operation, $compVal, $valB);
                                    continue e;
                                case 4:
                                    $cast = $elmt;
                                    $expression = $cast.$element;
                                    $ptr = 2;
                                    continue main;
                                case 5:
                                    tj_Debugger$Operator_$callClinit();
                                    $operation = tj_Debugger$Operator_DIVIDE;
                                    continue e;
                                case 6:
                                    tj_Debugger$Operator_$callClinit();
                                    $comparison = tj_Debugger$Operator_EQUAL;
                                    $isComp = 1;
                                    continue e;
                                case 7:
                                    $expression = $elmt.$expression;
                                    $ptr = 3;
                                    continue main;
                                case 8:
                                    $floatElmt = $elmt;
                                    $valF = tj_JavaishFloat__init_(tj_FloatElmt_getValue($floatElmt));
                                    if (!$isComp) {
                                        $total = tj_Debugger_performOperation($this, $operation, $total, $valF);
                                        continue e;
                                    }
                                    $compVal = tj_Debugger_performOperation($this, $operation, $compVal, $valF);
                                    continue e;
                                case 9:
                                    tj_Debugger$Operator_$callClinit();
                                    $comparison = tj_Debugger$Operator_GREATER_THAN;
                                    $isComp = 1;
                                    continue e;
                                case 10:
                                    tj_Debugger$Operator_$callClinit();
                                    $comparison = tj_Debugger$Operator_GREATER_THAN_EQUAL;
                                    $isComp = 1;
                                    continue e;
                                case 11:
                                    $integer = $elmt;
                                    $valI = tj_JavaishInt__init_(tj_IntElmt_getValue($integer));
                                    if (!$isComp) {
                                        $total = tj_Debugger_performOperation($this, $operation, $total, $valI);
                                        continue e;
                                    }
                                    $compVal = tj_Debugger_performOperation($this, $operation, $compVal, $valI);
                                    continue e;
                                case 12:
                                    tj_Debugger$Operator_$callClinit();
                                    $comparison = tj_Debugger$Operator_LESS_THAN;
                                    $isComp = 1;
                                    continue e;
                                case 13:
                                    tj_Debugger$Operator_$callClinit();
                                    $comparison = tj_Debugger$Operator_LESS_THAN_EQUAL;
                                    $isComp = 1;
                                    continue e;
                                case 14:
                                    tj_Debugger$Operator_$callClinit();
                                    $operation = tj_Debugger$Operator_MINUS;
                                    continue e;
                                case 15:
                                    tj_Debugger$Operator_$callClinit();
                                    $operation = tj_Debugger$Operator_MULTIPLY;
                                    continue e;
                                case 16:
                                    tj_Debugger$Operator_$callClinit();
                                    $comparison = tj_Debugger$Operator_NOT_EQUAL;
                                    $isComp = 1;
                                    continue e;
                                case 17:
                                    break h;
                                case 18:
                                    tj_Debugger$Operator_$callClinit();
                                    $operation = tj_Debugger$Operator_PLUS;
                                    continue e;
                                case 19:
                                    $string = $elmt;
                                    $valS = tj_JavaishString__init_(tj_StringElmt_getValue($string));
                                    if (!$isComp) {
                                        $total = tj_Debugger_performOperation($this, $operation, $total, $valS);
                                        continue e;
                                    }
                                    $compVal = tj_Debugger_performOperation($this, $operation, $compVal, $valS);
                                    continue e;
                                case 20:
                                    break g;
                                case 21:
                                    $function = $elmt;
                                    $body = tj_Variables_getFunctionBody($this.$globalVariables3, tj_FunctionElmt_getName($function));
                                    $args = tj_Variables_getFunctionArgs($this.$globalVariables3, tj_FunctionElmt_getName($function));
                                    $params = (tj_FunctionElmt_getParams($function)).data;
                                    $paramVals = ju_ArrayList__init_();
                                    $listLength = $params.length;
                                    var$29 = 0;
                                    if (var$29 < $listLength) {
                                        $param = $params[var$29];
                                        $ptr = 7;
                                        continue main;
                                    }
                                    $paramValsArr = ju_AbstractCollection_toArray($paramVals, $rt_createArray(tj_JavaishVal, ju_ArrayList_size($paramVals)));
                                    $expression = tj_FunctionElmt_getName($function);
                                    $listLength = 0;
                                    $ptr = 6;
                                    continue main;
                                case 22:
                                    $showInputBox = $elmt;
                                    $ptr = 4;
                                    continue main;
                                case 23:
                                    $listVal = $elmt;
                                    $expression = tj_ListValElmt_getIndex($listVal);
                                    $ptr = 5;
                                    continue main;
                                case 24:
                                    break f;
                                case 25:
                                    $arrayName = tj_ArrayLengthElmt_getArrayName($elmt);
                                    if (tj_Variables_isVariable($localVariables, $arrayName))
                                        $expression = tj_Variables_getVariableValue($localVariables, $arrayName);
                                    else {
                                        if (!tj_Variables_isVariable($this.$globalVariables3, $arrayName)) {
                                            tj_Error_VariableNotDeclared($arrayName, $this.$lineNumber2);
                                            return null;
                                        }
                                        $expression = tj_Variables_getVariableValue($this.$globalVariables3, $arrayName);
                                    }
                                    if (!($expression instanceof tj_JavaishListVal)) {
                                        tj_Error_TypeMismatch($rt_s(293), $expression.$typeString(), $this.$lineNumber2);
                                        return null;
                                    }
                                    $listL = tj_JavaishListVal_getValue($expression);
                                    $length = tj_JavaishInt__init_($listL.$getLength());
                                    if (!$isComp)
                                        $total = tj_Debugger_performOperation($this, $operation, $total, $length);
                                    else
                                        $compVal = tj_Debugger_performOperation($this, $operation, $compVal, $length);
                                    continue e;
                                default:
                            }
                            continue e;
                        }
                        $resultO = tj_Debugger_performComparision($this, $comparison, $total, $compVal);
                        if ($resultO === null)
                            return null;
                        if (jl_Boolean_booleanValue(tj_JavaishBoolean_getValue($resultO)) == 1)
                            return tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                        $total = null;
                        $operation = null;
                        $compVal = null;
                        $isComp = 0;
                        continue e;
                    }
                    $variable = $elmt;
                    if (tj_Variables_isVariable($localVariables, tj_VariableElmt_getName($variable)))
                        $expression = tj_Variables_getVariableValue($localVariables, tj_VariableElmt_getName($variable));
                    else {
                        if (!tj_Variables_isVariable($this.$globalVariables3, tj_VariableElmt_getName($variable))) {
                            tj_Error_VariableNotDeclared(tj_VariableElmt_getName($variable), $this.$lineNumber2);
                            return null;
                        }
                        $expression = tj_Variables_getVariableValue($this.$globalVariables3, tj_VariableElmt_getName($variable));
                    }
                    if (!$isComp) {
                        $total = tj_Debugger_performOperation($this, $operation, $total, $expression);
                        continue e;
                    }
                    $compVal = tj_Debugger_performOperation($this, $operation, $compVal, $expression);
                    continue e;
                }
                $list = $elmt;
                $type = tj_ListElmt_getListType($list);
                $listExpressions = tj_ListElmt_getList($list);
                $listVals = ju_ArrayList__init_();
                $expression = ju_AbstractList_iterator($listExpressions);
                if (ju_AbstractList$1_hasNext($expression)) {
                    $listExpression = ju_AbstractList$1_next($expression);
                    $ptr = 8;
                    continue main;
                }
                switch (tj_Debugger$1_$SwitchMap$trackerjo$javaish$JavaishVal$JavaishType.data[jl_Enum_ordinal($type)]) {
                    case 5:
                        $intList = ju_ArrayList__init_();
                        $expression = ju_AbstractList_iterator($listVals);
                        while (ju_AbstractList$1_hasNext($expression)) {
                            $listValI = ju_AbstractList$1_next($expression);
                            if (!($listValI instanceof tj_JavaishInt)) {
                                tj_Error_TypeMismatch($rt_s(187), $listValI.$typeString(), $this.$lineNumber2);
                                return null;
                            }
                            ju_ArrayList_add($intList, $listValI);
                        }
                        $intListVal = tj_JavaishIntList__init_($intList);
                        if (!$isComp) {
                            if ($operation === null) {
                                $total = tj_JavaishListVal__init_($intListVal);
                                continue e;
                            }
                            tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(191), $this.$lineNumber2);
                            continue e;
                        }
                        if ($operation === null) {
                            $compVal = tj_JavaishListVal__init_($intListVal);
                            continue e;
                        }
                        tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(191), $this.$lineNumber2);
                        continue e;
                    case 6:
                        $floatList = ju_ArrayList__init_();
                        $expression = ju_AbstractList_iterator($listVals);
                        while (ju_AbstractList$1_hasNext($expression)) {
                            $listValI = ju_AbstractList$1_next($expression);
                            if (!($listValI instanceof tj_JavaishFloat)) {
                                tj_Error_TypeMismatch($rt_s(184), $listValI.$typeString(), $this.$lineNumber2);
                                return null;
                            }
                            ju_ArrayList_add($floatList, $listValI);
                        }
                        $floatListVal = tj_JavaishFloatList__init_($floatList);
                        if (!$isComp) {
                            if ($operation === null) {
                                $total = tj_JavaishListVal__init_($floatListVal);
                                continue e;
                            }
                            tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(188), $this.$lineNumber2);
                            continue e;
                        }
                        if ($operation === null) {
                            $compVal = tj_JavaishListVal__init_($floatListVal);
                            continue e;
                        }
                        tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(188), $this.$lineNumber2);
                        continue e;
                    case 7:
                        $stringList = ju_ArrayList__init_();
                        $expression = ju_AbstractList_iterator($listVals);
                        while (ju_AbstractList$1_hasNext($expression)) {
                            $listValI = ju_AbstractList$1_next($expression);
                            if (!($listValI instanceof tj_JavaishString)) {
                                tj_Error_TypeMismatch($rt_s(186), $listValI.$typeString(), $this.$lineNumber2);
                                return null;
                            }
                            ju_ArrayList_add($stringList, $listValI);
                        }
                        $stringListVal = tj_JavaishStringList__init_($stringList);
                        if (!$isComp) {
                            if ($operation === null) {
                                $total = tj_JavaishListVal__init_($stringListVal);
                                continue e;
                            }
                            tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(190), $this.$lineNumber2);
                            continue e;
                        }
                        if ($operation === null) {
                            $compVal = tj_JavaishListVal__init_($stringListVal);
                            continue e;
                        }
                        tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(190), $this.$lineNumber2);
                        continue e;
                    case 8:
                        $booleanList = ju_ArrayList__init_();
                        $expression = ju_AbstractList_iterator($listVals);
                        while (ju_AbstractList$1_hasNext($expression)) {
                            $listValI = ju_AbstractList$1_next($expression);
                            if (!($listValI instanceof tj_JavaishBoolean)) {
                                tj_Error_TypeMismatch($rt_s(185), $listValI.$typeString(), $this.$lineNumber2);
                                return null;
                            }
                            ju_ArrayList_add($booleanList, $listValI);
                        }
                        $booleanListVal = tj_JavaishBooleanList__init_($booleanList);
                        if (!$isComp) {
                            if ($operation === null) {
                                $total = tj_JavaishListVal__init_($booleanListVal);
                                continue e;
                            }
                            tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(189), $this.$lineNumber2);
                            continue e;
                        }
                        if ($operation === null) {
                            $compVal = tj_JavaishListVal__init_($booleanListVal);
                            continue e;
                        }
                        tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(189), $this.$lineNumber2);
                        continue e;
                    default:
                }
            }
            return null;
        case 2:
            i: {
                $tmp = tj_Debugger_evalExpression($this, $expression, $localVariables, $isGlobal);
                if ($rt_suspending()) {
                    break main;
                }
                $val = $tmp;
                switch (tj_Debugger$1_$SwitchMap$trackerjo$javaish$JavaishVal$JavaishType.data[jl_Enum_ordinal($cast.$castType)]) {
                    case 1:
                        if ($val instanceof tj_JavaishFloat) {
                            $newVal = $val;
                            break i;
                        }
                        try {
                            $expressionElmt = $val;
                            if ($val instanceof tj_JavaishInt) {
                                $expressionElmt = $val;
                                $newVal = new tj_JavaishFloat;
                                $expressionElmt = $newVal;
                                tj_JavaishFloat__init_0($newVal, jl_Integer_intValue(tj_JavaishInt_getValue($val)));
                            } else {
                                $expressionElmt = $val;
                                if (!($val instanceof tj_JavaishString))
                                    $newVal = $val;
                                else {
                                    $expressionElmt = $val;
                                    $newVal = new tj_JavaishFloat;
                                    $expressionElmt = $newVal;
                                    tj_JavaishFloat__init_0($newVal, jl_Float_parseFloat(tj_JavaishString_getValue($val)));
                                }
                            }
                            break i;
                        } catch ($$e) {
                            $$je = $rt_wrapException($$e);
                            if ($$je instanceof jl_Exception) {
                            } else {
                                throw $$e;
                            }
                        }
                        tj_Error_UnableToParse($rt_s(184), $this.$lineNumber2, $expressionElmt.$typeString());
                        $newVal = $expressionElmt;
                        break i;
                    case 2:
                        if ($val instanceof tj_JavaishInt) {
                            $newVal = $val;
                            break i;
                        }
                        try {
                            $expression = $val;
                            if ($val instanceof tj_JavaishFloat) {
                                $expression = $val;
                                $newVal = new tj_JavaishInt;
                                $expression = $newVal;
                                tj_JavaishInt__init_0($newVal, jl_Math_round(jl_Float_floatValue(tj_JavaishFloat_getValue($val))));
                            } else {
                                $expression = $val;
                                if (!($val instanceof tj_JavaishString))
                                    $newVal = $val;
                                else {
                                    $expression = $val;
                                    $newVal = new tj_JavaishInt;
                                    $expression = $newVal;
                                    tj_JavaishInt__init_0($newVal, jl_Integer_parseInt0(tj_JavaishString_getValue($val)));
                                }
                            }
                            break i;
                        } catch ($$e) {
                            $$je = $rt_wrapException($$e);
                            if ($$je instanceof jl_Exception) {
                            } else {
                                throw $$e;
                            }
                        }
                        tj_Error_UnableToParse($rt_s(187), $this.$lineNumber2, $expression.$typeString());
                        $newVal = $expression;
                        break i;
                    case 3:
                        if ($val instanceof tj_JavaishString) {
                            $newVal = $val;
                            break i;
                        }
                        try {
                            $expressionElmt = $val;
                            if ($val instanceof tj_JavaishFloat) {
                                $expressionElmt = $val;
                                $newVal = new tj_JavaishString;
                                $expressionElmt = $newVal;
                                tj_JavaishString__init_0($newVal, jl_Float_toString(jl_Float_floatValue(tj_JavaishFloat_getValue($val))));
                            } else {
                                $expressionElmt = $val;
                                if ($val instanceof tj_JavaishInt) {
                                    $expressionElmt = $val;
                                    $newVal = new tj_JavaishString;
                                    $expressionElmt = $newVal;
                                    tj_JavaishString__init_0($newVal, jl_Integer_toString(jl_Integer_intValue(tj_JavaishInt_getValue($val))));
                                } else {
                                    $expressionElmt = $val;
                                    if (!($val instanceof tj_JavaishBoolean))
                                        $newVal = $val;
                                    else {
                                        $expressionElmt = $val;
                                        $newVal = new tj_JavaishString;
                                        $expressionElmt = $newVal;
                                        tj_JavaishString__init_0($newVal, jl_Boolean_toString(jl_Boolean_booleanValue(tj_JavaishBoolean_getValue($val))));
                                    }
                                }
                            }
                            break i;
                        } catch ($$e) {
                            $$je = $rt_wrapException($$e);
                            if ($$je instanceof jl_Exception) {
                            } else {
                                throw $$e;
                            }
                        }
                        tj_Error_UnableToParse($rt_s(186), $this.$lineNumber2, $expressionElmt.$typeString());
                        $newVal = $expressionElmt;
                        break i;
                    case 4:
                        if ($val instanceof tj_JavaishBoolean) {
                            $newVal = $val;
                            break i;
                        }
                        try {
                            $expressionElmt = $val;
                            if (!($val instanceof tj_JavaishString))
                                $newVal = $val;
                            else {
                                $expressionElmt = $val;
                                $newVal = new tj_JavaishBoolean;
                                $expressionElmt = $newVal;
                                tj_JavaishBoolean__init_0($newVal, jl_Boolean_valueOf(jl_Boolean_parseBoolean(tj_JavaishString_getValue($val))));
                            }
                            break i;
                        } catch ($$e) {
                            $$je = $rt_wrapException($$e);
                            if ($$je instanceof jl_Exception) {
                            } else {
                                throw $$e;
                            }
                        }
                        tj_Error_UnableToParse($rt_s(185), $this.$lineNumber2, $expressionElmt.$typeString());
                        $newVal = $expressionElmt;
                        break i;
                    default:
                }
                $newVal = $val;
            }
            if (!$isComp)
                $total = tj_Debugger_performOperation($this, $operation, $total, $newVal);
            else
                $compVal = tj_Debugger_performOperation($this, $operation, $compVal, $newVal);
            j: while (true) {
                var$11 = var$11 + 1 | 0;
                if (var$11 >= var$10) {
                    if (!$isComp)
                        return $total;
                    return tj_Debugger_performComparision($this, $comparison, $total, $compVal);
                }
                k: {
                    l: {
                        m: {
                            $elmt = var$9[var$11];
                            tj_Debugger$1_$callClinit();
                            switch (tj_Debugger$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element_getType($elmt))]) {
                                case 1:
                                    $result = tj_Debugger_performComparision($this, $comparison, $total, $compVal);
                                    if ($result === null)
                                        break j;
                                    if (!jl_Boolean_booleanValue(tj_JavaishBoolean_getValue($result)))
                                        return tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    $total = null;
                                    $operation = null;
                                    $comparison = null;
                                    $compVal = null;
                                    $isComp = 0;
                                    continue j;
                                case 2:
                                    $expression = $elmt.$expression0;
                                    $ptr = 1;
                                    continue main;
                                case 3:
                                    $bool = $elmt;
                                    $valB = tj_JavaishBoolean__init_(jl_Boolean_valueOf(tj_BoolElmt_getValue($bool)));
                                    if (!$isComp) {
                                        $total = tj_Debugger_performOperation($this, $operation, $total, $valB);
                                        continue j;
                                    }
                                    $compVal = tj_Debugger_performOperation($this, $operation, $compVal, $valB);
                                    continue j;
                                case 4:
                                    $cast = $elmt;
                                    $expression = $cast.$element;
                                    continue main;
                                case 5:
                                    tj_Debugger$Operator_$callClinit();
                                    $operation = tj_Debugger$Operator_DIVIDE;
                                    continue j;
                                case 6:
                                    tj_Debugger$Operator_$callClinit();
                                    $comparison = tj_Debugger$Operator_EQUAL;
                                    $isComp = 1;
                                    continue j;
                                case 7:
                                    $expression = $elmt.$expression;
                                    $ptr = 3;
                                    continue main;
                                case 8:
                                    $floatElmt = $elmt;
                                    $valF = tj_JavaishFloat__init_(tj_FloatElmt_getValue($floatElmt));
                                    if (!$isComp) {
                                        $total = tj_Debugger_performOperation($this, $operation, $total, $valF);
                                        continue j;
                                    }
                                    $compVal = tj_Debugger_performOperation($this, $operation, $compVal, $valF);
                                    continue j;
                                case 9:
                                    tj_Debugger$Operator_$callClinit();
                                    $comparison = tj_Debugger$Operator_GREATER_THAN;
                                    $isComp = 1;
                                    continue j;
                                case 10:
                                    tj_Debugger$Operator_$callClinit();
                                    $comparison = tj_Debugger$Operator_GREATER_THAN_EQUAL;
                                    $isComp = 1;
                                    continue j;
                                case 11:
                                    $integer = $elmt;
                                    $valI = tj_JavaishInt__init_(tj_IntElmt_getValue($integer));
                                    if (!$isComp) {
                                        $total = tj_Debugger_performOperation($this, $operation, $total, $valI);
                                        continue j;
                                    }
                                    $compVal = tj_Debugger_performOperation($this, $operation, $compVal, $valI);
                                    continue j;
                                case 12:
                                    tj_Debugger$Operator_$callClinit();
                                    $comparison = tj_Debugger$Operator_LESS_THAN;
                                    $isComp = 1;
                                    continue j;
                                case 13:
                                    tj_Debugger$Operator_$callClinit();
                                    $comparison = tj_Debugger$Operator_LESS_THAN_EQUAL;
                                    $isComp = 1;
                                    continue j;
                                case 14:
                                    tj_Debugger$Operator_$callClinit();
                                    $operation = tj_Debugger$Operator_MINUS;
                                    continue j;
                                case 15:
                                    tj_Debugger$Operator_$callClinit();
                                    $operation = tj_Debugger$Operator_MULTIPLY;
                                    continue j;
                                case 16:
                                    tj_Debugger$Operator_$callClinit();
                                    $comparison = tj_Debugger$Operator_NOT_EQUAL;
                                    $isComp = 1;
                                    continue j;
                                case 17:
                                    break m;
                                case 18:
                                    tj_Debugger$Operator_$callClinit();
                                    $operation = tj_Debugger$Operator_PLUS;
                                    continue j;
                                case 19:
                                    $string = $elmt;
                                    $valS = tj_JavaishString__init_(tj_StringElmt_getValue($string));
                                    if (!$isComp) {
                                        $total = tj_Debugger_performOperation($this, $operation, $total, $valS);
                                        continue j;
                                    }
                                    $compVal = tj_Debugger_performOperation($this, $operation, $compVal, $valS);
                                    continue j;
                                case 20:
                                    break l;
                                case 21:
                                    $function = $elmt;
                                    $body = tj_Variables_getFunctionBody($this.$globalVariables3, tj_FunctionElmt_getName($function));
                                    $args = tj_Variables_getFunctionArgs($this.$globalVariables3, tj_FunctionElmt_getName($function));
                                    $params = (tj_FunctionElmt_getParams($function)).data;
                                    $paramVals = ju_ArrayList__init_();
                                    $listLength = $params.length;
                                    var$29 = 0;
                                    if (var$29 < $listLength) {
                                        $param = $params[var$29];
                                        $ptr = 7;
                                        continue main;
                                    }
                                    $paramValsArr = ju_AbstractCollection_toArray($paramVals, $rt_createArray(tj_JavaishVal, ju_ArrayList_size($paramVals)));
                                    $expression = tj_FunctionElmt_getName($function);
                                    $listLength = 0;
                                    $ptr = 6;
                                    continue main;
                                case 22:
                                    $showInputBox = $elmt;
                                    $ptr = 4;
                                    continue main;
                                case 23:
                                    $listVal = $elmt;
                                    $expression = tj_ListValElmt_getIndex($listVal);
                                    $ptr = 5;
                                    continue main;
                                case 24:
                                    break k;
                                case 25:
                                    $arrayName = tj_ArrayLengthElmt_getArrayName($elmt);
                                    if (tj_Variables_isVariable($localVariables, $arrayName))
                                        $expression = tj_Variables_getVariableValue($localVariables, $arrayName);
                                    else {
                                        if (!tj_Variables_isVariable($this.$globalVariables3, $arrayName)) {
                                            tj_Error_VariableNotDeclared($arrayName, $this.$lineNumber2);
                                            return null;
                                        }
                                        $expression = tj_Variables_getVariableValue($this.$globalVariables3, $arrayName);
                                    }
                                    if (!($expression instanceof tj_JavaishListVal)) {
                                        tj_Error_TypeMismatch($rt_s(293), $expression.$typeString(), $this.$lineNumber2);
                                        return null;
                                    }
                                    $listL = tj_JavaishListVal_getValue($expression);
                                    $length = tj_JavaishInt__init_($listL.$getLength());
                                    if (!$isComp)
                                        $total = tj_Debugger_performOperation($this, $operation, $total, $length);
                                    else
                                        $compVal = tj_Debugger_performOperation($this, $operation, $compVal, $length);
                                    continue j;
                                default:
                            }
                            continue j;
                        }
                        $resultO = tj_Debugger_performComparision($this, $comparison, $total, $compVal);
                        if ($resultO === null)
                            return null;
                        if (jl_Boolean_booleanValue(tj_JavaishBoolean_getValue($resultO)) == 1)
                            return tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                        $total = null;
                        $operation = null;
                        $compVal = null;
                        $isComp = 0;
                        continue j;
                    }
                    $variable = $elmt;
                    if (tj_Variables_isVariable($localVariables, tj_VariableElmt_getName($variable)))
                        $expression = tj_Variables_getVariableValue($localVariables, tj_VariableElmt_getName($variable));
                    else {
                        if (!tj_Variables_isVariable($this.$globalVariables3, tj_VariableElmt_getName($variable))) {
                            tj_Error_VariableNotDeclared(tj_VariableElmt_getName($variable), $this.$lineNumber2);
                            return null;
                        }
                        $expression = tj_Variables_getVariableValue($this.$globalVariables3, tj_VariableElmt_getName($variable));
                    }
                    if (!$isComp) {
                        $total = tj_Debugger_performOperation($this, $operation, $total, $expression);
                        continue j;
                    }
                    $compVal = tj_Debugger_performOperation($this, $operation, $compVal, $expression);
                    continue j;
                }
                $list = $elmt;
                $type = tj_ListElmt_getListType($list);
                $listExpressions = tj_ListElmt_getList($list);
                $listVals = ju_ArrayList__init_();
                $expression = ju_AbstractList_iterator($listExpressions);
                if (ju_AbstractList$1_hasNext($expression)) {
                    $listExpression = ju_AbstractList$1_next($expression);
                    $ptr = 8;
                    continue main;
                }
                switch (tj_Debugger$1_$SwitchMap$trackerjo$javaish$JavaishVal$JavaishType.data[jl_Enum_ordinal($type)]) {
                    case 5:
                        $intList = ju_ArrayList__init_();
                        $expression = ju_AbstractList_iterator($listVals);
                        while (ju_AbstractList$1_hasNext($expression)) {
                            $listValI = ju_AbstractList$1_next($expression);
                            if (!($listValI instanceof tj_JavaishInt)) {
                                tj_Error_TypeMismatch($rt_s(187), $listValI.$typeString(), $this.$lineNumber2);
                                return null;
                            }
                            ju_ArrayList_add($intList, $listValI);
                        }
                        $intListVal = tj_JavaishIntList__init_($intList);
                        if (!$isComp) {
                            if ($operation === null) {
                                $total = tj_JavaishListVal__init_($intListVal);
                                continue j;
                            }
                            tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(191), $this.$lineNumber2);
                            continue j;
                        }
                        if ($operation === null) {
                            $compVal = tj_JavaishListVal__init_($intListVal);
                            continue j;
                        }
                        tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(191), $this.$lineNumber2);
                        continue j;
                    case 6:
                        $floatList = ju_ArrayList__init_();
                        $expression = ju_AbstractList_iterator($listVals);
                        while (ju_AbstractList$1_hasNext($expression)) {
                            $listValI = ju_AbstractList$1_next($expression);
                            if (!($listValI instanceof tj_JavaishFloat)) {
                                tj_Error_TypeMismatch($rt_s(184), $listValI.$typeString(), $this.$lineNumber2);
                                return null;
                            }
                            ju_ArrayList_add($floatList, $listValI);
                        }
                        $floatListVal = tj_JavaishFloatList__init_($floatList);
                        if (!$isComp) {
                            if ($operation === null) {
                                $total = tj_JavaishListVal__init_($floatListVal);
                                continue j;
                            }
                            tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(188), $this.$lineNumber2);
                            continue j;
                        }
                        if ($operation === null) {
                            $compVal = tj_JavaishListVal__init_($floatListVal);
                            continue j;
                        }
                        tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(188), $this.$lineNumber2);
                        continue j;
                    case 7:
                        $stringList = ju_ArrayList__init_();
                        $expression = ju_AbstractList_iterator($listVals);
                        while (ju_AbstractList$1_hasNext($expression)) {
                            $listValI = ju_AbstractList$1_next($expression);
                            if (!($listValI instanceof tj_JavaishString)) {
                                tj_Error_TypeMismatch($rt_s(186), $listValI.$typeString(), $this.$lineNumber2);
                                return null;
                            }
                            ju_ArrayList_add($stringList, $listValI);
                        }
                        $stringListVal = tj_JavaishStringList__init_($stringList);
                        if (!$isComp) {
                            if ($operation === null) {
                                $total = tj_JavaishListVal__init_($stringListVal);
                                continue j;
                            }
                            tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(190), $this.$lineNumber2);
                            continue j;
                        }
                        if ($operation === null) {
                            $compVal = tj_JavaishListVal__init_($stringListVal);
                            continue j;
                        }
                        tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(190), $this.$lineNumber2);
                        continue j;
                    case 8:
                        $booleanList = ju_ArrayList__init_();
                        $expression = ju_AbstractList_iterator($listVals);
                        while (ju_AbstractList$1_hasNext($expression)) {
                            $listValI = ju_AbstractList$1_next($expression);
                            if (!($listValI instanceof tj_JavaishBoolean)) {
                                tj_Error_TypeMismatch($rt_s(185), $listValI.$typeString(), $this.$lineNumber2);
                                return null;
                            }
                            ju_ArrayList_add($booleanList, $listValI);
                        }
                        $booleanListVal = tj_JavaishBooleanList__init_($booleanList);
                        if (!$isComp) {
                            if ($operation === null) {
                                $total = tj_JavaishListVal__init_($booleanListVal);
                                continue j;
                            }
                            tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(189), $this.$lineNumber2);
                            continue j;
                        }
                        if ($operation === null) {
                            $compVal = tj_JavaishListVal__init_($booleanListVal);
                            continue j;
                        }
                        tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(189), $this.$lineNumber2);
                        continue j;
                    default:
                }
            }
            return null;
        case 3:
            $tmp = tj_Debugger_evalExpression($this, $expression, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            $newVal = $tmp;
            if (!$isComp)
                $total = tj_Debugger_performOperation($this, $operation, $total, $newVal);
            else
                $compVal = tj_Debugger_performOperation($this, $operation, $compVal, $newVal);
            b: while (true) {
                var$11 = var$11 + 1 | 0;
                if (var$11 >= var$10) {
                    if (!$isComp)
                        return $total;
                    return tj_Debugger_performComparision($this, $comparison, $total, $compVal);
                }
                n: {
                    e: {
                        o: {
                            $elmt = var$9[var$11];
                            tj_Debugger$1_$callClinit();
                            switch (tj_Debugger$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element_getType($elmt))]) {
                                case 1:
                                    $result = tj_Debugger_performComparision($this, $comparison, $total, $compVal);
                                    if ($result === null)
                                        break b;
                                    if (!jl_Boolean_booleanValue(tj_JavaishBoolean_getValue($result)))
                                        return tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    $total = null;
                                    $operation = null;
                                    $comparison = null;
                                    $compVal = null;
                                    $isComp = 0;
                                    continue b;
                                case 2:
                                    $expression = $elmt.$expression0;
                                    $ptr = 1;
                                    continue main;
                                case 3:
                                    $bool = $elmt;
                                    $valB = tj_JavaishBoolean__init_(jl_Boolean_valueOf(tj_BoolElmt_getValue($bool)));
                                    if (!$isComp) {
                                        $total = tj_Debugger_performOperation($this, $operation, $total, $valB);
                                        continue b;
                                    }
                                    $compVal = tj_Debugger_performOperation($this, $operation, $compVal, $valB);
                                    continue b;
                                case 4:
                                    $cast = $elmt;
                                    $expression = $cast.$element;
                                    $ptr = 2;
                                    continue main;
                                case 5:
                                    tj_Debugger$Operator_$callClinit();
                                    $operation = tj_Debugger$Operator_DIVIDE;
                                    continue b;
                                case 6:
                                    tj_Debugger$Operator_$callClinit();
                                    $comparison = tj_Debugger$Operator_EQUAL;
                                    $isComp = 1;
                                    continue b;
                                case 7:
                                    $expression = $elmt.$expression;
                                    continue main;
                                case 8:
                                    $floatElmt = $elmt;
                                    $valF = tj_JavaishFloat__init_(tj_FloatElmt_getValue($floatElmt));
                                    if (!$isComp) {
                                        $total = tj_Debugger_performOperation($this, $operation, $total, $valF);
                                        continue b;
                                    }
                                    $compVal = tj_Debugger_performOperation($this, $operation, $compVal, $valF);
                                    continue b;
                                case 9:
                                    tj_Debugger$Operator_$callClinit();
                                    $comparison = tj_Debugger$Operator_GREATER_THAN;
                                    $isComp = 1;
                                    continue b;
                                case 10:
                                    tj_Debugger$Operator_$callClinit();
                                    $comparison = tj_Debugger$Operator_GREATER_THAN_EQUAL;
                                    $isComp = 1;
                                    continue b;
                                case 11:
                                    $integer = $elmt;
                                    $valI = tj_JavaishInt__init_(tj_IntElmt_getValue($integer));
                                    if (!$isComp) {
                                        $total = tj_Debugger_performOperation($this, $operation, $total, $valI);
                                        continue b;
                                    }
                                    $compVal = tj_Debugger_performOperation($this, $operation, $compVal, $valI);
                                    continue b;
                                case 12:
                                    tj_Debugger$Operator_$callClinit();
                                    $comparison = tj_Debugger$Operator_LESS_THAN;
                                    $isComp = 1;
                                    continue b;
                                case 13:
                                    tj_Debugger$Operator_$callClinit();
                                    $comparison = tj_Debugger$Operator_LESS_THAN_EQUAL;
                                    $isComp = 1;
                                    continue b;
                                case 14:
                                    tj_Debugger$Operator_$callClinit();
                                    $operation = tj_Debugger$Operator_MINUS;
                                    continue b;
                                case 15:
                                    tj_Debugger$Operator_$callClinit();
                                    $operation = tj_Debugger$Operator_MULTIPLY;
                                    continue b;
                                case 16:
                                    tj_Debugger$Operator_$callClinit();
                                    $comparison = tj_Debugger$Operator_NOT_EQUAL;
                                    $isComp = 1;
                                    continue b;
                                case 17:
                                    break o;
                                case 18:
                                    tj_Debugger$Operator_$callClinit();
                                    $operation = tj_Debugger$Operator_PLUS;
                                    continue b;
                                case 19:
                                    $string = $elmt;
                                    $valS = tj_JavaishString__init_(tj_StringElmt_getValue($string));
                                    if (!$isComp) {
                                        $total = tj_Debugger_performOperation($this, $operation, $total, $valS);
                                        continue b;
                                    }
                                    $compVal = tj_Debugger_performOperation($this, $operation, $compVal, $valS);
                                    continue b;
                                case 20:
                                    break e;
                                case 21:
                                    $function = $elmt;
                                    $body = tj_Variables_getFunctionBody($this.$globalVariables3, tj_FunctionElmt_getName($function));
                                    $args = tj_Variables_getFunctionArgs($this.$globalVariables3, tj_FunctionElmt_getName($function));
                                    $params = (tj_FunctionElmt_getParams($function)).data;
                                    $paramVals = ju_ArrayList__init_();
                                    $listLength = $params.length;
                                    var$29 = 0;
                                    if (var$29 < $listLength) {
                                        $param = $params[var$29];
                                        $ptr = 7;
                                        continue main;
                                    }
                                    $paramValsArr = ju_AbstractCollection_toArray($paramVals, $rt_createArray(tj_JavaishVal, ju_ArrayList_size($paramVals)));
                                    $expression = tj_FunctionElmt_getName($function);
                                    $listLength = 0;
                                    $ptr = 6;
                                    continue main;
                                case 22:
                                    $showInputBox = $elmt;
                                    $ptr = 4;
                                    continue main;
                                case 23:
                                    $listVal = $elmt;
                                    $expression = tj_ListValElmt_getIndex($listVal);
                                    $ptr = 5;
                                    continue main;
                                case 24:
                                    break n;
                                case 25:
                                    $arrayName = tj_ArrayLengthElmt_getArrayName($elmt);
                                    if (tj_Variables_isVariable($localVariables, $arrayName))
                                        $expression = tj_Variables_getVariableValue($localVariables, $arrayName);
                                    else {
                                        if (!tj_Variables_isVariable($this.$globalVariables3, $arrayName)) {
                                            tj_Error_VariableNotDeclared($arrayName, $this.$lineNumber2);
                                            return null;
                                        }
                                        $expression = tj_Variables_getVariableValue($this.$globalVariables3, $arrayName);
                                    }
                                    if (!($expression instanceof tj_JavaishListVal)) {
                                        tj_Error_TypeMismatch($rt_s(293), $expression.$typeString(), $this.$lineNumber2);
                                        return null;
                                    }
                                    $listL = tj_JavaishListVal_getValue($expression);
                                    $length = tj_JavaishInt__init_($listL.$getLength());
                                    if (!$isComp)
                                        $total = tj_Debugger_performOperation($this, $operation, $total, $length);
                                    else
                                        $compVal = tj_Debugger_performOperation($this, $operation, $compVal, $length);
                                    continue b;
                                default:
                            }
                            continue b;
                        }
                        $resultO = tj_Debugger_performComparision($this, $comparison, $total, $compVal);
                        if ($resultO === null)
                            return null;
                        if (jl_Boolean_booleanValue(tj_JavaishBoolean_getValue($resultO)) == 1)
                            return tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                        $total = null;
                        $operation = null;
                        $compVal = null;
                        $isComp = 0;
                        continue b;
                    }
                    $variable = $elmt;
                    if (tj_Variables_isVariable($localVariables, tj_VariableElmt_getName($variable)))
                        $expression = tj_Variables_getVariableValue($localVariables, tj_VariableElmt_getName($variable));
                    else {
                        if (!tj_Variables_isVariable($this.$globalVariables3, tj_VariableElmt_getName($variable))) {
                            tj_Error_VariableNotDeclared(tj_VariableElmt_getName($variable), $this.$lineNumber2);
                            return null;
                        }
                        $expression = tj_Variables_getVariableValue($this.$globalVariables3, tj_VariableElmt_getName($variable));
                    }
                    if (!$isComp) {
                        $total = tj_Debugger_performOperation($this, $operation, $total, $expression);
                        continue b;
                    }
                    $compVal = tj_Debugger_performOperation($this, $operation, $compVal, $expression);
                    continue b;
                }
                $list = $elmt;
                $type = tj_ListElmt_getListType($list);
                $listExpressions = tj_ListElmt_getList($list);
                $listVals = ju_ArrayList__init_();
                $expression = ju_AbstractList_iterator($listExpressions);
                if (ju_AbstractList$1_hasNext($expression)) {
                    $listExpression = ju_AbstractList$1_next($expression);
                    $ptr = 8;
                    continue main;
                }
                switch (tj_Debugger$1_$SwitchMap$trackerjo$javaish$JavaishVal$JavaishType.data[jl_Enum_ordinal($type)]) {
                    case 5:
                        $intList = ju_ArrayList__init_();
                        $expression = ju_AbstractList_iterator($listVals);
                        while (ju_AbstractList$1_hasNext($expression)) {
                            $listValI = ju_AbstractList$1_next($expression);
                            if (!($listValI instanceof tj_JavaishInt)) {
                                tj_Error_TypeMismatch($rt_s(187), $listValI.$typeString(), $this.$lineNumber2);
                                return null;
                            }
                            ju_ArrayList_add($intList, $listValI);
                        }
                        $intListVal = tj_JavaishIntList__init_($intList);
                        if (!$isComp) {
                            if ($operation === null) {
                                $total = tj_JavaishListVal__init_($intListVal);
                                continue b;
                            }
                            tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(191), $this.$lineNumber2);
                            continue b;
                        }
                        if ($operation === null) {
                            $compVal = tj_JavaishListVal__init_($intListVal);
                            continue b;
                        }
                        tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(191), $this.$lineNumber2);
                        continue b;
                    case 6:
                        $floatList = ju_ArrayList__init_();
                        $expression = ju_AbstractList_iterator($listVals);
                        while (ju_AbstractList$1_hasNext($expression)) {
                            $listValI = ju_AbstractList$1_next($expression);
                            if (!($listValI instanceof tj_JavaishFloat)) {
                                tj_Error_TypeMismatch($rt_s(184), $listValI.$typeString(), $this.$lineNumber2);
                                return null;
                            }
                            ju_ArrayList_add($floatList, $listValI);
                        }
                        $floatListVal = tj_JavaishFloatList__init_($floatList);
                        if (!$isComp) {
                            if ($operation === null) {
                                $total = tj_JavaishListVal__init_($floatListVal);
                                continue b;
                            }
                            tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(188), $this.$lineNumber2);
                            continue b;
                        }
                        if ($operation === null) {
                            $compVal = tj_JavaishListVal__init_($floatListVal);
                            continue b;
                        }
                        tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(188), $this.$lineNumber2);
                        continue b;
                    case 7:
                        $stringList = ju_ArrayList__init_();
                        $expression = ju_AbstractList_iterator($listVals);
                        while (ju_AbstractList$1_hasNext($expression)) {
                            $listValI = ju_AbstractList$1_next($expression);
                            if (!($listValI instanceof tj_JavaishString)) {
                                tj_Error_TypeMismatch($rt_s(186), $listValI.$typeString(), $this.$lineNumber2);
                                return null;
                            }
                            ju_ArrayList_add($stringList, $listValI);
                        }
                        $stringListVal = tj_JavaishStringList__init_($stringList);
                        if (!$isComp) {
                            if ($operation === null) {
                                $total = tj_JavaishListVal__init_($stringListVal);
                                continue b;
                            }
                            tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(190), $this.$lineNumber2);
                            continue b;
                        }
                        if ($operation === null) {
                            $compVal = tj_JavaishListVal__init_($stringListVal);
                            continue b;
                        }
                        tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(190), $this.$lineNumber2);
                        continue b;
                    case 8:
                        $booleanList = ju_ArrayList__init_();
                        $expression = ju_AbstractList_iterator($listVals);
                        while (ju_AbstractList$1_hasNext($expression)) {
                            $listValI = ju_AbstractList$1_next($expression);
                            if (!($listValI instanceof tj_JavaishBoolean)) {
                                tj_Error_TypeMismatch($rt_s(185), $listValI.$typeString(), $this.$lineNumber2);
                                return null;
                            }
                            ju_ArrayList_add($booleanList, $listValI);
                        }
                        $booleanListVal = tj_JavaishBooleanList__init_($booleanList);
                        if (!$isComp) {
                            if ($operation === null) {
                                $total = tj_JavaishListVal__init_($booleanListVal);
                                continue b;
                            }
                            tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(189), $this.$lineNumber2);
                            continue b;
                        }
                        if ($operation === null) {
                            $compVal = tj_JavaishListVal__init_($booleanListVal);
                            continue b;
                        }
                        tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(189), $this.$lineNumber2);
                        continue b;
                    default:
                }
            }
            return null;
        case 4:
            $tmp = tj_Debugger_evalShowInputBox($this, $showInputBox, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            $input = $tmp;
            if (!$isComp)
                $total = tj_Debugger_performOperation($this, $operation, $total, $input);
            else
                $compVal = tj_Debugger_performOperation($this, $operation, $compVal, $input);
            b: while (true) {
                var$11 = var$11 + 1 | 0;
                if (var$11 >= var$10) {
                    if (!$isComp)
                        return $total;
                    return tj_Debugger_performComparision($this, $comparison, $total, $compVal);
                }
                n: {
                    e: {
                        o: {
                            $elmt = var$9[var$11];
                            tj_Debugger$1_$callClinit();
                            switch (tj_Debugger$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element_getType($elmt))]) {
                                case 1:
                                    $result = tj_Debugger_performComparision($this, $comparison, $total, $compVal);
                                    if ($result === null)
                                        break b;
                                    if (!jl_Boolean_booleanValue(tj_JavaishBoolean_getValue($result)))
                                        return tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    $total = null;
                                    $operation = null;
                                    $comparison = null;
                                    $compVal = null;
                                    $isComp = 0;
                                    continue b;
                                case 2:
                                    $expression = $elmt.$expression0;
                                    $ptr = 1;
                                    continue main;
                                case 3:
                                    $bool = $elmt;
                                    $valB = tj_JavaishBoolean__init_(jl_Boolean_valueOf(tj_BoolElmt_getValue($bool)));
                                    if (!$isComp) {
                                        $total = tj_Debugger_performOperation($this, $operation, $total, $valB);
                                        continue b;
                                    }
                                    $compVal = tj_Debugger_performOperation($this, $operation, $compVal, $valB);
                                    continue b;
                                case 4:
                                    $cast = $elmt;
                                    $expression = $cast.$element;
                                    $ptr = 2;
                                    continue main;
                                case 5:
                                    tj_Debugger$Operator_$callClinit();
                                    $operation = tj_Debugger$Operator_DIVIDE;
                                    continue b;
                                case 6:
                                    tj_Debugger$Operator_$callClinit();
                                    $comparison = tj_Debugger$Operator_EQUAL;
                                    $isComp = 1;
                                    continue b;
                                case 7:
                                    $expression = $elmt.$expression;
                                    $ptr = 3;
                                    continue main;
                                case 8:
                                    $floatElmt = $elmt;
                                    $valF = tj_JavaishFloat__init_(tj_FloatElmt_getValue($floatElmt));
                                    if (!$isComp) {
                                        $total = tj_Debugger_performOperation($this, $operation, $total, $valF);
                                        continue b;
                                    }
                                    $compVal = tj_Debugger_performOperation($this, $operation, $compVal, $valF);
                                    continue b;
                                case 9:
                                    tj_Debugger$Operator_$callClinit();
                                    $comparison = tj_Debugger$Operator_GREATER_THAN;
                                    $isComp = 1;
                                    continue b;
                                case 10:
                                    tj_Debugger$Operator_$callClinit();
                                    $comparison = tj_Debugger$Operator_GREATER_THAN_EQUAL;
                                    $isComp = 1;
                                    continue b;
                                case 11:
                                    $integer = $elmt;
                                    $valI = tj_JavaishInt__init_(tj_IntElmt_getValue($integer));
                                    if (!$isComp) {
                                        $total = tj_Debugger_performOperation($this, $operation, $total, $valI);
                                        continue b;
                                    }
                                    $compVal = tj_Debugger_performOperation($this, $operation, $compVal, $valI);
                                    continue b;
                                case 12:
                                    tj_Debugger$Operator_$callClinit();
                                    $comparison = tj_Debugger$Operator_LESS_THAN;
                                    $isComp = 1;
                                    continue b;
                                case 13:
                                    tj_Debugger$Operator_$callClinit();
                                    $comparison = tj_Debugger$Operator_LESS_THAN_EQUAL;
                                    $isComp = 1;
                                    continue b;
                                case 14:
                                    tj_Debugger$Operator_$callClinit();
                                    $operation = tj_Debugger$Operator_MINUS;
                                    continue b;
                                case 15:
                                    tj_Debugger$Operator_$callClinit();
                                    $operation = tj_Debugger$Operator_MULTIPLY;
                                    continue b;
                                case 16:
                                    tj_Debugger$Operator_$callClinit();
                                    $comparison = tj_Debugger$Operator_NOT_EQUAL;
                                    $isComp = 1;
                                    continue b;
                                case 17:
                                    break o;
                                case 18:
                                    tj_Debugger$Operator_$callClinit();
                                    $operation = tj_Debugger$Operator_PLUS;
                                    continue b;
                                case 19:
                                    $string = $elmt;
                                    $valS = tj_JavaishString__init_(tj_StringElmt_getValue($string));
                                    if (!$isComp) {
                                        $total = tj_Debugger_performOperation($this, $operation, $total, $valS);
                                        continue b;
                                    }
                                    $compVal = tj_Debugger_performOperation($this, $operation, $compVal, $valS);
                                    continue b;
                                case 20:
                                    break e;
                                case 21:
                                    $function = $elmt;
                                    $body = tj_Variables_getFunctionBody($this.$globalVariables3, tj_FunctionElmt_getName($function));
                                    $args = tj_Variables_getFunctionArgs($this.$globalVariables3, tj_FunctionElmt_getName($function));
                                    $params = (tj_FunctionElmt_getParams($function)).data;
                                    $paramVals = ju_ArrayList__init_();
                                    $listLength = $params.length;
                                    var$29 = 0;
                                    if (var$29 < $listLength) {
                                        $param = $params[var$29];
                                        $ptr = 7;
                                        continue main;
                                    }
                                    $paramValsArr = ju_AbstractCollection_toArray($paramVals, $rt_createArray(tj_JavaishVal, ju_ArrayList_size($paramVals)));
                                    $expression = tj_FunctionElmt_getName($function);
                                    $listLength = 0;
                                    $ptr = 6;
                                    continue main;
                                case 22:
                                    $showInputBox = $elmt;
                                    continue main;
                                case 23:
                                    $listVal = $elmt;
                                    $expression = tj_ListValElmt_getIndex($listVal);
                                    $ptr = 5;
                                    continue main;
                                case 24:
                                    break n;
                                case 25:
                                    $arrayName = tj_ArrayLengthElmt_getArrayName($elmt);
                                    if (tj_Variables_isVariable($localVariables, $arrayName))
                                        $expression = tj_Variables_getVariableValue($localVariables, $arrayName);
                                    else {
                                        if (!tj_Variables_isVariable($this.$globalVariables3, $arrayName)) {
                                            tj_Error_VariableNotDeclared($arrayName, $this.$lineNumber2);
                                            return null;
                                        }
                                        $expression = tj_Variables_getVariableValue($this.$globalVariables3, $arrayName);
                                    }
                                    if (!($expression instanceof tj_JavaishListVal)) {
                                        tj_Error_TypeMismatch($rt_s(293), $expression.$typeString(), $this.$lineNumber2);
                                        return null;
                                    }
                                    $listL = tj_JavaishListVal_getValue($expression);
                                    $length = tj_JavaishInt__init_($listL.$getLength());
                                    if (!$isComp)
                                        $total = tj_Debugger_performOperation($this, $operation, $total, $length);
                                    else
                                        $compVal = tj_Debugger_performOperation($this, $operation, $compVal, $length);
                                    continue b;
                                default:
                            }
                            continue b;
                        }
                        $resultO = tj_Debugger_performComparision($this, $comparison, $total, $compVal);
                        if ($resultO === null)
                            return null;
                        if (jl_Boolean_booleanValue(tj_JavaishBoolean_getValue($resultO)) == 1)
                            return tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                        $total = null;
                        $operation = null;
                        $compVal = null;
                        $isComp = 0;
                        continue b;
                    }
                    $variable = $elmt;
                    if (tj_Variables_isVariable($localVariables, tj_VariableElmt_getName($variable)))
                        $expression = tj_Variables_getVariableValue($localVariables, tj_VariableElmt_getName($variable));
                    else {
                        if (!tj_Variables_isVariable($this.$globalVariables3, tj_VariableElmt_getName($variable))) {
                            tj_Error_VariableNotDeclared(tj_VariableElmt_getName($variable), $this.$lineNumber2);
                            return null;
                        }
                        $expression = tj_Variables_getVariableValue($this.$globalVariables3, tj_VariableElmt_getName($variable));
                    }
                    if (!$isComp) {
                        $total = tj_Debugger_performOperation($this, $operation, $total, $expression);
                        continue b;
                    }
                    $compVal = tj_Debugger_performOperation($this, $operation, $compVal, $expression);
                    continue b;
                }
                $list = $elmt;
                $type = tj_ListElmt_getListType($list);
                $listExpressions = tj_ListElmt_getList($list);
                $listVals = ju_ArrayList__init_();
                $expression = ju_AbstractList_iterator($listExpressions);
                if (ju_AbstractList$1_hasNext($expression)) {
                    $listExpression = ju_AbstractList$1_next($expression);
                    $ptr = 8;
                    continue main;
                }
                switch (tj_Debugger$1_$SwitchMap$trackerjo$javaish$JavaishVal$JavaishType.data[jl_Enum_ordinal($type)]) {
                    case 5:
                        $intList = ju_ArrayList__init_();
                        $expression = ju_AbstractList_iterator($listVals);
                        while (ju_AbstractList$1_hasNext($expression)) {
                            $listValI = ju_AbstractList$1_next($expression);
                            if (!($listValI instanceof tj_JavaishInt)) {
                                tj_Error_TypeMismatch($rt_s(187), $listValI.$typeString(), $this.$lineNumber2);
                                return null;
                            }
                            ju_ArrayList_add($intList, $listValI);
                        }
                        $intListVal = tj_JavaishIntList__init_($intList);
                        if (!$isComp) {
                            if ($operation === null) {
                                $total = tj_JavaishListVal__init_($intListVal);
                                continue b;
                            }
                            tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(191), $this.$lineNumber2);
                            continue b;
                        }
                        if ($operation === null) {
                            $compVal = tj_JavaishListVal__init_($intListVal);
                            continue b;
                        }
                        tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(191), $this.$lineNumber2);
                        continue b;
                    case 6:
                        $floatList = ju_ArrayList__init_();
                        $expression = ju_AbstractList_iterator($listVals);
                        while (ju_AbstractList$1_hasNext($expression)) {
                            $listValI = ju_AbstractList$1_next($expression);
                            if (!($listValI instanceof tj_JavaishFloat)) {
                                tj_Error_TypeMismatch($rt_s(184), $listValI.$typeString(), $this.$lineNumber2);
                                return null;
                            }
                            ju_ArrayList_add($floatList, $listValI);
                        }
                        $floatListVal = tj_JavaishFloatList__init_($floatList);
                        if (!$isComp) {
                            if ($operation === null) {
                                $total = tj_JavaishListVal__init_($floatListVal);
                                continue b;
                            }
                            tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(188), $this.$lineNumber2);
                            continue b;
                        }
                        if ($operation === null) {
                            $compVal = tj_JavaishListVal__init_($floatListVal);
                            continue b;
                        }
                        tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(188), $this.$lineNumber2);
                        continue b;
                    case 7:
                        $stringList = ju_ArrayList__init_();
                        $expression = ju_AbstractList_iterator($listVals);
                        while (ju_AbstractList$1_hasNext($expression)) {
                            $listValI = ju_AbstractList$1_next($expression);
                            if (!($listValI instanceof tj_JavaishString)) {
                                tj_Error_TypeMismatch($rt_s(186), $listValI.$typeString(), $this.$lineNumber2);
                                return null;
                            }
                            ju_ArrayList_add($stringList, $listValI);
                        }
                        $stringListVal = tj_JavaishStringList__init_($stringList);
                        if (!$isComp) {
                            if ($operation === null) {
                                $total = tj_JavaishListVal__init_($stringListVal);
                                continue b;
                            }
                            tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(190), $this.$lineNumber2);
                            continue b;
                        }
                        if ($operation === null) {
                            $compVal = tj_JavaishListVal__init_($stringListVal);
                            continue b;
                        }
                        tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(190), $this.$lineNumber2);
                        continue b;
                    case 8:
                        $booleanList = ju_ArrayList__init_();
                        $expression = ju_AbstractList_iterator($listVals);
                        while (ju_AbstractList$1_hasNext($expression)) {
                            $listValI = ju_AbstractList$1_next($expression);
                            if (!($listValI instanceof tj_JavaishBoolean)) {
                                tj_Error_TypeMismatch($rt_s(185), $listValI.$typeString(), $this.$lineNumber2);
                                return null;
                            }
                            ju_ArrayList_add($booleanList, $listValI);
                        }
                        $booleanListVal = tj_JavaishBooleanList__init_($booleanList);
                        if (!$isComp) {
                            if ($operation === null) {
                                $total = tj_JavaishListVal__init_($booleanListVal);
                                continue b;
                            }
                            tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(189), $this.$lineNumber2);
                            continue b;
                        }
                        if ($operation === null) {
                            $compVal = tj_JavaishListVal__init_($booleanListVal);
                            continue b;
                        }
                        tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(189), $this.$lineNumber2);
                        continue b;
                    default:
                }
            }
            return null;
        case 5:
            $tmp = tj_Debugger_evalExpression($this, $expression, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            $index = $tmp;
            if (!($index instanceof tj_JavaishInt)) {
                tj_Error_TypeMismatch($rt_s(187), $index.$typeString(), $this.$lineNumber2);
                return null;
            }
            $expression = $index;
            if (tj_Variables_isVariable($localVariables, tj_ListValElmt_getListName($listVal)))
                $expressionElmt = tj_JavaishListVal_getValue(tj_Variables_getVariableValue($localVariables, tj_ListValElmt_getListName($listVal)));
            else {
                if (!tj_Variables_isVariable($this.$globalVariables3, tj_ListValElmt_getListName($listVal))) {
                    tj_Error_VariableNotDeclared(tj_ListValElmt_getListName($listVal), $this.$lineNumber2);
                    return null;
                }
                $expressionElmt = tj_JavaishListVal_getValue(tj_Variables_getVariableValue($this.$globalVariables3, tj_ListValElmt_getListName($listVal)));
            }
            $listLength = $expressionElmt.$getLength();
            if (jl_Integer_intValue(tj_JavaishInt_getValue($expression)) >= $listLength) {
                tj_Error_IndexOutOfBounds(jl_Integer_intValue(tj_JavaishInt_getValue($expression)), $this.$lineNumber2, $listLength);
                return null;
            }
            $listValVal = $expressionElmt.$getValue1(jl_Integer_intValue(tj_JavaishInt_getValue($expression)));
            if (!$isComp)
                $total = tj_Debugger_performOperation($this, $operation, $total, $listValVal);
            else
                $compVal = tj_Debugger_performOperation($this, $operation, $compVal, $listValVal);
            o: while (true) {
                var$11 = var$11 + 1 | 0;
                if (var$11 >= var$10) {
                    if (!$isComp)
                        return $total;
                    return tj_Debugger_performComparision($this, $comparison, $total, $compVal);
                }
                p: {
                    h: {
                        q: {
                            $elmt = var$9[var$11];
                            tj_Debugger$1_$callClinit();
                            switch (tj_Debugger$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element_getType($elmt))]) {
                                case 1:
                                    $result = tj_Debugger_performComparision($this, $comparison, $total, $compVal);
                                    if ($result === null)
                                        break o;
                                    if (!jl_Boolean_booleanValue(tj_JavaishBoolean_getValue($result)))
                                        return tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    $total = null;
                                    $operation = null;
                                    $comparison = null;
                                    $compVal = null;
                                    $isComp = 0;
                                    continue o;
                                case 2:
                                    $expression = $elmt.$expression0;
                                    $ptr = 1;
                                    continue main;
                                case 3:
                                    $bool = $elmt;
                                    $valB = tj_JavaishBoolean__init_(jl_Boolean_valueOf(tj_BoolElmt_getValue($bool)));
                                    if (!$isComp) {
                                        $total = tj_Debugger_performOperation($this, $operation, $total, $valB);
                                        continue o;
                                    }
                                    $compVal = tj_Debugger_performOperation($this, $operation, $compVal, $valB);
                                    continue o;
                                case 4:
                                    $cast = $elmt;
                                    $expression = $cast.$element;
                                    $ptr = 2;
                                    continue main;
                                case 5:
                                    tj_Debugger$Operator_$callClinit();
                                    $operation = tj_Debugger$Operator_DIVIDE;
                                    continue o;
                                case 6:
                                    tj_Debugger$Operator_$callClinit();
                                    $comparison = tj_Debugger$Operator_EQUAL;
                                    $isComp = 1;
                                    continue o;
                                case 7:
                                    $expression = $elmt.$expression;
                                    $ptr = 3;
                                    continue main;
                                case 8:
                                    $floatElmt = $elmt;
                                    $valF = tj_JavaishFloat__init_(tj_FloatElmt_getValue($floatElmt));
                                    if (!$isComp) {
                                        $total = tj_Debugger_performOperation($this, $operation, $total, $valF);
                                        continue o;
                                    }
                                    $compVal = tj_Debugger_performOperation($this, $operation, $compVal, $valF);
                                    continue o;
                                case 9:
                                    tj_Debugger$Operator_$callClinit();
                                    $comparison = tj_Debugger$Operator_GREATER_THAN;
                                    $isComp = 1;
                                    continue o;
                                case 10:
                                    tj_Debugger$Operator_$callClinit();
                                    $comparison = tj_Debugger$Operator_GREATER_THAN_EQUAL;
                                    $isComp = 1;
                                    continue o;
                                case 11:
                                    $integer = $elmt;
                                    $valI = tj_JavaishInt__init_(tj_IntElmt_getValue($integer));
                                    if (!$isComp) {
                                        $total = tj_Debugger_performOperation($this, $operation, $total, $valI);
                                        continue o;
                                    }
                                    $compVal = tj_Debugger_performOperation($this, $operation, $compVal, $valI);
                                    continue o;
                                case 12:
                                    tj_Debugger$Operator_$callClinit();
                                    $comparison = tj_Debugger$Operator_LESS_THAN;
                                    $isComp = 1;
                                    continue o;
                                case 13:
                                    tj_Debugger$Operator_$callClinit();
                                    $comparison = tj_Debugger$Operator_LESS_THAN_EQUAL;
                                    $isComp = 1;
                                    continue o;
                                case 14:
                                    tj_Debugger$Operator_$callClinit();
                                    $operation = tj_Debugger$Operator_MINUS;
                                    continue o;
                                case 15:
                                    tj_Debugger$Operator_$callClinit();
                                    $operation = tj_Debugger$Operator_MULTIPLY;
                                    continue o;
                                case 16:
                                    tj_Debugger$Operator_$callClinit();
                                    $comparison = tj_Debugger$Operator_NOT_EQUAL;
                                    $isComp = 1;
                                    continue o;
                                case 17:
                                    break q;
                                case 18:
                                    tj_Debugger$Operator_$callClinit();
                                    $operation = tj_Debugger$Operator_PLUS;
                                    continue o;
                                case 19:
                                    $string = $elmt;
                                    $valS = tj_JavaishString__init_(tj_StringElmt_getValue($string));
                                    if (!$isComp) {
                                        $total = tj_Debugger_performOperation($this, $operation, $total, $valS);
                                        continue o;
                                    }
                                    $compVal = tj_Debugger_performOperation($this, $operation, $compVal, $valS);
                                    continue o;
                                case 20:
                                    break h;
                                case 21:
                                    $function = $elmt;
                                    $body = tj_Variables_getFunctionBody($this.$globalVariables3, tj_FunctionElmt_getName($function));
                                    $args = tj_Variables_getFunctionArgs($this.$globalVariables3, tj_FunctionElmt_getName($function));
                                    $params = (tj_FunctionElmt_getParams($function)).data;
                                    $paramVals = ju_ArrayList__init_();
                                    $listLength = $params.length;
                                    var$29 = 0;
                                    if (var$29 < $listLength) {
                                        $param = $params[var$29];
                                        $ptr = 7;
                                        continue main;
                                    }
                                    $paramValsArr = ju_AbstractCollection_toArray($paramVals, $rt_createArray(tj_JavaishVal, ju_ArrayList_size($paramVals)));
                                    $expression = tj_FunctionElmt_getName($function);
                                    $listLength = 0;
                                    $ptr = 6;
                                    continue main;
                                case 22:
                                    $showInputBox = $elmt;
                                    $ptr = 4;
                                    continue main;
                                case 23:
                                    $listVal = $elmt;
                                    $expression = tj_ListValElmt_getIndex($listVal);
                                    continue main;
                                case 24:
                                    break p;
                                case 25:
                                    $arrayName = tj_ArrayLengthElmt_getArrayName($elmt);
                                    if (tj_Variables_isVariable($localVariables, $arrayName))
                                        $expression = tj_Variables_getVariableValue($localVariables, $arrayName);
                                    else {
                                        if (!tj_Variables_isVariable($this.$globalVariables3, $arrayName)) {
                                            tj_Error_VariableNotDeclared($arrayName, $this.$lineNumber2);
                                            return null;
                                        }
                                        $expression = tj_Variables_getVariableValue($this.$globalVariables3, $arrayName);
                                    }
                                    if (!($expression instanceof tj_JavaishListVal)) {
                                        tj_Error_TypeMismatch($rt_s(293), $expression.$typeString(), $this.$lineNumber2);
                                        return null;
                                    }
                                    $listL = tj_JavaishListVal_getValue($expression);
                                    $length = tj_JavaishInt__init_($listL.$getLength());
                                    if (!$isComp)
                                        $total = tj_Debugger_performOperation($this, $operation, $total, $length);
                                    else
                                        $compVal = tj_Debugger_performOperation($this, $operation, $compVal, $length);
                                    continue o;
                                default:
                            }
                            continue o;
                        }
                        $resultO = tj_Debugger_performComparision($this, $comparison, $total, $compVal);
                        if ($resultO === null)
                            return null;
                        if (jl_Boolean_booleanValue(tj_JavaishBoolean_getValue($resultO)) == 1)
                            return tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                        $total = null;
                        $operation = null;
                        $compVal = null;
                        $isComp = 0;
                        continue o;
                    }
                    $variable = $elmt;
                    if (tj_Variables_isVariable($localVariables, tj_VariableElmt_getName($variable)))
                        $expression = tj_Variables_getVariableValue($localVariables, tj_VariableElmt_getName($variable));
                    else {
                        if (!tj_Variables_isVariable($this.$globalVariables3, tj_VariableElmt_getName($variable))) {
                            tj_Error_VariableNotDeclared(tj_VariableElmt_getName($variable), $this.$lineNumber2);
                            return null;
                        }
                        $expression = tj_Variables_getVariableValue($this.$globalVariables3, tj_VariableElmt_getName($variable));
                    }
                    if (!$isComp) {
                        $total = tj_Debugger_performOperation($this, $operation, $total, $expression);
                        continue o;
                    }
                    $compVal = tj_Debugger_performOperation($this, $operation, $compVal, $expression);
                    continue o;
                }
                $list = $elmt;
                $type = tj_ListElmt_getListType($list);
                $listExpressions = tj_ListElmt_getList($list);
                $listVals = ju_ArrayList__init_();
                $expression = ju_AbstractList_iterator($listExpressions);
                if (ju_AbstractList$1_hasNext($expression)) {
                    $listExpression = ju_AbstractList$1_next($expression);
                    $ptr = 8;
                    continue main;
                }
                switch (tj_Debugger$1_$SwitchMap$trackerjo$javaish$JavaishVal$JavaishType.data[jl_Enum_ordinal($type)]) {
                    case 5:
                        $intList = ju_ArrayList__init_();
                        $expression = ju_AbstractList_iterator($listVals);
                        while (ju_AbstractList$1_hasNext($expression)) {
                            $listValI = ju_AbstractList$1_next($expression);
                            if (!($listValI instanceof tj_JavaishInt)) {
                                tj_Error_TypeMismatch($rt_s(187), $listValI.$typeString(), $this.$lineNumber2);
                                return null;
                            }
                            ju_ArrayList_add($intList, $listValI);
                        }
                        $intListVal = tj_JavaishIntList__init_($intList);
                        if (!$isComp) {
                            if ($operation === null) {
                                $total = tj_JavaishListVal__init_($intListVal);
                                continue o;
                            }
                            tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(191), $this.$lineNumber2);
                            continue o;
                        }
                        if ($operation === null) {
                            $compVal = tj_JavaishListVal__init_($intListVal);
                            continue o;
                        }
                        tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(191), $this.$lineNumber2);
                        continue o;
                    case 6:
                        $floatList = ju_ArrayList__init_();
                        $expression = ju_AbstractList_iterator($listVals);
                        while (ju_AbstractList$1_hasNext($expression)) {
                            $listValI = ju_AbstractList$1_next($expression);
                            if (!($listValI instanceof tj_JavaishFloat)) {
                                tj_Error_TypeMismatch($rt_s(184), $listValI.$typeString(), $this.$lineNumber2);
                                return null;
                            }
                            ju_ArrayList_add($floatList, $listValI);
                        }
                        $floatListVal = tj_JavaishFloatList__init_($floatList);
                        if (!$isComp) {
                            if ($operation === null) {
                                $total = tj_JavaishListVal__init_($floatListVal);
                                continue o;
                            }
                            tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(188), $this.$lineNumber2);
                            continue o;
                        }
                        if ($operation === null) {
                            $compVal = tj_JavaishListVal__init_($floatListVal);
                            continue o;
                        }
                        tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(188), $this.$lineNumber2);
                        continue o;
                    case 7:
                        $stringList = ju_ArrayList__init_();
                        $expression = ju_AbstractList_iterator($listVals);
                        while (ju_AbstractList$1_hasNext($expression)) {
                            $listValI = ju_AbstractList$1_next($expression);
                            if (!($listValI instanceof tj_JavaishString)) {
                                tj_Error_TypeMismatch($rt_s(186), $listValI.$typeString(), $this.$lineNumber2);
                                return null;
                            }
                            ju_ArrayList_add($stringList, $listValI);
                        }
                        $stringListVal = tj_JavaishStringList__init_($stringList);
                        if (!$isComp) {
                            if ($operation === null) {
                                $total = tj_JavaishListVal__init_($stringListVal);
                                continue o;
                            }
                            tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(190), $this.$lineNumber2);
                            continue o;
                        }
                        if ($operation === null) {
                            $compVal = tj_JavaishListVal__init_($stringListVal);
                            continue o;
                        }
                        tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(190), $this.$lineNumber2);
                        continue o;
                    case 8:
                        $booleanList = ju_ArrayList__init_();
                        $expression = ju_AbstractList_iterator($listVals);
                        while (ju_AbstractList$1_hasNext($expression)) {
                            $listValI = ju_AbstractList$1_next($expression);
                            if (!($listValI instanceof tj_JavaishBoolean)) {
                                tj_Error_TypeMismatch($rt_s(185), $listValI.$typeString(), $this.$lineNumber2);
                                return null;
                            }
                            ju_ArrayList_add($booleanList, $listValI);
                        }
                        $booleanListVal = tj_JavaishBooleanList__init_($booleanList);
                        if (!$isComp) {
                            if ($operation === null) {
                                $total = tj_JavaishListVal__init_($booleanListVal);
                                continue o;
                            }
                            tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(189), $this.$lineNumber2);
                            continue o;
                        }
                        if ($operation === null) {
                            $compVal = tj_JavaishListVal__init_($booleanListVal);
                            continue o;
                        }
                        tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(189), $this.$lineNumber2);
                        continue o;
                    default:
                }
            }
            return null;
        case 6:
            $tmp = tj_Debugger_interpretFunction($this, $body, $args, $paramValsArr, $expression, $listLength);
            if ($rt_suspending()) {
                break main;
            }
            $valFunc = $tmp;
            if (!$isComp)
                $total = tj_Debugger_performOperation($this, $operation, $total, $valFunc);
            else
                $compVal = tj_Debugger_performOperation($this, $operation, $compVal, $valFunc);
            b: while (true) {
                var$11 = var$11 + 1 | 0;
                if (var$11 >= var$10) {
                    if (!$isComp)
                        return $total;
                    return tj_Debugger_performComparision($this, $comparison, $total, $compVal);
                }
                n: {
                    e: {
                        o: {
                            $elmt = var$9[var$11];
                            tj_Debugger$1_$callClinit();
                            switch (tj_Debugger$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element_getType($elmt))]) {
                                case 1:
                                    $result = tj_Debugger_performComparision($this, $comparison, $total, $compVal);
                                    if ($result === null)
                                        break b;
                                    if (!jl_Boolean_booleanValue(tj_JavaishBoolean_getValue($result)))
                                        return tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    $total = null;
                                    $operation = null;
                                    $comparison = null;
                                    $compVal = null;
                                    $isComp = 0;
                                    continue b;
                                case 2:
                                    $expression = $elmt.$expression0;
                                    $ptr = 1;
                                    continue main;
                                case 3:
                                    $bool = $elmt;
                                    $valB = tj_JavaishBoolean__init_(jl_Boolean_valueOf(tj_BoolElmt_getValue($bool)));
                                    if (!$isComp) {
                                        $total = tj_Debugger_performOperation($this, $operation, $total, $valB);
                                        continue b;
                                    }
                                    $compVal = tj_Debugger_performOperation($this, $operation, $compVal, $valB);
                                    continue b;
                                case 4:
                                    $cast = $elmt;
                                    $expression = $cast.$element;
                                    $ptr = 2;
                                    continue main;
                                case 5:
                                    tj_Debugger$Operator_$callClinit();
                                    $operation = tj_Debugger$Operator_DIVIDE;
                                    continue b;
                                case 6:
                                    tj_Debugger$Operator_$callClinit();
                                    $comparison = tj_Debugger$Operator_EQUAL;
                                    $isComp = 1;
                                    continue b;
                                case 7:
                                    $expression = $elmt.$expression;
                                    $ptr = 3;
                                    continue main;
                                case 8:
                                    $floatElmt = $elmt;
                                    $valF = tj_JavaishFloat__init_(tj_FloatElmt_getValue($floatElmt));
                                    if (!$isComp) {
                                        $total = tj_Debugger_performOperation($this, $operation, $total, $valF);
                                        continue b;
                                    }
                                    $compVal = tj_Debugger_performOperation($this, $operation, $compVal, $valF);
                                    continue b;
                                case 9:
                                    tj_Debugger$Operator_$callClinit();
                                    $comparison = tj_Debugger$Operator_GREATER_THAN;
                                    $isComp = 1;
                                    continue b;
                                case 10:
                                    tj_Debugger$Operator_$callClinit();
                                    $comparison = tj_Debugger$Operator_GREATER_THAN_EQUAL;
                                    $isComp = 1;
                                    continue b;
                                case 11:
                                    $integer = $elmt;
                                    $valI = tj_JavaishInt__init_(tj_IntElmt_getValue($integer));
                                    if (!$isComp) {
                                        $total = tj_Debugger_performOperation($this, $operation, $total, $valI);
                                        continue b;
                                    }
                                    $compVal = tj_Debugger_performOperation($this, $operation, $compVal, $valI);
                                    continue b;
                                case 12:
                                    tj_Debugger$Operator_$callClinit();
                                    $comparison = tj_Debugger$Operator_LESS_THAN;
                                    $isComp = 1;
                                    continue b;
                                case 13:
                                    tj_Debugger$Operator_$callClinit();
                                    $comparison = tj_Debugger$Operator_LESS_THAN_EQUAL;
                                    $isComp = 1;
                                    continue b;
                                case 14:
                                    tj_Debugger$Operator_$callClinit();
                                    $operation = tj_Debugger$Operator_MINUS;
                                    continue b;
                                case 15:
                                    tj_Debugger$Operator_$callClinit();
                                    $operation = tj_Debugger$Operator_MULTIPLY;
                                    continue b;
                                case 16:
                                    tj_Debugger$Operator_$callClinit();
                                    $comparison = tj_Debugger$Operator_NOT_EQUAL;
                                    $isComp = 1;
                                    continue b;
                                case 17:
                                    break o;
                                case 18:
                                    tj_Debugger$Operator_$callClinit();
                                    $operation = tj_Debugger$Operator_PLUS;
                                    continue b;
                                case 19:
                                    $string = $elmt;
                                    $valS = tj_JavaishString__init_(tj_StringElmt_getValue($string));
                                    if (!$isComp) {
                                        $total = tj_Debugger_performOperation($this, $operation, $total, $valS);
                                        continue b;
                                    }
                                    $compVal = tj_Debugger_performOperation($this, $operation, $compVal, $valS);
                                    continue b;
                                case 20:
                                    break e;
                                case 21:
                                    $function = $elmt;
                                    $body = tj_Variables_getFunctionBody($this.$globalVariables3, tj_FunctionElmt_getName($function));
                                    $args = tj_Variables_getFunctionArgs($this.$globalVariables3, tj_FunctionElmt_getName($function));
                                    $params = (tj_FunctionElmt_getParams($function)).data;
                                    $paramVals = ju_ArrayList__init_();
                                    $listLength = $params.length;
                                    var$29 = 0;
                                    if (var$29 < $listLength) {
                                        $param = $params[var$29];
                                        $ptr = 7;
                                        continue main;
                                    }
                                    $paramValsArr = ju_AbstractCollection_toArray($paramVals, $rt_createArray(tj_JavaishVal, ju_ArrayList_size($paramVals)));
                                    $expression = tj_FunctionElmt_getName($function);
                                    $listLength = 0;
                                    continue main;
                                case 22:
                                    $showInputBox = $elmt;
                                    $ptr = 4;
                                    continue main;
                                case 23:
                                    $listVal = $elmt;
                                    $expression = tj_ListValElmt_getIndex($listVal);
                                    $ptr = 5;
                                    continue main;
                                case 24:
                                    break n;
                                case 25:
                                    $arrayName = tj_ArrayLengthElmt_getArrayName($elmt);
                                    if (tj_Variables_isVariable($localVariables, $arrayName))
                                        $expression = tj_Variables_getVariableValue($localVariables, $arrayName);
                                    else {
                                        if (!tj_Variables_isVariable($this.$globalVariables3, $arrayName)) {
                                            tj_Error_VariableNotDeclared($arrayName, $this.$lineNumber2);
                                            return null;
                                        }
                                        $expression = tj_Variables_getVariableValue($this.$globalVariables3, $arrayName);
                                    }
                                    if (!($expression instanceof tj_JavaishListVal)) {
                                        tj_Error_TypeMismatch($rt_s(293), $expression.$typeString(), $this.$lineNumber2);
                                        return null;
                                    }
                                    $listL = tj_JavaishListVal_getValue($expression);
                                    $length = tj_JavaishInt__init_($listL.$getLength());
                                    if (!$isComp)
                                        $total = tj_Debugger_performOperation($this, $operation, $total, $length);
                                    else
                                        $compVal = tj_Debugger_performOperation($this, $operation, $compVal, $length);
                                    continue b;
                                default:
                            }
                            continue b;
                        }
                        $resultO = tj_Debugger_performComparision($this, $comparison, $total, $compVal);
                        if ($resultO === null)
                            return null;
                        if (jl_Boolean_booleanValue(tj_JavaishBoolean_getValue($resultO)) == 1)
                            return tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                        $total = null;
                        $operation = null;
                        $compVal = null;
                        $isComp = 0;
                        continue b;
                    }
                    $variable = $elmt;
                    if (tj_Variables_isVariable($localVariables, tj_VariableElmt_getName($variable)))
                        $expression = tj_Variables_getVariableValue($localVariables, tj_VariableElmt_getName($variable));
                    else {
                        if (!tj_Variables_isVariable($this.$globalVariables3, tj_VariableElmt_getName($variable))) {
                            tj_Error_VariableNotDeclared(tj_VariableElmt_getName($variable), $this.$lineNumber2);
                            return null;
                        }
                        $expression = tj_Variables_getVariableValue($this.$globalVariables3, tj_VariableElmt_getName($variable));
                    }
                    if (!$isComp) {
                        $total = tj_Debugger_performOperation($this, $operation, $total, $expression);
                        continue b;
                    }
                    $compVal = tj_Debugger_performOperation($this, $operation, $compVal, $expression);
                    continue b;
                }
                $list = $elmt;
                $type = tj_ListElmt_getListType($list);
                $listExpressions = tj_ListElmt_getList($list);
                $listVals = ju_ArrayList__init_();
                $expression = ju_AbstractList_iterator($listExpressions);
                if (ju_AbstractList$1_hasNext($expression)) {
                    $listExpression = ju_AbstractList$1_next($expression);
                    $ptr = 8;
                    continue main;
                }
                switch (tj_Debugger$1_$SwitchMap$trackerjo$javaish$JavaishVal$JavaishType.data[jl_Enum_ordinal($type)]) {
                    case 5:
                        $intList = ju_ArrayList__init_();
                        $expression = ju_AbstractList_iterator($listVals);
                        while (ju_AbstractList$1_hasNext($expression)) {
                            $listValI = ju_AbstractList$1_next($expression);
                            if (!($listValI instanceof tj_JavaishInt)) {
                                tj_Error_TypeMismatch($rt_s(187), $listValI.$typeString(), $this.$lineNumber2);
                                return null;
                            }
                            ju_ArrayList_add($intList, $listValI);
                        }
                        $intListVal = tj_JavaishIntList__init_($intList);
                        if (!$isComp) {
                            if ($operation === null) {
                                $total = tj_JavaishListVal__init_($intListVal);
                                continue b;
                            }
                            tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(191), $this.$lineNumber2);
                            continue b;
                        }
                        if ($operation === null) {
                            $compVal = tj_JavaishListVal__init_($intListVal);
                            continue b;
                        }
                        tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(191), $this.$lineNumber2);
                        continue b;
                    case 6:
                        $floatList = ju_ArrayList__init_();
                        $expression = ju_AbstractList_iterator($listVals);
                        while (ju_AbstractList$1_hasNext($expression)) {
                            $listValI = ju_AbstractList$1_next($expression);
                            if (!($listValI instanceof tj_JavaishFloat)) {
                                tj_Error_TypeMismatch($rt_s(184), $listValI.$typeString(), $this.$lineNumber2);
                                return null;
                            }
                            ju_ArrayList_add($floatList, $listValI);
                        }
                        $floatListVal = tj_JavaishFloatList__init_($floatList);
                        if (!$isComp) {
                            if ($operation === null) {
                                $total = tj_JavaishListVal__init_($floatListVal);
                                continue b;
                            }
                            tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(188), $this.$lineNumber2);
                            continue b;
                        }
                        if ($operation === null) {
                            $compVal = tj_JavaishListVal__init_($floatListVal);
                            continue b;
                        }
                        tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(188), $this.$lineNumber2);
                        continue b;
                    case 7:
                        $stringList = ju_ArrayList__init_();
                        $expression = ju_AbstractList_iterator($listVals);
                        while (ju_AbstractList$1_hasNext($expression)) {
                            $listValI = ju_AbstractList$1_next($expression);
                            if (!($listValI instanceof tj_JavaishString)) {
                                tj_Error_TypeMismatch($rt_s(186), $listValI.$typeString(), $this.$lineNumber2);
                                return null;
                            }
                            ju_ArrayList_add($stringList, $listValI);
                        }
                        $stringListVal = tj_JavaishStringList__init_($stringList);
                        if (!$isComp) {
                            if ($operation === null) {
                                $total = tj_JavaishListVal__init_($stringListVal);
                                continue b;
                            }
                            tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(190), $this.$lineNumber2);
                            continue b;
                        }
                        if ($operation === null) {
                            $compVal = tj_JavaishListVal__init_($stringListVal);
                            continue b;
                        }
                        tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(190), $this.$lineNumber2);
                        continue b;
                    case 8:
                        $booleanList = ju_ArrayList__init_();
                        $expression = ju_AbstractList_iterator($listVals);
                        while (ju_AbstractList$1_hasNext($expression)) {
                            $listValI = ju_AbstractList$1_next($expression);
                            if (!($listValI instanceof tj_JavaishBoolean)) {
                                tj_Error_TypeMismatch($rt_s(185), $listValI.$typeString(), $this.$lineNumber2);
                                return null;
                            }
                            ju_ArrayList_add($booleanList, $listValI);
                        }
                        $booleanListVal = tj_JavaishBooleanList__init_($booleanList);
                        if (!$isComp) {
                            if ($operation === null) {
                                $total = tj_JavaishListVal__init_($booleanListVal);
                                continue b;
                            }
                            tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(189), $this.$lineNumber2);
                            continue b;
                        }
                        if ($operation === null) {
                            $compVal = tj_JavaishListVal__init_($booleanListVal);
                            continue b;
                        }
                        tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(189), $this.$lineNumber2);
                        continue b;
                    default:
                }
            }
            return null;
        case 7:
            $tmp = tj_Debugger_evalExpression($this, $param, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            $expression = $tmp;
            ju_ArrayList_add($paramVals, $expression);
            var$29 = var$29 + 1 | 0;
            if (var$29 < $listLength) {
                $param = $params[var$29];
                continue main;
            }
            $paramValsArr = ju_AbstractCollection_toArray($paramVals, $rt_createArray(tj_JavaishVal, ju_ArrayList_size($paramVals)));
            $expression = tj_FunctionElmt_getName($function);
            $listLength = 0;
            $ptr = 6;
            continue main;
        case 8:
            $tmp = tj_Debugger_evalExpression($this, $listExpression, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            $expressionElmt = $tmp;
            ju_ArrayList_add($listVals, $expressionElmt);
            a: while (true) {
                if (ju_AbstractList$1_hasNext($expression)) {
                    $listExpression = ju_AbstractList$1_next($expression);
                    continue main;
                }
                r: {
                    switch (tj_Debugger$1_$SwitchMap$trackerjo$javaish$JavaishVal$JavaishType.data[jl_Enum_ordinal($type)]) {
                        case 5:
                            $intList = ju_ArrayList__init_();
                            $expression = ju_AbstractList_iterator($listVals);
                            while (ju_AbstractList$1_hasNext($expression)) {
                                $listValI = ju_AbstractList$1_next($expression);
                                if (!($listValI instanceof tj_JavaishInt)) {
                                    tj_Error_TypeMismatch($rt_s(187), $listValI.$typeString(), $this.$lineNumber2);
                                    return null;
                                }
                                ju_ArrayList_add($intList, $listValI);
                            }
                            $intListVal = tj_JavaishIntList__init_($intList);
                            if (!$isComp) {
                                if ($operation === null) {
                                    $total = tj_JavaishListVal__init_($intListVal);
                                    break r;
                                }
                                tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(191), $this.$lineNumber2);
                                break r;
                            }
                            if ($operation === null) {
                                $compVal = tj_JavaishListVal__init_($intListVal);
                                break r;
                            }
                            tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(191), $this.$lineNumber2);
                            break r;
                        case 6:
                            $floatList = ju_ArrayList__init_();
                            $expression = ju_AbstractList_iterator($listVals);
                            while (ju_AbstractList$1_hasNext($expression)) {
                                $listValI = ju_AbstractList$1_next($expression);
                                if (!($listValI instanceof tj_JavaishFloat)) {
                                    tj_Error_TypeMismatch($rt_s(184), $listValI.$typeString(), $this.$lineNumber2);
                                    return null;
                                }
                                ju_ArrayList_add($floatList, $listValI);
                            }
                            $floatListVal = tj_JavaishFloatList__init_($floatList);
                            if (!$isComp) {
                                if ($operation === null) {
                                    $total = tj_JavaishListVal__init_($floatListVal);
                                    break r;
                                }
                                tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(188), $this.$lineNumber2);
                                break r;
                            }
                            if ($operation === null) {
                                $compVal = tj_JavaishListVal__init_($floatListVal);
                                break r;
                            }
                            tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(188), $this.$lineNumber2);
                            break r;
                        case 7:
                            $stringList = ju_ArrayList__init_();
                            $expression = ju_AbstractList_iterator($listVals);
                            while (ju_AbstractList$1_hasNext($expression)) {
                                $listValI = ju_AbstractList$1_next($expression);
                                if (!($listValI instanceof tj_JavaishString)) {
                                    tj_Error_TypeMismatch($rt_s(186), $listValI.$typeString(), $this.$lineNumber2);
                                    return null;
                                }
                                ju_ArrayList_add($stringList, $listValI);
                            }
                            $stringListVal = tj_JavaishStringList__init_($stringList);
                            if (!$isComp) {
                                if ($operation === null) {
                                    $total = tj_JavaishListVal__init_($stringListVal);
                                    break r;
                                }
                                tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(190), $this.$lineNumber2);
                                break r;
                            }
                            if ($operation === null) {
                                $compVal = tj_JavaishListVal__init_($stringListVal);
                                break r;
                            }
                            tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(190), $this.$lineNumber2);
                            break r;
                        case 8:
                            $booleanList = ju_ArrayList__init_();
                            $expression = ju_AbstractList_iterator($listVals);
                            while (ju_AbstractList$1_hasNext($expression)) {
                                $listValI = ju_AbstractList$1_next($expression);
                                if (!($listValI instanceof tj_JavaishBoolean)) {
                                    tj_Error_TypeMismatch($rt_s(185), $listValI.$typeString(), $this.$lineNumber2);
                                    return null;
                                }
                                ju_ArrayList_add($booleanList, $listValI);
                            }
                            $booleanListVal = tj_JavaishBooleanList__init_($booleanList);
                            if (!$isComp) {
                                if ($operation === null) {
                                    $total = tj_JavaishListVal__init_($booleanListVal);
                                    break r;
                                }
                                tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(189), $this.$lineNumber2);
                                break r;
                            }
                            if ($operation === null) {
                                $compVal = tj_JavaishListVal__init_($booleanListVal);
                                break r;
                            }
                            tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(189), $this.$lineNumber2);
                            break r;
                        default:
                    }
                }
                s: while (true) {
                    var$11 = var$11 + 1 | 0;
                    if (var$11 >= var$10) {
                        if (!$isComp)
                            return $total;
                        return tj_Debugger_performComparision($this, $comparison, $total, $compVal);
                    }
                    t: {
                        j: {
                            $elmt = var$9[var$11];
                            tj_Debugger$1_$callClinit();
                            switch (tj_Debugger$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element_getType($elmt))]) {
                                case 1:
                                    $result = tj_Debugger_performComparision($this, $comparison, $total, $compVal);
                                    if ($result === null)
                                        break a;
                                    if (!jl_Boolean_booleanValue(tj_JavaishBoolean_getValue($result)))
                                        return tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    $total = null;
                                    $operation = null;
                                    $comparison = null;
                                    $compVal = null;
                                    $isComp = 0;
                                    continue s;
                                case 2:
                                    $expression = $elmt.$expression0;
                                    $ptr = 1;
                                    continue main;
                                case 3:
                                    $bool = $elmt;
                                    $valB = tj_JavaishBoolean__init_(jl_Boolean_valueOf(tj_BoolElmt_getValue($bool)));
                                    if (!$isComp) {
                                        $total = tj_Debugger_performOperation($this, $operation, $total, $valB);
                                        continue s;
                                    }
                                    $compVal = tj_Debugger_performOperation($this, $operation, $compVal, $valB);
                                    continue s;
                                case 4:
                                    $cast = $elmt;
                                    $expression = $cast.$element;
                                    $ptr = 2;
                                    continue main;
                                case 5:
                                    tj_Debugger$Operator_$callClinit();
                                    $operation = tj_Debugger$Operator_DIVIDE;
                                    continue s;
                                case 6:
                                    tj_Debugger$Operator_$callClinit();
                                    $comparison = tj_Debugger$Operator_EQUAL;
                                    $isComp = 1;
                                    continue s;
                                case 7:
                                    $expression = $elmt.$expression;
                                    $ptr = 3;
                                    continue main;
                                case 8:
                                    $floatElmt = $elmt;
                                    $valF = tj_JavaishFloat__init_(tj_FloatElmt_getValue($floatElmt));
                                    if (!$isComp) {
                                        $total = tj_Debugger_performOperation($this, $operation, $total, $valF);
                                        continue s;
                                    }
                                    $compVal = tj_Debugger_performOperation($this, $operation, $compVal, $valF);
                                    continue s;
                                case 9:
                                    tj_Debugger$Operator_$callClinit();
                                    $comparison = tj_Debugger$Operator_GREATER_THAN;
                                    $isComp = 1;
                                    continue s;
                                case 10:
                                    tj_Debugger$Operator_$callClinit();
                                    $comparison = tj_Debugger$Operator_GREATER_THAN_EQUAL;
                                    $isComp = 1;
                                    continue s;
                                case 11:
                                    $integer = $elmt;
                                    $valI = tj_JavaishInt__init_(tj_IntElmt_getValue($integer));
                                    if (!$isComp) {
                                        $total = tj_Debugger_performOperation($this, $operation, $total, $valI);
                                        continue s;
                                    }
                                    $compVal = tj_Debugger_performOperation($this, $operation, $compVal, $valI);
                                    continue s;
                                case 12:
                                    tj_Debugger$Operator_$callClinit();
                                    $comparison = tj_Debugger$Operator_LESS_THAN;
                                    $isComp = 1;
                                    continue s;
                                case 13:
                                    tj_Debugger$Operator_$callClinit();
                                    $comparison = tj_Debugger$Operator_LESS_THAN_EQUAL;
                                    $isComp = 1;
                                    continue s;
                                case 14:
                                    tj_Debugger$Operator_$callClinit();
                                    $operation = tj_Debugger$Operator_MINUS;
                                    continue s;
                                case 15:
                                    tj_Debugger$Operator_$callClinit();
                                    $operation = tj_Debugger$Operator_MULTIPLY;
                                    continue s;
                                case 16:
                                    tj_Debugger$Operator_$callClinit();
                                    $comparison = tj_Debugger$Operator_NOT_EQUAL;
                                    $isComp = 1;
                                    continue s;
                                case 17:
                                    break j;
                                case 18:
                                    tj_Debugger$Operator_$callClinit();
                                    $operation = tj_Debugger$Operator_PLUS;
                                    continue s;
                                case 19:
                                    $string = $elmt;
                                    $valS = tj_JavaishString__init_(tj_StringElmt_getValue($string));
                                    if (!$isComp) {
                                        $total = tj_Debugger_performOperation($this, $operation, $total, $valS);
                                        continue s;
                                    }
                                    $compVal = tj_Debugger_performOperation($this, $operation, $compVal, $valS);
                                    continue s;
                                case 20:
                                    break t;
                                case 21:
                                    $function = $elmt;
                                    $body = tj_Variables_getFunctionBody($this.$globalVariables3, tj_FunctionElmt_getName($function));
                                    $args = tj_Variables_getFunctionArgs($this.$globalVariables3, tj_FunctionElmt_getName($function));
                                    $params = (tj_FunctionElmt_getParams($function)).data;
                                    $paramVals = ju_ArrayList__init_();
                                    $listLength = $params.length;
                                    var$29 = 0;
                                    if (var$29 < $listLength) {
                                        $param = $params[var$29];
                                        $ptr = 7;
                                        continue main;
                                    }
                                    $paramValsArr = ju_AbstractCollection_toArray($paramVals, $rt_createArray(tj_JavaishVal, ju_ArrayList_size($paramVals)));
                                    $expression = tj_FunctionElmt_getName($function);
                                    $listLength = 0;
                                    $ptr = 6;
                                    continue main;
                                case 22:
                                    $showInputBox = $elmt;
                                    $ptr = 4;
                                    continue main;
                                case 23:
                                    $listVal = $elmt;
                                    $expression = tj_ListValElmt_getIndex($listVal);
                                    $ptr = 5;
                                    continue main;
                                case 24:
                                    break s;
                                case 25:
                                    $arrayName = tj_ArrayLengthElmt_getArrayName($elmt);
                                    if (tj_Variables_isVariable($localVariables, $arrayName))
                                        $expression = tj_Variables_getVariableValue($localVariables, $arrayName);
                                    else {
                                        if (!tj_Variables_isVariable($this.$globalVariables3, $arrayName)) {
                                            tj_Error_VariableNotDeclared($arrayName, $this.$lineNumber2);
                                            return null;
                                        }
                                        $expression = tj_Variables_getVariableValue($this.$globalVariables3, $arrayName);
                                    }
                                    if (!($expression instanceof tj_JavaishListVal)) {
                                        tj_Error_TypeMismatch($rt_s(293), $expression.$typeString(), $this.$lineNumber2);
                                        return null;
                                    }
                                    $listL = tj_JavaishListVal_getValue($expression);
                                    $length = tj_JavaishInt__init_($listL.$getLength());
                                    if (!$isComp)
                                        $total = tj_Debugger_performOperation($this, $operation, $total, $length);
                                    else
                                        $compVal = tj_Debugger_performOperation($this, $operation, $compVal, $length);
                                    continue s;
                                default:
                            }
                            continue s;
                        }
                        $resultO = tj_Debugger_performComparision($this, $comparison, $total, $compVal);
                        if ($resultO === null)
                            return null;
                        if (jl_Boolean_booleanValue(tj_JavaishBoolean_getValue($resultO)) == 1)
                            return tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                        $total = null;
                        $operation = null;
                        $compVal = null;
                        $isComp = 0;
                        continue s;
                    }
                    $variable = $elmt;
                    if (tj_Variables_isVariable($localVariables, tj_VariableElmt_getName($variable)))
                        $expression = tj_Variables_getVariableValue($localVariables, tj_VariableElmt_getName($variable));
                    else {
                        if (!tj_Variables_isVariable($this.$globalVariables3, tj_VariableElmt_getName($variable))) {
                            tj_Error_VariableNotDeclared(tj_VariableElmt_getName($variable), $this.$lineNumber2);
                            return null;
                        }
                        $expression = tj_Variables_getVariableValue($this.$globalVariables3, tj_VariableElmt_getName($variable));
                    }
                    if (!$isComp) {
                        $total = tj_Debugger_performOperation($this, $operation, $total, $expression);
                        continue;
                    }
                    $compVal = tj_Debugger_performOperation($this, $operation, $compVal, $expression);
                }
                $list = $elmt;
                $type = tj_ListElmt_getListType($list);
                $listExpressions = tj_ListElmt_getList($list);
                $listVals = ju_ArrayList__init_();
                $expression = ju_AbstractList_iterator($listExpressions);
            }
            return null;
        default: $rt_invalidPointer();
        }}
        $rt_nativeThread().push($this, $expression, $localVariables, $isGlobal, $total, $operation, $comparison, $compVal, $isComp, var$9, var$10, var$11, $elmt, $result, $bool, $valB, $cast, $floatElmt, $valF, $integer, $valI, $string, $valS, $function, $body, $args, $params, $paramVals, $listLength, var$29, $param, $paramValsArr, $showInputBox, $listVal, $arrayName, $listL, $length, $resultO, $variable, $list, $type, $listExpressions, $listVals, $listExpression, $intList, $listValI, $intListVal, $floatList,
        $floatListVal, $stringList, $stringListVal, $booleanList, $booleanListVal, $valNot, $val, $newVal, $expressionElmt, $input, $index, $listValVal, $valFunc, $ptr);
    }
    function tj_Debugger_performComparision($this, $comparison, $left, $right) {
        var $result;
        a: {
            $result = null;
            tj_Debugger$1_$callClinit();
            switch (tj_Debugger$1_$SwitchMap$trackerjo$javaish$Debugger$Operator.data[jl_Enum_ordinal($comparison)]) {
                case 1:
                    $comparison = $left.$getType0();
                    tj_JavaishVal$JavaishType_$callClinit();
                    if ($comparison === tj_JavaishVal$JavaishType_STRING && $right.$getType0() === tj_JavaishVal$JavaishType_STRING) {
                        if (!jl_String_equals(tj_JavaishString_getValue($left), tj_JavaishString_getValue($right))) {
                            $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                            break a;
                        }
                        $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                        break a;
                    }
                    if ($left.$getType0() !== tj_JavaishVal$JavaishType_STRING && $right.$getType0() !== tj_JavaishVal$JavaishType_STRING) {
                        if ($left.$getType0() === tj_JavaishVal$JavaishType_BOOLEAN && $right.$getType0() === tj_JavaishVal$JavaishType_BOOLEAN) {
                            if (tj_JavaishBoolean_getValue($left) !== tj_JavaishBoolean_getValue($right)) {
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                break a;
                            }
                            $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                            break a;
                        }
                        if ($left.$getType0() !== tj_JavaishVal$JavaishType_BOOLEAN && $right.$getType0() !== tj_JavaishVal$JavaishType_BOOLEAN) {
                            if ($left.$getType0() === tj_JavaishVal$JavaishType_INT && $right.$getType0() === tj_JavaishVal$JavaishType_INT) {
                                if (tj_JavaishInt_getValue($left) !== tj_JavaishInt_getValue($right)) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break a;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break a;
                            }
                            if ($left.$getType0() === tj_JavaishVal$JavaishType_INT && $right.$getType0() === tj_JavaishVal$JavaishType_FLOAT) {
                                if (jl_Integer_intValue(tj_JavaishInt_getValue($left)) !== jl_Float_floatValue(tj_JavaishFloat_getValue($right))) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break a;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break a;
                            }
                            if ($left.$getType0() === tj_JavaishVal$JavaishType_FLOAT && $right.$getType0() === tj_JavaishVal$JavaishType_INT) {
                                if (jl_Float_floatValue(tj_JavaishFloat_getValue($left)) !== jl_Integer_intValue(tj_JavaishInt_getValue($right))) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break a;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break a;
                            }
                            if (tj_JavaishFloat_getValue($left) !== tj_JavaishFloat_getValue($right)) {
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                break a;
                            }
                            $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                            break a;
                        }
                        tj_Error_TypeMismatch($rt_s(185), $rt_s(294), $this.$lineNumber2);
                        return null;
                    }
                    tj_Error_TypeMismatch($rt_s(186), $rt_s(295), $this.$lineNumber2);
                    return null;
                case 2:
                    $comparison = $left.$getType0();
                    tj_JavaishVal$JavaishType_$callClinit();
                    if ($comparison === tj_JavaishVal$JavaishType_STRING && $right.$getType0() === tj_JavaishVal$JavaishType_STRING) {
                        if (jl_String_equals(tj_JavaishString_getValue($left), tj_JavaishString_getValue($right))) {
                            $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                            break a;
                        }
                        $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                        break a;
                    }
                    if ($left.$getType0() !== tj_JavaishVal$JavaishType_STRING && $right.$getType0() !== tj_JavaishVal$JavaishType_STRING) {
                        if ($left.$getType0() === tj_JavaishVal$JavaishType_BOOLEAN && $right.$getType0() === tj_JavaishVal$JavaishType_BOOLEAN) {
                            if (tj_JavaishBoolean_getValue($left) === tj_JavaishBoolean_getValue($right)) {
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                break a;
                            }
                            $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                            break a;
                        }
                        if ($left.$getType0() !== tj_JavaishVal$JavaishType_BOOLEAN && $right.$getType0() !== tj_JavaishVal$JavaishType_BOOLEAN) {
                            if ($left.$getType0() === tj_JavaishVal$JavaishType_INT && $right.$getType0() === tj_JavaishVal$JavaishType_INT) {
                                if (tj_JavaishInt_getValue($left) === tj_JavaishInt_getValue($right)) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break a;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break a;
                            }
                            if ($left.$getType0() === tj_JavaishVal$JavaishType_INT && $right.$getType0() === tj_JavaishVal$JavaishType_FLOAT) {
                                if (jl_Integer_intValue(tj_JavaishInt_getValue($left)) === jl_Float_floatValue(tj_JavaishFloat_getValue($right))) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break a;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break a;
                            }
                            if ($left.$getType0() === tj_JavaishVal$JavaishType_FLOAT && $right.$getType0() === tj_JavaishVal$JavaishType_INT) {
                                if (jl_Float_floatValue(tj_JavaishFloat_getValue($left)) === jl_Integer_intValue(tj_JavaishInt_getValue($right))) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break a;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break a;
                            }
                            if (tj_JavaishFloat_getValue($left) === tj_JavaishFloat_getValue($right)) {
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                break a;
                            }
                            $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                            break a;
                        }
                        tj_Error_TypeMismatch($rt_s(185), $rt_s(294), $this.$lineNumber2);
                        return null;
                    }
                    tj_Error_TypeMismatch($rt_s(186), $rt_s(295), $this.$lineNumber2);
                    return null;
                case 3:
                    $comparison = $left.$getType0();
                    tj_JavaishVal$JavaishType_$callClinit();
                    if ($comparison !== tj_JavaishVal$JavaishType_STRING && $right.$getType0() !== tj_JavaishVal$JavaishType_STRING) {
                        if ($left.$getType0() !== tj_JavaishVal$JavaishType_BOOLEAN && $right.$getType0() !== tj_JavaishVal$JavaishType_BOOLEAN) {
                            if ($left.$getType0() === tj_JavaishVal$JavaishType_INT && $right.$getType0() === tj_JavaishVal$JavaishType_INT) {
                                if (jl_Integer_intValue(tj_JavaishInt_getValue($left)) >= jl_Integer_intValue(tj_JavaishInt_getValue($right))) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break a;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break a;
                            }
                            if ($left.$getType0() === tj_JavaishVal$JavaishType_INT && $right.$getType0() === tj_JavaishVal$JavaishType_FLOAT) {
                                if (jl_Integer_intValue(tj_JavaishInt_getValue($left)) >= jl_Float_floatValue(tj_JavaishFloat_getValue($right))) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break a;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break a;
                            }
                            if ($left.$getType0() === tj_JavaishVal$JavaishType_FLOAT && $right.$getType0() === tj_JavaishVal$JavaishType_INT) {
                                if (jl_Float_floatValue(tj_JavaishFloat_getValue($left)) >= jl_Integer_intValue(tj_JavaishInt_getValue($right))) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break a;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break a;
                            }
                            if (jl_Float_floatValue(tj_JavaishFloat_getValue($left)) >= jl_Float_floatValue(tj_JavaishFloat_getValue($right))) {
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                break a;
                            }
                            $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                            break a;
                        }
                        tj_Error_TypeMismatch($rt_s(296), $rt_s(185), $this.$lineNumber2);
                        return null;
                    }
                    tj_Error_TypeMismatch($rt_s(296), $rt_s(186), $this.$lineNumber2);
                    return null;
                case 4:
                    $comparison = $left.$getType0();
                    tj_JavaishVal$JavaishType_$callClinit();
                    if ($comparison !== tj_JavaishVal$JavaishType_STRING && $right.$getType0() !== tj_JavaishVal$JavaishType_STRING) {
                        if ($left.$getType0() !== tj_JavaishVal$JavaishType_BOOLEAN && $right.$getType0() !== tj_JavaishVal$JavaishType_BOOLEAN) {
                            if ($left.$getType0() === tj_JavaishVal$JavaishType_INT && $right.$getType0() === tj_JavaishVal$JavaishType_INT) {
                                if (jl_Integer_intValue(tj_JavaishInt_getValue($left)) <= jl_Integer_intValue(tj_JavaishInt_getValue($right))) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break a;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break a;
                            }
                            if ($left.$getType0() === tj_JavaishVal$JavaishType_INT && $right.$getType0() === tj_JavaishVal$JavaishType_FLOAT) {
                                if (jl_Integer_intValue(tj_JavaishInt_getValue($left)) <= jl_Float_floatValue(tj_JavaishFloat_getValue($right))) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break a;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break a;
                            }
                            if ($left.$getType0() === tj_JavaishVal$JavaishType_FLOAT && $right.$getType0() === tj_JavaishVal$JavaishType_INT) {
                                if (jl_Float_floatValue(tj_JavaishFloat_getValue($left)) <= jl_Integer_intValue(tj_JavaishInt_getValue($right))) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break a;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break a;
                            }
                            if (jl_Float_floatValue(tj_JavaishFloat_getValue($left)) <= jl_Float_floatValue(tj_JavaishFloat_getValue($right))) {
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                break a;
                            }
                            $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                            break a;
                        }
                        tj_Error_TypeMismatch($rt_s(296), $rt_s(185), $this.$lineNumber2);
                        return null;
                    }
                    tj_Error_TypeMismatch($rt_s(296), $rt_s(186), $this.$lineNumber2);
                    return null;
                case 5:
                    $comparison = $left.$getType0();
                    tj_JavaishVal$JavaishType_$callClinit();
                    if ($comparison !== tj_JavaishVal$JavaishType_STRING && $right.$getType0() !== tj_JavaishVal$JavaishType_STRING) {
                        if ($left.$getType0() !== tj_JavaishVal$JavaishType_BOOLEAN && $right.$getType0() !== tj_JavaishVal$JavaishType_BOOLEAN) {
                            if ($left.$getType0() === tj_JavaishVal$JavaishType_INT && $right.$getType0() === tj_JavaishVal$JavaishType_INT) {
                                if (jl_Integer_intValue(tj_JavaishInt_getValue($left)) > jl_Integer_intValue(tj_JavaishInt_getValue($right))) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break a;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break a;
                            }
                            if ($left.$getType0() === tj_JavaishVal$JavaishType_INT && $right.$getType0() === tj_JavaishVal$JavaishType_FLOAT) {
                                if (jl_Integer_intValue(tj_JavaishInt_getValue($left)) > jl_Float_floatValue(tj_JavaishFloat_getValue($right))) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break a;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break a;
                            }
                            if ($left.$getType0() === tj_JavaishVal$JavaishType_FLOAT && $right.$getType0() === tj_JavaishVal$JavaishType_INT) {
                                if (jl_Float_floatValue(tj_JavaishFloat_getValue($left)) > jl_Integer_intValue(tj_JavaishInt_getValue($right))) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break a;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break a;
                            }
                            if (jl_Float_floatValue(tj_JavaishFloat_getValue($left)) > jl_Float_floatValue(tj_JavaishFloat_getValue($right))) {
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                break a;
                            }
                            $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                            break a;
                        }
                        tj_Error_TypeMismatch($rt_s(296), $rt_s(185), $this.$lineNumber2);
                        return null;
                    }
                    tj_Error_TypeMismatch($rt_s(296), $rt_s(186), $this.$lineNumber2);
                    return null;
                case 6:
                    $comparison = $left.$getType0();
                    tj_JavaishVal$JavaishType_$callClinit();
                    if ($comparison !== tj_JavaishVal$JavaishType_STRING && $right.$getType0() !== tj_JavaishVal$JavaishType_STRING) {
                        if ($left.$getType0() !== tj_JavaishVal$JavaishType_BOOLEAN && $right.$getType0() !== tj_JavaishVal$JavaishType_BOOLEAN) {
                            if ($left.$getType0() === tj_JavaishVal$JavaishType_INT && $right.$getType0() === tj_JavaishVal$JavaishType_INT) {
                                if (jl_Integer_intValue(tj_JavaishInt_getValue($left)) < jl_Integer_intValue(tj_JavaishInt_getValue($right))) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break a;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break a;
                            }
                            if ($left.$getType0() === tj_JavaishVal$JavaishType_INT && $right.$getType0() === tj_JavaishVal$JavaishType_FLOAT) {
                                if (jl_Integer_intValue(tj_JavaishInt_getValue($left)) < jl_Float_floatValue(tj_JavaishFloat_getValue($right))) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break a;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break a;
                            }
                            if ($left.$getType0() === tj_JavaishVal$JavaishType_FLOAT && $right.$getType0() === tj_JavaishVal$JavaishType_INT) {
                                if (jl_Float_floatValue(tj_JavaishFloat_getValue($left)) < jl_Integer_intValue(tj_JavaishInt_getValue($right))) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break a;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break a;
                            }
                            if (jl_Float_floatValue(tj_JavaishFloat_getValue($left)) < jl_Float_floatValue(tj_JavaishFloat_getValue($right))) {
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                break a;
                            }
                            $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                            break a;
                        }
                        tj_Error_TypeMismatch($rt_s(296), $rt_s(185), $this.$lineNumber2);
                        return null;
                    }
                    tj_Error_TypeMismatch($rt_s(296), $rt_s(186), $this.$lineNumber2);
                    return null;
                default:
            }
        }
        return $result;
    }
    function tj_Debugger_performOperation($this, $operation, $total, $val2) {
        var $result, var$5;
        $result = null;
        if ($operation === null)
            return $val2;
        a: {
            tj_Debugger$1_$callClinit();
            switch (tj_Debugger$1_$SwitchMap$trackerjo$javaish$Debugger$Operator.data[jl_Enum_ordinal($operation)]) {
                case 7:
                    var$5 = $total instanceof tj_JavaishString;
                    if (var$5) {
                        if (!($val2 instanceof tj_JavaishString)) {
                            tj_Error_TypeMismatch($rt_s(186), $val2.$typeString(), $this.$lineNumber2);
                            return null;
                        }
                        $result = new tj_JavaishString;
                        $operation = tj_JavaishString_getValue($total);
                        $total = tj_JavaishString_getValue($val2);
                        $val2 = jl_StringBuilder__init_();
                        jl_StringBuilder_append(jl_StringBuilder_append($val2, $operation), $total);
                        tj_JavaishString__init_0($result, jl_StringBuilder_toString($val2));
                        break a;
                    }
                    if ($val2 instanceof tj_JavaishString) {
                        if (!var$5) {
                            tj_Error_TypeMismatch($rt_s(186), $total.$typeString(), $this.$lineNumber2);
                            return null;
                        }
                        $result = new tj_JavaishString;
                        $operation = tj_JavaishString_getValue($total);
                        $total = tj_JavaishString_getValue($val2);
                        $val2 = jl_StringBuilder__init_();
                        jl_StringBuilder_append(jl_StringBuilder_append($val2, $operation), $total);
                        tj_JavaishString__init_0($result, jl_StringBuilder_toString($val2));
                        break a;
                    }
                    if ($total instanceof tj_JavaishFloat) {
                        if (!($val2 instanceof tj_JavaishInt)) {
                            $result = tj_JavaishFloat__init_(jl_Float_floatValue(tj_JavaishFloat_getValue($total)) + jl_Float_floatValue(tj_JavaishFloat_getValue($val2)));
                            break a;
                        }
                        $result = tj_JavaishFloat__init_(jl_Float_floatValue(tj_JavaishFloat_getValue($total)) + jl_Integer_intValue(tj_JavaishInt_getValue($val2)));
                        break a;
                    }
                    if (!($val2 instanceof tj_JavaishFloat)) {
                        $result = tj_JavaishInt__init_(jl_Integer_intValue(tj_JavaishInt_getValue($total)) + jl_Integer_intValue(tj_JavaishInt_getValue($val2)) | 0);
                        break a;
                    }
                    if (!($total instanceof tj_JavaishInt)) {
                        $result = tj_JavaishFloat__init_(jl_Float_floatValue(tj_JavaishFloat_getValue($total)) + jl_Float_floatValue(tj_JavaishFloat_getValue($val2)));
                        break a;
                    }
                    $result = tj_JavaishFloat__init_(jl_Integer_intValue(tj_JavaishInt_getValue($total)) + jl_Float_floatValue(tj_JavaishFloat_getValue($val2)));
                    break a;
                case 8:
                    if (!($total instanceof tj_JavaishString) && !($val2 instanceof tj_JavaishString)) {
                        if ($total instanceof tj_JavaishFloat) {
                            if (!($val2 instanceof tj_JavaishInt)) {
                                $result = tj_JavaishFloat__init_(jl_Float_floatValue(tj_JavaishFloat_getValue($total)) * jl_Float_floatValue(tj_JavaishFloat_getValue($val2)));
                                break a;
                            }
                            $result = tj_JavaishFloat__init_(jl_Float_floatValue(tj_JavaishFloat_getValue($total)) * jl_Integer_intValue(tj_JavaishInt_getValue($val2)));
                            break a;
                        }
                        if (!($val2 instanceof tj_JavaishFloat)) {
                            $result = tj_JavaishInt__init_($rt_imul(jl_Integer_intValue(tj_JavaishInt_getValue($total)), jl_Integer_intValue(tj_JavaishInt_getValue($val2))));
                            break a;
                        }
                        if (!($total instanceof tj_JavaishInt)) {
                            $result = tj_JavaishFloat__init_(jl_Float_floatValue(tj_JavaishFloat_getValue($total)) * jl_Float_floatValue(tj_JavaishFloat_getValue($val2)));
                            break a;
                        }
                        $result = tj_JavaishFloat__init_(jl_Integer_intValue(tj_JavaishInt_getValue($total)) * jl_Float_floatValue(tj_JavaishFloat_getValue($val2)));
                        break a;
                    }
                    tj_Error_TypeMismatch($rt_s(296), $rt_s(186), $this.$lineNumber2);
                    return null;
                case 9:
                    if (!($total instanceof tj_JavaishString) && !($val2 instanceof tj_JavaishString)) {
                        if ($total instanceof tj_JavaishFloat) {
                            if (!($val2 instanceof tj_JavaishInt)) {
                                $result = tj_JavaishFloat__init_(jl_Float_floatValue(tj_JavaishFloat_getValue($total)) / jl_Float_floatValue(tj_JavaishFloat_getValue($val2)));
                                break a;
                            }
                            $result = tj_JavaishFloat__init_(jl_Float_floatValue(tj_JavaishFloat_getValue($total)) / jl_Integer_intValue(tj_JavaishInt_getValue($val2)));
                            break a;
                        }
                        if (!($val2 instanceof tj_JavaishFloat)) {
                            $result = tj_JavaishInt__init_(jl_Integer_intValue(tj_JavaishInt_getValue($total)) / jl_Integer_intValue(tj_JavaishInt_getValue($val2)) | 0);
                            break a;
                        }
                        if (!($total instanceof tj_JavaishInt)) {
                            $result = tj_JavaishFloat__init_(jl_Float_floatValue(tj_JavaishFloat_getValue($total)) / jl_Float_floatValue(tj_JavaishFloat_getValue($val2)));
                            break a;
                        }
                        $result = tj_JavaishFloat__init_(jl_Integer_intValue(tj_JavaishInt_getValue($total)) / jl_Float_floatValue(tj_JavaishFloat_getValue($val2)));
                        break a;
                    }
                    tj_Error_TypeMismatch($rt_s(296), $rt_s(186), $this.$lineNumber2);
                    return null;
                case 10:
                    if (!($total instanceof tj_JavaishString) && !($val2 instanceof tj_JavaishString)) {
                        if ($total instanceof tj_JavaishFloat) {
                            if (!($val2 instanceof tj_JavaishInt)) {
                                $result = tj_JavaishFloat__init_(jl_Float_floatValue(tj_JavaishFloat_getValue($total)) - jl_Float_floatValue(tj_JavaishFloat_getValue($val2)));
                                break a;
                            }
                            $result = tj_JavaishFloat__init_(jl_Float_floatValue(tj_JavaishFloat_getValue($total)) - jl_Integer_intValue(tj_JavaishInt_getValue($val2)));
                            break a;
                        }
                        if (!($val2 instanceof tj_JavaishFloat)) {
                            $result = tj_JavaishInt__init_(jl_Integer_intValue(tj_JavaishInt_getValue($total)) - jl_Integer_intValue(tj_JavaishInt_getValue($val2)) | 0);
                            break a;
                        }
                        if (!($total instanceof tj_JavaishInt)) {
                            $result = tj_JavaishFloat__init_(jl_Float_floatValue(tj_JavaishFloat_getValue($total)) - jl_Float_floatValue(tj_JavaishFloat_getValue($val2)));
                            break a;
                        }
                        $result = tj_JavaishFloat__init_(jl_Integer_intValue(tj_JavaishInt_getValue($total)) - jl_Float_floatValue(tj_JavaishFloat_getValue($val2)));
                        break a;
                    }
                    tj_Error_TypeMismatch($rt_s(296), $rt_s(186), $this.$lineNumber2);
                    return null;
                default:
            }
        }
        return $result;
    }
    function tj_Debugger_evalDeclaration($this, $declaration, $localVariables, $isGlobal) {
        var $type, $listVal, $listVal_0, $list, $value, var$9, $ptr, $tmp;
        $ptr = 0;
        if ($rt_resuming()) {
            var $thread = $rt_nativeThread();
            $ptr = $thread.pop();var$9 = $thread.pop();$value = $thread.pop();$list = $thread.pop();$listVal_0 = $thread.pop();$listVal = $thread.pop();$type = $thread.pop();$isGlobal = $thread.pop();$localVariables = $thread.pop();$declaration = $thread.pop();$this = $thread.pop();
        }
        main: while (true) { switch ($ptr) {
        case 0:
            $type = $declaration.$varType;
            $listVal = jl_System_out();
            $listVal_0 = jl_String_valueOf($declaration.$varType);
            $list = $declaration.$name19;
            $value = jl_String_valueOf($declaration.$value20);
            var$9 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_(var$9);
            jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$9, $rt_s(297)), $listVal_0), $rt_s(298)), $list), $rt_s(299)), $value);
            ji_PrintStream_println($listVal, jl_AbstractStringBuilder_toString(var$9));
            $value = $declaration.$value20;
            $ptr = 1;
        case 1:
            $tmp = tj_Debugger_evalExpression($this, $value, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            $value = $tmp;
            if ($type === $value.$getType0()) {
                if ($isGlobal) {
                    tj_JavaishVal$JavaishType_$callClinit();
                    if ($type !== tj_JavaishVal$JavaishType_LIST)
                        tj_Variables_addVariable($this.$globalVariables3, $declaration.$name19, $type, $value, $this.$lineNumber2);
                    else {
                        $listVal = $value.$getValue0();
                        tj_Variables_addList($this.$globalVariables3, $declaration.$name19, $type, $listVal.$list, $this.$lineNumber2);
                    }
                } else {
                    tj_JavaishVal$JavaishType_$callClinit();
                    if ($type !== tj_JavaishVal$JavaishType_LIST)
                        tj_Variables_addVariable($localVariables, $declaration.$name19, $type, $value, $this.$lineNumber2);
                    else {
                        $listVal = $value.$getValue0();
                        $list = jl_System_out();
                        $value = jl_String_valueOf($listVal.$list.$getType0());
                        $listVal_0 = new jl_StringBuilder;
                        jl_AbstractStringBuilder__init_($listVal_0);
                        jl_StringBuilder_append(jl_StringBuilder_append($listVal_0, $rt_s(312)), $value);
                        ji_PrintStream_println($list, jl_AbstractStringBuilder_toString($listVal_0));
                        tj_Variables_addList($localVariables, $declaration.$name19, $type, $listVal.$list, $this.$lineNumber2);
                    }
                }
                return;
            }
            tj_JavaishVal$JavaishType_$callClinit();
            if ($type === tj_JavaishVal$JavaishType_FLOAT && $value.$getType0() === tj_JavaishVal$JavaishType_INT) {
                if (!$isGlobal)
                    tj_Variables_addVariable($localVariables, $declaration.$name19, $type, tj_JavaishFloat__init_((tj_JavaishInt_getValue($value)).$value), $this.$lineNumber2);
                else
                    tj_Variables_addVariable($this.$globalVariables3, $declaration.$name19, $type, tj_JavaishFloat__init_((tj_JavaishInt_getValue($value)).$value), $this.$lineNumber2);
                return;
            }
            if ($value.$getType0() === tj_JavaishVal$JavaishType_LIST) {
                $listVal_0 = $value;
                $list = $listVal_0.$list;
                if ($list.$getType0() === $type) {
                    if ($isGlobal)
                        tj_Variables_addList($this.$globalVariables3, $declaration.$name19, $type, $list, $this.$lineNumber2);
                    else {
                        $listVal = jl_System_out();
                        $value = jl_String_valueOf($listVal_0.$list.$getType0());
                        $listVal_0 = new jl_StringBuilder;
                        jl_AbstractStringBuilder__init_($listVal_0);
                        jl_StringBuilder_append(jl_StringBuilder_append($listVal_0, $rt_s(312)), $value);
                        ji_PrintStream_println($listVal, jl_AbstractStringBuilder_toString($listVal_0));
                        tj_Variables_addList($localVariables, $declaration.$name19, $type, $list, $this.$lineNumber2);
                    }
                    return;
                }
            }
            tj_Error_TypeMismatch($type.$name4, $value.$typeString(), $this.$lineNumber2);
            return;
        default: $rt_invalidPointer();
        }}
        $rt_nativeThread().push($this, $declaration, $localVariables, $isGlobal, $type, $listVal, $listVal_0, $list, $value, var$9, $ptr);
    }
    function tj_Debugger_evalIf($this, $ifStmt, $localVariables, $isGlobal, $pastResult) {
        var $condition, $body, $newPastResult, $newReturnVal, $funcState, $ptr, $tmp;
        $ptr = 0;
        if ($rt_resuming()) {
            var $thread = $rt_nativeThread();
            $ptr = $thread.pop();$funcState = $thread.pop();$newReturnVal = $thread.pop();$newPastResult = $thread.pop();$body = $thread.pop();$condition = $thread.pop();$pastResult = $thread.pop();$isGlobal = $thread.pop();$localVariables = $thread.pop();$ifStmt = $thread.pop();$this = $thread.pop();
        }
        main: while (true) { switch ($ptr) {
        case 0:
            $condition = $ifStmt.$condition0;
            $body = $ifStmt.$body;
            $ptr = 1;
        case 1:
            $tmp = tj_Debugger_evalExpression($this, $condition, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            $newPastResult = $tmp;
            if ($newPastResult.$value18.$value19 != 1)
                $pastResult.$pastResult0 = 0;
            else {
                $pastResult.$pastResult0 = 1;
                $newPastResult = tj_Result__init_(0);
                $newReturnVal = tj_Return__init_(0, null);
                $funcState = tj_State__init_($body, $this.$globalVariables3, $localVariables, $newPastResult, $newReturnVal, 0, 0, 0, $ifStmt.$line, 0, 0, 0, 0);
                tj_State_addState($this.$currentState, $funcState);
            }
            return;
        default: $rt_invalidPointer();
        }}
        $rt_nativeThread().push($this, $ifStmt, $localVariables, $isGlobal, $pastResult, $condition, $body, $newPastResult, $newReturnVal, $funcState, $ptr);
    }
    function tj_Debugger_evalPrint($this, $printStmt, $localVariables, $isGlobal) {
        var $expression, $value, $message, $consoleLog, var$8, var$9, $ptr, $tmp;
        $ptr = 0;
        if ($rt_resuming()) {
            var $thread = $rt_nativeThread();
            $ptr = $thread.pop();var$9 = $thread.pop();var$8 = $thread.pop();$consoleLog = $thread.pop();$message = $thread.pop();$value = $thread.pop();$expression = $thread.pop();$isGlobal = $thread.pop();$localVariables = $thread.pop();$printStmt = $thread.pop();$this = $thread.pop();
        }
        main: while (true) { switch ($ptr) {
        case 0:
            $expression = $printStmt.$value21;
            $ptr = 1;
        case 1:
            $tmp = tj_Debugger_evalExpression($this, $expression, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            $value = $tmp;
            if ($value === null)
                return;
            ji_PrintStream_println1(jl_System_out(), $value.$getValue0());
            $message = ($value.$getValue0()).$toString();
            $consoleLog = $rt_createArray(jl_String, 2);
            var$8 = $consoleLog.data;
            var$8[0] = $message;
            var$9 = $this.$lineNumber2;
            $printStmt = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($printStmt);
            jl_StringBuilder_append0($printStmt, var$9);
            var$8[1] = jl_AbstractStringBuilder_toString($printStmt);
            $rt_globals.addConsoleLog(otji_JS_wrap($consoleLog));
            return;
        default: $rt_invalidPointer();
        }}
        $rt_nativeThread().push($this, $printStmt, $localVariables, $isGlobal, $expression, $value, $message, $consoleLog, var$8, var$9, $ptr);
    }
    function tj_Debugger_evalForEach($this, $foreachStmt, $localVariables, $isGlobal) {
        var $tempVarName, $listName, $booleanList, $listVals, $list, $pastResult, $forLineNumber, $returnVal, $funcState, $forLineNumber_0, $listVals_0, $forLineNumber_1;
        $tempVarName = tj_ForEachStmt_getTempVar($foreachStmt);
        $listName = tj_ForEachStmt_getListVar($foreachStmt);
        if (tj_Variables_isVariable($localVariables, $listName))
            $booleanList = tj_Variables_getVariableValue($localVariables, $listName);
        else {
            if (!tj_Variables_isVariable($this.$globalVariables3, $listName)) {
                tj_Error_VariableNotDeclared($listName, $this.$lineNumber2);
                return;
            }
            $booleanList = tj_Variables_getVariableValue($this.$globalVariables3, $listName);
        }
        $listVals = $booleanList.$getType0();
        tj_JavaishVal$JavaishType_$callClinit();
        if ($listVals !== tj_JavaishVal$JavaishType_LIST) {
            tj_Error_TypeMismatch($rt_s(293), $booleanList.$typeString(), $this.$lineNumber2);
            return;
        }
        $list = tj_JavaishListVal_getValue($booleanList);
        if ($list.$getType0() === tj_JavaishVal$JavaishType_STRINGLIST) {
            $listVals = tj_JavaishStringList_getList($list);
            if ($listVals === null) {
                tj_Error_ListEmpty($this.$lineNumber2, $listName);
                return;
            }
            if (!$this.$forIndex) {
                if (!$isGlobal)
                    tj_Variables_addVariable($localVariables, $tempVarName, tj_JavaishVal$JavaishType_STRING, tj_JavaishString__init_($rt_s(2)), $this.$lineNumber2);
                else
                    tj_Variables_addVariable($this.$globalVariables3, $tempVarName, tj_JavaishVal$JavaishType_STRING, tj_JavaishString__init_($rt_s(2)), $this.$lineNumber2);
            }
            if ($this.$forIndex >= ju_ArrayList_size($listVals)) {
                tj_State_setForIndex($this.$currentState, 0);
                if (!$isGlobal)
                    tj_Variables_removeVariable($localVariables, $tempVarName, tj_JavaishVal$JavaishType_STRING);
                else
                    tj_Variables_removeVariable($this.$globalVariables3, $tempVarName, tj_JavaishVal$JavaishType_STRING);
                return;
            }
            if (tj_Variables_isVariable($localVariables, $tempVarName))
                tj_Variables_setVariableValue($localVariables, $tempVarName, ju_ArrayList_get($listVals, $this.$forIndex), $this.$lineNumber2);
            else
                tj_Variables_setVariableValue($this.$globalVariables3, $tempVarName, ju_ArrayList_get($listVals, $this.$forIndex), $this.$lineNumber2);
            tj_State_setForIndex($this.$currentState, $this.$forIndex + 1 | 0);
            $pastResult = tj_Result__init_(0);
            $forLineNumber = tj_ForEachStmt_getLine($foreachStmt);
            $returnVal = tj_Return__init_(0, null);
            $funcState = tj_State__init_(tj_Statements_getBody($foreachStmt), $this.$globalVariables3, $localVariables, $pastResult, $returnVal, 0, 0, 0, $forLineNumber, 1, tj_State_getCurrentLine($this.$currentState), 0, 0);
            tj_State_addState($this.$currentState, $funcState);
        } else if ($list.$getType0() === tj_JavaishVal$JavaishType_BOOLEANLIST) {
            $listVals = tj_JavaishBooleanList_getList($list);
            if ($listVals === null) {
                tj_Error_ListEmpty($this.$lineNumber2, $listName);
                return;
            }
            if (!$this.$forIndex) {
                if (!$isGlobal)
                    tj_Variables_addVariable($localVariables, $tempVarName, tj_JavaishVal$JavaishType_BOOLEAN, tj_JavaishBoolean__init_(jl_Boolean_valueOf(0)), $this.$lineNumber2);
                else
                    tj_Variables_addVariable($this.$globalVariables3, $tempVarName, tj_JavaishVal$JavaishType_BOOLEAN, tj_JavaishBoolean__init_(jl_Boolean_valueOf(0)), $this.$lineNumber2);
            }
            if ($this.$forIndex >= ju_ArrayList_size($listVals)) {
                tj_State_setForIndex($this.$currentState, 0);
                if (!$isGlobal)
                    tj_Variables_removeVariable($localVariables, $tempVarName, tj_JavaishVal$JavaishType_BOOLEAN);
                else
                    tj_Variables_removeVariable($this.$globalVariables3, $tempVarName, tj_JavaishVal$JavaishType_BOOLEAN);
                return;
            }
            if (tj_Variables_isVariable($localVariables, $tempVarName))
                tj_Variables_setVariableValue($localVariables, $tempVarName, ju_ArrayList_get($listVals, $this.$forIndex), $this.$lineNumber2);
            else
                tj_Variables_setVariableValue($this.$globalVariables3, $tempVarName, ju_ArrayList_get($listVals, $this.$forIndex), $this.$lineNumber2);
            tj_State_setForIndex($this.$currentState, $this.$forIndex + 1 | 0);
            $pastResult = tj_Result__init_(0);
            $forLineNumber = tj_ForEachStmt_getLine($foreachStmt);
            $returnVal = tj_Return__init_(0, null);
            $funcState = tj_State__init_(tj_Statements_getBody($foreachStmt), $this.$globalVariables3, $localVariables, $pastResult, $returnVal, 0, 0, 0, $forLineNumber, 1, tj_State_getCurrentLine($this.$currentState), 0, 0);
            tj_State_addState($this.$currentState, $funcState);
        } else if ($list.$getType0() !== tj_JavaishVal$JavaishType_INTLIST) {
            if ($list.$getType0() !== tj_JavaishVal$JavaishType_FLOATLIST) {
                tj_Error_TypeMismatch($rt_s(293), $booleanList.$typeString(), $this.$lineNumber2);
                return;
            }
            $listVals = tj_JavaishFloatList_getList($list);
            if ($listVals === null) {
                tj_Error_ListEmpty($this.$lineNumber2, $listName);
                return;
            }
            if ($this.$forIndex >= ju_ArrayList_size($listVals)) {
                tj_State_setForIndex($this.$currentState, 0);
                if (!$isGlobal)
                    tj_Variables_removeVariable($localVariables, $tempVarName, tj_JavaishVal$JavaishType_FLOAT);
                else
                    tj_Variables_removeVariable($this.$globalVariables3, $tempVarName, tj_JavaishVal$JavaishType_FLOAT);
                return;
            }
            if (!$this.$forIndex) {
                if (!$isGlobal)
                    tj_Variables_addVariable($localVariables, $tempVarName, tj_JavaishVal$JavaishType_FLOAT, tj_JavaishFloat__init_(0.0), $this.$lineNumber2);
                else
                    tj_Variables_addVariable($this.$globalVariables3, $tempVarName, tj_JavaishVal$JavaishType_FLOAT, tj_JavaishFloat__init_(0.0), $this.$lineNumber2);
            }
            if (tj_Variables_isVariable($localVariables, $tempVarName))
                tj_Variables_setVariableValue($localVariables, $tempVarName, ju_ArrayList_get($listVals, $this.$forIndex), $this.$lineNumber2);
            else
                tj_Variables_setVariableValue($this.$globalVariables3, $tempVarName, ju_ArrayList_get($listVals, $this.$forIndex), $this.$lineNumber2);
            tj_State_setForIndex($this.$currentState, $this.$forIndex + 1 | 0);
            $pastResult = tj_Result__init_(0);
            $forLineNumber_0 = tj_ForEachStmt_getLine($foreachStmt);
            $returnVal = tj_Return__init_(0, null);
            $funcState = tj_State__init_(tj_Statements_getBody($foreachStmt), $this.$globalVariables3, $localVariables, $pastResult, $returnVal, 0, 0, 0, $forLineNumber_0, 1, tj_State_getCurrentLine($this.$currentState), 0, 0);
            tj_State_addState($this.$currentState, $funcState);
        } else {
            $listVals_0 = tj_JavaishIntList_getList($list);
            if ($listVals_0 === null) {
                tj_Error_ListEmpty($this.$lineNumber2, $listName);
                return;
            }
            if (!$this.$forIndex) {
                if (!$isGlobal)
                    tj_Variables_addVariable($localVariables, $tempVarName, tj_JavaishVal$JavaishType_INT, tj_JavaishInt__init_(0), $this.$lineNumber2);
                else
                    tj_Variables_addVariable($this.$globalVariables3, $tempVarName, tj_JavaishVal$JavaishType_INT, tj_JavaishInt__init_(0), $this.$lineNumber2);
            }
            if ($this.$forIndex >= ju_ArrayList_size($listVals_0)) {
                tj_State_setForIndex($this.$currentState, 0);
                if (!$isGlobal)
                    tj_Variables_removeVariable($localVariables, $tempVarName, tj_JavaishVal$JavaishType_INT);
                else
                    tj_Variables_removeVariable($this.$globalVariables3, $tempVarName, tj_JavaishVal$JavaishType_INT);
                return;
            }
            if (tj_Variables_isVariable($localVariables, $tempVarName))
                tj_Variables_setVariableValue($localVariables, $tempVarName, ju_ArrayList_get($listVals_0, $this.$forIndex), $this.$lineNumber2);
            else
                tj_Variables_setVariableValue($this.$globalVariables3, $tempVarName, ju_ArrayList_get($listVals_0, $this.$forIndex), $this.$lineNumber2);
            tj_State_setForIndex($this.$currentState, $this.$forIndex + 1 | 0);
            $pastResult = tj_Result__init_(0);
            $forLineNumber_1 = tj_ForEachStmt_getLine($foreachStmt);
            $returnVal = tj_Return__init_(0, null);
            $funcState = tj_State__init_(tj_Statements_getBody($foreachStmt), $this.$globalVariables3, $localVariables, $pastResult, $returnVal, 0, 0, 0, $forLineNumber_1, 1, tj_State_getCurrentLine($this.$currentState), 0, 0);
            tj_State_addState($this.$currentState, $funcState);
        }
    }
    function tj_Debugger_evalForWhen($this, $forwhenStmt, $localVariables, $isGlobal) {
        var $incVarName, $condition, $result, $pastResult, $forLineNumber, $returnVal, $funcState, $incExpression, $incVal2, $incResult, $incInt, $ptr, $tmp;
        $ptr = 0;
        if ($rt_resuming()) {
            var $thread = $rt_nativeThread();
            $ptr = $thread.pop();$incInt = $thread.pop();$incResult = $thread.pop();$incVal2 = $thread.pop();$incExpression = $thread.pop();$funcState = $thread.pop();$returnVal = $thread.pop();$forLineNumber = $thread.pop();$pastResult = $thread.pop();$result = $thread.pop();$condition = $thread.pop();$incVarName = $thread.pop();$isGlobal = $thread.pop();$localVariables = $thread.pop();$forwhenStmt = $thread.pop();$this = $thread.pop();
        }
        main: while (true) { switch ($ptr) {
        case 0:
            $incVarName = $forwhenStmt.$incVar;
            $condition = $forwhenStmt.$condition2;
            $ptr = 1;
        case 1:
            $tmp = tj_Debugger_evalExpression($this, $condition, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            $result = $tmp;
            if (!$this.$inForWhenLoop) {
                $this.$inForWhenLoop = 1;
                $this.$currentState.$inForWhenLoop0 = 1;
                if (!$isGlobal) {
                    if (!tj_Variables_isVariable($localVariables, $incVarName)) {
                        tj_JavaishVal$JavaishType_$callClinit();
                        tj_Variables_addVariable($localVariables, $incVarName, tj_JavaishVal$JavaishType_INT, tj_JavaishInt__init_(0), $this.$lineNumber2);
                    }
                } else if (!tj_Variables_isVariable($this.$globalVariables3, $incVarName)) {
                    $pastResult = $this.$globalVariables3;
                    tj_JavaishVal$JavaishType_$callClinit();
                    tj_Variables_addVariable($pastResult, $incVarName, tj_JavaishVal$JavaishType_INT, tj_JavaishInt__init_(0), $this.$lineNumber2);
                }
                if ($result === null)
                    return;
                if ($result.$value18.$value19 != 1) {
                    $this.$inForWhenLoop = 0;
                    $this.$currentState.$inForWhenLoop0 = 0;
                } else {
                    $pastResult = tj_Result__init_(0);
                    $forLineNumber = $forwhenStmt.$line;
                    $returnVal = tj_Return__init_(0, null);
                    $funcState = tj_State__init_($forwhenStmt.$body, $this.$globalVariables3, $localVariables, $pastResult, $returnVal, 0, 0, 0, $forLineNumber, 1, $this.$currentState.$currentLine, 0, 0);
                    tj_State_addState($this.$currentState, $funcState);
                }
                return;
            }
            $pastResult = !$isGlobal ? tj_Variables_getVariableValue($localVariables, $incVarName) : tj_Variables_getVariableValue($this.$globalVariables3, $incVarName);
            if ($pastResult === null)
                return;
            $incExpression = $forwhenStmt.$increment;
            $ptr = 2;
        case 2:
            $tmp = tj_Debugger_evalExpression($this, $incExpression, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            $incVal2 = $tmp;
            tj_Debugger$Operator_$callClinit();
            $incResult = tj_Debugger_performOperation($this, tj_Debugger$Operator_PLUS, $pastResult, $incVal2);
            $returnVal = $incResult.$getType0();
            tj_JavaishVal$JavaishType_$callClinit();
            if ($returnVal !== tj_JavaishVal$JavaishType_INT) {
                tj_Error_TypeMismatch($rt_s(187), $incResult.$typeString(), $this.$lineNumber2);
                return;
            }
            $incInt = $incResult;
            if (!$isGlobal)
                tj_Variables_setVariableValue($localVariables, $incVarName, $incInt, $this.$lineNumber2);
            else
                tj_Variables_setVariableValue($this.$globalVariables3, $incVarName, $incInt, $this.$lineNumber2);
            $ptr = 3;
        case 3:
            $tmp = tj_Debugger_evalExpression($this, $condition, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            $result = $tmp;
            if ($result === null)
                return;
            if ($result === null)
                return;
            if ($result.$value18.$value19 != 1) {
                $this.$inForWhenLoop = 0;
                $this.$currentState.$inForWhenLoop0 = 0;
            } else {
                $pastResult = tj_Result__init_(0);
                $forLineNumber = $forwhenStmt.$line;
                $returnVal = tj_Return__init_(0, null);
                $funcState = tj_State__init_($forwhenStmt.$body, $this.$globalVariables3, $localVariables, $pastResult, $returnVal, 0, 0, 0, $forLineNumber, 1, $this.$currentState.$currentLine, 0, 0);
                tj_State_addState($this.$currentState, $funcState);
            }
            return;
        default: $rt_invalidPointer();
        }}
        $rt_nativeThread().push($this, $forwhenStmt, $localVariables, $isGlobal, $incVarName, $condition, $result, $pastResult, $forLineNumber, $returnVal, $funcState, $incExpression, $incVal2, $incResult, $incInt, $ptr);
    }
    function tj_Debugger_evalShowMsgBox($this, $showMsgStmt, $localVariables, $isGlobal) {
        var $expression, $value, var$6, $e, $$je, $ptr, $tmp;
        $ptr = 0;
        if ($rt_resuming()) {
            var $thread = $rt_nativeThread();
            $ptr = $thread.pop();$e = $thread.pop();var$6 = $thread.pop();$value = $thread.pop();$expression = $thread.pop();$isGlobal = $thread.pop();$localVariables = $thread.pop();$showMsgStmt = $thread.pop();$this = $thread.pop();
        }
        main: while (true) { switch ($ptr) {
        case 0:
            $expression = $showMsgStmt.$value22;
            $ptr = 1;
        case 1:
            $tmp = tj_Debugger_evalExpression($this, $expression, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            $value = $tmp;
            tj_Error_MessageBoxesNotSupported($this.$lineNumber2);
            if ($value === null)
                return;
            tj_State_incrementCurrentLine($this.$currentState);
            tj_State_incrementCurrentLine($this.$currentState);
            $this.$currentState.$currentRuntimeLine = $showMsgStmt.$line + 1 | 0;
            try {
                juc_TimeUnit_$callClinit();
                $showMsgStmt = juc_TimeUnit_MILLISECONDS;
                var$6 = Long_fromInt(100);
                $ptr = 2;
                continue main;
            } catch ($$e) {
                $$je = $rt_wrapException($$e);
                if ($$je instanceof jl_InterruptedException) {
                    $e = $$je;
                } else {
                    throw $$e;
                }
            }
            $e.$printStackTrace();
            $rt_globals.alert($rt_ustr(($value.$getValue0()).$toString()));
            return;
        case 2:
            a: {
                try {
                    juc_TimeUnit_sleep($showMsgStmt, var$6);
                    if ($rt_suspending()) {
                        break main;
                    }
                    break a;
                } catch ($$e) {
                    $$je = $rt_wrapException($$e);
                    if ($$je instanceof jl_InterruptedException) {
                        $e = $$je;
                    } else {
                        throw $$e;
                    }
                }
                $e.$printStackTrace();
            }
            $rt_globals.alert($rt_ustr(($value.$getValue0()).$toString()));
            return;
        default: $rt_invalidPointer();
        }}
        $rt_nativeThread().push($this, $showMsgStmt, $localVariables, $isGlobal, $expression, $value, var$6, $e, $ptr);
    }
    function tj_Debugger_evalShowInputBox($this, $showInputBoxElmt, $localVariables, $isGlobal) {
        var $value, $expression, var$6, $e, $$je, $ptr, $tmp;
        $ptr = 0;
        if ($rt_resuming()) {
            var $thread = $rt_nativeThread();
            $ptr = $thread.pop();$e = $thread.pop();var$6 = $thread.pop();$expression = $thread.pop();$value = $thread.pop();$isGlobal = $thread.pop();$localVariables = $thread.pop();$showInputBoxElmt = $thread.pop();$this = $thread.pop();
        }
        main: while (true) { switch ($ptr) {
        case 0:
            $value = null;
            $expression = $showInputBoxElmt.$value2;
            tj_Error_MessageBoxesNotSupported($this.$lineNumber2);
            if ($expression === null) {
                try {
                    juc_TimeUnit_$callClinit();
                    $showInputBoxElmt = juc_TimeUnit_MILLISECONDS;
                    var$6 = Long_fromInt(100);
                    $ptr = 2;
                    continue main;
                } catch ($$e) {
                    $$je = $rt_wrapException($$e);
                    if ($$je instanceof jl_InterruptedException) {
                        $e = $$je;
                    } else {
                        throw $$e;
                    }
                }
                $e.$printStackTrace();
                return tj_JavaishString__init_($rt_str($rt_globals.prompt($rt_ustr(($value.$getValue0()).$toString()))));
            }
            $ptr = 1;
        case 1:
            $tmp = tj_Debugger_evalExpression($this, $expression, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            $value = $tmp;
            try {
                juc_TimeUnit_$callClinit();
                $showInputBoxElmt = juc_TimeUnit_MILLISECONDS;
                var$6 = Long_fromInt(100);
                $ptr = 2;
                continue main;
            } catch ($$e) {
                $$je = $rt_wrapException($$e);
                if ($$je instanceof jl_InterruptedException) {
                    $e = $$je;
                } else {
                    throw $$e;
                }
            }
            $e.$printStackTrace();
            return tj_JavaishString__init_($rt_str($rt_globals.prompt($rt_ustr(($value.$getValue0()).$toString()))));
        case 2:
            a: {
                try {
                    juc_TimeUnit_sleep($showInputBoxElmt, var$6);
                    if ($rt_suspending()) {
                        break main;
                    }
                    break a;
                } catch ($$e) {
                    $$je = $rt_wrapException($$e);
                    if ($$je instanceof jl_InterruptedException) {
                        $e = $$je;
                    } else {
                        throw $$e;
                    }
                }
                $e.$printStackTrace();
            }
            return tj_JavaishString__init_($rt_str($rt_globals.prompt($rt_ustr(($value.$getValue0()).$toString()))));
        default: $rt_invalidPointer();
        }}
        $rt_nativeThread().push($this, $showInputBoxElmt, $localVariables, $isGlobal, $value, $expression, var$6, $e, $ptr);
    }
    function tj_Debugger_evalMutation($this, $mutationStmt, $localVariables, $isGlobal) {
        var $type, $name, $varType, $value, $newVal, $list, $ptr, $tmp;
        $ptr = 0;
        if ($rt_resuming()) {
            var $thread = $rt_nativeThread();
            $ptr = $thread.pop();$list = $thread.pop();$newVal = $thread.pop();$value = $thread.pop();$varType = $thread.pop();$name = $thread.pop();$type = $thread.pop();$isGlobal = $thread.pop();$localVariables = $thread.pop();$mutationStmt = $thread.pop();$this = $thread.pop();
        }
        main: while (true) { switch ($ptr) {
        case 0:
            $type = $mutationStmt.$mutationType;
            $name = $mutationStmt.$varName;
            $varType = tj_Variables_getVariableType($this.$globalVariables3, $name);
            $mutationStmt = $mutationStmt.$value23;
            $ptr = 1;
        case 1:
            $tmp = tj_Debugger_evalExpression($this, $mutationStmt, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            $value = $tmp;
            tj_JavaishVal$JavaishType_$callClinit();
            if ($varType !== tj_JavaishVal$JavaishType_STRINGLIST && $varType !== tj_JavaishVal$JavaishType_BOOLEANLIST && $varType !== tj_JavaishVal$JavaishType_INTLIST && $varType !== tj_JavaishVal$JavaishType_FLOATLIST) {
                $mutationStmt = tj_Variables_isVariable($localVariables, $name) ? tj_Variables_getVariableValue($localVariables, $name) : tj_Variables_getVariableValue($this.$globalVariables3, $name);
                if ($mutationStmt === null) {
                    tj_Error_VariableNotDeclared($name, $this.$lineNumber2);
                    return;
                }
                if ($mutationStmt.$getType0() === tj_JavaishVal$JavaishType_STRING) {
                    tj_Statements$MutationType_$callClinit();
                    if ($type !== tj_Statements$MutationType_ADD) {
                        tj_Error_CantPerformMutation($mutationStmt.$typeString(), $this.$lineNumber2);
                        return;
                    }
                }
                $newVal = tj_Debugger_performOperation($this, tj_Debugger_mutationTypeToOperator($this, $type), $mutationStmt, $value);
                if (tj_Variables_isVariable($localVariables, $name)) {
                    tj_Variables_setVariableValue($localVariables, $name, $newVal, $this.$lineNumber2);
                    return;
                }
                tj_Variables_setVariableValue($this.$globalVariables3, $name, $newVal, $this.$lineNumber2);
                return;
            }
            $mutationStmt = tj_Variables_isVariable($localVariables, $name) ? (tj_Variables_getList($localVariables, $name)).$list : (tj_Variables_getList($this.$globalVariables3, $name)).$list;
            if ($mutationStmt === null) {
                tj_Error_VariableNotDeclared($name, $this.$lineNumber2);
                return;
            }
            $list = tj_Debugger_performListOperation($this, tj_Debugger_mutationTypeToOperator($this, $type), $mutationStmt, $value, 0);
            if (tj_Variables_isVariable($localVariables, $name)) {
                tj_Variables_setVariableValue($localVariables, $name, tj_JavaishListVal__init_($list), $this.$lineNumber2);
                return;
            }
            tj_Variables_setVariableValue($this.$globalVariables3, $name, tj_JavaishListVal__init_($list), $this.$lineNumber2);
            return;
        default: $rt_invalidPointer();
        }}
        $rt_nativeThread().push($this, $mutationStmt, $localVariables, $isGlobal, $type, $name, $varType, $value, $newVal, $list, $ptr);
    }
    function tj_Debugger_evalRemoveAt($this, $removeAtStmt, $localVariables, $isGlobal) {
        var $name, $varType, $index, $indexVal, $list, $ptr, $tmp;
        $ptr = 0;
        if ($rt_resuming()) {
            var $thread = $rt_nativeThread();
            $ptr = $thread.pop();$list = $thread.pop();$indexVal = $thread.pop();$index = $thread.pop();$varType = $thread.pop();$name = $thread.pop();$isGlobal = $thread.pop();$localVariables = $thread.pop();$removeAtStmt = $thread.pop();$this = $thread.pop();
        }
        main: while (true) { switch ($ptr) {
        case 0:
            $name = $removeAtStmt.$listName0;
            $varType = tj_Variables_getVariableType($this.$globalVariables3, $name);
            $removeAtStmt = $removeAtStmt.$location;
            $ptr = 1;
        case 1:
            $tmp = tj_Debugger_evalExpression($this, $removeAtStmt, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            $index = $tmp;
            tj_JavaishVal$JavaishType_$callClinit();
            if ($varType !== tj_JavaishVal$JavaishType_STRINGLIST && $varType !== tj_JavaishVal$JavaishType_BOOLEANLIST && $varType !== tj_JavaishVal$JavaishType_INTLIST && $varType !== tj_JavaishVal$JavaishType_FLOATLIST) {
                tj_Error_TypeMismatch($rt_s(293), $varType.$name4, $this.$lineNumber2);
                return;
            }
            $varType = tj_Variables_isVariable($localVariables, $name) ? (tj_Variables_getList($localVariables, $name)).$list : (tj_Variables_getList($this.$globalVariables3, $name)).$list;
            if ($varType === null) {
                tj_Error_VariableNotDeclared($name, $this.$lineNumber2);
                return;
            }
            if ($index.$getType0() !== tj_JavaishVal$JavaishType_INT) {
                tj_Error_TypeMismatch($rt_s(187), $index.$typeString(), $this.$lineNumber2);
                return;
            }
            $indexVal = (tj_JavaishInt_getValue($index)).$value;
            tj_Debugger$Operator_$callClinit();
            $list = tj_Debugger_performListOperation($this, tj_Debugger$Operator_REMOVEAT, $varType, null, $indexVal);
            if (tj_Variables_isVariable($localVariables, $name)) {
                tj_Variables_setVariableValue($localVariables, $name, tj_JavaishListVal__init_($list), $this.$lineNumber2);
                return;
            }
            tj_Variables_setVariableValue($this.$globalVariables3, $name, tj_JavaishListVal__init_($list), $this.$lineNumber2);
            return;
        default: $rt_invalidPointer();
        }}
        $rt_nativeThread().push($this, $removeAtStmt, $localVariables, $isGlobal, $name, $varType, $index, $indexVal, $list, $ptr);
    }
    function tj_Debugger_evalRemoveFrom($this, $removeFromStmt, $localVariables, $isGlobal) {
        var $name, $varType, $value, $list, $ptr, $tmp;
        $ptr = 0;
        if ($rt_resuming()) {
            var $thread = $rt_nativeThread();
            $ptr = $thread.pop();$list = $thread.pop();$value = $thread.pop();$varType = $thread.pop();$name = $thread.pop();$isGlobal = $thread.pop();$localVariables = $thread.pop();$removeFromStmt = $thread.pop();$this = $thread.pop();
        }
        main: while (true) { switch ($ptr) {
        case 0:
            $name = $removeFromStmt.$listName1;
            $varType = tj_Variables_getVariableType($this.$globalVariables3, $name);
            $removeFromStmt = $removeFromStmt.$value24;
            $ptr = 1;
        case 1:
            $tmp = tj_Debugger_evalExpression($this, $removeFromStmt, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            $value = $tmp;
            tj_JavaishVal$JavaishType_$callClinit();
            if ($varType !== tj_JavaishVal$JavaishType_STRINGLIST && $varType !== tj_JavaishVal$JavaishType_BOOLEANLIST && $varType !== tj_JavaishVal$JavaishType_INTLIST && $varType !== tj_JavaishVal$JavaishType_FLOATLIST)
                return;
            $removeFromStmt = tj_Variables_isVariable($localVariables, $name) ? (tj_Variables_getList($localVariables, $name)).$list : (tj_Variables_getList($this.$globalVariables3, $name)).$list;
            if ($removeFromStmt === null) {
                tj_Error_VariableNotDeclared($name, $this.$lineNumber2);
                return;
            }
            tj_Debugger$Operator_$callClinit();
            $list = tj_Debugger_performListOperation($this, tj_Debugger$Operator_REMOVEFROM, $removeFromStmt, $value, 0);
            $removeFromStmt = jl_System_out();
            $varType = $list.$listString();
            $value = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($value);
            jl_StringBuilder_append(jl_StringBuilder_append($value, $rt_s(300)), $varType);
            ji_PrintStream_println($removeFromStmt, jl_AbstractStringBuilder_toString($value));
            if (tj_Variables_isVariable($localVariables, $name)) {
                tj_Variables_setVariableValue($localVariables, $name, tj_JavaishListVal__init_($list), $this.$lineNumber2);
                return;
            }
            tj_Variables_setVariableValue($this.$globalVariables3, $name, tj_JavaishListVal__init_($list), $this.$lineNumber2);
            return;
        default: $rt_invalidPointer();
        }}
        $rt_nativeThread().push($this, $removeFromStmt, $localVariables, $isGlobal, $name, $varType, $value, $list, $ptr);
    }
    function tj_Debugger_evalRemoveAllFrom($this, $removeAllFromStmt, $localVariables, $isGlobal) {
        var $name, $varType, $value, $list, $ptr, $tmp;
        $ptr = 0;
        if ($rt_resuming()) {
            var $thread = $rt_nativeThread();
            $ptr = $thread.pop();$list = $thread.pop();$value = $thread.pop();$varType = $thread.pop();$name = $thread.pop();$isGlobal = $thread.pop();$localVariables = $thread.pop();$removeAllFromStmt = $thread.pop();$this = $thread.pop();
        }
        main: while (true) { switch ($ptr) {
        case 0:
            $name = $removeAllFromStmt.$listName2;
            $varType = tj_Variables_getVariableType($this.$globalVariables3, $name);
            $removeAllFromStmt = $removeAllFromStmt.$value25;
            $ptr = 1;
        case 1:
            $tmp = tj_Debugger_evalExpression($this, $removeAllFromStmt, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            $value = $tmp;
            tj_JavaishVal$JavaishType_$callClinit();
            if ($varType !== tj_JavaishVal$JavaishType_STRINGLIST && $varType !== tj_JavaishVal$JavaishType_BOOLEANLIST && $varType !== tj_JavaishVal$JavaishType_INTLIST && $varType !== tj_JavaishVal$JavaishType_FLOATLIST)
                return;
            $removeAllFromStmt = tj_Variables_isVariable($localVariables, $name) ? (tj_Variables_getList($localVariables, $name)).$list : (tj_Variables_getList($this.$globalVariables3, $name)).$list;
            if ($removeAllFromStmt === null) {
                tj_Error_VariableNotDeclared($name, $this.$lineNumber2);
                return;
            }
            tj_Debugger$Operator_$callClinit();
            $list = tj_Debugger_performListOperation($this, tj_Debugger$Operator_REMOVEALLFROM, $removeAllFromStmt, $value, 0);
            $removeAllFromStmt = jl_System_out();
            $varType = $list.$listString();
            $value = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($value);
            jl_StringBuilder_append(jl_StringBuilder_append($value, $rt_s(300)), $varType);
            ji_PrintStream_println($removeAllFromStmt, jl_AbstractStringBuilder_toString($value));
            if (tj_Variables_isVariable($localVariables, $name)) {
                tj_Variables_setVariableValue($localVariables, $name, tj_JavaishListVal__init_($list), $this.$lineNumber2);
                return;
            }
            tj_Variables_setVariableValue($this.$globalVariables3, $name, tj_JavaishListVal__init_($list), $this.$lineNumber2);
            return;
        default: $rt_invalidPointer();
        }}
        $rt_nativeThread().push($this, $removeAllFromStmt, $localVariables, $isGlobal, $name, $varType, $value, $list, $ptr);
    }
    function tj_Debugger_performListOperation($this, $operation, $list, $val, $index) {
        var $result, $listInnerType, $valType, $booleanListVal, $floatListVal, $intVal, $intListVal, $stringListVal, $booleanVal, $i, $stringVal;
        a: {
            $result = null;
            tj_Debugger$1_$callClinit();
            switch (tj_Debugger$1_$SwitchMap$trackerjo$javaish$Debugger$Operator.data[jl_Enum_ordinal($operation)]) {
                case 7:
                    $listInnerType = $list.$getInnerType();
                    $valType = $val.$getType0();
                    if ($listInnerType !== $valType) {
                        tj_Error_TypeMismatch(jl_Enum_toString($listInnerType), jl_Enum_toString($valType), $this.$lineNumber2);
                        return null;
                    }
                    $operation = $list.$getType0();
                    tj_JavaishVal$JavaishType_$callClinit();
                    if ($operation === tj_JavaishVal$JavaishType_BOOLEANLIST) {
                        $booleanListVal = tj_JavaishBooleanList_getList($list);
                        ju_ArrayList_add($booleanListVal, $val);
                        $result = tj_JavaishBooleanList__init_($booleanListVal);
                        break a;
                    }
                    if ($list.$getType0() === tj_JavaishVal$JavaishType_FLOATLIST) {
                        $floatListVal = tj_JavaishFloatList_getList($list);
                        if ($val.$getType0() !== tj_JavaishVal$JavaishType_INT)
                            ju_ArrayList_add($floatListVal, $val);
                        else {
                            $intVal = $val;
                            ju_ArrayList_add($floatListVal, tj_JavaishFloat__init_(jl_Integer_intValue(tj_JavaishInt_getValue($intVal))));
                        }
                        $result = tj_JavaishFloatList__init_($floatListVal);
                        break a;
                    }
                    if ($list.$getType0() === tj_JavaishVal$JavaishType_INTLIST) {
                        $intListVal = tj_JavaishIntList_getList($list);
                        ju_ArrayList_add($intListVal, $val);
                        $result = tj_JavaishIntList__init_($intListVal);
                        break a;
                    }
                    if ($list.$getType0() !== tj_JavaishVal$JavaishType_STRINGLIST)
                        break a;
                    $stringListVal = tj_JavaishStringList_getList($list);
                    ju_ArrayList_add($stringListVal, $val);
                    $result = tj_JavaishStringList__init_($stringListVal);
                    break a;
                case 11:
                    $operation = $list.$getType0();
                    tj_JavaishVal$JavaishType_$callClinit();
                    if ($operation === tj_JavaishVal$JavaishType_BOOLEANLIST) {
                        $booleanListVal = tj_JavaishBooleanList_getList($list);
                        ju_ArrayList_remove($booleanListVal, $index);
                        $result = tj_JavaishBooleanList__init_($booleanListVal);
                        break a;
                    }
                    if ($list.$getType0() === tj_JavaishVal$JavaishType_FLOATLIST) {
                        $floatListVal = tj_JavaishFloatList_getList($list);
                        ju_ArrayList_remove($floatListVal, $index);
                        $result = tj_JavaishFloatList__init_($floatListVal);
                        break a;
                    }
                    if ($list.$getType0() === tj_JavaishVal$JavaishType_INTLIST) {
                        $intListVal = tj_JavaishIntList_getList($list);
                        ju_ArrayList_remove($intListVal, $index);
                        $result = tj_JavaishIntList__init_($intListVal);
                        break a;
                    }
                    if ($list.$getType0() !== tj_JavaishVal$JavaishType_STRINGLIST)
                        break a;
                    $stringListVal = tj_JavaishStringList_getList($list);
                    ju_ArrayList_remove($stringListVal, $index);
                    $result = tj_JavaishStringList__init_($stringListVal);
                    break a;
                case 12:
                    $operation = $list.$getType0();
                    tj_JavaishVal$JavaishType_$callClinit();
                    if ($operation === tj_JavaishVal$JavaishType_BOOLEANLIST) {
                        $booleanListVal = tj_JavaishBooleanList_getList($list);
                        $booleanVal = $val;
                        $i = 0;
                        b: {
                            while (true) {
                                if ($i >= ju_ArrayList_size($booleanListVal))
                                    break b;
                                if (tj_JavaishBoolean_getValue(ju_ArrayList_get($booleanListVal, $i)) === tj_JavaishBoolean_getValue($booleanVal))
                                    break;
                                $i = $i + 1 | 0;
                            }
                            ju_ArrayList_remove($booleanListVal, $i);
                        }
                        $result = tj_JavaishBooleanList__init_($booleanListVal);
                        break a;
                    }
                    if ($list.$getType0() === tj_JavaishVal$JavaishType_FLOATLIST) {
                        $floatListVal = tj_JavaishFloatList_getList($list);
                        if ($val.$getType0() !== tj_JavaishVal$JavaishType_INT)
                            $operation = $val;
                        else {
                            $intVal = $val;
                            $operation = tj_JavaishFloat__init_(jl_Integer_intValue(tj_JavaishInt_getValue($intVal)));
                        }
                        $i = 0;
                        c: {
                            while (true) {
                                if ($i >= ju_ArrayList_size($floatListVal))
                                    break c;
                                if (tj_JavaishFloat_getValue(ju_ArrayList_get($floatListVal, $i)) === tj_JavaishFloat_getValue($operation))
                                    break;
                                $i = $i + 1 | 0;
                            }
                            ju_ArrayList_remove($floatListVal, $i);
                        }
                        $result = tj_JavaishFloatList__init_($floatListVal);
                        break a;
                    }
                    if ($list.$getType0() !== tj_JavaishVal$JavaishType_INTLIST) {
                        if ($list.$getType0() !== tj_JavaishVal$JavaishType_STRINGLIST)
                            break a;
                        $stringListVal = tj_JavaishStringList_getList($list);
                        $stringVal = $val;
                        $i = 0;
                        d: {
                            while (true) {
                                if ($i >= ju_ArrayList_size($stringListVal))
                                    break d;
                                if (jl_String_equals(tj_JavaishString_getValue(ju_ArrayList_get($stringListVal, $i)), tj_JavaishString_getValue($stringVal)))
                                    break;
                                $i = $i + 1 | 0;
                            }
                            ju_ArrayList_remove($stringListVal, $i);
                        }
                        $result = tj_JavaishStringList__init_($stringListVal);
                        break a;
                    }
                    $intListVal = tj_JavaishIntList_getList($list);
                    $intVal = $val;
                    $i = 0;
                    e: {
                        while (true) {
                            if ($i >= ju_ArrayList_size($intListVal))
                                break e;
                            if (tj_JavaishInt_getValue(ju_ArrayList_get($intListVal, $i)) === tj_JavaishInt_getValue($intVal))
                                break;
                            $i = $i + 1 | 0;
                        }
                        ju_ArrayList_remove($intListVal, $i);
                    }
                    $result = tj_JavaishIntList__init_($intListVal);
                    $operation = jl_System_out();
                    $list = jl_String_valueOf(tj_JavaishInt_getType($intVal));
                    $index = ju_ArrayList_size($intListVal);
                    $val = jl_StringBuilder__init_();
                    jl_StringBuilder_append0(jl_StringBuilder_append3(jl_StringBuilder_append(jl_StringBuilder_append($val, $rt_s(301)), $list), 32), $index);
                    ji_PrintStream_println($operation, jl_StringBuilder_toString($val));
                    break a;
                case 13:
                    $operation = $list.$getType0();
                    tj_JavaishVal$JavaishType_$callClinit();
                    if ($operation === tj_JavaishVal$JavaishType_BOOLEANLIST) {
                        $booleanListVal = tj_JavaishBooleanList_getList($list);
                        $booleanVal = $val;
                        $i = 0;
                        while ($i < ju_ArrayList_size($booleanListVal)) {
                            if (tj_JavaishBoolean_getValue(ju_ArrayList_get($booleanListVal, $i)) === tj_JavaishBoolean_getValue($booleanVal)) {
                                ju_ArrayList_remove($booleanListVal, $i);
                                $i = $i + (-1) | 0;
                            }
                            $i = $i + 1 | 0;
                        }
                        $result = tj_JavaishBooleanList__init_($booleanListVal);
                        break a;
                    }
                    if ($list.$getType0() === tj_JavaishVal$JavaishType_FLOATLIST) {
                        $floatListVal = tj_JavaishFloatList_getList($list);
                        if ($val.$getType0() !== tj_JavaishVal$JavaishType_INT)
                            $operation = $val;
                        else {
                            $intVal = $val;
                            $operation = tj_JavaishFloat__init_(jl_Integer_intValue(tj_JavaishInt_getValue($intVal)));
                        }
                        $i = 0;
                        while ($i < ju_ArrayList_size($floatListVal)) {
                            if (tj_JavaishFloat_getValue(ju_ArrayList_get($floatListVal, $i)) === tj_JavaishFloat_getValue($operation)) {
                                ju_ArrayList_remove($floatListVal, $i);
                                $i = $i + (-1) | 0;
                            }
                            $i = $i + 1 | 0;
                        }
                        $result = tj_JavaishFloatList__init_($floatListVal);
                        break a;
                    }
                    if ($list.$getType0() === tj_JavaishVal$JavaishType_INTLIST) {
                        $intListVal = tj_JavaishIntList_getList($list);
                        $intVal = $val;
                        $i = 0;
                        while ($i < ju_ArrayList_size($intListVal)) {
                            if (tj_JavaishInt_getValue(ju_ArrayList_get($intListVal, $i)) === tj_JavaishInt_getValue($intVal)) {
                                ju_ArrayList_remove($intListVal, $i);
                                $i = $i + (-1) | 0;
                            }
                            $i = $i + 1 | 0;
                        }
                        $result = tj_JavaishIntList__init_($intListVal);
                        break a;
                    }
                    if ($list.$getType0() !== tj_JavaishVal$JavaishType_STRINGLIST)
                        break a;
                    $stringListVal = tj_JavaishStringList_getList($list);
                    $stringVal = $val;
                    $i = 0;
                    while ($i < ju_ArrayList_size($stringListVal)) {
                        if (jl_String_equals(tj_JavaishString_getValue(ju_ArrayList_get($stringListVal, $i)), tj_JavaishString_getValue($stringVal))) {
                            ju_ArrayList_remove($stringListVal, $i);
                            $i = $i + (-1) | 0;
                        }
                        $i = $i + 1 | 0;
                    }
                    $result = tj_JavaishStringList__init_($stringListVal);
                    break a;
                case 8:
                case 9:
                case 10:
                    break;
                default:
            }
        }
        return $result;
    }
    function tj_Debugger_mutationTypeToOperator($this, $type) {
        tj_Debugger$1_$callClinit();
        switch (tj_Debugger$1_$SwitchMap$trackerjo$javaish$Statements$MutationType.data[$type.$ordinal0]) {
            case 1:
                tj_Debugger$Operator_$callClinit();
                return tj_Debugger$Operator_PLUS;
            case 2:
                tj_Debugger$Operator_$callClinit();
                return tj_Debugger$Operator_MINUS;
            case 3:
                tj_Debugger$Operator_$callClinit();
                return tj_Debugger$Operator_MULTIPLY;
            case 4:
                tj_Debugger$Operator_$callClinit();
                return tj_Debugger$Operator_DIVIDE;
            default:
        }
        return null;
    }
    var jl_Iterable = $rt_classWithoutFields(0);
    var ju_Collection = $rt_classWithoutFields(0);
    var ju_AbstractCollection = $rt_classWithoutFields();
    function ju_AbstractCollection_toArray($this, $a) {
        var var$2, $i, var$4, $iter, var$6;
        var$2 = $a.data;
        $i = $this.$size();
        var$4 = var$2.length;
        if (var$4 < $i)
            $a = jlr_Array_newInstance(jl_Class_getComponentType(jl_Object_getClass($a)), $i);
        else
            while ($i < var$4) {
                var$2[$i] = null;
                $i = $i + 1 | 0;
            }
        $i = 0;
        $iter = $this.$iterator();
        while ($iter.$hasNext()) {
            var$6 = $a.data;
            var$4 = $i + 1 | 0;
            var$6[$i] = $iter.$next();
            $i = var$4;
        }
        return $a;
    }
    function ju_AbstractCollection_toString($this) {
        var $sb, $iter, $e;
        $sb = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($sb);
        jl_AbstractStringBuilder_append($sb, 91);
        $iter = ju_AbstractList_iterator($this);
        if (ju_AbstractList$1_hasNext($iter)) {
            $e = ju_AbstractList$1_next($iter);
            if ($e === $this)
                $e = $rt_s(313);
            jl_StringBuilder_append($sb, $e);
        }
        while (ju_AbstractList$1_hasNext($iter)) {
            $e = ju_AbstractList$1_next($iter);
            jl_AbstractStringBuilder_append1($sb, $rt_s(56));
            if ($e === $this)
                $e = $rt_s(313);
            jl_StringBuilder_append($sb, $e);
        }
        jl_AbstractStringBuilder_append($sb, 93);
        return jl_AbstractStringBuilder_toString($sb);
    }
    var ju_SequencedCollection = $rt_classWithoutFields(0);
    var ju_List = $rt_classWithoutFields(0);
    function ju_AbstractList() {
        ju_AbstractCollection.call(this);
        this.$modCount = 0;
    }
    function ju_AbstractList_add($this, $e) {
        $this.$add0($this.$size(), $e);
        return 1;
    }
    function ju_AbstractList_iterator($this) {
        var var$1;
        var$1 = new ju_AbstractList$1;
        var$1.$this$00 = $this;
        var$1.$modCount0 = $this.$modCount;
        var$1.$size1 = $this.$size();
        var$1.$removeIndex = (-1);
        return var$1;
    }
    function ju_AbstractList_add0($this, $index, $element) {
        $element = new jl_UnsupportedOperationException;
        jl_Exception__init_($element);
        $rt_throw($element);
    }
    function ju_AbstractList_remove($this, $index) {
        var var$2;
        var$2 = new jl_UnsupportedOperationException;
        jl_Exception__init_(var$2);
        $rt_throw(var$2);
    }
    function ju_AbstractList_equals($this, $other) {
        var $list, $i;
        if (!$rt_isInstance($other, ju_List))
            return 0;
        $list = $other;
        if ($this.$size() != $list.$size())
            return 0;
        $i = 0;
        while ($i < $list.$size()) {
            if (!ju_Objects_equals($this.$get0($i), $list.$get0($i)))
                return 0;
            $i = $i + 1 | 0;
        }
        return 1;
    }
    var jl_Cloneable = $rt_classWithoutFields(0);
    var ju_RandomAccess = $rt_classWithoutFields(0);
    function ju_ArrayList() {
        var a = this; ju_AbstractList.call(a);
        a.$array = null;
        a.$size0 = 0;
    }
    function ju_ArrayList__init_() {
        var var_0 = new ju_ArrayList();
        ju_ArrayList__init_0(var_0);
        return var_0;
    }
    function ju_ArrayList__init_1(var_0) {
        var var_1 = new ju_ArrayList();
        ju_ArrayList__init_2(var_1, var_0);
        return var_1;
    }
    function ju_ArrayList__init_0($this) {
        ju_ArrayList__init_2($this, 10);
    }
    function ju_ArrayList__init_2($this, $initialCapacity) {
        $this.$array = $rt_createArray(jl_Object, $initialCapacity);
    }
    function ju_ArrayList_ensureCapacity($this, $minCapacity) {
        var var$2, $newLength;
        var$2 = $this.$array.data.length;
        if (var$2 < $minCapacity) {
            $newLength = var$2 >= 1073741823 ? 2147483647 : jl_Math_max($minCapacity, jl_Math_max(var$2 * 2 | 0, 5));
            $this.$array = ju_Arrays_copyOf($this.$array, $newLength);
        }
    }
    function ju_ArrayList_get($this, $index) {
        ju_ArrayList_checkIndex($this, $index);
        return $this.$array.data[$index];
    }
    function ju_ArrayList_size($this) {
        return $this.$size0;
    }
    function ju_ArrayList_add($this, $element) {
        var var$2, var$3;
        ju_ArrayList_ensureCapacity($this, $this.$size0 + 1 | 0);
        var$2 = $this.$array.data;
        var$3 = $this.$size0;
        $this.$size0 = var$3 + 1 | 0;
        var$2[var$3] = $element;
        $this.$modCount = $this.$modCount + 1 | 0;
        return 1;
    }
    function ju_ArrayList_add0($this, $index, $element) {
        var var$3, var$4, $i, var$6;
        if ($index >= 0) {
            var$3 = $this.$size0;
            if ($index <= var$3) {
                ju_ArrayList_ensureCapacity($this, var$3 + 1 | 0);
                var$4 = $this.$size0;
                $i = var$4;
                while ($i > $index) {
                    var$6 = $this.$array.data;
                    var$6[$i] = var$6[$i - 1 | 0];
                    $i = $i + (-1) | 0;
                }
                $this.$array.data[$index] = $element;
                $this.$size0 = var$4 + 1 | 0;
                $this.$modCount = $this.$modCount + 1 | 0;
                return;
            }
        }
        $element = new jl_IndexOutOfBoundsException;
        jl_Exception__init_($element);
        $rt_throw($element);
    }
    function ju_ArrayList_remove($this, $i) {
        var var$2, $old, var$4, $i_0;
        ju_ArrayList_checkIndex($this, $i);
        var$2 = $this.$array.data;
        $old = var$2[$i];
        var$4 = $this.$size0 - 1 | 0;
        $this.$size0 = var$4;
        while ($i < var$4) {
            $i_0 = $i + 1 | 0;
            var$2[$i] = var$2[$i_0];
            $i = $i_0;
        }
        var$2[var$4] = null;
        $this.$modCount = $this.$modCount + 1 | 0;
        return $old;
    }
    function ju_ArrayList_checkIndex($this, $index) {
        var var$2;
        if ($index >= 0 && $index < $this.$size0)
            return;
        var$2 = new jl_IndexOutOfBoundsException;
        jl_Exception__init_(var$2);
        $rt_throw(var$2);
    }
    function ju_ArrayList_toString($this) {
        var $i, $length, $buffer, var$4;
        $i = $this.$size0;
        if (!$i)
            return $rt_s(314);
        $length = $i - 1 | 0;
        $buffer = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_2($buffer, $i * 16 | 0);
        jl_AbstractStringBuilder_append($buffer, 91);
        $i = 0;
        while ($i < $length) {
            var$4 = $this.$array.data;
            jl_AbstractStringBuilder_append1(jl_StringBuilder_append($buffer, var$4[$i] !== $this ? var$4[$i] : $rt_s(313)), $rt_s(56));
            $i = $i + 1 | 0;
        }
        var$4 = $this.$array.data;
        jl_StringBuilder_append($buffer, var$4[$length] !== $this ? var$4[$length] : $rt_s(313));
        jl_AbstractStringBuilder_append($buffer, 93);
        return jl_AbstractStringBuilder_toString($buffer);
    }
    function oj_JSONArray() {
        jl_Object.call(this);
        this.$myArrayList = null;
    }
    function oj_JSONArray__init_() {
        var var_0 = new oj_JSONArray();
        oj_JSONArray__init_2(var_0);
        return var_0;
    }
    function oj_JSONArray__init_0(var_0) {
        var var_1 = new oj_JSONArray();
        oj_JSONArray__init_3(var_1, var_0);
        return var_1;
    }
    function oj_JSONArray__init_1(var_0) {
        var var_1 = new oj_JSONArray();
        oj_JSONArray__init_4(var_1, var_0);
        return var_1;
    }
    function oj_JSONArray__init_2($this) {
        $this.$myArrayList = ju_ArrayList__init_();
    }
    function oj_JSONArray__init_3($this, $collection) {
        var $o;
        a: {
            if ($collection === null)
                $this.$myArrayList = ju_ArrayList__init_();
            else {
                $this.$myArrayList = ju_ArrayList__init_1($collection.$size());
                $collection = ju_AbstractList_iterator($collection);
                while (true) {
                    if (!ju_AbstractList$1_hasNext($collection))
                        break a;
                    $o = ju_AbstractList$1_next($collection);
                    ju_ArrayList_add($this.$myArrayList, oj_JSONObject_wrap($o));
                }
            }
        }
    }
    function oj_JSONArray__init_4($this, $array) {
        var var$2, $length, $i;
        oj_JSONArray__init_2($this);
        if (!jl_Class_isArray(jl_Object_getClass($array))) {
            var$2 = new oj_JSONException;
            jl_Throwable__init_(var$2, $rt_s(315));
            $rt_throw(var$2);
        }
        $length = jlr_Array_getLength($array);
        ju_ArrayList_ensureCapacity($this.$myArrayList, $length);
        $i = 0;
        a: {
            while ($i < $length) {
                if ($i < 0)
                    break a;
                if ($i >= jlr_Array_getLength($array))
                    break a;
                oj_JSONArray_put($this, oj_JSONObject_wrap(jlr_Array_getImpl($array, $i)));
                $i = $i + 1 | 0;
            }
            return;
        }
        $array = new jl_ArrayIndexOutOfBoundsException;
        jl_Exception__init_($array);
        $rt_throw($array);
    }
    function oj_JSONArray_get($this, $index) {
        var $object, var$3;
        $object = $index >= 0 && $index < oj_JSONArray_length($this) ? ju_ArrayList_get($this.$myArrayList, $index) : null;
        if ($object !== null)
            return $object;
        var$3 = new oj_JSONException;
        $object = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($object);
        jl_AbstractStringBuilder_append1($object, $rt_s(140));
        $object = jl_StringBuilder_append0($object, $index);
        jl_AbstractStringBuilder_append1($object, $rt_s(155));
        jl_Throwable__init_(var$3, jl_AbstractStringBuilder_toString($object));
        $rt_throw(var$3);
    }
    function oj_JSONArray_getJSONObject($this, $index) {
        var $object, var$3;
        $object = oj_JSONArray_get($this, $index);
        if ($object instanceof oj_JSONObject)
            return $object;
        var$3 = new oj_JSONException;
        $object = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($object);
        jl_AbstractStringBuilder_append1($object, $rt_s(140));
        $object = jl_StringBuilder_append0($object, $index);
        jl_AbstractStringBuilder_append1($object, $rt_s(158));
        jl_Throwable__init_(var$3, jl_AbstractStringBuilder_toString($object));
        $rt_throw(var$3);
    }
    function oj_JSONArray_length($this) {
        return $this.$myArrayList.$size0;
    }
    function oj_JSONArray_put($this, $value) {
        ju_ArrayList_add($this.$myArrayList, $value);
        return $this;
    }
    function oj_JSONArray_toString($this) {
        var var$1, $$je;
        a: {
            try {
                var$1 = oj_JSONArray_toString0($this, 0);
            } catch ($$e) {
                $$je = $rt_wrapException($$e);
                if ($$je instanceof jl_Exception) {
                    break a;
                } else {
                    throw $$e;
                }
            }
            return var$1;
        }
        return null;
    }
    function oj_JSONArray_toString0($this, $indentFactor) {
        var $sw, var$3, $$je;
        $sw = ji_StringWriter__init_();
        var$3 = $sw.$buf;
        jl_Object_monitorEnterSync(var$3);
        a: {
            try {
                $sw = ji_StringWriter_toString(oj_JSONArray_write($this, $sw, $indentFactor, 0));
                jl_Object_monitorExitSync(var$3);
            } catch ($$e) {
                $$je = $rt_wrapException($$e);
                $sw = $$je;
                break a;

            }
            return $sw;
        }
        jl_Object_monitorExitSync(var$3);
        $rt_throw($sw);
    }
    function oj_JSONArray_write($this, $writer, $indentFactor, $indent) {
        var $commanate, $length, $e, $newindent, $i, $$je;
        a: {
            try {
                b: {
                    $commanate = 0;
                    $length = oj_JSONArray_length($this);
                    ji_StringWriter_write($writer, 91);
                    if ($length == 1)
                        c: {
                            try {
                                oj_JSONObject_writeValue($writer, ju_ArrayList_get($this.$myArrayList, 0), $indentFactor, $indent);
                                break c;
                            } catch ($$e) {
                                $$je = $rt_wrapException($$e);
                                if ($$je instanceof jl_Exception) {
                                    $e = $$je;
                                } else {
                                    throw $$e;
                                }
                            }
                            $rt_throw(oj_JSONException__init_0($rt_s(316), $e));
                        }
                    else if ($length) {
                        $newindent = $indent + $indentFactor | 0;
                        $i = 0;
                        while (true) {
                            if ($i >= $length) {
                                if ($indentFactor > 0)
                                    ji_StringWriter_write($writer, 10);
                                oj_JSONObject_indent($writer, $indent);
                                break b;
                            }
                            if ($commanate)
                                ji_StringWriter_write($writer, 44);
                            if ($indentFactor > 0)
                                ji_StringWriter_write($writer, 10);
                            oj_JSONObject_indent($writer, $newindent);
                            try {
                                oj_JSONObject_writeValue($writer, ju_ArrayList_get($this.$myArrayList, $i), $indentFactor, $newindent);
                            } catch ($$e) {
                                $$je = $rt_wrapException($$e);
                                if ($$je instanceof jl_Exception) {
                                    $e = $$je;
                                    break;
                                } else {
                                    throw $$e;
                                }
                            }
                            $commanate = 1;
                            $i = $i + 1 | 0;
                        }
                        $rt_throw(oj_JSONException__init_0(jl_StringBuilder_toString(jl_StringBuilder_append0(jl_StringBuilder_append1(jl_StringBuilder__init_(), $rt_s(317)), $i)), $e));
                    }
                }
                ji_StringWriter_write($writer, 93);
            } catch ($$e) {
                $$je = $rt_wrapException($$e);
                if ($$je instanceof ji_IOException) {
                    $e = $$je;
                    break a;
                } else {
                    throw $$e;
                }
            }
            return $writer;
        }
        $rt_throw(oj_JSONException__init_($e));
    }
    function tj_Statements() {
        var a = this; jl_Object.call(a);
        a.$type1 = null;
        a.$line = 0;
        a.$isBlock = 0;
        a.$body = null;
        a.$variableNames0 = null;
    }
    function tj_Statements__init_0() {
        var var_0 = new tj_Statements();
        tj_Statements__init_(var_0);
        return var_0;
    }
    function tj_Statements__init_($this) {
        $this.$isBlock = 0;
        $this.$body = ju_ArrayList__init_();
        $this.$variableNames0 = ju_ArrayList__init_();
    }
    function tj_Statements_getBody($this) {
        return $this.$body;
    }
    function tj_Statements_getLine($this) {
        return $this.$line;
    }
    function tj_Statements_getType($this) {
        return $this.$type1;
    }
    function tj_Statements_getTypeT($this) {
        return $this.$type1.$name4;
    }
    function tj_Statements_addStatement($this, $stmt) {
        ju_ArrayList_add($this.$body, $stmt);
    }
    function tj_Statements_addVariableName($this, $name) {
        ju_ArrayList_add($this.$variableNames0, $name);
    }
    function tj_Statements_containsVariable($this, $name) {
        var var$2, var$3;
        var$2 = ju_AbstractList_iterator($this.$variableNames0);
        a: {
            while (ju_AbstractList$1_hasNext(var$2)) {
                if (ju_Objects_equals(ju_AbstractList$1_next(var$2), $name)) {
                    var$3 = 1;
                    break a;
                }
            }
            var$3 = 0;
        }
        return var$3;
    }
    function oj_JSONTokener() {
        var a = this; jl_Object.call(a);
        a.$character = Long_ZERO;
        a.$eof = 0;
        a.$index0 = Long_ZERO;
        a.$line0 = Long_ZERO;
        a.$previous = 0;
        a.$reader = null;
        a.$usePrevious = 0;
        a.$characterPreviousLine = Long_ZERO;
    }
    function oj_JSONTokener__init_0(var_0) {
        var var_1 = new oj_JSONTokener();
        oj_JSONTokener__init_(var_1, var_0);
        return var_1;
    }
    function oj_JSONTokener__init_($this, $reader) {
        $this.$reader = $reader;
        $this.$eof = 0;
        $this.$usePrevious = 0;
        $this.$previous = 0;
        $this.$index0 = Long_ZERO;
        $this.$character = Long_fromInt(1);
        $this.$characterPreviousLine = Long_ZERO;
        $this.$line0 = Long_fromInt(1);
    }
    function oj_JSONTokener_back($this) {
        var var$1, var$2, var$3, var$4;
        if (!$this.$usePrevious) {
            var$1 = $this.$index0;
            if (Long_gt(var$1, Long_ZERO)) {
                $this.$index0 = Long_sub(var$1, Long_fromInt(1));
                var$2 = $this.$previous;
                if (var$2 != 13 && var$2 != 10) {
                    var$3 = $this.$character;
                    if (Long_gt(var$3, Long_ZERO))
                        $this.$character = Long_sub(var$3, Long_fromInt(1));
                } else {
                    $this.$line0 = Long_sub($this.$line0, Long_fromInt(1));
                    $this.$character = $this.$characterPreviousLine;
                }
                $this.$usePrevious = 1;
                $this.$eof = 0;
                return;
            }
        }
        var$4 = new oj_JSONException;
        jl_Throwable__init_(var$4, $rt_s(318));
        $rt_throw(var$4);
    }
    function oj_JSONTokener_next($this) {
        var $c, $exception, $$je;
        if ($this.$usePrevious) {
            $this.$usePrevious = 0;
            $c = $this.$previous;
        } else
            a: {
                try {
                    $c = $this.$reader.$read();
                    break a;
                } catch ($$e) {
                    $$je = $rt_wrapException($$e);
                    if ($$je instanceof ji_IOException) {
                        $exception = $$je;
                    } else {
                        throw $$e;
                    }
                }
                $rt_throw(oj_JSONException__init_($exception));
            }
        if ($c <= 0) {
            $this.$eof = 1;
            return 0;
        }
        if ($c > 0) {
            $this.$index0 = Long_add($this.$index0, Long_fromInt(1));
            if ($c == 13) {
                $this.$line0 = Long_add($this.$line0, Long_fromInt(1));
                $this.$characterPreviousLine = $this.$character;
                $this.$character = Long_ZERO;
            } else if ($c != 10)
                $this.$character = Long_add($this.$character, Long_fromInt(1));
            else {
                if ($this.$previous != 13) {
                    $this.$line0 = Long_add($this.$line0, Long_fromInt(1));
                    $this.$characterPreviousLine = $this.$character;
                }
                $this.$character = Long_ZERO;
            }
        }
        $c = $c & 65535;
        $this.$previous = $c;
        return $c;
    }
    function oj_JSONTokener_next0($this, $n) {
        var $chars, var$3, $pos;
        if (!$n)
            return $rt_s(2);
        $chars = $rt_createCharArray($n);
        var$3 = $chars.data;
        $pos = 0;
        while ($pos < $n) {
            var$3[$pos] = oj_JSONTokener_next($this);
            if ($this.$eof && !$this.$usePrevious ? 1 : 0)
                $rt_throw(oj_JSONTokener_syntaxError($this, $rt_s(319)));
            $pos = $pos + 1 | 0;
        }
        return jl_String__init_($chars);
    }
    function oj_JSONTokener_nextClean($this) {
        var $c;
        while (true) {
            $c = oj_JSONTokener_next($this);
            if (!$c)
                break;
            if ($c > 32)
                break;
        }
        return $c;
    }
    function oj_JSONTokener_nextValue($this) {
        var $c, $sb, var$3, var$4, var$5, $string, $$je;
        $c = oj_JSONTokener_nextClean($this);
        switch ($c) {
            case 34:
            case 39:
                $sb = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_($sb);
                a: while (true) {
                    b: {
                        var$3 = oj_JSONTokener_next($this);
                        switch (var$3) {
                            case 0:
                            case 10:
                            case 13:
                                break a;
                            case 92:
                                break b;
                            default:
                        }
                        if (var$3 == $c)
                            return jl_AbstractStringBuilder_toString($sb);
                        jl_AbstractStringBuilder_append($sb, var$3);
                        continue a;
                    }
                    var$3 = oj_JSONTokener_next($this);
                    switch (var$3) {
                        case 34:
                        case 39:
                        case 47:
                        case 92:
                            break;
                        case 98:
                            jl_AbstractStringBuilder_append($sb, 8);
                            continue a;
                        case 102:
                            jl_AbstractStringBuilder_append($sb, 12);
                            continue a;
                        case 110:
                            jl_AbstractStringBuilder_append($sb, 10);
                            continue a;
                        case 114:
                            jl_AbstractStringBuilder_append($sb, 13);
                            continue a;
                        case 116:
                            jl_AbstractStringBuilder_append($sb, 9);
                            continue a;
                        case 117:
                            try {
                                jl_StringBuilder_append3($sb, jl_Integer_parseInt(oj_JSONTokener_next0($this, 4), 16) & 65535);
                                continue a;
                            } catch ($$e) {
                                $$je = $rt_wrapException($$e);
                                if ($$je instanceof jl_NumberFormatException) {
                                    $sb = $$je;
                                    var$4 = new oj_JSONException;
                                    var$5 = new jl_StringBuilder;
                                    jl_AbstractStringBuilder__init_(var$5);
                                    jl_AbstractStringBuilder_append1(var$5, $rt_s(320));
                                    jl_AbstractStringBuilder_append1(var$5, oj_JSONTokener_toString($this));
                                    jl_Throwable__init_2(var$4, jl_AbstractStringBuilder_toString(var$5), $sb);
                                    $rt_throw(var$4);
                                } else {
                                    throw $$e;
                                }
                            }
                        default:
                            $rt_throw(oj_JSONTokener_syntaxError($this, $rt_s(320)));
                    }
                    jl_AbstractStringBuilder_append($sb, var$3);
                }
                $rt_throw(oj_JSONTokener_syntaxError($this, $rt_s(321)));
            case 91:
                oj_JSONTokener_back($this);
                $sb = oj_JSONArray__init_();
                if (oj_JSONTokener_nextClean($this) != 91)
                    $rt_throw(oj_JSONTokener_syntaxError($this, $rt_s(322)));
                $c = oj_JSONTokener_nextClean($this);
                if (!$c)
                    $rt_throw(oj_JSONTokener_syntaxError($this, $rt_s(323)));
                c: {
                    if ($c != 93) {
                        oj_JSONTokener_back($this);
                        while (true) {
                            if (oj_JSONTokener_nextClean($this) != 44) {
                                oj_JSONTokener_back($this);
                                ju_ArrayList_add($sb.$myArrayList, oj_JSONTokener_nextValue($this));
                            } else {
                                oj_JSONTokener_back($this);
                                ju_ArrayList_add($sb.$myArrayList, oj_JSONObject_NULL);
                            }
                            switch (oj_JSONTokener_nextClean($this)) {
                                case 0:
                                    $rt_throw(oj_JSONTokener_syntaxError($this, $rt_s(323)));
                                case 44:
                                    break;
                                case 93:
                                    break c;
                                default:
                                    $rt_throw(oj_JSONTokener_syntaxError($this, $rt_s(323)));
                            }
                            $c = oj_JSONTokener_nextClean($this);
                            if (!$c)
                                $rt_throw(oj_JSONTokener_syntaxError($this, $rt_s(323)));
                            if ($c == 93)
                                break;
                            oj_JSONTokener_back($this);
                        }
                    }
                }
                return $sb;
            case 123:
                break;
            default:
                $sb = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_($sb);
                while ($c >= 32 && jl_String_indexOf0($rt_s(324), $c) < 0) {
                    jl_AbstractStringBuilder_append($sb, $c);
                    $c = oj_JSONTokener_next($this);
                }
                oj_JSONTokener_back($this);
                $string = jl_String_trim(jl_AbstractStringBuilder_toString($sb));
                if (jl_String_equals($rt_s(2), $string))
                    $rt_throw(oj_JSONTokener_syntaxError($this, $rt_s(325)));
                d: {
                    if (!jl_String_equals($string, $rt_s(2))) {
                        if (jl_String_equalsIgnoreCase($string, $rt_s(21)))
                            $string = jl_Boolean_TRUE;
                        else if (jl_String_equalsIgnoreCase($string, $rt_s(20)))
                            $string = jl_Boolean_FALSE;
                        else if (jl_String_equalsIgnoreCase($string, $rt_s(11)))
                            $string = oj_JSONObject_NULL;
                        else {
                            e: {
                                f: {
                                    $c = jl_String_charAt($string, 0);
                                    if (!(!($c >= 48 && $c <= 57) && $c != 45))
                                        try {
                                            if (oj_JSONObject_isDecimalNotation($string)) {
                                                $sb = jl_Double_valueOf($string);
                                                if (!jl_Double_isInfinite($sb) && !jl_Double_isNaN($sb)) {
                                                    $string = $sb;
                                                    break d;
                                                }
                                            } else {
                                                $sb = jl_Long_valueOf($string);
                                                if (jl_String_equals($string, jl_Long_toString($sb))) {
                                                    if (Long_ne(jl_Long_longValue($sb), Long_fromInt(jl_Long_intValue($sb)))) {
                                                        $string = $sb;
                                                        break d;
                                                    }
                                                    $sb = jl_Integer_valueOf(jl_Long_intValue($sb));
                                                    break e;
                                                }
                                            }
                                            break f;
                                        } catch ($$e) {
                                            $$je = $rt_wrapException($$e);
                                            if ($$je instanceof jl_Exception) {
                                            } else {
                                                throw $$e;
                                            }
                                        }
                                }
                                break d;
                            }
                            $string = $sb;
                        }
                    }
                }
                return $string;
        }
        oj_JSONTokener_back($this);
        return oj_JSONObject__init_2($this);
    }
    function oj_JSONTokener_syntaxError($this, $message) {
        var var$2, var$3;
        var$2 = new oj_JSONException;
        var$3 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$3);
        jl_AbstractStringBuilder_append1(var$3, $message);
        jl_AbstractStringBuilder_append1(var$3, oj_JSONTokener_toString($this));
        jl_Throwable__init_(var$2, jl_AbstractStringBuilder_toString(var$3));
        return var$2;
    }
    function oj_JSONTokener_toString($this) {
        var var$1;
        var$1 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$1);
        jl_AbstractStringBuilder_append1(var$1, $rt_s(326));
        var$1 = jl_StringBuilder_append2(var$1, $this.$index0);
        jl_AbstractStringBuilder_append1(var$1, $rt_s(327));
        var$1 = jl_StringBuilder_append2(var$1, $this.$character);
        jl_AbstractStringBuilder_append1(var$1, $rt_s(328));
        var$1 = jl_StringBuilder_append2(var$1, $this.$line0);
        jl_AbstractStringBuilder_append1(var$1, $rt_s(329));
        return jl_AbstractStringBuilder_toString(var$1);
    }
    function tj_JavaTranslator() {
        var a = this; jl_Object.call(a);
        a.$lineNumber0 = 0;
        a.$tabCount = 0;
        a.$javaLines = null;
        a.$javaImports = null;
        a.$javaMain = null;
        a.$publicVarDeclarations = null;
        a.$usedJOptionPane = 0;
        a.$usedList = 0;
        a.$projName = null;
        a.$globalVariables0 = null;
    }
    function tj_JavaTranslator_interpretFunction($this, $statements, $args, $params, $name, $isGlobal, $doTranslate) {
        var $localVariables, $javaPrinter, $funcJavaLine, $arg, $returnVal, $val, $i, var$14, $i_0, $arg_0, var$17, $i_1;
        $localVariables = tj_Variables__init_();
        $javaPrinter = $this.$javaMain;
        if (!$doTranslate)
            $javaPrinter = ju_ArrayList__init_();
        $funcJavaLine = $this.$javaLines.$size0;
        if (!jl_String_equals($name, $rt_s(22)) && $doTranslate) {
            $javaPrinter = $this.$javaLines;
            $this.$tabCount = $this.$tabCount - 1 | 0;
            $arg = tj_JavaTranslator_addTabCount($this);
            $returnVal = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($returnVal);
            jl_AbstractStringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($returnVal, $arg), $rt_s(330)), $name), 40);
            $val = jl_AbstractStringBuilder_toString($returnVal);
            $i = 0;
            while (true) {
                var$14 = $args.data;
                $i_0 = var$14.length;
                if ($i >= $i_0)
                    break;
                $arg_0 = var$14[$i];
                var$17 = tj_JavaTranslator_typeToString($this, $arg_0.$type);
                $returnVal = $arg_0.$name3;
                $arg = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_($arg);
                $val = jl_StringBuilder_append(jl_StringBuilder_append($arg, $val), var$17);
                jl_AbstractStringBuilder_append($val, 32);
                jl_StringBuilder_append($val, $returnVal);
                $val = jl_AbstractStringBuilder_toString($arg);
                if ($i != ($i_0 - 1 | 0)) {
                    $arg = new jl_StringBuilder;
                    jl_AbstractStringBuilder__init_($arg);
                    jl_StringBuilder_append(jl_StringBuilder_append($arg, $val), $rt_s(56));
                    $val = jl_AbstractStringBuilder_toString($arg);
                }
                $i = $i + 1 | 0;
            }
            $arg = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($arg);
            jl_StringBuilder_append(jl_StringBuilder_append($arg, $val), $rt_s(331));
            ju_ArrayList_add($javaPrinter, jl_AbstractStringBuilder_toString($arg));
            $this.$tabCount = $this.$tabCount + 1 | 0;
        }
        a: {
            if ($args !== null && $params !== null) {
                b: {
                    var$14 = $args.data;
                    $params = $params.data;
                    $i_1 = var$14.length;
                    $i = $params.length;
                    if ($i_1 != $i) {
                        tj_Error_ArgumentLengthMismatch($name, $this.$lineNumber0, $i_1, $i);
                        $i_0 = 0;
                        while (true) {
                            if ($i_0 >= $i_1)
                                break b;
                            $i_0 = $i_0 + 1 | 0;
                        }
                    }
                }
                $i_0 = 0;
                while (true) {
                    if ($i_0 >= $i)
                        break a;
                    $val = $params[$i_0];
                    $arg = var$14[$i_0];
                    if ($arg.$type !== $val.$getType0())
                        break;
                    tj_Variables_addVariable($localVariables, $arg.$name3, $arg.$type, $val, $this.$lineNumber0);
                    $i_0 = $i_0 + 1 | 0;
                }
                tj_Error_ArgumentTypeMismatch($name, $this.$lineNumber0, $arg.$type.$name4, $val.$typeString());
                return null;
            }
        }
        $returnVal = tj_JavaTranslator_interpretBody($this, $statements, $localVariables, $isGlobal, $javaPrinter);
        if (!jl_String_equals($name, $rt_s(22)) && $doTranslate) {
            $this.$tabCount = $this.$tabCount - 1 | 0;
            $arg = tj_JavaTranslator_addTabCount($this);
            $statements = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($statements);
            jl_AbstractStringBuilder_append(jl_StringBuilder_append($statements, $arg), 125);
            ju_ArrayList_add($javaPrinter, jl_AbstractStringBuilder_toString($statements));
        }
        if ($returnVal !== null && !jl_String_equals($name, $rt_s(22)) && $doTranslate) {
            $arg = tj_JavaTranslator_addTabCount($this);
            $localVariables = $returnVal.$typeString();
            $statements = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($statements);
            $arg = jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($statements, $arg), $rt_s(332)), $localVariables);
            jl_AbstractStringBuilder_append($arg, 32);
            jl_AbstractStringBuilder_append(jl_StringBuilder_append($arg, $name), 40);
            $name = jl_AbstractStringBuilder_toString($statements);
            $i_1 = 0;
            while (true) {
                $params = $args.data;
                $doTranslate = $params.length;
                if ($i_1 >= $doTranslate)
                    break;
                $arg = $params[$i_1];
                $val = tj_JavaTranslator_typeToString($this, $arg.$type);
                $arg = $arg.$name3;
                $statements = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_($statements);
                $name = jl_StringBuilder_append(jl_StringBuilder_append($statements, $name), $val);
                jl_AbstractStringBuilder_append($name, 32);
                jl_StringBuilder_append($name, $arg);
                $name = jl_AbstractStringBuilder_toString($statements);
                if ($i_1 != ($doTranslate - 1 | 0)) {
                    $statements = new jl_StringBuilder;
                    jl_AbstractStringBuilder__init_($statements);
                    jl_StringBuilder_append(jl_StringBuilder_append($statements, $name), $rt_s(56));
                    $name = jl_AbstractStringBuilder_toString($statements);
                }
                $i_1 = $i_1 + 1 | 0;
            }
            $statements = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($statements);
            jl_StringBuilder_append(jl_StringBuilder_append($statements, $name), $rt_s(331));
            $statements = jl_AbstractStringBuilder_toString($statements);
            ju_ArrayList_checkIndex($javaPrinter, $funcJavaLine);
            $javaPrinter.$array.data[$funcJavaLine] = $statements;
        }
        if ($returnVal !== null)
            return $returnVal;
        return null;
    }
    function tj_JavaTranslator_interpretBody($this, $statements, $funcVariables, $isGlobal, $javaPrinter) {
        var $pastResult, $localVariables, $returnVal, var$8, $statement, var$10, var$11, var$12, var$13, var$14;
        $pastResult = tj_Result__init_(0);
        $localVariables = tj_Variables__init_0($funcVariables);
        $returnVal = tj_Return__init_(0, null);
        var$8 = ju_AbstractList_iterator($statements);
        while (true) {
            if (!ju_AbstractList$1_hasNext(var$8)) {
                if (!$returnVal.$hasReturn)
                    return null;
                return $returnVal.$value0;
            }
            $statement = ju_AbstractList$1_next(var$8);
            if ($returnVal.$hasReturn)
                break;
            a: {
                $this.$lineNumber0 = $statement.$getLine();
                tj_JavaTranslator$1_$callClinit();
                switch (tj_JavaTranslator$1_$SwitchMap$trackerjo$javaish$Statements$StmtType.data[$statement.$type1.$ordinal0]) {
                    case 1:
                        $statement = $statement;
                        $funcVariables = $statement.$name16;
                        $statements = tj_JavaTranslator_evalExpression($this, $statement.$value16, $localVariables, $isGlobal);
                        $statement = tj_JavaTranslator_translateExpression($this, $statement.$value16, $localVariables, $isGlobal, $javaPrinter);
                        var$10 = tj_JavaTranslator_addTabCount($this);
                        var$11 = new jl_StringBuilder;
                        jl_AbstractStringBuilder__init_(var$11);
                        jl_AbstractStringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$11, var$10), $funcVariables), $rt_s(333)), $statement), 59);
                        ju_ArrayList_add($javaPrinter, jl_AbstractStringBuilder_toString(var$11));
                        if (tj_Variables_isVariable($localVariables, $funcVariables))
                            tj_Variables_setVariableValue($localVariables, $funcVariables, $statements, $this.$lineNumber0);
                        else
                            tj_Variables_setVariableValue($this.$globalVariables0, $funcVariables, $statements, $this.$lineNumber0);
                        break a;
                    case 2:
                        $statements = $statement;
                        $funcVariables = tj_JavaTranslator_addTabCount($this);
                        $statement = $statements.$comment;
                        $statements = new jl_StringBuilder;
                        jl_AbstractStringBuilder__init_($statements);
                        jl_StringBuilder_append(jl_StringBuilder_append($statements, $funcVariables), $statement);
                        ju_ArrayList_add($javaPrinter, jl_AbstractStringBuilder_toString($statements));
                        break a;
                    case 3:
                        $statements = $statement;
                        $statement = $statements.$name17;
                        var$12 = $statements.$params0.data;
                        $statements = tj_JavaTranslator_addTabCount($this);
                        $funcVariables = new jl_StringBuilder;
                        jl_AbstractStringBuilder__init_($funcVariables);
                        jl_AbstractStringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($funcVariables, $statements), $statement), 40);
                        $statements = jl_AbstractStringBuilder_toString($funcVariables);
                        var$13 = var$12.length;
                        var$14 = 0;
                        while (var$14 < var$13) {
                            $funcVariables = var$12[var$14];
                            if ($funcVariables === null) {
                                $funcVariables = new jl_StringBuilder;
                                jl_AbstractStringBuilder__init_($funcVariables);
                                jl_StringBuilder_append(jl_StringBuilder_append($funcVariables, $statements), $rt_s(334));
                                $statements = jl_AbstractStringBuilder_toString($funcVariables);
                            } else {
                                $funcVariables = tj_JavaTranslator_translateExpression($this, $funcVariables, $localVariables, $isGlobal, $javaPrinter);
                                $statement = new jl_StringBuilder;
                                jl_AbstractStringBuilder__init_($statement);
                                jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($statement, $statements), $funcVariables), $rt_s(56));
                                $statements = jl_AbstractStringBuilder_toString($statement);
                            }
                            var$14 = var$14 + 1 | 0;
                        }
                        $statements = jl_String_substring($statements, 0, jl_String_length($statements) - 2 | 0);
                        $funcVariables = new jl_StringBuilder;
                        jl_AbstractStringBuilder__init_($funcVariables);
                        jl_StringBuilder_append(jl_StringBuilder_append($funcVariables, $statements), $rt_s(335));
                        ju_ArrayList_add($javaPrinter, jl_AbstractStringBuilder_toString($funcVariables));
                        break a;
                    case 4:
                        break;
                    case 5:
                        var$10 = $statement.$body;
                        $funcVariables = ju_ArrayList_get($javaPrinter, $javaPrinter.$size0 - 1 | 0);
                        $statement = new jl_StringBuilder;
                        jl_AbstractStringBuilder__init_($statement);
                        jl_StringBuilder_append(jl_StringBuilder_append($statement, $funcVariables), $rt_s(336));
                        $statements = jl_AbstractStringBuilder_toString($statement);
                        ju_ArrayList_remove($javaPrinter, $javaPrinter.$size0 - 1 | 0);
                        ju_ArrayList_add($javaPrinter, $statements);
                        $this.$tabCount = $this.$tabCount + 1 | 0;
                        tj_JavaTranslator_interpretBody($this, var$10, $localVariables, 0, $javaPrinter);
                        $this.$tabCount = $this.$tabCount - 1 | 0;
                        $statements = tj_JavaTranslator_addTabCount($this);
                        $funcVariables = new jl_StringBuilder;
                        jl_AbstractStringBuilder__init_($funcVariables);
                        jl_AbstractStringBuilder_append(jl_StringBuilder_append($funcVariables, $statements), 125);
                        ju_ArrayList_add($javaPrinter, jl_AbstractStringBuilder_toString($funcVariables));
                        break a;
                    case 6:
                        $statements = $statement;
                        $funcVariables = $statements.$condition;
                        var$10 = $statements.$body;
                        $statements = tj_JavaTranslator_translateExpression($this, $funcVariables, $localVariables, $isGlobal, $javaPrinter);
                        $funcVariables = new jl_StringBuilder;
                        jl_AbstractStringBuilder__init_($funcVariables);
                        jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($funcVariables, $rt_s(337)), $statements), $rt_s(338));
                        $statement = jl_AbstractStringBuilder_toString($funcVariables);
                        $statements = ju_ArrayList_get($javaPrinter, $javaPrinter.$size0 - 1 | 0);
                        $funcVariables = new jl_StringBuilder;
                        jl_AbstractStringBuilder__init_($funcVariables);
                        jl_StringBuilder_append(jl_StringBuilder_append($funcVariables, $statements), $statement);
                        $statements = jl_AbstractStringBuilder_toString($funcVariables);
                        ju_ArrayList_remove($javaPrinter, $javaPrinter.$size0 - 1 | 0);
                        ju_ArrayList_add($javaPrinter, $statements);
                        $this.$tabCount = $this.$tabCount + 1 | 0;
                        tj_JavaTranslator_interpretBody($this, var$10, $localVariables, 0, $javaPrinter);
                        $this.$tabCount = $this.$tabCount - 1 | 0;
                        $statements = tj_JavaTranslator_addTabCount($this);
                        $funcVariables = new jl_StringBuilder;
                        jl_AbstractStringBuilder__init_($funcVariables);
                        jl_AbstractStringBuilder_append(jl_StringBuilder_append($funcVariables, $statements), 125);
                        ju_ArrayList_add($javaPrinter, jl_AbstractStringBuilder_toString($funcVariables));
                        break a;
                    case 7:
                        tj_JavaTranslator_evalMutation($this, $statement, $localVariables, $isGlobal, $javaPrinter);
                        break a;
                    case 8:
                        tj_JavaTranslator_evalReturn($this, $statement, $localVariables, $returnVal, $isGlobal, $javaPrinter);
                        break a;
                    case 9:
                        tj_JavaTranslator_evalFunction($this, $statement, $localVariables, $isGlobal);
                        break a;
                    case 10:
                        tj_JavaTranslator_evalIf($this, $statement, $localVariables, $isGlobal, $pastResult, $javaPrinter);
                        break a;
                    case 11:
                        tj_JavaTranslator_evalWhile($this, $statement, $localVariables, $isGlobal, $javaPrinter);
                        break a;
                    case 12:
                        tj_JavaTranslator_evalForEach($this, $statement, $localVariables, $isGlobal, $javaPrinter);
                        break a;
                    case 13:
                        tj_JavaTranslator_evalForWhen($this, $statement, $localVariables, $isGlobal, $javaPrinter);
                        break a;
                    case 14:
                        $statements = tj_JavaTranslator_translateExpression($this, $statement.$value21, $localVariables, $isGlobal, $javaPrinter);
                        $funcVariables = tj_JavaTranslator_addTabCount($this);
                        $statement = new jl_StringBuilder;
                        jl_AbstractStringBuilder__init_($statement);
                        jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($statement, $funcVariables), $rt_s(339)), $statements), $rt_s(335));
                        ju_ArrayList_add($javaPrinter, jl_AbstractStringBuilder_toString($statement));
                        break a;
                    case 15:
                        tj_JavaTranslator_evalShowMsgBox($this, $statement, $localVariables, $isGlobal, $javaPrinter);
                        break a;
                    case 16:
                        tj_JavaTranslator_evalRemoveAt($this, $statement, $localVariables, $isGlobal, $javaPrinter);
                        break a;
                    case 17:
                        tj_JavaTranslator_evalRemoveFrom($this, $statement, $localVariables, $isGlobal, $javaPrinter);
                        break a;
                    case 18:
                        tj_JavaTranslator_evalRemoveAllFrom($this, $statement, $localVariables, $isGlobal, $javaPrinter);
                        break a;
                    default:
                        break a;
                }
                tj_JavaTranslator_evalDeclaration($this, $statement, $localVariables, $isGlobal, $javaPrinter);
            }
        }
        return $returnVal.$value0;
    }
    function tj_JavaTranslator_evalExpression($this, $expression, $localVariables, $isGlobal) {
        var $total, $operation, $comparison, $compVal, $isComp, var$9, var$10, var$11, $elmt, $result, $valNot, $bool, $valB, $cast, $val, $newVal, $expressionElmt, $floatElmt, $valF, $integer, $valI, $string, $valS, $function, $body, $args, $params, $paramVals, $listLength, var$33, $valFunc, $input, $arrayName, $listL, $length, $resultO, $variable, $listVal, $index, $listValVal, $list, $type, $listExpressions, $listVals, $intList, $listValI, $intListVal, $floatList, $floatListVal, $stringList, $stringListVal,
        $booleanList, $booleanListVal, $$je;
        $total = null;
        $operation = null;
        $comparison = null;
        $compVal = null;
        $isComp = 0;
        var$9 = (tj_Expression_getElements($expression)).data;
        var$10 = var$9.length;
        var$11 = 0;
        a: while (true) {
            if (var$11 >= var$10) {
                if (!$isComp)
                    return $total;
                return tj_JavaTranslator_performComparision($this, $comparison, $total, $compVal);
            }
            b: {
                c: {
                    d: {
                        e: {
                            f: {
                                $elmt = var$9[var$11];
                                tj_JavaTranslator$1_$callClinit();
                                switch (tj_JavaTranslator$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element_getType($elmt))]) {
                                    case 1:
                                        $result = tj_JavaTranslator_performComparision($this, $comparison, $total, $compVal);
                                        if ($result === null)
                                            break a;
                                        if (!jl_Boolean_booleanValue(tj_JavaishBoolean_getValue($result)))
                                            return tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                        $total = null;
                                        $operation = null;
                                        $comparison = null;
                                        $compVal = null;
                                        $isComp = 0;
                                        break b;
                                    case 2:
                                        $valNot = tj_JavaTranslator_evalExpression($this, $elmt.$expression0, $localVariables, $isGlobal);
                                        if (!($valNot instanceof tj_JavaishBoolean)) {
                                            tj_Error_TypeMismatch($rt_s(185), $valNot.$typeString(), $this.$lineNumber0);
                                            break b;
                                        }
                                        $expression = jl_Boolean_booleanValue(tj_JavaishBoolean_getValue($valNot)) != 1 ? tj_JavaishBoolean__init_(jl_Boolean_valueOf(1)) : tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                        if (!$isComp)
                                            $total = tj_JavaTranslator_performOperation($this, $operation, $total, $expression);
                                        else
                                            $compVal = tj_JavaTranslator_performOperation($this, $operation, $compVal, $expression);
                                        break b;
                                    case 3:
                                        $bool = $elmt;
                                        $valB = tj_JavaishBoolean__init_(jl_Boolean_valueOf(tj_BoolElmt_getValue($bool)));
                                        if (!$isComp) {
                                            $total = tj_JavaTranslator_performOperation($this, $operation, $total, $valB);
                                            break b;
                                        }
                                        $compVal = tj_JavaTranslator_performOperation($this, $operation, $compVal, $valB);
                                        break b;
                                    case 4:
                                        g: {
                                            $cast = $elmt;
                                            $val = tj_JavaTranslator_evalExpression($this, $cast.$element, $localVariables, $isGlobal);
                                            switch (tj_JavaTranslator$1_$SwitchMap$trackerjo$javaish$JavaishVal$JavaishType.data[jl_Enum_ordinal($cast.$castType)]) {
                                                case 1:
                                                    if ($val instanceof tj_JavaishFloat) {
                                                        $newVal = $val;
                                                        break g;
                                                    }
                                                    try {
                                                        $expressionElmt = $val;
                                                        if ($val instanceof tj_JavaishInt) {
                                                            $expressionElmt = $val;
                                                            $newVal = new tj_JavaishFloat;
                                                            $expressionElmt = $newVal;
                                                            tj_JavaishFloat__init_0($newVal, jl_Integer_intValue(tj_JavaishInt_getValue($val)));
                                                        } else {
                                                            $expressionElmt = $val;
                                                            if (!($val instanceof tj_JavaishString))
                                                                $newVal = $val;
                                                            else {
                                                                $expressionElmt = $val;
                                                                $newVal = new tj_JavaishFloat;
                                                                $expressionElmt = $newVal;
                                                                tj_JavaishFloat__init_0($newVal, jl_Float_parseFloat(tj_JavaishString_getValue($val)));
                                                            }
                                                        }
                                                        break g;
                                                    } catch ($$e) {
                                                        $$je = $rt_wrapException($$e);
                                                        if ($$je instanceof jl_Exception) {
                                                        } else {
                                                            throw $$e;
                                                        }
                                                    }
                                                    tj_Error_UnableToParse($rt_s(184), $this.$lineNumber0, $expressionElmt.$typeString());
                                                    $newVal = $expressionElmt;
                                                    break g;
                                                case 2:
                                                    $newVal = jl_System_out();
                                                    $floatElmt = $val.$typeString();
                                                    $expression = jl_StringBuilder__init_();
                                                    jl_StringBuilder_append(jl_StringBuilder_append($expression, $rt_s(340)), $floatElmt);
                                                    ji_PrintStream_println($newVal, jl_StringBuilder_toString($expression));
                                                    if ($val instanceof tj_JavaishInt) {
                                                        $newVal = $val;
                                                        break g;
                                                    }
                                                    try {
                                                        $expressionElmt = $val;
                                                        if ($val instanceof tj_JavaishFloat) {
                                                            $expressionElmt = $val;
                                                            $newVal = new tj_JavaishInt;
                                                            $expressionElmt = $newVal;
                                                            tj_JavaishInt__init_0($newVal, jl_Math_round(jl_Float_floatValue(tj_JavaishFloat_getValue($val))));
                                                        } else {
                                                            $expressionElmt = $val;
                                                            if (!($val instanceof tj_JavaishString))
                                                                $newVal = $val;
                                                            else {
                                                                $expressionElmt = $val;
                                                                $floatElmt = jl_System_out();
                                                                $valF = $val;
                                                                $integer = tj_JavaishString_getValue($valF);
                                                                $expression = jl_StringBuilder__init_();
                                                                jl_StringBuilder_append(jl_StringBuilder_append($expression, $rt_s(340)), $integer);
                                                                $expression = jl_StringBuilder_toString($expression);
                                                                $expressionElmt = $val;
                                                                ji_PrintStream_println($floatElmt, $expression);
                                                                $newVal = new tj_JavaishInt;
                                                                $expressionElmt = $newVal;
                                                                tj_JavaishInt__init_0($newVal, jl_Integer_parseInt0(tj_JavaishString_getValue($valF)));
                                                            }
                                                        }
                                                        break g;
                                                    } catch ($$e) {
                                                        $$je = $rt_wrapException($$e);
                                                        if ($$je instanceof jl_Exception) {
                                                        } else {
                                                            throw $$e;
                                                        }
                                                    }
                                                    tj_Error_UnableToParse($expressionElmt.$typeString(), $this.$lineNumber0, $rt_s(187));
                                                    $newVal = $expressionElmt;
                                                    break g;
                                                case 3:
                                                    if ($val instanceof tj_JavaishString) {
                                                        $newVal = $val;
                                                        break g;
                                                    }
                                                    try {
                                                        $expressionElmt = $val;
                                                        if ($val instanceof tj_JavaishFloat) {
                                                            $expressionElmt = $val;
                                                            $newVal = new tj_JavaishString;
                                                            $expressionElmt = $newVal;
                                                            tj_JavaishString__init_0($newVal, jl_Float_toString(jl_Float_floatValue(tj_JavaishFloat_getValue($val))));
                                                        } else {
                                                            $expressionElmt = $val;
                                                            if ($val instanceof tj_JavaishInt) {
                                                                $expressionElmt = $val;
                                                                $newVal = new tj_JavaishString;
                                                                $expressionElmt = $newVal;
                                                                tj_JavaishString__init_0($newVal, jl_Integer_toString(jl_Integer_intValue(tj_JavaishInt_getValue($val))));
                                                            } else {
                                                                $expressionElmt = $val;
                                                                if (!($val instanceof tj_JavaishBoolean))
                                                                    $newVal = $val;
                                                                else {
                                                                    $expressionElmt = $val;
                                                                    $newVal = new tj_JavaishString;
                                                                    $expressionElmt = $newVal;
                                                                    tj_JavaishString__init_0($newVal, jl_Boolean_toString(jl_Boolean_booleanValue(tj_JavaishBoolean_getValue($val))));
                                                                }
                                                            }
                                                        }
                                                        break g;
                                                    } catch ($$e) {
                                                        $$je = $rt_wrapException($$e);
                                                        if ($$je instanceof jl_Exception) {
                                                        } else {
                                                            throw $$e;
                                                        }
                                                    }
                                                    tj_Error_UnableToParse($rt_s(186), $this.$lineNumber0, $expressionElmt.$typeString());
                                                    $newVal = $expressionElmt;
                                                    break g;
                                                case 4:
                                                    if ($val instanceof tj_JavaishBoolean) {
                                                        $newVal = $val;
                                                        break g;
                                                    }
                                                    try {
                                                        $expressionElmt = $val;
                                                        if (!($val instanceof tj_JavaishString))
                                                            $newVal = $val;
                                                        else {
                                                            $expressionElmt = $val;
                                                            $newVal = new tj_JavaishBoolean;
                                                            $expressionElmt = $newVal;
                                                            tj_JavaishBoolean__init_0($newVal, jl_Boolean_valueOf(jl_Boolean_parseBoolean(tj_JavaishString_getValue($val))));
                                                        }
                                                        break g;
                                                    } catch ($$e) {
                                                        $$je = $rt_wrapException($$e);
                                                        if ($$je instanceof jl_Exception) {
                                                        } else {
                                                            throw $$e;
                                                        }
                                                    }
                                                    tj_Error_UnableToParse($rt_s(185), $this.$lineNumber0, $expressionElmt.$typeString());
                                                    $newVal = $expressionElmt;
                                                    break g;
                                                default:
                                            }
                                            $newVal = $val;
                                        }
                                        if (!$isComp) {
                                            $total = tj_JavaTranslator_performOperation($this, $operation, $total, $newVal);
                                            break b;
                                        }
                                        $compVal = tj_JavaTranslator_performOperation($this, $operation, $compVal, $newVal);
                                        break b;
                                    case 5:
                                        tj_JavaTranslator$Operator_$callClinit();
                                        $operation = tj_JavaTranslator$Operator_DIVIDE;
                                        break b;
                                    case 6:
                                        tj_JavaTranslator$Operator_$callClinit();
                                        $comparison = tj_JavaTranslator$Operator_EQUAL;
                                        $isComp = 1;
                                        break b;
                                    case 7:
                                        $newVal = tj_JavaTranslator_evalExpression($this, $elmt.$expression, $localVariables, $isGlobal);
                                        if (!$isComp) {
                                            $total = tj_JavaTranslator_performOperation($this, $operation, $total, $newVal);
                                            break b;
                                        }
                                        $compVal = tj_JavaTranslator_performOperation($this, $operation, $compVal, $newVal);
                                        break b;
                                    case 8:
                                        $floatElmt = $elmt;
                                        $valF = tj_JavaishFloat__init_(tj_FloatElmt_getValue($floatElmt));
                                        if (!$isComp) {
                                            $total = tj_JavaTranslator_performOperation($this, $operation, $total, $valF);
                                            break b;
                                        }
                                        $compVal = tj_JavaTranslator_performOperation($this, $operation, $compVal, $valF);
                                        break b;
                                    case 9:
                                        tj_JavaTranslator$Operator_$callClinit();
                                        $comparison = tj_JavaTranslator$Operator_GREATER_THAN;
                                        $isComp = 1;
                                        break b;
                                    case 10:
                                        tj_JavaTranslator$Operator_$callClinit();
                                        $comparison = tj_JavaTranslator$Operator_GREATER_THAN_EQUAL;
                                        $isComp = 1;
                                        break b;
                                    case 11:
                                        $integer = $elmt;
                                        $valI = tj_JavaishInt__init_(tj_IntElmt_getValue($integer));
                                        if (!$isComp) {
                                            $total = tj_JavaTranslator_performOperation($this, $operation, $total, $valI);
                                            break b;
                                        }
                                        $compVal = tj_JavaTranslator_performOperation($this, $operation, $compVal, $valI);
                                        break b;
                                    case 12:
                                        tj_JavaTranslator$Operator_$callClinit();
                                        $comparison = tj_JavaTranslator$Operator_LESS_THAN;
                                        $isComp = 1;
                                        break b;
                                    case 13:
                                        tj_JavaTranslator$Operator_$callClinit();
                                        $comparison = tj_JavaTranslator$Operator_LESS_THAN_EQUAL;
                                        $isComp = 1;
                                        break b;
                                    case 14:
                                        tj_JavaTranslator$Operator_$callClinit();
                                        $operation = tj_JavaTranslator$Operator_MINUS;
                                        break b;
                                    case 15:
                                        tj_JavaTranslator$Operator_$callClinit();
                                        $operation = tj_JavaTranslator$Operator_MULTIPLY;
                                        break b;
                                    case 16:
                                        tj_JavaTranslator$Operator_$callClinit();
                                        $comparison = tj_JavaTranslator$Operator_NOT_EQUAL;
                                        $isComp = 1;
                                        break b;
                                    case 17:
                                        break f;
                                    case 18:
                                        tj_JavaTranslator$Operator_$callClinit();
                                        $operation = tj_JavaTranslator$Operator_PLUS;
                                        break b;
                                    case 19:
                                        $string = $elmt;
                                        $valS = tj_JavaishString__init_(tj_StringElmt_getValue($string));
                                        if (!$isComp) {
                                            $total = tj_JavaTranslator_performOperation($this, $operation, $total, $valS);
                                            break b;
                                        }
                                        $compVal = tj_JavaTranslator_performOperation($this, $operation, $compVal, $valS);
                                        break b;
                                    case 20:
                                        break e;
                                    case 21:
                                        $function = $elmt;
                                        $body = tj_Variables_getFunctionBody($this.$globalVariables0, tj_FunctionElmt_getName($function));
                                        $args = tj_Variables_getFunctionArgs($this.$globalVariables0, tj_FunctionElmt_getName($function));
                                        $params = (tj_FunctionElmt_getParams($function)).data;
                                        $paramVals = ju_ArrayList__init_();
                                        $listLength = $params.length;
                                        var$33 = 0;
                                        while (var$33 < $listLength) {
                                            ju_ArrayList_add($paramVals, tj_JavaTranslator_evalExpression($this, $params[var$33], $localVariables, $isGlobal));
                                            var$33 = var$33 + 1 | 0;
                                        }
                                        $valFunc = tj_JavaTranslator_interpretFunction($this, $body, $args, ju_AbstractCollection_toArray($paramVals, $rt_createArray(tj_JavaishVal, ju_ArrayList_size($paramVals))), tj_FunctionElmt_getName($function), $isGlobal, 0);
                                        if (!$isComp) {
                                            $total = tj_JavaTranslator_performOperation($this, $operation, $total, $valFunc);
                                            break b;
                                        }
                                        $compVal = tj_JavaTranslator_performOperation($this, $operation, $compVal, $valFunc);
                                        break b;
                                    case 22:
                                        $input = tj_JavaishString__init_($rt_s(13));
                                        if (!$isComp) {
                                            $total = tj_JavaTranslator_performOperation($this, $operation, $total, $input);
                                            break b;
                                        }
                                        $compVal = tj_JavaTranslator_performOperation($this, $operation, $compVal, $input);
                                        break b;
                                    case 23:
                                        break d;
                                    case 24:
                                        break c;
                                    case 25:
                                        $arrayName = tj_ArrayLengthElmt_getArrayName($elmt);
                                        if (tj_Variables_isVariable($localVariables, $arrayName))
                                            $expression = tj_Variables_getVariableValue($localVariables, $arrayName);
                                        else {
                                            if (!tj_Variables_isVariable($this.$globalVariables0, $arrayName)) {
                                                tj_Error_VariableNotDeclared($arrayName, $this.$lineNumber0);
                                                return null;
                                            }
                                            $expression = tj_Variables_getVariableValue($this.$globalVariables0, $arrayName);
                                        }
                                        if (!($expression instanceof tj_JavaishListVal)) {
                                            tj_Error_TypeMismatch($rt_s(293), $expression.$typeString(), $this.$lineNumber0);
                                            return null;
                                        }
                                        $listL = tj_JavaishListVal_getValue($expression);
                                        $length = tj_JavaishInt__init_($listL.$getLength());
                                        if (!$isComp)
                                            $total = tj_JavaTranslator_performOperation($this, $operation, $total, $length);
                                        else
                                            $compVal = tj_JavaTranslator_performOperation($this, $operation, $compVal, $length);
                                        break b;
                                    default:
                                }
                                break b;
                            }
                            $resultO = tj_JavaTranslator_performComparision($this, $comparison, $total, $compVal);
                            if ($resultO === null)
                                return null;
                            if (jl_Boolean_booleanValue(tj_JavaishBoolean_getValue($resultO)) == 1)
                                return tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                            $total = null;
                            $operation = null;
                            $compVal = null;
                            $isComp = 0;
                            break b;
                        }
                        $variable = $elmt;
                        if (tj_Variables_isVariable($localVariables, tj_VariableElmt_getName($variable)))
                            $expression = tj_Variables_getVariableValue($localVariables, tj_VariableElmt_getName($variable));
                        else {
                            if (!tj_Variables_isVariable($this.$globalVariables0, tj_VariableElmt_getName($variable))) {
                                tj_Error_VariableNotDeclared(tj_VariableElmt_getName($variable), $this.$lineNumber0);
                                return null;
                            }
                            $expression = tj_Variables_getVariableValue($this.$globalVariables0, tj_VariableElmt_getName($variable));
                        }
                        if (!$isComp) {
                            $total = tj_JavaTranslator_performOperation($this, $operation, $total, $expression);
                            break b;
                        }
                        $compVal = tj_JavaTranslator_performOperation($this, $operation, $compVal, $expression);
                        break b;
                    }
                    $listVal = $elmt;
                    $index = tj_JavaTranslator_evalExpression($this, tj_ListValElmt_getIndex($listVal), $localVariables, $isGlobal);
                    if (!($index instanceof tj_JavaishInt)) {
                        tj_Error_TypeMismatch($rt_s(187), $index.$typeString(), $this.$lineNumber0);
                        return null;
                    }
                    $expression = $index;
                    if (tj_Variables_isVariable($localVariables, tj_ListValElmt_getListName($listVal)))
                        $expressionElmt = tj_JavaishListVal_getValue(tj_Variables_getVariableValue($localVariables, tj_ListValElmt_getListName($listVal)));
                    else {
                        if (!tj_Variables_isVariable($this.$globalVariables0, tj_ListValElmt_getListName($listVal))) {
                            tj_Error_VariableNotDeclared(tj_ListValElmt_getListName($listVal), $this.$lineNumber0);
                            return null;
                        }
                        $expressionElmt = tj_JavaishListVal_getValue(tj_Variables_getVariableValue($this.$globalVariables0, tj_ListValElmt_getListName($listVal)));
                    }
                    $listLength = $expressionElmt.$getLength();
                    if (jl_Integer_intValue(tj_JavaishInt_getValue($expression)) >= $listLength) {
                        tj_Error_IndexOutOfBounds(jl_Integer_intValue(tj_JavaishInt_getValue($expression)), $this.$lineNumber0, $listLength);
                        return null;
                    }
                    $listValVal = $expressionElmt.$getValue1(jl_Integer_intValue(tj_JavaishInt_getValue($expression)));
                    if (!$isComp) {
                        $total = tj_JavaTranslator_performOperation($this, $operation, $total, $listValVal);
                        break b;
                    }
                    $compVal = tj_JavaTranslator_performOperation($this, $operation, $compVal, $listValVal);
                    break b;
                }
                $list = $elmt;
                $type = tj_ListElmt_getListType($list);
                $listExpressions = tj_ListElmt_getList($list);
                $listVals = ju_ArrayList__init_();
                $expression = ju_AbstractList_iterator($listExpressions);
                while (ju_AbstractList$1_hasNext($expression)) {
                    ju_ArrayList_add($listVals, tj_JavaTranslator_evalExpression($this, ju_AbstractList$1_next($expression), $localVariables, $isGlobal));
                }
                switch (tj_JavaTranslator$1_$SwitchMap$trackerjo$javaish$JavaishVal$JavaishType.data[jl_Enum_ordinal($type)]) {
                    case 5:
                        $intList = ju_ArrayList__init_();
                        $expression = ju_AbstractList_iterator($listVals);
                        while (ju_AbstractList$1_hasNext($expression)) {
                            $listValI = ju_AbstractList$1_next($expression);
                            if (!($listValI instanceof tj_JavaishInt)) {
                                tj_Error_TypeMismatch($rt_s(187), $listValI.$typeString(), $this.$lineNumber0);
                                return null;
                            }
                            ju_ArrayList_add($intList, $listValI);
                        }
                        $intListVal = tj_JavaishIntList__init_($intList);
                        if (!$isComp) {
                            if ($operation === null) {
                                $total = tj_JavaishListVal__init_($intListVal);
                                break b;
                            }
                            tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(191), $this.$lineNumber0);
                            break b;
                        }
                        if ($operation === null) {
                            $compVal = tj_JavaishListVal__init_($intListVal);
                            break b;
                        }
                        tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(191), $this.$lineNumber0);
                        break b;
                    case 6:
                        $floatList = ju_ArrayList__init_();
                        $expression = ju_AbstractList_iterator($listVals);
                        while (ju_AbstractList$1_hasNext($expression)) {
                            $listValI = ju_AbstractList$1_next($expression);
                            if (!($listValI instanceof tj_JavaishFloat)) {
                                tj_Error_TypeMismatch($rt_s(184), $listValI.$typeString(), $this.$lineNumber0);
                                return null;
                            }
                            ju_ArrayList_add($floatList, $listValI);
                        }
                        $floatListVal = tj_JavaishFloatList__init_($floatList);
                        if (!$isComp) {
                            if ($operation === null) {
                                $total = tj_JavaishListVal__init_($floatListVal);
                                break b;
                            }
                            tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(188), $this.$lineNumber0);
                            break b;
                        }
                        if ($operation === null) {
                            $compVal = tj_JavaishListVal__init_($floatListVal);
                            break b;
                        }
                        tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(188), $this.$lineNumber0);
                        break b;
                    case 7:
                        $stringList = ju_ArrayList__init_();
                        $expression = ju_AbstractList_iterator($listVals);
                        while (ju_AbstractList$1_hasNext($expression)) {
                            $listValI = ju_AbstractList$1_next($expression);
                            if (!($listValI instanceof tj_JavaishString)) {
                                tj_Error_TypeMismatch($rt_s(186), $listValI.$typeString(), $this.$lineNumber0);
                                return null;
                            }
                            ju_ArrayList_add($stringList, $listValI);
                        }
                        $stringListVal = tj_JavaishStringList__init_($stringList);
                        if (!$isComp) {
                            if ($operation === null) {
                                $total = tj_JavaishListVal__init_($stringListVal);
                                break b;
                            }
                            tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(190), $this.$lineNumber0);
                            break b;
                        }
                        if ($operation === null) {
                            $compVal = tj_JavaishListVal__init_($stringListVal);
                            break b;
                        }
                        tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(190), $this.$lineNumber0);
                        break b;
                    case 8:
                        $booleanList = ju_ArrayList__init_();
                        $expression = ju_AbstractList_iterator($listVals);
                        while (ju_AbstractList$1_hasNext($expression)) {
                            $listValI = ju_AbstractList$1_next($expression);
                            if (!($listValI instanceof tj_JavaishBoolean)) {
                                tj_Error_TypeMismatch($rt_s(185), $listValI.$typeString(), $this.$lineNumber0);
                                return null;
                            }
                            ju_ArrayList_add($booleanList, $listValI);
                        }
                        $booleanListVal = tj_JavaishBooleanList__init_($booleanList);
                        if (!$isComp) {
                            if ($operation === null) {
                                $total = tj_JavaishListVal__init_($booleanListVal);
                                break b;
                            }
                            tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(189), $this.$lineNumber0);
                            break b;
                        }
                        if ($operation === null) {
                            $compVal = tj_JavaishListVal__init_($booleanListVal);
                            break b;
                        }
                        tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(189), $this.$lineNumber0);
                        break b;
                    default:
                }
            }
            var$11 = var$11 + 1 | 0;
        }
        return null;
    }
    function tj_JavaTranslator_performComparision($this, $comparison, $left, $right) {
        var $result;
        a: {
            $result = null;
            tj_JavaTranslator$1_$callClinit();
            switch (tj_JavaTranslator$1_$SwitchMap$trackerjo$javaish$JavaTranslator$Operator.data[jl_Enum_ordinal($comparison)]) {
                case 1:
                    $comparison = $left.$getType0();
                    tj_JavaishVal$JavaishType_$callClinit();
                    if ($comparison === tj_JavaishVal$JavaishType_STRING && $right.$getType0() === tj_JavaishVal$JavaishType_STRING) {
                        if (!jl_String_equals(tj_JavaishString_getValue($left), tj_JavaishString_getValue($right))) {
                            $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                            break a;
                        }
                        $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                        break a;
                    }
                    if ($left.$getType0() !== tj_JavaishVal$JavaishType_STRING && $right.$getType0() !== tj_JavaishVal$JavaishType_STRING) {
                        if ($left.$getType0() === tj_JavaishVal$JavaishType_BOOLEAN && $right.$getType0() === tj_JavaishVal$JavaishType_BOOLEAN) {
                            if (tj_JavaishBoolean_getValue($left) !== tj_JavaishBoolean_getValue($right)) {
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                break a;
                            }
                            $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                            break a;
                        }
                        if ($left.$getType0() !== tj_JavaishVal$JavaishType_BOOLEAN && $right.$getType0() !== tj_JavaishVal$JavaishType_BOOLEAN) {
                            if ($left.$getType0() === tj_JavaishVal$JavaishType_INT && $right.$getType0() === tj_JavaishVal$JavaishType_INT) {
                                if (tj_JavaishInt_getValue($left) !== tj_JavaishInt_getValue($right)) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break a;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break a;
                            }
                            if ($left.$getType0() === tj_JavaishVal$JavaishType_INT && $right.$getType0() === tj_JavaishVal$JavaishType_FLOAT) {
                                if (jl_Integer_intValue(tj_JavaishInt_getValue($left)) !== jl_Float_floatValue(tj_JavaishFloat_getValue($right))) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break a;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break a;
                            }
                            if ($left.$getType0() === tj_JavaishVal$JavaishType_FLOAT && $right.$getType0() === tj_JavaishVal$JavaishType_INT) {
                                if (jl_Float_floatValue(tj_JavaishFloat_getValue($left)) !== jl_Integer_intValue(tj_JavaishInt_getValue($right))) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break a;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break a;
                            }
                            if (tj_JavaishFloat_getValue($left) !== tj_JavaishFloat_getValue($right)) {
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                break a;
                            }
                            $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                            break a;
                        }
                        tj_Error_TypeMismatch($rt_s(185), $rt_s(294), $this.$lineNumber0);
                        return null;
                    }
                    tj_Error_TypeMismatch($rt_s(186), $rt_s(295), $this.$lineNumber0);
                    return null;
                case 2:
                    $comparison = $left.$getType0();
                    tj_JavaishVal$JavaishType_$callClinit();
                    if ($comparison === tj_JavaishVal$JavaishType_STRING && $right.$getType0() === tj_JavaishVal$JavaishType_STRING) {
                        if (jl_String_equals(tj_JavaishString_getValue($left), tj_JavaishString_getValue($right))) {
                            $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                            break a;
                        }
                        $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                        break a;
                    }
                    if ($left.$getType0() !== tj_JavaishVal$JavaishType_STRING && $right.$getType0() !== tj_JavaishVal$JavaishType_STRING) {
                        if ($left.$getType0() === tj_JavaishVal$JavaishType_BOOLEAN && $right.$getType0() === tj_JavaishVal$JavaishType_BOOLEAN) {
                            if (tj_JavaishBoolean_getValue($left) === tj_JavaishBoolean_getValue($right)) {
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                break a;
                            }
                            $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                            break a;
                        }
                        if ($left.$getType0() !== tj_JavaishVal$JavaishType_BOOLEAN && $right.$getType0() !== tj_JavaishVal$JavaishType_BOOLEAN) {
                            if ($left.$getType0() === tj_JavaishVal$JavaishType_INT && $right.$getType0() === tj_JavaishVal$JavaishType_INT) {
                                if (tj_JavaishInt_getValue($left) === tj_JavaishInt_getValue($right)) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break a;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break a;
                            }
                            if ($left.$getType0() === tj_JavaishVal$JavaishType_INT && $right.$getType0() === tj_JavaishVal$JavaishType_FLOAT) {
                                if (jl_Integer_intValue(tj_JavaishInt_getValue($left)) === jl_Float_floatValue(tj_JavaishFloat_getValue($right))) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break a;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break a;
                            }
                            if ($left.$getType0() === tj_JavaishVal$JavaishType_FLOAT && $right.$getType0() === tj_JavaishVal$JavaishType_INT) {
                                if (jl_Float_floatValue(tj_JavaishFloat_getValue($left)) === jl_Integer_intValue(tj_JavaishInt_getValue($right))) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break a;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break a;
                            }
                            if (tj_JavaishFloat_getValue($left) === tj_JavaishFloat_getValue($right)) {
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                break a;
                            }
                            $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                            break a;
                        }
                        tj_Error_TypeMismatch($rt_s(185), $rt_s(294), $this.$lineNumber0);
                        return null;
                    }
                    tj_Error_TypeMismatch($rt_s(186), $rt_s(295), $this.$lineNumber0);
                    return null;
                case 3:
                    $comparison = $left.$getType0();
                    tj_JavaishVal$JavaishType_$callClinit();
                    if ($comparison !== tj_JavaishVal$JavaishType_STRING && $right.$getType0() !== tj_JavaishVal$JavaishType_STRING) {
                        if ($left.$getType0() !== tj_JavaishVal$JavaishType_BOOLEAN && $right.$getType0() !== tj_JavaishVal$JavaishType_BOOLEAN) {
                            if ($left.$getType0() === tj_JavaishVal$JavaishType_INT && $right.$getType0() === tj_JavaishVal$JavaishType_INT) {
                                if (jl_Integer_intValue(tj_JavaishInt_getValue($left)) >= jl_Integer_intValue(tj_JavaishInt_getValue($right))) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break a;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break a;
                            }
                            if ($left.$getType0() === tj_JavaishVal$JavaishType_INT && $right.$getType0() === tj_JavaishVal$JavaishType_FLOAT) {
                                if (jl_Integer_intValue(tj_JavaishInt_getValue($left)) >= jl_Float_floatValue(tj_JavaishFloat_getValue($right))) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break a;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break a;
                            }
                            if ($left.$getType0() === tj_JavaishVal$JavaishType_FLOAT && $right.$getType0() === tj_JavaishVal$JavaishType_INT) {
                                if (jl_Float_floatValue(tj_JavaishFloat_getValue($left)) >= jl_Integer_intValue(tj_JavaishInt_getValue($right))) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break a;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break a;
                            }
                            if (jl_Float_floatValue(tj_JavaishFloat_getValue($left)) >= jl_Float_floatValue(tj_JavaishFloat_getValue($right))) {
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                break a;
                            }
                            $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                            break a;
                        }
                        tj_Error_TypeMismatch($rt_s(296), $rt_s(185), $this.$lineNumber0);
                        return null;
                    }
                    tj_Error_TypeMismatch($rt_s(296), $rt_s(186), $this.$lineNumber0);
                    return null;
                case 4:
                    $comparison = $left.$getType0();
                    tj_JavaishVal$JavaishType_$callClinit();
                    if ($comparison !== tj_JavaishVal$JavaishType_STRING && $right.$getType0() !== tj_JavaishVal$JavaishType_STRING) {
                        if ($left.$getType0() !== tj_JavaishVal$JavaishType_BOOLEAN && $right.$getType0() !== tj_JavaishVal$JavaishType_BOOLEAN) {
                            if ($left.$getType0() === tj_JavaishVal$JavaishType_INT && $right.$getType0() === tj_JavaishVal$JavaishType_INT) {
                                if (jl_Integer_intValue(tj_JavaishInt_getValue($left)) <= jl_Integer_intValue(tj_JavaishInt_getValue($right))) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break a;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break a;
                            }
                            if ($left.$getType0() === tj_JavaishVal$JavaishType_INT && $right.$getType0() === tj_JavaishVal$JavaishType_FLOAT) {
                                if (jl_Integer_intValue(tj_JavaishInt_getValue($left)) <= jl_Float_floatValue(tj_JavaishFloat_getValue($right))) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break a;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break a;
                            }
                            if ($left.$getType0() === tj_JavaishVal$JavaishType_FLOAT && $right.$getType0() === tj_JavaishVal$JavaishType_INT) {
                                if (jl_Float_floatValue(tj_JavaishFloat_getValue($left)) <= jl_Integer_intValue(tj_JavaishInt_getValue($right))) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break a;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break a;
                            }
                            if (jl_Float_floatValue(tj_JavaishFloat_getValue($left)) <= jl_Float_floatValue(tj_JavaishFloat_getValue($right))) {
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                break a;
                            }
                            $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                            break a;
                        }
                        tj_Error_TypeMismatch($rt_s(296), $rt_s(185), $this.$lineNumber0);
                        return null;
                    }
                    tj_Error_TypeMismatch($rt_s(296), $rt_s(186), $this.$lineNumber0);
                    return null;
                case 5:
                    $comparison = $left.$getType0();
                    tj_JavaishVal$JavaishType_$callClinit();
                    if ($comparison !== tj_JavaishVal$JavaishType_STRING && $right.$getType0() !== tj_JavaishVal$JavaishType_STRING) {
                        if ($left.$getType0() !== tj_JavaishVal$JavaishType_BOOLEAN && $right.$getType0() !== tj_JavaishVal$JavaishType_BOOLEAN) {
                            if ($left.$getType0() === tj_JavaishVal$JavaishType_INT && $right.$getType0() === tj_JavaishVal$JavaishType_INT) {
                                if (jl_Integer_intValue(tj_JavaishInt_getValue($left)) > jl_Integer_intValue(tj_JavaishInt_getValue($right))) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break a;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break a;
                            }
                            if ($left.$getType0() === tj_JavaishVal$JavaishType_INT && $right.$getType0() === tj_JavaishVal$JavaishType_FLOAT) {
                                if (jl_Integer_intValue(tj_JavaishInt_getValue($left)) > jl_Float_floatValue(tj_JavaishFloat_getValue($right))) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break a;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break a;
                            }
                            if ($left.$getType0() === tj_JavaishVal$JavaishType_FLOAT && $right.$getType0() === tj_JavaishVal$JavaishType_INT) {
                                if (jl_Float_floatValue(tj_JavaishFloat_getValue($left)) > jl_Integer_intValue(tj_JavaishInt_getValue($right))) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break a;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break a;
                            }
                            if (jl_Float_floatValue(tj_JavaishFloat_getValue($left)) > jl_Float_floatValue(tj_JavaishFloat_getValue($right))) {
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                break a;
                            }
                            $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                            break a;
                        }
                        tj_Error_TypeMismatch($rt_s(296), $rt_s(185), $this.$lineNumber0);
                        return null;
                    }
                    tj_Error_TypeMismatch($rt_s(296), $rt_s(186), $this.$lineNumber0);
                    return null;
                case 6:
                    $comparison = $left.$getType0();
                    tj_JavaishVal$JavaishType_$callClinit();
                    if ($comparison !== tj_JavaishVal$JavaishType_STRING && $right.$getType0() !== tj_JavaishVal$JavaishType_STRING) {
                        if ($left.$getType0() !== tj_JavaishVal$JavaishType_BOOLEAN && $right.$getType0() !== tj_JavaishVal$JavaishType_BOOLEAN) {
                            if ($left.$getType0() === tj_JavaishVal$JavaishType_INT && $right.$getType0() === tj_JavaishVal$JavaishType_INT) {
                                if (jl_Integer_intValue(tj_JavaishInt_getValue($left)) < jl_Integer_intValue(tj_JavaishInt_getValue($right))) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break a;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break a;
                            }
                            if ($left.$getType0() === tj_JavaishVal$JavaishType_INT && $right.$getType0() === tj_JavaishVal$JavaishType_FLOAT) {
                                if (jl_Integer_intValue(tj_JavaishInt_getValue($left)) < jl_Float_floatValue(tj_JavaishFloat_getValue($right))) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break a;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break a;
                            }
                            if ($left.$getType0() === tj_JavaishVal$JavaishType_FLOAT && $right.$getType0() === tj_JavaishVal$JavaishType_INT) {
                                if (jl_Float_floatValue(tj_JavaishFloat_getValue($left)) < jl_Integer_intValue(tj_JavaishInt_getValue($right))) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break a;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break a;
                            }
                            if (jl_Float_floatValue(tj_JavaishFloat_getValue($left)) < jl_Float_floatValue(tj_JavaishFloat_getValue($right))) {
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                break a;
                            }
                            $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                            break a;
                        }
                        tj_Error_TypeMismatch($rt_s(296), $rt_s(185), $this.$lineNumber0);
                        return null;
                    }
                    tj_Error_TypeMismatch($rt_s(296), $rt_s(186), $this.$lineNumber0);
                    return null;
                default:
            }
        }
        return $result;
    }
    function tj_JavaTranslator_translateExpression($this, $expression, $localVariables, $isGlobal, $javaPrinter) {
        var $expr, var$6, var$7, var$8, $elmt, $usedList, $castExpr, $cast, $val, $expressionElmt, $floatElmt, $integer, $string, $function, $params, $funcExpr, var$21, var$22, $param, $inputLine, $listVal, $index, $listName, $list, $ltype, $listExpressions, $listExpr, $arrayName;
        $expr = $rt_s(2);
        var$6 = (tj_Expression_getElements($expression)).data;
        var$7 = var$6.length;
        var$8 = 0;
        while (var$8 < var$7) {
            a: {
                $elmt = var$6[var$8];
                $usedList = 0;
                tj_JavaTranslator$1_$callClinit();
                switch (tj_JavaTranslator$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element_getType($elmt))]) {
                    case 1:
                        $expression = jl_StringBuilder__init_();
                        jl_StringBuilder_append(jl_StringBuilder_append($expression, $expr), $rt_s(341));
                        $expr = jl_StringBuilder_toString($expression);
                        break a;
                    case 2:
                        $castExpr = tj_JavaTranslator_translateExpression($this, $elmt.$expression0, $localVariables, $isGlobal, $javaPrinter);
                        $expression = jl_StringBuilder__init_();
                        jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($expression, $expr), $rt_s(342)), $castExpr);
                        $expr = jl_StringBuilder_toString($expression);
                        break a;
                    case 3:
                        $usedList = tj_BoolElmt_getValue($elmt);
                        $expression = jl_StringBuilder__init_();
                        jl_StringBuilder_append4(jl_StringBuilder_append($expression, $expr), $usedList);
                        $expr = jl_StringBuilder_toString($expression);
                        break a;
                    case 4:
                        b: {
                            $cast = $elmt;
                            $val = tj_JavaTranslator_evalExpression($this, $cast.$element, $localVariables, $isGlobal);
                            $castExpr = tj_JavaTranslator_translateExpression($this, $cast.$element, $localVariables, $isGlobal, $javaPrinter);
                            $expression = jl_System_out();
                            $expressionElmt = $val.$typeString();
                            $floatElmt = jl_StringBuilder__init_();
                            jl_StringBuilder_append(jl_StringBuilder_append3(jl_StringBuilder_append(jl_StringBuilder_append($floatElmt, $rt_s(343)), $castExpr), 32), $expressionElmt);
                            ji_PrintStream_println($expression, jl_StringBuilder_toString($floatElmt));
                            switch (tj_JavaTranslator$1_$SwitchMap$trackerjo$javaish$JavaishVal$JavaishType.data[jl_Enum_ordinal($cast.$castType)]) {
                                case 1:
                                    if ($val instanceof tj_JavaishFloat)
                                        break b;
                                    if ($val instanceof tj_JavaishInt) {
                                        $expression = jl_StringBuilder__init_();
                                        jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($expression, $expr), $rt_s(344)), $castExpr);
                                        $expr = jl_StringBuilder_toString($expression);
                                        break b;
                                    }
                                    if (!($val instanceof tj_JavaishString))
                                        break b;
                                    $expression = jl_StringBuilder__init_();
                                    jl_StringBuilder_append3(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($expression, $expr), $rt_s(345)), $castExpr), 41);
                                    $expr = jl_StringBuilder_toString($expression);
                                    break b;
                                case 2:
                                    if ($val instanceof tj_JavaishFloat) {
                                        $expression = jl_StringBuilder__init_();
                                        jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($expression, $expr), $rt_s(346)), $castExpr);
                                        $expr = jl_StringBuilder_toString($expression);
                                        break b;
                                    }
                                    if (!($val instanceof tj_JavaishString))
                                        break b;
                                    $expression = jl_StringBuilder__init_();
                                    jl_StringBuilder_append3(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($expression, $expr), $rt_s(347)), $castExpr), 41);
                                    $expr = jl_StringBuilder_toString($expression);
                                    break b;
                                case 3:
                                    if ($val instanceof tj_JavaishString)
                                        break b;
                                    $expression = jl_StringBuilder__init_();
                                    jl_StringBuilder_append3(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($expression, $expr), $rt_s(348)), $castExpr), 41);
                                    $expr = jl_StringBuilder_toString($expression);
                                    break b;
                                case 4:
                                    if ($val instanceof tj_JavaishBoolean)
                                        break b;
                                    if (!($val instanceof tj_JavaishString))
                                        break b;
                                    $expression = jl_StringBuilder__init_();
                                    jl_StringBuilder_append3(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($expression, $expr), $rt_s(349)), $castExpr), 41);
                                    $expr = jl_StringBuilder_toString($expression);
                                    break b;
                                default:
                            }
                        }
                        $expression = jl_System_out();
                        $cast = jl_StringBuilder__init_();
                        jl_StringBuilder_append(jl_StringBuilder_append($cast, $rt_s(343)), $expr);
                        ji_PrintStream_println($expression, jl_StringBuilder_toString($cast));
                        break a;
                    case 5:
                        $expression = jl_StringBuilder__init_();
                        jl_StringBuilder_append(jl_StringBuilder_append($expression, $expr), $rt_s(350));
                        $expr = jl_StringBuilder_toString($expression);
                        break a;
                    case 6:
                        $expression = jl_StringBuilder__init_();
                        jl_StringBuilder_append(jl_StringBuilder_append($expression, $expr), $rt_s(351));
                        $expr = jl_StringBuilder_toString($expression);
                        break a;
                    case 7:
                        $expression = tj_JavaTranslator_translateExpression($this, $elmt.$expression, $localVariables, $isGlobal, $javaPrinter);
                        $cast = jl_StringBuilder__init_();
                        jl_StringBuilder_append(jl_StringBuilder_append($cast, $expr), $expression);
                        $expr = jl_StringBuilder_toString($cast);
                        break a;
                    case 8:
                        $floatElmt = $elmt;
                        $val = tj_JavaishFloat_getValue(tj_JavaishFloat__init_(tj_FloatElmt_getValue($floatElmt)));
                        $expression = jl_StringBuilder__init_();
                        jl_StringBuilder_append3(jl_StringBuilder_append(jl_StringBuilder_append($expression, $expr), $val), 102);
                        $expr = jl_StringBuilder_toString($expression);
                        break a;
                    case 9:
                        $expression = jl_StringBuilder__init_();
                        jl_StringBuilder_append(jl_StringBuilder_append($expression, $expr), $rt_s(352));
                        $expr = jl_StringBuilder_toString($expression);
                        break a;
                    case 10:
                        $expression = jl_StringBuilder__init_();
                        jl_StringBuilder_append(jl_StringBuilder_append($expression, $expr), $rt_s(353));
                        $expr = jl_StringBuilder_toString($expression);
                        break a;
                    case 11:
                        $integer = $elmt;
                        $val = tj_JavaishInt_getValue(tj_JavaishInt__init_(tj_IntElmt_getValue($integer)));
                        $expression = jl_StringBuilder__init_();
                        jl_StringBuilder_append(jl_StringBuilder_append($expression, $expr), $val);
                        $expr = jl_StringBuilder_toString($expression);
                        break a;
                    case 12:
                        $expression = jl_StringBuilder__init_();
                        jl_StringBuilder_append(jl_StringBuilder_append($expression, $expr), $rt_s(354));
                        $expr = jl_StringBuilder_toString($expression);
                        break a;
                    case 13:
                        $expression = jl_StringBuilder__init_();
                        jl_StringBuilder_append(jl_StringBuilder_append($expression, $expr), $rt_s(355));
                        $expr = jl_StringBuilder_toString($expression);
                        break a;
                    case 14:
                        $expression = jl_StringBuilder__init_();
                        jl_StringBuilder_append(jl_StringBuilder_append($expression, $expr), $rt_s(356));
                        $expr = jl_StringBuilder_toString($expression);
                        break a;
                    case 15:
                        $expression = jl_StringBuilder__init_();
                        jl_StringBuilder_append(jl_StringBuilder_append($expression, $expr), $rt_s(357));
                        $expr = jl_StringBuilder_toString($expression);
                        break a;
                    case 16:
                        $expression = jl_StringBuilder__init_();
                        jl_StringBuilder_append(jl_StringBuilder_append($expression, $expr), $rt_s(358));
                        $expr = jl_StringBuilder_toString($expression);
                        break a;
                    case 17:
                        $expression = jl_StringBuilder__init_();
                        jl_StringBuilder_append(jl_StringBuilder_append($expression, $expr), $rt_s(359));
                        $expr = jl_StringBuilder_toString($expression);
                        break a;
                    case 18:
                        $expression = jl_StringBuilder__init_();
                        jl_StringBuilder_append(jl_StringBuilder_append($expression, $expr), $rt_s(360));
                        $expr = jl_StringBuilder_toString($expression);
                        break a;
                    case 19:
                        $string = $elmt;
                        $expression = tj_JavaishString_getValue(tj_JavaishString__init_(tj_StringElmt_getValue($string)));
                        $cast = jl_StringBuilder__init_();
                        jl_StringBuilder_append3(jl_StringBuilder_append(jl_StringBuilder_append3(jl_StringBuilder_append($cast, $expr), 34), $expression), 34);
                        $expr = jl_StringBuilder_toString($cast);
                        break a;
                    case 20:
                        $expression = tj_VariableElmt_getName($elmt);
                        $cast = jl_StringBuilder__init_();
                        jl_StringBuilder_append(jl_StringBuilder_append($cast, $expr), $expression);
                        $expr = jl_StringBuilder_toString($cast);
                        break a;
                    case 21:
                        $function = $elmt;
                        tj_Variables_getFunctionBody($this.$globalVariables0, tj_FunctionElmt_getName($function));
                        tj_Variables_getFunctionArgs($this.$globalVariables0, tj_FunctionElmt_getName($function));
                        $params = (tj_FunctionElmt_getParams($function)).data;
                        ju_ArrayList__init_0(new ju_ArrayList);
                        $expression = tj_FunctionElmt_getName($function);
                        $cast = jl_StringBuilder__init_();
                        jl_StringBuilder_append3(jl_StringBuilder_append($cast, $expression), 40);
                        $funcExpr = jl_StringBuilder_toString($cast);
                        var$21 = $params.length;
                        var$22 = 0;
                        while (var$22 < var$21) {
                            $param = $params[var$22];
                            $usedList = 1;
                            $expression = tj_JavaTranslator_translateExpression($this, $param, $localVariables, $isGlobal, $javaPrinter);
                            $cast = jl_StringBuilder__init_();
                            jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($cast, $funcExpr), $expression), $rt_s(56));
                            $funcExpr = jl_StringBuilder_toString($cast);
                            var$22 = var$22 + 1 | 0;
                        }
                        if ($usedList)
                            $funcExpr = jl_String_substring($funcExpr, 0, jl_String_length($funcExpr) - 2 | 0);
                        $expression = jl_StringBuilder__init_();
                        jl_StringBuilder_append3(jl_StringBuilder_append($expression, $funcExpr), 41);
                        $expression = jl_StringBuilder_toString($expression);
                        $cast = jl_StringBuilder__init_();
                        jl_StringBuilder_append(jl_StringBuilder_append($cast, $expr), $expression);
                        $expr = jl_StringBuilder_toString($cast);
                        break a;
                    case 22:
                        $inputLine = tj_JavaTranslator_evalShowInputBox($this, $elmt, $localVariables, $isGlobal, $javaPrinter);
                        $expression = jl_StringBuilder__init_();
                        jl_StringBuilder_append(jl_StringBuilder_append($expression, $expr), $inputLine);
                        $expr = jl_StringBuilder_toString($expression);
                        break a;
                    case 23:
                        $listVal = $elmt;
                        $index = tj_JavaTranslator_translateExpression($this, tj_ListValElmt_getIndex($listVal), $localVariables, $isGlobal, $javaPrinter);
                        $listName = tj_ListValElmt_getListName($listVal);
                        $expression = jl_StringBuilder__init_();
                        jl_StringBuilder_append3(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($expression, $expr), $listName), $rt_s(361)), $index), 41);
                        $expr = jl_StringBuilder_toString($expression);
                        break a;
                    case 24:
                        $list = $elmt;
                        $ltype = tj_JavaTranslator_typeToString($this, tj_ListElmt_getListType($list));
                        $cast = jl_String_toUpperCase(jl_String_substring($ltype, 0, 1));
                        $expression = jl_String_substring0($ltype, 1);
                        $val = jl_StringBuilder__init_();
                        jl_StringBuilder_append(jl_StringBuilder_append($val, $cast), $expression);
                        $expression = jl_StringBuilder_toString($val);
                        $listExpressions = tj_ListElmt_getList($list);
                        $cast = jl_StringBuilder__init_();
                        jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($cast, $rt_s(362)), $expression), $rt_s(363));
                        $listExpr = jl_StringBuilder_toString($cast);
                        ju_ArrayList_add($this.$javaImports, $rt_s(364));
                        ju_ArrayList_add($this.$javaImports, $rt_s(365));
                        $expression = ju_AbstractList_iterator($listExpressions);
                        while (ju_AbstractList$1_hasNext($expression)) {
                            $cast = tj_JavaTranslator_translateExpression($this, ju_AbstractList$1_next($expression), $localVariables, $isGlobal, $javaPrinter);
                            $val = jl_StringBuilder__init_();
                            jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($val, $listExpr), $cast), $rt_s(56));
                            $listExpr = jl_StringBuilder_toString($val);
                        }
                        $expression = jl_String_substring($listExpr, 0, jl_String_length($listExpr) - 2 | 0);
                        $cast = jl_StringBuilder__init_();
                        jl_StringBuilder_append(jl_StringBuilder_append($cast, $expression), $rt_s(366));
                        $expression = jl_StringBuilder_toString($cast);
                        $cast = jl_StringBuilder__init_();
                        jl_StringBuilder_append(jl_StringBuilder_append($cast, $expr), $expression);
                        $expr = jl_StringBuilder_toString($cast);
                        break a;
                    case 25:
                        $arrayName = tj_ArrayLengthElmt_getArrayName($elmt);
                        $expression = jl_StringBuilder__init_();
                        jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($expression, $expr), $arrayName), $rt_s(367));
                        $expr = jl_StringBuilder_toString($expression);
                        break a;
                    default:
                }
            }
            var$8 = var$8 + 1 | 0;
        }
        return $expr;
    }
    function tj_JavaTranslator_performOperation($this, $operation, $total, $val2) {
        var $result, var$5;
        $result = null;
        if ($operation === null)
            return $val2;
        a: {
            tj_JavaTranslator$1_$callClinit();
            switch (tj_JavaTranslator$1_$SwitchMap$trackerjo$javaish$JavaTranslator$Operator.data[jl_Enum_ordinal($operation)]) {
                case 7:
                    var$5 = $total instanceof tj_JavaishString;
                    if (var$5) {
                        if (!($val2 instanceof tj_JavaishString)) {
                            tj_Error_TypeMismatch($rt_s(186), $val2.$typeString(), $this.$lineNumber0);
                            return null;
                        }
                        $result = new tj_JavaishString;
                        $operation = tj_JavaishString_getValue($total);
                        $total = tj_JavaishString_getValue($val2);
                        $val2 = jl_StringBuilder__init_();
                        jl_StringBuilder_append(jl_StringBuilder_append($val2, $operation), $total);
                        tj_JavaishString__init_0($result, jl_StringBuilder_toString($val2));
                        break a;
                    }
                    if ($val2 instanceof tj_JavaishString) {
                        if (!var$5) {
                            tj_Error_TypeMismatch($rt_s(186), $total.$typeString(), $this.$lineNumber0);
                            return null;
                        }
                        $result = new tj_JavaishString;
                        $operation = tj_JavaishString_getValue($total);
                        $total = tj_JavaishString_getValue($val2);
                        $val2 = jl_StringBuilder__init_();
                        jl_StringBuilder_append(jl_StringBuilder_append($val2, $operation), $total);
                        tj_JavaishString__init_0($result, jl_StringBuilder_toString($val2));
                        break a;
                    }
                    if ($total instanceof tj_JavaishFloat) {
                        if (!($val2 instanceof tj_JavaishInt)) {
                            $result = tj_JavaishFloat__init_(jl_Float_floatValue(tj_JavaishFloat_getValue($total)) + jl_Float_floatValue(tj_JavaishFloat_getValue($val2)));
                            break a;
                        }
                        $result = tj_JavaishFloat__init_(jl_Float_floatValue(tj_JavaishFloat_getValue($total)) + jl_Integer_intValue(tj_JavaishInt_getValue($val2)));
                        break a;
                    }
                    if (!($val2 instanceof tj_JavaishFloat)) {
                        $result = tj_JavaishInt__init_(jl_Integer_intValue(tj_JavaishInt_getValue($total)) + jl_Integer_intValue(tj_JavaishInt_getValue($val2)) | 0);
                        break a;
                    }
                    if (!($total instanceof tj_JavaishInt)) {
                        $result = tj_JavaishFloat__init_(jl_Float_floatValue(tj_JavaishFloat_getValue($total)) + jl_Float_floatValue(tj_JavaishFloat_getValue($val2)));
                        break a;
                    }
                    $result = tj_JavaishFloat__init_(jl_Integer_intValue(tj_JavaishInt_getValue($total)) + jl_Float_floatValue(tj_JavaishFloat_getValue($val2)));
                    break a;
                case 8:
                    if (!($total instanceof tj_JavaishString) && !($val2 instanceof tj_JavaishString)) {
                        if ($total instanceof tj_JavaishFloat) {
                            if (!($val2 instanceof tj_JavaishInt)) {
                                $result = tj_JavaishFloat__init_(jl_Float_floatValue(tj_JavaishFloat_getValue($total)) * jl_Float_floatValue(tj_JavaishFloat_getValue($val2)));
                                break a;
                            }
                            $result = tj_JavaishFloat__init_(jl_Float_floatValue(tj_JavaishFloat_getValue($total)) * jl_Integer_intValue(tj_JavaishInt_getValue($val2)));
                            break a;
                        }
                        if (!($val2 instanceof tj_JavaishFloat)) {
                            $result = tj_JavaishInt__init_($rt_imul(jl_Integer_intValue(tj_JavaishInt_getValue($total)), jl_Integer_intValue(tj_JavaishInt_getValue($val2))));
                            break a;
                        }
                        if (!($total instanceof tj_JavaishInt)) {
                            $result = tj_JavaishFloat__init_(jl_Float_floatValue(tj_JavaishFloat_getValue($total)) * jl_Float_floatValue(tj_JavaishFloat_getValue($val2)));
                            break a;
                        }
                        $result = tj_JavaishFloat__init_(jl_Integer_intValue(tj_JavaishInt_getValue($total)) * jl_Float_floatValue(tj_JavaishFloat_getValue($val2)));
                        break a;
                    }
                    tj_Error_TypeMismatch($rt_s(296), $rt_s(186), $this.$lineNumber0);
                    return null;
                case 9:
                    if (!($total instanceof tj_JavaishString) && !($val2 instanceof tj_JavaishString)) {
                        if ($total instanceof tj_JavaishFloat) {
                            if (!($val2 instanceof tj_JavaishInt)) {
                                $result = tj_JavaishFloat__init_(jl_Float_floatValue(tj_JavaishFloat_getValue($total)) / jl_Float_floatValue(tj_JavaishFloat_getValue($val2)));
                                break a;
                            }
                            $result = tj_JavaishFloat__init_(jl_Float_floatValue(tj_JavaishFloat_getValue($total)) / jl_Integer_intValue(tj_JavaishInt_getValue($val2)));
                            break a;
                        }
                        if (!($val2 instanceof tj_JavaishFloat)) {
                            $result = tj_JavaishInt__init_(jl_Integer_intValue(tj_JavaishInt_getValue($total)) / jl_Integer_intValue(tj_JavaishInt_getValue($val2)) | 0);
                            break a;
                        }
                        if (!($total instanceof tj_JavaishInt)) {
                            $result = tj_JavaishFloat__init_(jl_Float_floatValue(tj_JavaishFloat_getValue($total)) / jl_Float_floatValue(tj_JavaishFloat_getValue($val2)));
                            break a;
                        }
                        $result = tj_JavaishFloat__init_(jl_Integer_intValue(tj_JavaishInt_getValue($total)) / jl_Float_floatValue(tj_JavaishFloat_getValue($val2)));
                        break a;
                    }
                    tj_Error_TypeMismatch($rt_s(296), $rt_s(186), $this.$lineNumber0);
                    return null;
                case 10:
                    if (!($total instanceof tj_JavaishString) && !($val2 instanceof tj_JavaishString)) {
                        if ($total instanceof tj_JavaishFloat) {
                            if (!($val2 instanceof tj_JavaishInt)) {
                                $result = tj_JavaishFloat__init_(jl_Float_floatValue(tj_JavaishFloat_getValue($total)) - jl_Float_floatValue(tj_JavaishFloat_getValue($val2)));
                                break a;
                            }
                            $result = tj_JavaishFloat__init_(jl_Float_floatValue(tj_JavaishFloat_getValue($total)) - jl_Integer_intValue(tj_JavaishInt_getValue($val2)));
                            break a;
                        }
                        if (!($val2 instanceof tj_JavaishFloat)) {
                            $result = tj_JavaishInt__init_(jl_Integer_intValue(tj_JavaishInt_getValue($total)) - jl_Integer_intValue(tj_JavaishInt_getValue($val2)) | 0);
                            break a;
                        }
                        if (!($total instanceof tj_JavaishInt)) {
                            $result = tj_JavaishFloat__init_(jl_Float_floatValue(tj_JavaishFloat_getValue($total)) - jl_Float_floatValue(tj_JavaishFloat_getValue($val2)));
                            break a;
                        }
                        $result = tj_JavaishFloat__init_(jl_Integer_intValue(tj_JavaishInt_getValue($total)) - jl_Float_floatValue(tj_JavaishFloat_getValue($val2)));
                        break a;
                    }
                    tj_Error_TypeMismatch($rt_s(296), $rt_s(186), $this.$lineNumber0);
                    return null;
                default:
            }
        }
        return $result;
    }
    function tj_JavaTranslator_evalDeclaration($this, $declaration, $localVariables, $isGlobal, $javaPrinter) {
        var $type, $value, $listVal, $line, $expr, $list, $prevTabCount, $ltype, $ltype_0, $list_0;
        $type = $declaration.$varType;
        $value = jl_System_out();
        $listVal = jl_String_valueOf($declaration.$varType);
        $line = $declaration.$name19;
        $expr = jl_String_valueOf($declaration.$value20);
        $list = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($list);
        jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($list, $rt_s(297)), $listVal), $rt_s(298)), $line), $rt_s(299)), $expr);
        ji_PrintStream_println($value, jl_AbstractStringBuilder_toString($list));
        $value = tj_JavaTranslator_evalExpression($this, $declaration.$value20, $localVariables, $isGlobal);
        $expr = tj_JavaTranslator_translateExpression($this, $declaration.$value20, $localVariables, $isGlobal, $javaPrinter);
        $line = tj_JavaTranslator_addTabCount($this);
        $prevTabCount = $this.$tabCount;
        if ($isGlobal) {
            $this.$tabCount = 1;
            $javaPrinter = tj_JavaTranslator_addTabCount($this);
            $list = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($list);
            jl_StringBuilder_append(jl_StringBuilder_append($list, $javaPrinter), $rt_s(332));
            $line = jl_AbstractStringBuilder_toString($list);
            $javaPrinter = $this.$publicVarDeclarations;
        }
        if ($type === $value.$getType0()) {
            tj_JavaishVal$JavaishType_$callClinit();
            if ($type !== tj_JavaishVal$JavaishType_LIST) {
                $listVal = tj_JavaTranslator_typeToString($this, $type);
                $ltype = $declaration.$name19;
                $list = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_($list);
                $listVal = jl_StringBuilder_append(jl_StringBuilder_append($list, $line), $listVal);
                jl_AbstractStringBuilder_append($listVal, 32);
                jl_AbstractStringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($listVal, $ltype), $rt_s(333)), $expr), 59);
                ju_ArrayList_add($javaPrinter, jl_AbstractStringBuilder_toString($list));
            } else {
                $ltype_0 = tj_JavaTranslator_typeToString($this, ($value.$getValue0()).$list.$getType0());
                $ltype = jl_String_toUpperCase(jl_String_substring($ltype_0, 0, 1));
                $listVal = jl_String_substring0($ltype_0, 1);
                $list = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_($list);
                jl_StringBuilder_append(jl_StringBuilder_append($list, $ltype), $listVal);
                $listVal = jl_AbstractStringBuilder_toString($list);
                $list = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_($list);
                jl_AbstractStringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($list, $rt_s(368)), $listVal), 62);
                $listVal = jl_AbstractStringBuilder_toString($list);
                $ltype = $declaration.$name19;
                $list = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_($list);
                $listVal = jl_StringBuilder_append(jl_StringBuilder_append($list, $line), $listVal);
                jl_AbstractStringBuilder_append($listVal, 32);
                jl_StringBuilder_append3(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($listVal, $ltype), $rt_s(333)), $expr), 59);
                ju_ArrayList_add($javaPrinter, jl_StringBuilder_toString($list));
            }
            if (!$isGlobal) {
                if ($type !== tj_JavaishVal$JavaishType_LIST)
                    tj_Variables_addVariable($localVariables, tj_DeclarationStmt_getName($declaration), $type, $value, $this.$lineNumber0);
                else {
                    $listVal = $value.$getValue0();
                    tj_Variables_addList($localVariables, tj_DeclarationStmt_getName($declaration), $type, tj_JavaishListVal_getValue($listVal), $this.$lineNumber0);
                }
            } else if ($type !== tj_JavaishVal$JavaishType_LIST)
                tj_Variables_addVariable($this.$globalVariables0, tj_DeclarationStmt_getName($declaration), $type, $value, $this.$lineNumber0);
            else {
                $listVal = $value.$getValue0();
                tj_Variables_addList($this.$globalVariables0, tj_DeclarationStmt_getName($declaration), $type, tj_JavaishListVal_getValue($listVal), $this.$lineNumber0);
            }
            $this.$tabCount = $prevTabCount;
            return;
        }
        tj_JavaishVal$JavaishType_$callClinit();
        if ($type === tj_JavaishVal$JavaishType_FLOAT && $value.$getType0() === tj_JavaishVal$JavaishType_INT) {
            $list_0 = $declaration.$name19;
            $ltype = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($ltype);
            $list = jl_StringBuilder_append(jl_StringBuilder_append($ltype, $line), $rt_s(184));
            jl_AbstractStringBuilder_append($list, 32);
            jl_AbstractStringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($list, $list_0), $rt_s(333)), $expr), 59);
            ju_ArrayList_add($javaPrinter, jl_AbstractStringBuilder_toString($ltype));
            if (!$isGlobal)
                tj_Variables_addVariable($localVariables, $declaration.$name19, $type, tj_JavaishFloat__init_((tj_JavaishInt_getValue($value)).$value), $this.$lineNumber0);
            else
                tj_Variables_addVariable($this.$globalVariables0, $declaration.$name19, $type, tj_JavaishFloat__init_((tj_JavaishInt_getValue($value)).$value), $this.$lineNumber0);
            return;
        }
        if ($value.$getType0() === tj_JavaishVal$JavaishType_LIST) {
            $list_0 = $value.$list;
            if ($list_0.$getType0() === $type) {
                $ltype = tj_JavaTranslator_typeToString($this, $list_0.$getType0());
                $list = jl_String_toUpperCase(jl_String_substring($ltype, 0, 1));
                $ltype = jl_String_substring0($ltype, 1);
                $listVal = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_($listVal);
                jl_StringBuilder_append(jl_StringBuilder_append($listVal, $list), $ltype);
                $listVal = jl_AbstractStringBuilder_toString($listVal);
                $list = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_($list);
                jl_AbstractStringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($list, $rt_s(368)), $listVal), 62);
                $listVal = jl_AbstractStringBuilder_toString($list);
                $ltype = $declaration.$name19;
                $list = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_($list);
                $listVal = jl_StringBuilder_append(jl_StringBuilder_append($list, $line), $listVal);
                jl_AbstractStringBuilder_append($listVal, 32);
                jl_AbstractStringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($listVal, $ltype), $rt_s(333)), $expr), 59);
                ju_ArrayList_add($javaPrinter, jl_AbstractStringBuilder_toString($list));
                if (!$isGlobal)
                    tj_Variables_addList($localVariables, $declaration.$name19, $type, $list_0, $this.$lineNumber0);
                else
                    tj_Variables_addList($this.$globalVariables0, $declaration.$name19, $type, $list_0, $this.$lineNumber0);
                $this.$tabCount = $prevTabCount;
                return;
            }
        }
        tj_Error_TypeMismatch($type.$name4, $value.$typeString(), $this.$lineNumber0);
    }
    function tj_JavaTranslator_evalFunction($this, $function, $localVariables, $isGlobal) {
        var $name, $args, $body, $params, $paramVals, var$9, var$10, $arg;
        $name = $function.$name18;
        $args = $function.$args1;
        $body = $function.$body;
        if (!$isGlobal) {
            tj_Error_FunctionNotGlobal($name, $this.$lineNumber0);
            return;
        }
        tj_Variables_addFunction($this.$globalVariables0, $name, $body, $args, $this.$lineNumber0);
        if ($args === null) {
            tj_Error_FunctionNotDeclared($name, $this.$lineNumber0);
            return;
        }
        $params = $args.data;
        $paramVals = ju_ArrayList__init_();
        var$9 = $params.length;
        var$10 = 0;
        while (var$10 < var$9) {
            a: {
                $arg = $params[var$10];
                tj_JavaTranslator$1_$callClinit();
                switch (tj_JavaTranslator$1_$SwitchMap$trackerjo$javaish$JavaishVal$JavaishType.data[$arg.$type.$ordinal0]) {
                    case 1:
                        break;
                    case 2:
                        ju_ArrayList_add($paramVals, tj_JavaishInt__init_(0));
                        break a;
                    case 3:
                        ju_ArrayList_add($paramVals, tj_JavaishString__init_($rt_s(2)));
                        break a;
                    case 4:
                        ju_ArrayList_add($paramVals, tj_JavaishBoolean__init_(jl_Boolean_valueOf(0)));
                        break a;
                    default:
                        break a;
                }
                ju_ArrayList_add($paramVals, tj_JavaishFloat__init_(0.0));
            }
            var$10 = var$10 + 1 | 0;
        }
        tj_JavaTranslator_interpretFunction($this, $body, $args, ju_AbstractCollection_toArray($paramVals, $rt_createArray(tj_JavaishVal, $paramVals.$size0)), $name, 0, 1);
        $this.$tabCount = $this.$tabCount + 1 | 0;
    }
    function tj_JavaTranslator_evalIf($this, $ifStmt, $localVariables, $isGlobal, $pastResult, $javaPrinter) {
        var $condition, $body, $conditionString;
        $condition = $ifStmt.$condition0;
        $body = $ifStmt.$body;
        $conditionString = tj_JavaTranslator_translateExpression($this, $condition, $localVariables, $isGlobal, $javaPrinter);
        $ifStmt = tj_JavaTranslator_addTabCount($this);
        $condition = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($condition);
        jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($condition, $ifStmt), $rt_s(369)), $conditionString), $rt_s(338));
        ju_ArrayList_add($javaPrinter, jl_AbstractStringBuilder_toString($condition));
        $this.$tabCount = $this.$tabCount + 1 | 0;
        tj_JavaTranslator_interpretBody($this, $body, $localVariables, 0, $javaPrinter);
        $this.$tabCount = $this.$tabCount - 1 | 0;
        $localVariables = tj_JavaTranslator_addTabCount($this);
        $ifStmt = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($ifStmt);
        jl_AbstractStringBuilder_append(jl_StringBuilder_append($ifStmt, $localVariables), 125);
        ju_ArrayList_add($javaPrinter, jl_AbstractStringBuilder_toString($ifStmt));
    }
    function tj_JavaTranslator_evalWhile($this, $whileStmt, $localVariables, $isGlobal, $javaPrinter) {
        var $condString, var$6, $condition;
        $condString = tj_JavaTranslator_translateExpression($this, $whileStmt.$condition1, $localVariables, $isGlobal, $javaPrinter);
        var$6 = tj_JavaTranslator_addTabCount($this);
        $condition = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($condition);
        jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($condition, var$6), $rt_s(370)), $condString), $rt_s(338));
        ju_ArrayList_add($javaPrinter, jl_AbstractStringBuilder_toString($condition));
        $this.$tabCount = $this.$tabCount + 1 | 0;
        tj_JavaTranslator_interpretBody($this, $whileStmt.$body, $localVariables, 0, $javaPrinter);
        $this.$tabCount = $this.$tabCount - 1 | 0;
        $whileStmt = tj_JavaTranslator_addTabCount($this);
        $localVariables = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($localVariables);
        jl_AbstractStringBuilder_append(jl_StringBuilder_append($localVariables, $whileStmt), 125);
        ju_ArrayList_add($javaPrinter, jl_AbstractStringBuilder_toString($localVariables));
    }
    function tj_JavaTranslator_evalForEach($this, $foreachStmt, $localVariables, $isGlobal, $javaPrinter) {
        var $tempVarName, $listName, var$7, $list;
        $tempVarName = $foreachStmt.$tempVar;
        $listName = $foreachStmt.$listVar;
        if (tj_Variables_isVariable($localVariables, $listName))
            var$7 = tj_Variables_getVariableValue($localVariables, $listName);
        else {
            if (!tj_Variables_isVariable($this.$globalVariables0, $listName)) {
                tj_Error_VariableNotDeclared($listName, $this.$lineNumber0);
                return;
            }
            var$7 = tj_Variables_getVariableValue($this.$globalVariables0, $listName);
        }
        $list = var$7.$getType0();
        tj_JavaishVal$JavaishType_$callClinit();
        if ($list !== tj_JavaishVal$JavaishType_LIST) {
            tj_Error_TypeMismatch($rt_s(293), var$7.$typeString(), $this.$lineNumber0);
            return;
        }
        $list = var$7.$list;
        if ($list.$getType0() === tj_JavaishVal$JavaishType_STRINGLIST) {
            if (!$isGlobal)
                tj_Variables_addVariable($localVariables, $tempVarName, tj_JavaishVal$JavaishType_STRING, tj_JavaishString__init_($rt_s(2)), $this.$lineNumber0);
            else
                tj_Variables_addVariable($this.$globalVariables0, $tempVarName, tj_JavaishVal$JavaishType_STRING, tj_JavaishString__init_($rt_s(2)), $this.$lineNumber0);
            var$7 = tj_JavaTranslator_addTabCount($this);
            $list = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($list);
            jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($list, var$7), $rt_s(371)), $tempVarName), $rt_s(372)), $listName), $rt_s(338));
            ju_ArrayList_add($javaPrinter, jl_AbstractStringBuilder_toString($list));
            $this.$tabCount = $this.$tabCount + 1 | 0;
            tj_JavaTranslator_interpretBody($this, $foreachStmt.$body, $localVariables, 0, $javaPrinter);
            $this.$tabCount = $this.$tabCount - 1 | 0;
            $foreachStmt = tj_JavaTranslator_addTabCount($this);
            $localVariables = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($localVariables);
            jl_AbstractStringBuilder_append(jl_StringBuilder_append($localVariables, $foreachStmt), 125);
            ju_ArrayList_add($javaPrinter, jl_AbstractStringBuilder_toString($localVariables));
        } else if ($list.$getType0() === tj_JavaishVal$JavaishType_BOOLEANLIST) {
            if (!$isGlobal)
                tj_Variables_addVariable($localVariables, $tempVarName, tj_JavaishVal$JavaishType_BOOLEAN, tj_JavaishBoolean__init_(jl_Boolean_valueOf(0)), $this.$lineNumber0);
            else
                tj_Variables_addVariable($this.$globalVariables0, $tempVarName, tj_JavaishVal$JavaishType_BOOLEAN, tj_JavaishBoolean__init_(jl_Boolean_valueOf(0)), $this.$lineNumber0);
            var$7 = tj_JavaTranslator_addTabCount($this);
            $list = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($list);
            jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($list, var$7), $rt_s(373)), $tempVarName), $rt_s(372)), $listName), $rt_s(338));
            ju_ArrayList_add($javaPrinter, jl_AbstractStringBuilder_toString($list));
            $this.$tabCount = $this.$tabCount + 1 | 0;
            tj_JavaTranslator_interpretBody($this, $foreachStmt.$body, $localVariables, 0, $javaPrinter);
            $this.$tabCount = $this.$tabCount - 1 | 0;
            $foreachStmt = tj_JavaTranslator_addTabCount($this);
            $localVariables = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($localVariables);
            jl_AbstractStringBuilder_append(jl_StringBuilder_append($localVariables, $foreachStmt), 125);
            ju_ArrayList_add($javaPrinter, jl_AbstractStringBuilder_toString($localVariables));
        } else if ($list.$getType0() === tj_JavaishVal$JavaishType_INTLIST) {
            if (!$isGlobal)
                tj_Variables_addVariable($localVariables, $tempVarName, tj_JavaishVal$JavaishType_INT, tj_JavaishInt__init_(0), $this.$lineNumber0);
            else
                tj_Variables_addVariable($this.$globalVariables0, $tempVarName, tj_JavaishVal$JavaishType_INT, tj_JavaishInt__init_(0), $this.$lineNumber0);
            var$7 = tj_JavaTranslator_addTabCount($this);
            $list = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($list);
            jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($list, var$7), $rt_s(374)), $tempVarName), $rt_s(372)), $listName), $rt_s(338));
            ju_ArrayList_add($javaPrinter, jl_AbstractStringBuilder_toString($list));
            $this.$tabCount = $this.$tabCount + 1 | 0;
            tj_JavaTranslator_interpretBody($this, $foreachStmt.$body, $localVariables, 0, $javaPrinter);
            $this.$tabCount = $this.$tabCount - 1 | 0;
            $localVariables = tj_JavaTranslator_addTabCount($this);
            $foreachStmt = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($foreachStmt);
            jl_AbstractStringBuilder_append(jl_StringBuilder_append($foreachStmt, $localVariables), 125);
            ju_ArrayList_add($javaPrinter, jl_AbstractStringBuilder_toString($foreachStmt));
        } else {
            if ($list.$getType0() !== tj_JavaishVal$JavaishType_FLOATLIST) {
                tj_Error_TypeMismatch($rt_s(293), var$7.$typeString(), $this.$lineNumber0);
                return;
            }
            if (!$isGlobal)
                tj_Variables_addVariable($localVariables, $tempVarName, tj_JavaishVal$JavaishType_FLOAT, tj_JavaishFloat__init_(0.0), $this.$lineNumber0);
            else
                tj_Variables_addVariable($this.$globalVariables0, $tempVarName, tj_JavaishVal$JavaishType_FLOAT, tj_JavaishFloat__init_(0.0), $this.$lineNumber0);
            var$7 = tj_JavaTranslator_addTabCount($this);
            $list = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($list);
            jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($list, var$7), $rt_s(375)), $tempVarName), $rt_s(372)), $listName), $rt_s(338));
            ju_ArrayList_add($javaPrinter, jl_AbstractStringBuilder_toString($list));
            $this.$tabCount = $this.$tabCount + 1 | 0;
            tj_JavaTranslator_interpretBody($this, $foreachStmt.$body, $localVariables, 0, $javaPrinter);
            $this.$tabCount = $this.$tabCount - 1 | 0;
            $localVariables = tj_JavaTranslator_addTabCount($this);
            $foreachStmt = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($foreachStmt);
            jl_AbstractStringBuilder_append(jl_StringBuilder_append($foreachStmt, $localVariables), 125);
            ju_ArrayList_add($javaPrinter, jl_AbstractStringBuilder_toString($foreachStmt));
        }
    }
    function tj_JavaTranslator_evalForWhen($this, $forwhenStmt, $localVariables, $isGlobal, $javaPrinter) {
        var $incVarName, $newVar, $condString, $incExpr, var$9, var$10, $condition;
        $incVarName = $forwhenStmt.$incVar;
        $newVar = 0;
        if (!tj_Variables_isVariable($localVariables, $incVarName) && !tj_Variables_isVariable($this.$globalVariables0, $incVarName)) {
            $newVar = 1;
            tj_JavaishVal$JavaishType_$callClinit();
            tj_Variables_addVariable($localVariables, $incVarName, tj_JavaishVal$JavaishType_INT, tj_JavaishInt__init_(0), $this.$lineNumber0);
        }
        $condString = tj_JavaTranslator_translateExpression($this, $forwhenStmt.$condition2, $localVariables, $isGlobal, $javaPrinter);
        $incExpr = tj_JavaTranslator_translateExpression($this, $forwhenStmt.$increment, $localVariables, $isGlobal, $javaPrinter);
        var$9 = tj_JavaTranslator_addTabCount($this);
        if (!$newVar)
            var$10 = $rt_s(376);
        else {
            var$10 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_(var$10);
            jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$10, $rt_s(377)), $incVarName), $rt_s(378));
            var$10 = jl_AbstractStringBuilder_toString(var$10);
        }
        $condition = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($condition);
        jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($condition, var$9), $rt_s(379)), var$10), $condString), $rt_s(376)), $incVarName), $rt_s(380)), $incExpr), $rt_s(338));
        ju_ArrayList_add($javaPrinter, jl_AbstractStringBuilder_toString($condition));
        $this.$tabCount = $this.$tabCount + 1 | 0;
        tj_JavaTranslator_interpretBody($this, $forwhenStmt.$body, $localVariables, 0, $javaPrinter);
        $this.$tabCount = $this.$tabCount - 1 | 0;
        $forwhenStmt = tj_JavaTranslator_addTabCount($this);
        $localVariables = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($localVariables);
        jl_AbstractStringBuilder_append(jl_StringBuilder_append($localVariables, $forwhenStmt), 125);
        ju_ArrayList_add($javaPrinter, jl_AbstractStringBuilder_toString($localVariables));
    }
    function tj_JavaTranslator_evalShowMsgBox($this, $showMsgStmt, $localVariables, $isGlobal, $javaPrinter) {
        var $expression, $value;
        $expression = $showMsgStmt.$value22;
        if (tj_JavaTranslator_evalExpression($this, $expression, $localVariables, $isGlobal) === null)
            return;
        if (!$this.$usedJOptionPane) {
            $this.$usedJOptionPane = 1;
            ju_ArrayList_add($this.$javaImports, $rt_s(381));
        }
        $showMsgStmt = tj_JavaTranslator_addTabCount($this);
        $localVariables = tj_JavaTranslator_translateExpression($this, $expression, $localVariables, $isGlobal, $javaPrinter);
        $value = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($value);
        jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($value, $showMsgStmt), $rt_s(382)), $localVariables), $rt_s(335));
        ju_ArrayList_add($javaPrinter, jl_AbstractStringBuilder_toString($value));
    }
    function tj_JavaTranslator_evalShowInputBox($this, $showInputBoxElmt, $localVariables, $isGlobal, $javaPrinter) {
        var $value, $expression;
        ji_PrintStream_println(jl_System_out(), $rt_s(383));
        $value = $rt_s(2);
        $expression = $showInputBoxElmt.$value2;
        if ($expression !== null)
            $value = tj_JavaTranslator_translateExpression($this, $expression, $localVariables, $isGlobal, $javaPrinter);
        if (!$this.$usedJOptionPane) {
            $this.$usedJOptionPane = 1;
            ju_ArrayList_add($this.$javaImports, $rt_s(381));
        }
        $showInputBoxElmt = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($showInputBoxElmt);
        jl_AbstractStringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($showInputBoxElmt, $rt_s(384)), $value), 41);
        $localVariables = jl_AbstractStringBuilder_toString($showInputBoxElmt);
        ji_PrintStream_println(jl_System_out(), $localVariables);
        return $localVariables;
    }
    function tj_JavaTranslator_evalReturn($this, $returnStmt, $localVariables, $returnVal, $isGlobal, $javaPrinter) {
        var $expression, $value, $expr;
        $expression = $returnStmt.$value17;
        $value = null;
        $expr = $rt_s(2);
        if ($returnStmt.$hasReturn0) {
            $value = tj_JavaTranslator_evalExpression($this, $expression, $localVariables, $isGlobal);
            $localVariables = tj_JavaTranslator_translateExpression($this, $expression, $localVariables, $isGlobal, $javaPrinter);
            $returnStmt = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($returnStmt);
            jl_AbstractStringBuilder_append($returnStmt, 32);
            jl_StringBuilder_append($returnStmt, $localVariables);
            $expr = jl_AbstractStringBuilder_toString($returnStmt);
        }
        $returnVal.$hasReturn = 1;
        $returnVal.$value0 = $value;
        $returnStmt = tj_JavaTranslator_addTabCount($this);
        $localVariables = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($localVariables);
        jl_AbstractStringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($localVariables, $returnStmt), $rt_s(198)), $expr), 59);
        ju_ArrayList_add($javaPrinter, jl_AbstractStringBuilder_toString($localVariables));
    }
    function tj_JavaTranslator_evalMutation($this, $mutationStmt, $localVariables, $isGlobal, $javaPrinter) {
        var $type, $name, $varType, $value, $list, $expression, $exprJustOne, $elements, $line, $integer, $newVal;
        $type = $mutationStmt.$mutationType;
        $name = $mutationStmt.$varName;
        $varType = tj_Variables_getVariableType($this.$globalVariables0, $name);
        $value = tj_JavaTranslator_evalExpression($this, $mutationStmt.$value23, $localVariables, $isGlobal);
        tj_JavaishVal$JavaishType_$callClinit();
        if ($varType !== tj_JavaishVal$JavaishType_STRINGLIST && $varType !== tj_JavaishVal$JavaishType_BOOLEANLIST && $varType !== tj_JavaishVal$JavaishType_INTLIST && $varType !== tj_JavaishVal$JavaishType_FLOATLIST) {
            $list = tj_Variables_isVariable($localVariables, $name) ? tj_Variables_getVariableValue($localVariables, $name) : tj_Variables_getVariableValue($this.$globalVariables0, $name);
            if ($list === null) {
                tj_Error_VariableNotDeclared($name, $this.$lineNumber0);
                return;
            }
            if ($list.$getType0() === tj_JavaishVal$JavaishType_STRING) {
                tj_Statements$MutationType_$callClinit();
                if ($type !== tj_Statements$MutationType_ADD) {
                    tj_Error_CantPerformMutation($list.$typeString(), $this.$lineNumber0);
                    return;
                }
            }
            $expression = $mutationStmt.$value23;
            $exprJustOne = 0;
            $elements = $expression.$elements.data;
            if ($elements.length == 1) {
                $line = $elements[0].$type0;
                tj_Element$ElementType_$callClinit();
                if ($line === tj_Element$ElementType_INTEGER && $elements[0].$value26 == 1)
                    $exprJustOne = 1;
            }
            a: {
                $line = tj_JavaTranslator_addTabCount($this);
                tj_JavaTranslator$1_$callClinit();
                switch (tj_JavaTranslator$1_$SwitchMap$trackerjo$javaish$Statements$MutationType.data[$type.$ordinal0]) {
                    case 1:
                        if ($exprJustOne) {
                            $mutationStmt = new jl_StringBuilder;
                            jl_AbstractStringBuilder__init_($mutationStmt);
                            jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($mutationStmt, $line), $name), $rt_s(385));
                            $line = jl_AbstractStringBuilder_toString($mutationStmt);
                            break a;
                        }
                        $integer = tj_JavaTranslator_translateExpression($this, $expression, $localVariables, $isGlobal, $javaPrinter);
                        $mutationStmt = new jl_StringBuilder;
                        jl_AbstractStringBuilder__init_($mutationStmt);
                        jl_AbstractStringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($mutationStmt, $line), $name), $rt_s(380)), $integer), 59);
                        $line = jl_AbstractStringBuilder_toString($mutationStmt);
                        break a;
                    case 2:
                        if ($exprJustOne) {
                            $mutationStmt = new jl_StringBuilder;
                            jl_AbstractStringBuilder__init_($mutationStmt);
                            jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($mutationStmt, $line), $name), $rt_s(386));
                            $line = jl_AbstractStringBuilder_toString($mutationStmt);
                            break a;
                        }
                        $integer = tj_JavaTranslator_translateExpression($this, $expression, $localVariables, $isGlobal, $javaPrinter);
                        $mutationStmt = new jl_StringBuilder;
                        jl_AbstractStringBuilder__init_($mutationStmt);
                        jl_AbstractStringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($mutationStmt, $line), $name), $rt_s(387)), $integer), 59);
                        $line = jl_AbstractStringBuilder_toString($mutationStmt);
                        break a;
                    case 3:
                        if (!$exprJustOne) {
                            $mutationStmt = tj_JavaTranslator_translateExpression($this, $expression, $localVariables, $isGlobal, $javaPrinter);
                            $expression = new jl_StringBuilder;
                            jl_AbstractStringBuilder__init_($expression);
                            jl_AbstractStringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($expression, $line), $name), $rt_s(388)), $mutationStmt), 59);
                            $line = jl_AbstractStringBuilder_toString($expression);
                            break a;
                        }
                        $expression = tj_JavaTranslator_translateExpression($this, $expression, $localVariables, $isGlobal, $javaPrinter);
                        $integer = new jl_StringBuilder;
                        jl_AbstractStringBuilder__init_($integer);
                        jl_AbstractStringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($integer, $line), $name), $rt_s(388)), $expression), 59);
                        $line = jl_AbstractStringBuilder_toString($integer);
                        break a;
                    case 4:
                        if (!$exprJustOne) {
                            $mutationStmt = tj_JavaTranslator_translateExpression($this, $expression, $localVariables, $isGlobal, $javaPrinter);
                            $expression = new jl_StringBuilder;
                            jl_AbstractStringBuilder__init_($expression);
                            jl_AbstractStringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($expression, $line), $name), $rt_s(389)), $mutationStmt), 59);
                            $line = jl_AbstractStringBuilder_toString($expression);
                            break a;
                        }
                        $mutationStmt = tj_JavaTranslator_translateExpression($this, $expression, $localVariables, $isGlobal, $javaPrinter);
                        $expression = new jl_StringBuilder;
                        jl_AbstractStringBuilder__init_($expression);
                        jl_AbstractStringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($expression, $line), $name), $rt_s(389)), $mutationStmt), 59);
                        $line = jl_AbstractStringBuilder_toString($expression);
                        break a;
                    default:
                }
            }
            ju_ArrayList_add($javaPrinter, $line);
            $newVal = tj_JavaTranslator_performOperation($this, tj_JavaTranslator_mutationTypeToOperator($this, $type), $list, $value);
            if (tj_Variables_isVariable($localVariables, $name)) {
                tj_Variables_setVariableValue($localVariables, $name, $newVal, $this.$lineNumber0);
                return;
            }
            tj_Variables_setVariableValue($this.$globalVariables0, $name, $newVal, $this.$lineNumber0);
            return;
        }
        $expression = tj_Variables_isVariable($localVariables, $name) ? (tj_Variables_getList($localVariables, $name)).$list : (tj_Variables_getList($this.$globalVariables0, $name)).$list;
        if ($expression === null) {
            tj_Error_VariableNotDeclared($name, $this.$lineNumber0);
            return;
        }
        $list = tj_JavaTranslator_performListOperation($this, tj_JavaTranslator_mutationTypeToOperator($this, $type), $expression, $value, 0);
        $expression = tj_JavaTranslator_addTabCount($this);
        $mutationStmt = tj_JavaTranslator_translateExpression($this, $mutationStmt.$value23, $localVariables, $isGlobal, $javaPrinter);
        $type = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($type);
        jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($type, $expression), $name), $rt_s(390)), $mutationStmt), $rt_s(335));
        ju_ArrayList_add($javaPrinter, jl_AbstractStringBuilder_toString($type));
        if (tj_Variables_isVariable($localVariables, $name)) {
            tj_Variables_setVariableValue($localVariables, $name, tj_JavaishListVal__init_($list), $this.$lineNumber0);
            return;
        }
        tj_Variables_setVariableValue($this.$globalVariables0, $name, tj_JavaishListVal__init_($list), $this.$lineNumber0);
    }
    function tj_JavaTranslator_evalRemoveAt($this, $removeAtStmt, $localVariables, $isGlobal, $javaPrinter) {
        var $name, $varType, $index, $indexVal, $list;
        $name = $removeAtStmt.$listName0;
        $varType = tj_Variables_getVariableType($this.$globalVariables0, $name);
        $index = tj_JavaTranslator_evalExpression($this, $removeAtStmt.$location, $localVariables, $isGlobal);
        tj_JavaishVal$JavaishType_$callClinit();
        if ($varType !== tj_JavaishVal$JavaishType_STRINGLIST && $varType !== tj_JavaishVal$JavaishType_BOOLEANLIST && $varType !== tj_JavaishVal$JavaishType_INTLIST && $varType !== tj_JavaishVal$JavaishType_FLOATLIST) {
            tj_Error_TypeMismatch($rt_s(293), $varType.$name4, $this.$lineNumber0);
            return;
        }
        $varType = tj_Variables_isVariable($localVariables, $name) ? (tj_Variables_getList($localVariables, $name)).$list : (tj_Variables_getList($this.$globalVariables0, $name)).$list;
        if ($varType === null) {
            tj_Error_VariableNotDeclared($name, $this.$lineNumber0);
            return;
        }
        if ($index.$getType0() !== tj_JavaishVal$JavaishType_INT) {
            tj_Error_TypeMismatch($rt_s(187), $index.$typeString(), $this.$lineNumber0);
            return;
        }
        $indexVal = (tj_JavaishInt_getValue($index)).$value;
        tj_JavaTranslator$Operator_$callClinit();
        $list = tj_JavaTranslator_performListOperation($this, tj_JavaTranslator$Operator_REMOVEAT, $varType, null, $indexVal);
        $removeAtStmt = tj_JavaTranslator_addTabCount($this);
        $varType = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($varType);
        jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($varType, $removeAtStmt), $name), $rt_s(391)), $indexVal), $rt_s(335));
        ju_ArrayList_add($javaPrinter, jl_AbstractStringBuilder_toString($varType));
        if (tj_Variables_isVariable($localVariables, $name)) {
            tj_Variables_setVariableValue($localVariables, $name, tj_JavaishListVal__init_($list), $this.$lineNumber0);
            return;
        }
        tj_Variables_setVariableValue($this.$globalVariables0, $name, tj_JavaishListVal__init_($list), $this.$lineNumber0);
    }
    function tj_JavaTranslator_evalRemoveFrom($this, $removeFromStmt, $localVariables, $isGlobal, $javaPrinter) {
        var $name, $varType, $value, var$8, $list, var$10;
        $name = $removeFromStmt.$listName1;
        $varType = tj_Variables_getVariableType($this.$globalVariables0, $name);
        $value = tj_JavaTranslator_evalExpression($this, $removeFromStmt.$value24, $localVariables, $isGlobal);
        tj_JavaishVal$JavaishType_$callClinit();
        if ($varType !== tj_JavaishVal$JavaishType_STRINGLIST && $varType !== tj_JavaishVal$JavaishType_BOOLEANLIST && $varType !== tj_JavaishVal$JavaishType_INTLIST && $varType !== tj_JavaishVal$JavaishType_FLOATLIST)
            return;
        var$8 = tj_Variables_isVariable($localVariables, $name) ? (tj_Variables_getList($localVariables, $name)).$list : (tj_Variables_getList($this.$globalVariables0, $name)).$list;
        if (var$8 === null) {
            tj_Error_VariableNotDeclared($name, $this.$lineNumber0);
            return;
        }
        tj_JavaTranslator$Operator_$callClinit();
        $list = tj_JavaTranslator_performListOperation($this, tj_JavaTranslator$Operator_REMOVEFROM, var$8, $value, 0);
        var$10 = jl_System_out();
        var$8 = $list.$listString();
        $value = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($value);
        jl_StringBuilder_append(jl_StringBuilder_append($value, $rt_s(300)), var$8);
        ji_PrintStream_println(var$10, jl_AbstractStringBuilder_toString($value));
        if ($varType !== tj_JavaishVal$JavaishType_INTLIST) {
            var$8 = tj_JavaTranslator_addTabCount($this);
            $removeFromStmt = tj_JavaTranslator_translateExpression($this, $removeFromStmt.$value24, $localVariables, $isGlobal, $javaPrinter);
            var$10 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_(var$10);
            jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$10, var$8), $name), $rt_s(391)), $removeFromStmt), $rt_s(335));
            ju_ArrayList_add($javaPrinter, jl_AbstractStringBuilder_toString(var$10));
        } else {
            var$8 = tj_JavaTranslator_addTabCount($this);
            $value = tj_JavaTranslator_translateExpression($this, $removeFromStmt.$value24, $localVariables, $isGlobal, $javaPrinter);
            $removeFromStmt = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($removeFromStmt);
            jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($removeFromStmt, var$8), $name), $rt_s(392)), $value), $rt_s(393));
            ju_ArrayList_add($javaPrinter, jl_AbstractStringBuilder_toString($removeFromStmt));
        }
        if (tj_Variables_isVariable($localVariables, $name)) {
            tj_Variables_setVariableValue($localVariables, $name, tj_JavaishListVal__init_($list), $this.$lineNumber0);
            return;
        }
        tj_Variables_setVariableValue($this.$globalVariables0, $name, tj_JavaishListVal__init_($list), $this.$lineNumber0);
    }
    function tj_JavaTranslator_evalRemoveAllFrom($this, $removeAllFromStmt, $localVariables, $isGlobal, $javaPrinter) {
        var $name, $varType, $value, var$8, $list, var$10;
        $name = $removeAllFromStmt.$listName2;
        $varType = tj_Variables_getVariableType($this.$globalVariables0, $name);
        $value = tj_JavaTranslator_evalExpression($this, $removeAllFromStmt.$value25, $localVariables, $isGlobal);
        tj_JavaishVal$JavaishType_$callClinit();
        if ($varType !== tj_JavaishVal$JavaishType_STRINGLIST && $varType !== tj_JavaishVal$JavaishType_BOOLEANLIST && $varType !== tj_JavaishVal$JavaishType_INTLIST && $varType !== tj_JavaishVal$JavaishType_FLOATLIST)
            return;
        var$8 = tj_Variables_isVariable($localVariables, $name) ? (tj_Variables_getList($localVariables, $name)).$list : (tj_Variables_getList($this.$globalVariables0, $name)).$list;
        if (var$8 === null) {
            tj_Error_VariableNotDeclared($name, $this.$lineNumber0);
            return;
        }
        tj_JavaTranslator$Operator_$callClinit();
        $list = tj_JavaTranslator_performListOperation($this, tj_JavaTranslator$Operator_REMOVEALLFROM, var$8, $value, 0);
        $value = jl_System_out();
        var$10 = $list.$listString();
        $varType = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($varType);
        jl_StringBuilder_append(jl_StringBuilder_append($varType, $rt_s(300)), var$10);
        ji_PrintStream_println($value, jl_AbstractStringBuilder_toString($varType));
        var$8 = tj_JavaTranslator_addTabCount($this);
        $value = tj_JavaTranslator_translateExpression($this, $removeAllFromStmt.$value25, $localVariables, $isGlobal, $javaPrinter);
        $removeAllFromStmt = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($removeAllFromStmt);
        jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($removeAllFromStmt, var$8), $name), $rt_s(394)), $value), $rt_s(393));
        ju_ArrayList_add($javaPrinter, jl_AbstractStringBuilder_toString($removeAllFromStmt));
        if (tj_Variables_isVariable($localVariables, $name)) {
            tj_Variables_setVariableValue($localVariables, $name, tj_JavaishListVal__init_($list), $this.$lineNumber0);
            return;
        }
        tj_Variables_setVariableValue($this.$globalVariables0, $name, tj_JavaishListVal__init_($list), $this.$lineNumber0);
    }
    function tj_JavaTranslator_performListOperation($this, $operation, $list, $val, $index) {
        var $result, $listInnerType, $valType, $booleanListVal, $floatListVal, $intVal, $intListVal, $stringListVal, $booleanVal, $i, $stringVal;
        a: {
            $result = null;
            tj_JavaTranslator$1_$callClinit();
            switch (tj_JavaTranslator$1_$SwitchMap$trackerjo$javaish$JavaTranslator$Operator.data[jl_Enum_ordinal($operation)]) {
                case 7:
                    $listInnerType = $list.$getInnerType();
                    $valType = $val.$getType0();
                    if ($listInnerType !== $valType) {
                        tj_Error_TypeMismatch(jl_Enum_toString($listInnerType), jl_Enum_toString($valType), $this.$lineNumber0);
                        return null;
                    }
                    $operation = $list.$getType0();
                    tj_JavaishVal$JavaishType_$callClinit();
                    if ($operation === tj_JavaishVal$JavaishType_BOOLEANLIST) {
                        $booleanListVal = tj_JavaishBooleanList_getList($list);
                        ju_ArrayList_add($booleanListVal, $val);
                        $result = tj_JavaishBooleanList__init_($booleanListVal);
                        break a;
                    }
                    if ($list.$getType0() === tj_JavaishVal$JavaishType_FLOATLIST) {
                        $floatListVal = tj_JavaishFloatList_getList($list);
                        if ($val.$getType0() !== tj_JavaishVal$JavaishType_INT)
                            ju_ArrayList_add($floatListVal, $val);
                        else {
                            $intVal = $val;
                            ju_ArrayList_add($floatListVal, tj_JavaishFloat__init_(jl_Integer_intValue(tj_JavaishInt_getValue($intVal))));
                        }
                        $result = tj_JavaishFloatList__init_($floatListVal);
                        break a;
                    }
                    if ($list.$getType0() === tj_JavaishVal$JavaishType_INTLIST) {
                        $intListVal = tj_JavaishIntList_getList($list);
                        ju_ArrayList_add($intListVal, $val);
                        $result = tj_JavaishIntList__init_($intListVal);
                        break a;
                    }
                    if ($list.$getType0() !== tj_JavaishVal$JavaishType_STRINGLIST)
                        break a;
                    $stringListVal = tj_JavaishStringList_getList($list);
                    ju_ArrayList_add($stringListVal, $val);
                    $result = tj_JavaishStringList__init_($stringListVal);
                    break a;
                case 8:
                case 9:
                case 10:
                    break;
                case 11:
                    $operation = $list.$getType0();
                    tj_JavaishVal$JavaishType_$callClinit();
                    if ($operation === tj_JavaishVal$JavaishType_BOOLEANLIST) {
                        $booleanListVal = tj_JavaishBooleanList_getList($list);
                        ju_ArrayList_remove($booleanListVal, $index);
                        $result = tj_JavaishBooleanList__init_($booleanListVal);
                        break a;
                    }
                    if ($list.$getType0() === tj_JavaishVal$JavaishType_FLOATLIST) {
                        $floatListVal = tj_JavaishFloatList_getList($list);
                        ju_ArrayList_remove($floatListVal, $index);
                        $result = tj_JavaishFloatList__init_($floatListVal);
                        break a;
                    }
                    if ($list.$getType0() === tj_JavaishVal$JavaishType_INTLIST) {
                        $intListVal = tj_JavaishIntList_getList($list);
                        ju_ArrayList_remove($intListVal, $index);
                        $result = tj_JavaishIntList__init_($intListVal);
                        break a;
                    }
                    if ($list.$getType0() !== tj_JavaishVal$JavaishType_STRINGLIST)
                        break a;
                    $stringListVal = tj_JavaishStringList_getList($list);
                    ju_ArrayList_remove($stringListVal, $index);
                    $result = tj_JavaishStringList__init_($stringListVal);
                    break a;
                case 12:
                    $operation = $list.$getType0();
                    tj_JavaishVal$JavaishType_$callClinit();
                    if ($operation === tj_JavaishVal$JavaishType_BOOLEANLIST) {
                        $booleanListVal = tj_JavaishBooleanList_getList($list);
                        $booleanVal = $val;
                        $i = 0;
                        b: {
                            while (true) {
                                if ($i >= ju_ArrayList_size($booleanListVal))
                                    break b;
                                if (tj_JavaishBoolean_getValue(ju_ArrayList_get($booleanListVal, $i)) === tj_JavaishBoolean_getValue($booleanVal))
                                    break;
                                $i = $i + 1 | 0;
                            }
                            ju_ArrayList_remove($booleanListVal, $i);
                        }
                        $result = tj_JavaishBooleanList__init_($booleanListVal);
                        break a;
                    }
                    if ($list.$getType0() === tj_JavaishVal$JavaishType_FLOATLIST) {
                        $floatListVal = tj_JavaishFloatList_getList($list);
                        if ($val.$getType0() !== tj_JavaishVal$JavaishType_INT)
                            $operation = $val;
                        else {
                            $intVal = $val;
                            $operation = tj_JavaishFloat__init_(jl_Integer_intValue(tj_JavaishInt_getValue($intVal)));
                        }
                        $i = 0;
                        c: {
                            while (true) {
                                if ($i >= ju_ArrayList_size($floatListVal))
                                    break c;
                                if (tj_JavaishFloat_getValue(ju_ArrayList_get($floatListVal, $i)) === tj_JavaishFloat_getValue($operation))
                                    break;
                                $i = $i + 1 | 0;
                            }
                            ju_ArrayList_remove($floatListVal, $i);
                        }
                        $result = tj_JavaishFloatList__init_($floatListVal);
                        break a;
                    }
                    if ($list.$getType0() !== tj_JavaishVal$JavaishType_INTLIST) {
                        if ($list.$getType0() !== tj_JavaishVal$JavaishType_STRINGLIST)
                            break a;
                        $stringListVal = tj_JavaishStringList_getList($list);
                        $stringVal = $val;
                        $i = 0;
                        d: {
                            while (true) {
                                if ($i >= ju_ArrayList_size($stringListVal))
                                    break d;
                                if (jl_String_equals(tj_JavaishString_getValue(ju_ArrayList_get($stringListVal, $i)), tj_JavaishString_getValue($stringVal)))
                                    break;
                                $i = $i + 1 | 0;
                            }
                            ju_ArrayList_remove($stringListVal, $i);
                        }
                        $result = tj_JavaishStringList__init_($stringListVal);
                        break a;
                    }
                    $intListVal = tj_JavaishIntList_getList($list);
                    $intVal = $val;
                    $i = 0;
                    e: {
                        while (true) {
                            if ($i >= ju_ArrayList_size($intListVal))
                                break e;
                            if (tj_JavaishInt_getValue(ju_ArrayList_get($intListVal, $i)) === tj_JavaishInt_getValue($intVal))
                                break;
                            $i = $i + 1 | 0;
                        }
                        ju_ArrayList_remove($intListVal, $i);
                    }
                    $result = tj_JavaishIntList__init_($intListVal);
                    $operation = jl_System_out();
                    $list = jl_String_valueOf(tj_JavaishInt_getType($intVal));
                    $index = ju_ArrayList_size($intListVal);
                    $val = jl_StringBuilder__init_();
                    jl_StringBuilder_append0(jl_StringBuilder_append3(jl_StringBuilder_append(jl_StringBuilder_append($val, $rt_s(301)), $list), 32), $index);
                    ji_PrintStream_println($operation, jl_StringBuilder_toString($val));
                    break a;
                case 13:
                    $operation = $list.$getType0();
                    tj_JavaishVal$JavaishType_$callClinit();
                    if ($operation === tj_JavaishVal$JavaishType_BOOLEANLIST) {
                        $booleanListVal = tj_JavaishBooleanList_getList($list);
                        $booleanVal = $val;
                        $i = 0;
                        while ($i < ju_ArrayList_size($booleanListVal)) {
                            if (tj_JavaishBoolean_getValue(ju_ArrayList_get($booleanListVal, $i)) === tj_JavaishBoolean_getValue($booleanVal)) {
                                ju_ArrayList_remove($booleanListVal, $i);
                                $i = $i + (-1) | 0;
                            }
                            $i = $i + 1 | 0;
                        }
                        $result = tj_JavaishBooleanList__init_($booleanListVal);
                        break a;
                    }
                    if ($list.$getType0() === tj_JavaishVal$JavaishType_FLOATLIST) {
                        $floatListVal = tj_JavaishFloatList_getList($list);
                        if ($val.$getType0() !== tj_JavaishVal$JavaishType_INT)
                            $operation = $val;
                        else {
                            $intVal = $val;
                            $operation = tj_JavaishFloat__init_(jl_Integer_intValue(tj_JavaishInt_getValue($intVal)));
                        }
                        $i = 0;
                        while ($i < ju_ArrayList_size($floatListVal)) {
                            if (tj_JavaishFloat_getValue(ju_ArrayList_get($floatListVal, $i)) === tj_JavaishFloat_getValue($operation)) {
                                ju_ArrayList_remove($floatListVal, $i);
                                $i = $i + (-1) | 0;
                            }
                            $i = $i + 1 | 0;
                        }
                        $result = tj_JavaishFloatList__init_($floatListVal);
                        break a;
                    }
                    if ($list.$getType0() === tj_JavaishVal$JavaishType_INTLIST) {
                        $intListVal = tj_JavaishIntList_getList($list);
                        $intVal = $val;
                        $i = 0;
                        while ($i < ju_ArrayList_size($intListVal)) {
                            if (tj_JavaishInt_getValue(ju_ArrayList_get($intListVal, $i)) === tj_JavaishInt_getValue($intVal)) {
                                ju_ArrayList_remove($intListVal, $i);
                                $i = $i + (-1) | 0;
                            }
                            $i = $i + 1 | 0;
                        }
                        $result = tj_JavaishIntList__init_($intListVal);
                        break a;
                    }
                    if ($list.$getType0() !== tj_JavaishVal$JavaishType_STRINGLIST)
                        break a;
                    $stringListVal = tj_JavaishStringList_getList($list);
                    $stringVal = $val;
                    $i = 0;
                    while ($i < ju_ArrayList_size($stringListVal)) {
                        if (jl_String_equals(tj_JavaishString_getValue(ju_ArrayList_get($stringListVal, $i)), tj_JavaishString_getValue($stringVal))) {
                            ju_ArrayList_remove($stringListVal, $i);
                            $i = $i + (-1) | 0;
                        }
                        $i = $i + 1 | 0;
                    }
                    $result = tj_JavaishStringList__init_($stringListVal);
                    break a;
                default:
            }
            tj_Error_CantPerformOperation(jl_Enum_toString($operation), $list.$typeString(), $this.$lineNumber0);
        }
        return $result;
    }
    function tj_JavaTranslator_mutationTypeToOperator($this, $type) {
        tj_JavaTranslator$1_$callClinit();
        switch (tj_JavaTranslator$1_$SwitchMap$trackerjo$javaish$Statements$MutationType.data[$type.$ordinal0]) {
            case 1:
                tj_JavaTranslator$Operator_$callClinit();
                return tj_JavaTranslator$Operator_PLUS;
            case 2:
                tj_JavaTranslator$Operator_$callClinit();
                return tj_JavaTranslator$Operator_MINUS;
            case 3:
                tj_JavaTranslator$Operator_$callClinit();
                return tj_JavaTranslator$Operator_MULTIPLY;
            case 4:
                tj_JavaTranslator$Operator_$callClinit();
                return tj_JavaTranslator$Operator_DIVIDE;
            default:
        }
        return null;
    }
    function tj_JavaTranslator_typeToString($this, $value) {
        tj_JavaTranslator$1_$callClinit();
        switch (tj_JavaTranslator$1_$SwitchMap$trackerjo$javaish$JavaishVal$JavaishType.data[$value.$ordinal0]) {
            case 1:
                break;
            case 2:
                return $rt_s(244);
            case 3:
                return $rt_s(186);
            case 4:
                return $rt_s(395);
            case 5:
                return $rt_s(244);
            case 6:
                return $rt_s(246);
            case 7:
                return $rt_s(186);
            case 8:
                return $rt_s(395);
            case 9:
                return $rt_s(293);
            default:
                return null;
        }
        return $rt_s(246);
    }
    function tj_JavaTranslator_addTabCount($this) {
        var $tabs, $i, var$3;
        $tabs = $rt_s(2);
        $i = 0;
        while ($i < $this.$tabCount) {
            var$3 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_(var$3);
            jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$3, $tabs), 9);
            $tabs = jl_AbstractStringBuilder_toString(var$3);
            $i = $i + 1 | 0;
        }
        return $tabs;
    }
    function tj_PythonTranslator() {
        var a = this; jl_Object.call(a);
        a.$lineNumber1 = 0;
        a.$tabCount0 = 0;
        a.$javaLines0 = null;
        a.$javaImports0 = null;
        a.$usedJOptionPane0 = 0;
        a.$usedList0 = 0;
        a.$usedMessageBox = 0;
        a.$usingRobot = 0;
        a.$usedRMove = 0;
        a.$usedRSpeak = 0;
        a.$usedRPosture = 0;
        a.$usedRLED = 0;
        a.$usedRMemory = 0;
        a.$usedRAudio = 0;
        a.$usedRPhoto = 0;
        a.$usedRSocket = 0;
        a.$robotIP = null;
        a.$projName0 = null;
        a.$globalVariables1 = null;
    }
    function tj_PythonTranslator_getPythonLines($this) {
        var $finalJavaLines, var$2;
        $finalJavaLines = ju_ArrayList__init_();
        var$2 = ju_AbstractList_iterator($this.$javaImports0);
        while (ju_AbstractList$1_hasNext(var$2)) {
            ju_ArrayList_add($finalJavaLines, ju_AbstractList$1_next(var$2));
        }
        var$2 = ju_AbstractList_iterator($this.$javaLines0);
        while (ju_AbstractList$1_hasNext(var$2)) {
            ju_ArrayList_add($finalJavaLines, ju_AbstractList$1_next(var$2));
        }
        return $finalJavaLines;
    }
    function tj_PythonTranslator_interpretFunction($this, $statements, $args, $params, $name, $isGlobal, $doTranslate) {
        var $localVariables, $javaPrinter, $val, $arg, $returnVal, $i, var$13, var$14, var$15, var$16, $arg_0;
        $localVariables = tj_Variables__init_();
        $javaPrinter = $this.$javaLines0;
        if (!$doTranslate)
            $javaPrinter = ju_ArrayList__init_();
        if (!jl_String_equals($name, $rt_s(22)) && $doTranslate) {
            $val = jl_System_out();
            $arg = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($arg);
            jl_StringBuilder_append(jl_StringBuilder_append($arg, $rt_s(396)), $name);
            ji_PrintStream_println($val, jl_AbstractStringBuilder_toString($arg));
            $javaPrinter = $this.$javaLines0;
            $returnVal = tj_PythonTranslator_addTabCount($this);
            $arg = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($arg);
            jl_AbstractStringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($arg, $returnVal), $rt_s(397)), $name), 40);
            $returnVal = jl_AbstractStringBuilder_toString($arg);
            $i = 0;
            while (true) {
                var$13 = $args.data;
                var$14 = var$13.length;
                if ($i >= var$14)
                    break;
                $val = var$13[$i].$name3;
                $arg = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_($arg);
                jl_StringBuilder_append(jl_StringBuilder_append($arg, $returnVal), $val);
                $returnVal = jl_AbstractStringBuilder_toString($arg);
                if ($i != (var$14 - 1 | 0)) {
                    $arg = new jl_StringBuilder;
                    jl_AbstractStringBuilder__init_($arg);
                    jl_StringBuilder_append(jl_StringBuilder_append($arg, $returnVal), $rt_s(56));
                    $returnVal = jl_AbstractStringBuilder_toString($arg);
                }
                $i = $i + 1 | 0;
            }
            $arg = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($arg);
            jl_StringBuilder_append(jl_StringBuilder_append($arg, $returnVal), $rt_s(398));
            ju_ArrayList_add($javaPrinter, jl_AbstractStringBuilder_toString($arg));
            $this.$tabCount0 = $this.$tabCount0 + 1 | 0;
        }
        a: {
            if ($args !== null && $params !== null) {
                b: {
                    $args = $args.data;
                    $params = $params.data;
                    var$15 = $args.length;
                    var$16 = $params.length;
                    if (var$15 != var$16) {
                        tj_Error_ArgumentLengthMismatch($name, $this.$lineNumber1, var$15, var$16);
                        var$14 = 0;
                        while (true) {
                            if (var$14 >= var$15)
                                break b;
                            var$14 = var$14 + 1 | 0;
                        }
                    }
                }
                $i = 0;
                while (true) {
                    if ($i >= var$16)
                        break a;
                    $val = $params[$i];
                    $arg_0 = $args[$i];
                    if ($arg_0.$type !== $val.$getType0())
                        break;
                    tj_Variables_addVariable($localVariables, $arg_0.$name3, $arg_0.$type, $val, $this.$lineNumber1);
                    $i = $i + 1 | 0;
                }
                tj_Error_ArgumentTypeMismatch($name, $this.$lineNumber1, $arg_0.$type.$name4, $val.$typeString());
                return null;
            }
        }
        $arg_0 = jl_System_out();
        var$14 = $this.$tabCount0;
        $arg = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($arg);
        jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($arg, $rt_s(399)), $name), $rt_s(400)), var$14);
        ji_PrintStream_println($arg_0, jl_AbstractStringBuilder_toString($arg));
        $returnVal = tj_PythonTranslator_interpretBody($this, $statements, $localVariables, $isGlobal, $javaPrinter);
        if (!jl_String_equals($name, $rt_s(22)) && $doTranslate)
            $this.$tabCount0 = $this.$tabCount0 - 1 | 0;
        if ($returnVal !== null)
            return $returnVal;
        return null;
    }
    function tj_PythonTranslator_interpretBody($this, $statements, $funcVariables, $isGlobal, $javaPrinter) {
        var $pastResult, $localVariables, $returnVal, var$8, $statement, var$10, var$11, var$12, var$13, var$14, var$15;
        $pastResult = tj_Result__init_(0);
        $localVariables = tj_Variables__init_0($funcVariables);
        $returnVal = tj_Return__init_(0, null);
        var$8 = ju_AbstractList_iterator($statements);
        while (true) {
            if (!ju_AbstractList$1_hasNext(var$8)) {
                if (!$returnVal.$hasReturn)
                    return null;
                return tj_Return_getValue($returnVal);
            }
            $statement = ju_AbstractList$1_next(var$8);
            if ($returnVal.$hasReturn)
                break;
            a: {
                $this.$lineNumber1 = $statement.$getLine();
                tj_PythonTranslator$1_$callClinit();
                switch (tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$Statements$StmtType.data[$statement.$type1.$ordinal0]) {
                    case 1:
                        $funcVariables = $statement;
                        var$10 = $funcVariables.$name16;
                        $statements = tj_PythonTranslator_evalExpression($this, $funcVariables.$value16, $localVariables, $isGlobal);
                        $funcVariables = tj_PythonTranslator_translateExpression($this, $funcVariables.$value16, $localVariables, $isGlobal, $javaPrinter);
                        $statement = jl_System_out();
                        var$11 = jl_String_valueOf($statements.$getValue0());
                        var$12 = $this.$tabCount0;
                        var$13 = new jl_StringBuilder;
                        jl_AbstractStringBuilder__init_(var$13);
                        jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$13, $rt_s(401)), var$10), $rt_s(299)), var$11), $rt_s(402)), var$12);
                        ji_PrintStream_println($statement, jl_AbstractStringBuilder_toString(var$13));
                        $statement = tj_PythonTranslator_addTabCount($this);
                        var$11 = new jl_StringBuilder;
                        jl_AbstractStringBuilder__init_(var$11);
                        jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$11, $statement), var$10), $rt_s(333)), $funcVariables);
                        ju_ArrayList_add($javaPrinter, jl_AbstractStringBuilder_toString(var$11));
                        if (tj_Variables_isVariable($localVariables, var$10))
                            tj_Variables_setVariableValue($localVariables, var$10, $statements, $this.$lineNumber1);
                        else
                            tj_Variables_setVariableValue($this.$globalVariables1, var$10, $statements, $this.$lineNumber1);
                        break a;
                    case 2:
                        var$13 = $statement.$comment;
                        $statements = jl_System_out();
                        var$12 = $this.$tabCount0;
                        $funcVariables = new jl_StringBuilder;
                        jl_AbstractStringBuilder__init_($funcVariables);
                        jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($funcVariables, $rt_s(403)), var$13), $rt_s(402)), var$12);
                        ji_PrintStream_println($statements, jl_AbstractStringBuilder_toString($funcVariables));
                        $statements = jl_String_substring0(var$13, 2);
                        $funcVariables = tj_PythonTranslator_addTabCount($this);
                        $statement = new jl_StringBuilder;
                        jl_AbstractStringBuilder__init_($statement);
                        $funcVariables = jl_StringBuilder_append($statement, $funcVariables);
                        jl_AbstractStringBuilder_append($funcVariables, 35);
                        jl_StringBuilder_append($funcVariables, $statements);
                        ju_ArrayList_add($javaPrinter, jl_AbstractStringBuilder_toString($statement));
                        break a;
                    case 3:
                        $statements = $statement;
                        $statement = $statements.$name17;
                        var$14 = $statements.$params0.data;
                        $statements = tj_PythonTranslator_addTabCount($this);
                        $funcVariables = new jl_StringBuilder;
                        jl_AbstractStringBuilder__init_($funcVariables);
                        jl_AbstractStringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($funcVariables, $statements), $statement), 40);
                        $statements = jl_AbstractStringBuilder_toString($funcVariables);
                        var$12 = var$14.length;
                        var$15 = 0;
                        while (var$15 < var$12) {
                            $funcVariables = var$14[var$15];
                            if ($funcVariables === null) {
                                $funcVariables = new jl_StringBuilder;
                                jl_AbstractStringBuilder__init_($funcVariables);
                                jl_StringBuilder_append(jl_StringBuilder_append($funcVariables, $statements), $rt_s(334));
                                $statements = jl_AbstractStringBuilder_toString($funcVariables);
                            } else {
                                $funcVariables = tj_PythonTranslator_translateExpression($this, $funcVariables, $localVariables, $isGlobal, $javaPrinter);
                                $statement = new jl_StringBuilder;
                                jl_AbstractStringBuilder__init_($statement);
                                jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($statement, $statements), $funcVariables), $rt_s(56));
                                $statements = jl_AbstractStringBuilder_toString($statement);
                            }
                            var$15 = var$15 + 1 | 0;
                        }
                        $statements = jl_String_substring($statements, 0, jl_String_length($statements) - 2 | 0);
                        $funcVariables = new jl_StringBuilder;
                        jl_AbstractStringBuilder__init_($funcVariables);
                        jl_AbstractStringBuilder_append(jl_StringBuilder_append($funcVariables, $statements), 41);
                        ju_ArrayList_add($javaPrinter, jl_AbstractStringBuilder_toString($funcVariables));
                        break a;
                    case 4:
                        break;
                    case 5:
                        $statement = $statement.$body;
                        $funcVariables = ju_ArrayList_get($javaPrinter, $javaPrinter.$size0 - 1 | 0);
                        $statements = new jl_StringBuilder;
                        jl_AbstractStringBuilder__init_($statements);
                        jl_StringBuilder_append(jl_StringBuilder_append($statements, $funcVariables), $rt_s(404));
                        $statements = jl_AbstractStringBuilder_toString($statements);
                        ju_ArrayList_remove($javaPrinter, $javaPrinter.$size0 - 1 | 0);
                        ju_ArrayList_add($javaPrinter, $statements);
                        $this.$tabCount0 = $this.$tabCount0 + 1 | 0;
                        tj_PythonTranslator_interpretBody($this, $statement, $localVariables, 0, $javaPrinter);
                        $this.$tabCount0 = $this.$tabCount0 - 1 | 0;
                        ju_ArrayList_add($javaPrinter, $statements);
                        break a;
                    case 6:
                        $statements = $statement;
                        $funcVariables = $statements.$condition;
                        var$11 = $statements.$body;
                        $statements = tj_PythonTranslator_translateExpression($this, $funcVariables, $localVariables, $isGlobal, $javaPrinter);
                        $funcVariables = new jl_StringBuilder;
                        jl_AbstractStringBuilder__init_($funcVariables);
                        jl_AbstractStringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($funcVariables, $rt_s(405)), $statements), 58);
                        $statement = jl_AbstractStringBuilder_toString($funcVariables);
                        $statements = ju_ArrayList_get($javaPrinter, $javaPrinter.$size0 - 1 | 0);
                        $funcVariables = jl_StringBuilder__init_();
                        jl_StringBuilder_append(jl_StringBuilder_append($funcVariables, $statements), $statement);
                        $statements = jl_StringBuilder_toString($funcVariables);
                        ju_ArrayList_remove($javaPrinter, ju_ArrayList_size($javaPrinter) - 1 | 0);
                        ju_ArrayList_add($javaPrinter, $statements);
                        $this.$tabCount0 = $this.$tabCount0 + 1 | 0;
                        tj_PythonTranslator_interpretBody($this, var$11, $localVariables, 0, $javaPrinter);
                        $this.$tabCount0 = $this.$tabCount0 - 1 | 0;
                        ju_ArrayList_add($javaPrinter, $statements);
                        break a;
                    case 7:
                        tj_PythonTranslator_evalMutation($this, $statement, $localVariables, $isGlobal, $javaPrinter);
                        break a;
                    case 8:
                        tj_PythonTranslator_evalReturn($this, $statement, $localVariables, $returnVal, $isGlobal, $javaPrinter);
                        break a;
                    case 9:
                        tj_PythonTranslator_evalFunction($this, $statement, $localVariables, $isGlobal);
                        break a;
                    case 10:
                        tj_PythonTranslator_evalIf($this, $statement, $localVariables, $isGlobal, $pastResult, $javaPrinter);
                        break a;
                    case 11:
                        tj_PythonTranslator_evalWhile($this, $statement, $localVariables, $isGlobal, $javaPrinter);
                        break a;
                    case 12:
                        tj_PythonTranslator_evalForEach($this, $statement, $localVariables, $isGlobal, $javaPrinter);
                        break a;
                    case 13:
                        tj_PythonTranslator_evalForWhen($this, $statement, $localVariables, $isGlobal, $javaPrinter);
                        break a;
                    case 14:
                        tj_PythonTranslator_evalPrint($this, $statement, $localVariables, $isGlobal, $javaPrinter);
                        break a;
                    case 15:
                        tj_PythonTranslator_evalShowMsgBox($this, $statement, $localVariables, $isGlobal, $javaPrinter);
                        break a;
                    case 16:
                        tj_PythonTranslator_evalRemoveAt($this, $statement, $localVariables, $isGlobal, $javaPrinter);
                        break a;
                    case 17:
                        tj_PythonTranslator_evalRemoveFrom($this, $statement, $localVariables, $isGlobal, $javaPrinter);
                        break a;
                    case 18:
                        tj_PythonTranslator_evalRemoveAllFrom($this, $statement, $localVariables, $isGlobal, $javaPrinter);
                        break a;
                    case 19:
                        tj_PythonTranslator_evalImport($this, $statement, $javaPrinter);
                        break a;
                    case 20:
                        tj_PythonTranslator_evalRobot($this, $statement, $localVariables, $isGlobal, $javaPrinter);
                        break a;
                    default:
                        break a;
                }
                tj_PythonTranslator_evalDeclaration($this, $statement, $localVariables, $isGlobal, $javaPrinter);
            }
        }
        return tj_Return_getValue($returnVal);
    }
    function tj_PythonTranslator_evalRobot($this, $robotStmt, $localVariables, $isGlobal, $javaPrinter) {
        var $type, var$6, var$7, $newExpression, $expression, $count, var$11, $expression2, $valM, $valS, $blinkDuration, $picturePath, $twinkleDuration, $twinkleOnDuration, $twinkleOffDuration, var$20, $randomEyesDuration, $pictureName;
        $type = tj_RobotStmt_getRobotType($robotStmt);
        var$6 = (tj_RobotStmt_getValue($robotStmt)).data;
        var$7 = var$6.length;
        $newExpression = $rt_createArray(tj_Expression, var$7);
        $expression = $newExpression.data;
        $count = 0;
        var$11 = 0;
        while (var$11 < var$7) {
            $expression2 = var$6[var$11];
            if ($expression2 !== null) {
                $expression[$count] = $expression2;
                $count = $count + 1 | 0;
            }
            var$11 = var$11 + 1 | 0;
        }
        a: {
            $expression = ju_Arrays_copyOf($newExpression, $count);
            tj_PythonTranslator$1_$callClinit();
            switch (tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$Statements$RobotType.data[jl_Enum_ordinal($type)]) {
                case 1:
                    $expression = $expression.data;
                    if (!$expression.length)
                        tj_Error_InvalidFunctionCall($rt_s(406), $this.$lineNumber1, $rt_s(407), $rt_s(408));
                    $valM = tj_PythonTranslator_translateExpression($this, $expression[0], $localVariables, $isGlobal, $javaPrinter);
                    if (!$this.$usedRMove) {
                        $type = $this.$robotIP;
                        $robotStmt = jl_StringBuilder__init_();
                        jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($robotStmt, $rt_s(409)), $type), $rt_s(410));
                        ju_ArrayList_add($javaPrinter, jl_StringBuilder_toString($robotStmt));
                        ju_ArrayList_add($javaPrinter, $rt_s(411));
                        $this.$usedRMove = 1;
                    }
                    ju_ArrayList_add($javaPrinter, $rt_s(412));
                    $robotStmt = jl_StringBuilder__init_();
                    jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($robotStmt, $rt_s(413)), $valM), $rt_s(414));
                    ju_ArrayList_add($javaPrinter, jl_StringBuilder_toString($robotStmt));
                    break a;
                case 2:
                    $expression = $expression.data;
                    if (!$expression.length)
                        tj_Error_InvalidFunctionCall($rt_s(406), $this.$lineNumber1, $rt_s(407), $rt_s(408));
                    $valS = tj_PythonTranslator_translateExpression($this, $expression[0], $localVariables, $isGlobal, $javaPrinter);
                    if (!$this.$usedRSpeak) {
                        $type = $this.$robotIP;
                        $robotStmt = jl_StringBuilder__init_();
                        jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($robotStmt, $rt_s(415)), $type), $rt_s(410));
                        ju_ArrayList_add($javaPrinter, jl_StringBuilder_toString($robotStmt));
                        $this.$usedRSpeak = 1;
                    }
                    $robotStmt = jl_StringBuilder__init_();
                    jl_StringBuilder_append3(jl_StringBuilder_append(jl_StringBuilder_append($robotStmt, $rt_s(416)), $valS), 41);
                    ju_ArrayList_add($javaPrinter, jl_StringBuilder_toString($robotStmt));
                    break a;
                case 3:
                    break;
                case 4:
                    if (!$this.$usedRPosture) {
                        $type = $this.$robotIP;
                        $robotStmt = jl_StringBuilder__init_();
                        jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($robotStmt, $rt_s(417)), $type), $rt_s(410));
                        ju_ArrayList_add($javaPrinter, jl_StringBuilder_toString($robotStmt));
                        $this.$usedRPosture = 1;
                    }
                    ju_ArrayList_add($javaPrinter, $rt_s(418));
                    break a;
                case 5:
                    if (!$this.$usedRLED) {
                        ju_ArrayList_add($this.$javaImports0, $rt_s(419));
                        $expression2 = $this.$robotIP;
                        $robotStmt = jl_StringBuilder__init_();
                        jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($robotStmt, $rt_s(420)), $expression2), $rt_s(410));
                        ju_ArrayList_add($javaPrinter, jl_StringBuilder_toString($robotStmt));
                        $this.$usedRLED = 1;
                    }
                    $expression = $expression.data;
                    $blinkDuration = $rt_s(421);
                    if ($expression.length > 0) {
                        $expression2 = jl_System_out();
                        $picturePath = jl_String_valueOf($expression[0]);
                        $robotStmt = jl_StringBuilder__init_();
                        jl_StringBuilder_append(jl_StringBuilder_append($robotStmt, $rt_s(422)), $picturePath);
                        ji_PrintStream_println($expression2, jl_StringBuilder_toString($robotStmt));
                        $blinkDuration = tj_PythonTranslator_translateExpression($this, $expression[0], $localVariables, $isGlobal, $javaPrinter);
                    }
                    $robotStmt = jl_StringBuilder__init_();
                    jl_StringBuilder_append(jl_StringBuilder_append($robotStmt, $rt_s(423)), $blinkDuration);
                    ju_ArrayList_add($javaPrinter, jl_StringBuilder_toString($robotStmt));
                    ju_ArrayList_add($javaPrinter, $rt_s(424));
                    ju_ArrayList_add($javaPrinter, $rt_s(425));
                    ju_ArrayList_add($javaPrinter, $rt_s(426));
                    ju_ArrayList_add($javaPrinter, $rt_s(427));
                    ju_ArrayList_add($javaPrinter, $rt_s(428));
                    ju_ArrayList_add($javaPrinter, $rt_s(429));
                    ju_ArrayList_add($javaPrinter, $rt_s(430));
                    ju_ArrayList_add($javaPrinter, $rt_s(431));
                    ju_ArrayList_add($javaPrinter, $rt_s(432));
                    ju_ArrayList_add($javaPrinter, $rt_s(433));
                    break a;
                case 6:
                    if (!$this.$usedRLED) {
                        ju_ArrayList_add($this.$javaImports0, $rt_s(419));
                        $expression2 = $this.$robotIP;
                        $robotStmt = jl_StringBuilder__init_();
                        jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($robotStmt, $rt_s(420)), $expression2), $rt_s(410));
                        ju_ArrayList_add($javaPrinter, jl_StringBuilder_toString($robotStmt));
                        $this.$usedRLED = 1;
                    }
                    $expression = $expression.data;
                    $twinkleDuration = $rt_s(434);
                    $twinkleOnDuration = $rt_s(421);
                    $twinkleOffDuration = $rt_s(421);
                    var$20 = $expression.length;
                    if (var$20 > 0)
                        $twinkleDuration = tj_PythonTranslator_translateExpression($this, $expression[0], $localVariables, $isGlobal, $javaPrinter);
                    if (var$20 > 1)
                        $twinkleOnDuration = tj_PythonTranslator_translateExpression($this, $expression[1], $localVariables, $isGlobal, $javaPrinter);
                    if (var$20 > 2)
                        $twinkleOffDuration = tj_PythonTranslator_translateExpression($this, $expression[2], $localVariables, $isGlobal, $javaPrinter);
                    $robotStmt = jl_StringBuilder__init_();
                    jl_StringBuilder_append(jl_StringBuilder_append($robotStmt, $rt_s(423)), $twinkleDuration);
                    ju_ArrayList_add($javaPrinter, jl_StringBuilder_toString($robotStmt));
                    ju_ArrayList_add($javaPrinter, $rt_s(435));
                    $robotStmt = jl_StringBuilder__init_();
                    jl_StringBuilder_append3(jl_StringBuilder_append(jl_StringBuilder_append($robotStmt, $rt_s(436)), $twinkleOnDuration), 41);
                    ju_ArrayList_add($javaPrinter, jl_StringBuilder_toString($robotStmt));
                    $robotStmt = jl_StringBuilder__init_();
                    jl_StringBuilder_append3(jl_StringBuilder_append(jl_StringBuilder_append($robotStmt, $rt_s(437)), $twinkleOnDuration), 41);
                    ju_ArrayList_add($javaPrinter, jl_StringBuilder_toString($robotStmt));
                    $robotStmt = jl_StringBuilder__init_();
                    jl_StringBuilder_append3(jl_StringBuilder_append(jl_StringBuilder_append($robotStmt, $rt_s(438)), $twinkleOffDuration), 41);
                    ju_ArrayList_add($javaPrinter, jl_StringBuilder_toString($robotStmt));
                    $robotStmt = jl_StringBuilder__init_();
                    jl_StringBuilder_append3(jl_StringBuilder_append(jl_StringBuilder_append($robotStmt, $rt_s(437)), $twinkleOffDuration), 41);
                    ju_ArrayList_add($javaPrinter, jl_StringBuilder_toString($robotStmt));
                    $robotStmt = jl_StringBuilder__init_();
                    jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($robotStmt, $rt_s(439)), $twinkleOnDuration), $rt_s(360)), $twinkleOffDuration);
                    ju_ArrayList_add($javaPrinter, jl_StringBuilder_toString($robotStmt));
                    ju_ArrayList_add($javaPrinter, $rt_s(440));
                    break a;
                case 7:
                    if (!$this.$usedRLED) {
                        ju_ArrayList_add($this.$javaImports0, $rt_s(419));
                        ju_ArrayList_add($this.$javaImports0, $rt_s(441));
                        $expression2 = $this.$robotIP;
                        $robotStmt = jl_StringBuilder__init_();
                        jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($robotStmt, $rt_s(420)), $expression2), $rt_s(410));
                        ju_ArrayList_add($javaPrinter, jl_StringBuilder_toString($robotStmt));
                        $this.$usedRLED = 1;
                    }
                    $expression = $expression.data;
                    $randomEyesDuration = $rt_s(434);
                    if ($expression.length > 0)
                        $randomEyesDuration = tj_PythonTranslator_translateExpression($this, $expression[0], $localVariables, $isGlobal, $javaPrinter);
                    $robotStmt = jl_StringBuilder__init_();
                    jl_StringBuilder_append(jl_StringBuilder_append($robotStmt, $rt_s(423)), $randomEyesDuration);
                    ju_ArrayList_add($javaPrinter, jl_StringBuilder_toString($robotStmt));
                    ju_ArrayList_add($javaPrinter, $rt_s(435));
                    ju_ArrayList_add($javaPrinter, $rt_s(442));
                    ju_ArrayList_add($javaPrinter, $rt_s(443));
                    ju_ArrayList_add($javaPrinter, $rt_s(444));
                    ju_ArrayList_add($javaPrinter, $rt_s(445));
                    break a;
                case 8:
                    if (!$this.$usedRPosture) {
                        $type = $this.$robotIP;
                        $robotStmt = jl_StringBuilder__init_();
                        jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($robotStmt, $rt_s(417)), $type), $rt_s(410));
                        ju_ArrayList_add($javaPrinter, jl_StringBuilder_toString($robotStmt));
                        $this.$usedRPosture = 1;
                    }
                    ju_ArrayList_add($javaPrinter, $rt_s(446));
                    break a;
                case 9:
                    if (!$this.$usedRPosture) {
                        $type = $this.$robotIP;
                        $robotStmt = jl_StringBuilder__init_();
                        jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($robotStmt, $rt_s(417)), $type), $rt_s(410));
                        ju_ArrayList_add($javaPrinter, jl_StringBuilder_toString($robotStmt));
                        $this.$usedRPosture = 1;
                    }
                    ju_ArrayList_add($javaPrinter, $rt_s(447));
                    break a;
                case 10:
                    if (!$this.$usedRPosture) {
                        $type = $this.$robotIP;
                        $robotStmt = jl_StringBuilder__init_();
                        jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($robotStmt, $rt_s(417)), $type), $rt_s(410));
                        ju_ArrayList_add($javaPrinter, jl_StringBuilder_toString($robotStmt));
                        $this.$usedRPosture = 1;
                    }
                    ju_ArrayList_add($javaPrinter, $rt_s(448));
                    break a;
                case 11:
                    $expression = $expression.data;
                    $picturePath = $rt_s(449);
                    var$20 = $expression.length;
                    if (var$20 > 0)
                        $picturePath = tj_PythonTranslator_translateExpression($this, $expression[0], $localVariables, $isGlobal, $javaPrinter);
                    $pictureName = $rt_s(450);
                    if (var$20 > 1)
                        $pictureName = tj_PythonTranslator_translateExpression($this, $expression[1], $localVariables, $isGlobal, $javaPrinter);
                    if (!$this.$usedRPhoto) {
                        $type = $this.$robotIP;
                        $robotStmt = jl_StringBuilder__init_();
                        jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($robotStmt, $rt_s(451)), $type), $rt_s(410));
                        ju_ArrayList_add($javaPrinter, jl_StringBuilder_toString($robotStmt));
                        $this.$usedRPhoto = 1;
                    }
                    ju_ArrayList_add($javaPrinter, $rt_s(452));
                    ju_ArrayList_add($javaPrinter, $rt_s(453));
                    ju_ArrayList_add($javaPrinter, $rt_s(454));
                    $robotStmt = jl_StringBuilder__init_();
                    jl_StringBuilder_append3(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($robotStmt, $rt_s(455)), $picturePath), $rt_s(56)), $pictureName), 41);
                    ju_ArrayList_add($javaPrinter, jl_StringBuilder_toString($robotStmt));
                    break a;
                default:
                    break a;
            }
            if (!$this.$usedRPosture) {
                $type = $this.$robotIP;
                $robotStmt = jl_StringBuilder__init_();
                jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($robotStmt, $rt_s(417)), $type), $rt_s(410));
                ju_ArrayList_add($javaPrinter, jl_StringBuilder_toString($robotStmt));
                $this.$usedRPosture = 1;
            }
            ju_ArrayList_add($javaPrinter, $rt_s(456));
        }
    }
    function tj_PythonTranslator_evalRobotElmt($this, $robotStmt, $localVariables, $isGlobal, $javaPrinter) {
        var $type;
        a: {
            $type = $robotStmt.$action;
            $robotStmt = $robotStmt.$params1;
            ju_AbstractCollection_toArray($robotStmt, $rt_createArray(tj_Expression, $robotStmt.$size0));
            tj_PythonTranslator$1_$callClinit();
            switch (tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$Statements$RobotType.data[$type.$ordinal0]) {
                case 1:
                    break;
                case 2:
                    tj_Error_FunctionHasNoReturn($rt_s(457), $this.$lineNumber1);
                    break a;
                case 3:
                    if (!$this.$usedRPosture) {
                        $robotStmt = $this.$robotIP;
                        $localVariables = new jl_StringBuilder;
                        jl_AbstractStringBuilder__init_($localVariables);
                        jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($localVariables, $rt_s(417)), $robotStmt), $rt_s(410));
                        ju_ArrayList_add($javaPrinter, jl_AbstractStringBuilder_toString($localVariables));
                        $this.$usedRPosture = 1;
                    }
                    return $rt_s(456);
                case 4:
                    if (!$this.$usedRPosture) {
                        $robotStmt = $this.$robotIP;
                        $localVariables = new jl_StringBuilder;
                        jl_AbstractStringBuilder__init_($localVariables);
                        jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($localVariables, $rt_s(417)), $robotStmt), $rt_s(410));
                        ju_ArrayList_add($javaPrinter, jl_AbstractStringBuilder_toString($localVariables));
                        $this.$usedRPosture = 1;
                    }
                    return $rt_s(418);
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                    break a;
                case 12:
                    if (!$this.$usedRMemory) {
                        $robotStmt = $this.$robotIP;
                        $localVariables = new jl_StringBuilder;
                        jl_AbstractStringBuilder__init_($localVariables);
                        jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($localVariables, $rt_s(458)), $robotStmt), $rt_s(410));
                        ju_ArrayList_add($javaPrinter, jl_AbstractStringBuilder_toString($localVariables));
                        $this.$usedRMemory = 1;
                    }
                    return $rt_s(459);
                case 13:
                    if (!$this.$usedRAudio) {
                        $robotStmt = $this.$robotIP;
                        $localVariables = new jl_StringBuilder;
                        jl_AbstractStringBuilder__init_($localVariables);
                        jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($localVariables, $rt_s(460)), $robotStmt), $rt_s(410));
                        ju_ArrayList_add($javaPrinter, jl_AbstractStringBuilder_toString($localVariables));
                        $this.$usedRAudio = 1;
                    }
                    return $rt_s(461);
                case 14:
                    if (!$this.$usedRSocket) {
                        ju_ArrayList_add($this.$javaImports0, $rt_s(462));
                        $this.$usedRMemory = 1;
                    }
                    return $rt_s(463);
                default:
                    break a;
            }
            tj_Error_FunctionHasNoReturn($rt_s(457), $this.$lineNumber1);
        }
        return $rt_s(2);
    }
    function tj_PythonTranslator_evalImport($this, $importStmt, $javaPrinter) {
        $this.$usingRobot = 1;
        ju_ArrayList_add($this.$javaImports0, $rt_s(464));
    }
    function tj_PythonTranslator_evalExpression($this, $expression, $localVariables, $isGlobal) {
        var $total, $operation, $comparison, $compVal, $isComp, $rtype, $listVal, $expressionElmt, var$12, var$13, var$14, $elmt, $robotAction, $result, $valNot, $bool, $valB, $cast, $val, $newVal, $floatElmt, $valF, $integer, $valI, $string, $valS, $function, $body, $args, $params, $paramVals, $listLength, var$36, $valFunc, $input, $index, $listValVal, $arrayName, $listL, $length, $resultO, $variable, $list, $type, $listExpressions, $listVals, $intList, $listValI, $intListVal, $floatList, $floatListVal, $stringList,
        $stringListVal, $booleanList, $booleanListVal, $$je;
        $total = null;
        $operation = null;
        $comparison = null;
        $compVal = null;
        $isComp = 0;
        $rtype = jl_System_out();
        $listVal = tj_Expression_toString($expression);
        $expressionElmt = jl_StringBuilder__init_();
        jl_StringBuilder_append(jl_StringBuilder_append($expressionElmt, $rt_s(465)), $listVal);
        ji_PrintStream_println($rtype, jl_StringBuilder_toString($expressionElmt));
        var$12 = (tj_Expression_getElements($expression)).data;
        var$13 = var$12.length;
        var$14 = 0;
        a: while (true) {
            if (var$14 >= var$13) {
                if (!$isComp)
                    return $total;
                return tj_PythonTranslator_performComparision($this, $comparison, $total, $compVal);
            }
            b: {
                c: {
                    d: {
                        e: {
                            f: {
                                $elmt = var$12[var$14];
                                $robotAction = jl_System_out();
                                $rtype = jl_String_valueOf(tj_Element_getType($elmt));
                                $expression = jl_StringBuilder__init_();
                                jl_StringBuilder_append(jl_StringBuilder_append($expression, $rt_s(466)), $rtype);
                                ji_PrintStream_println($robotAction, jl_StringBuilder_toString($expression));
                                tj_PythonTranslator$1_$callClinit();
                                switch (tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element_getType($elmt))]) {
                                    case 1:
                                        $result = tj_PythonTranslator_performComparision($this, $comparison, $total, $compVal);
                                        if ($result === null)
                                            break a;
                                        if (!jl_Boolean_booleanValue(tj_JavaishBoolean_getValue($result)))
                                            return tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                        $total = null;
                                        $operation = null;
                                        $comparison = null;
                                        $compVal = null;
                                        $isComp = 0;
                                        break b;
                                    case 2:
                                        $valNot = tj_PythonTranslator_evalExpression($this, $elmt.$expression0, $localVariables, $isGlobal);
                                        if (!($valNot instanceof tj_JavaishBoolean)) {
                                            tj_Error_TypeMismatch($rt_s(185), $valNot.$typeString(), $this.$lineNumber1);
                                            break b;
                                        }
                                        $expression = jl_Boolean_booleanValue(tj_JavaishBoolean_getValue($valNot)) != 1 ? tj_JavaishBoolean__init_(jl_Boolean_valueOf(1)) : tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                        if (!$isComp)
                                            $total = tj_PythonTranslator_performOperation($this, $operation, $total, $expression);
                                        else
                                            $compVal = tj_PythonTranslator_performOperation($this, $operation, $compVal, $expression);
                                        break b;
                                    case 3:
                                        $bool = $elmt;
                                        $valB = tj_JavaishBoolean__init_(jl_Boolean_valueOf(tj_BoolElmt_getValue($bool)));
                                        if (!$isComp) {
                                            $total = tj_PythonTranslator_performOperation($this, $operation, $total, $valB);
                                            break b;
                                        }
                                        $compVal = tj_PythonTranslator_performOperation($this, $operation, $compVal, $valB);
                                        break b;
                                    case 4:
                                        g: {
                                            $cast = $elmt;
                                            $val = tj_PythonTranslator_evalExpression($this, $cast.$element, $localVariables, $isGlobal);
                                            switch (tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$JavaishVal$JavaishType.data[jl_Enum_ordinal($cast.$castType)]) {
                                                case 1:
                                                    if ($val instanceof tj_JavaishFloat) {
                                                        $robotAction = $val;
                                                        break g;
                                                    }
                                                    try {
                                                        $expressionElmt = $val;
                                                        if ($val instanceof tj_JavaishInt) {
                                                            $expressionElmt = $val;
                                                            $robotAction = new tj_JavaishFloat;
                                                            $expressionElmt = $robotAction;
                                                            tj_JavaishFloat__init_0($robotAction, jl_Integer_intValue(tj_JavaishInt_getValue($val)));
                                                        } else {
                                                            $expressionElmt = $val;
                                                            if (!($val instanceof tj_JavaishString))
                                                                $robotAction = $val;
                                                            else {
                                                                $expressionElmt = $val;
                                                                $robotAction = new tj_JavaishFloat;
                                                                $expressionElmt = $robotAction;
                                                                tj_JavaishFloat__init_0($robotAction, jl_Float_parseFloat(tj_JavaishString_getValue($val)));
                                                            }
                                                        }
                                                        break g;
                                                    } catch ($$e) {
                                                        $$je = $rt_wrapException($$e);
                                                        if ($$je instanceof jl_Exception) {
                                                        } else {
                                                            throw $$e;
                                                        }
                                                    }
                                                    tj_Error_UnableToParse($rt_s(184), $this.$lineNumber1, $expressionElmt.$typeString());
                                                    $robotAction = $expressionElmt;
                                                    break g;
                                                case 2:
                                                    $expression = jl_System_out();
                                                    $expressionElmt = $val.$typeString();
                                                    $robotAction = jl_StringBuilder__init_();
                                                    jl_StringBuilder_append(jl_StringBuilder_append($robotAction, $rt_s(340)), $expressionElmt);
                                                    ji_PrintStream_println($expression, jl_StringBuilder_toString($robotAction));
                                                    if ($val instanceof tj_JavaishInt) {
                                                        $robotAction = $val;
                                                        break g;
                                                    }
                                                    try {
                                                        $rtype = $val;
                                                        if ($val instanceof tj_JavaishFloat) {
                                                            $rtype = $val;
                                                            $robotAction = new tj_JavaishInt;
                                                            $rtype = $robotAction;
                                                            tj_JavaishInt__init_0($robotAction, jl_Math_round(jl_Float_floatValue(tj_JavaishFloat_getValue($val))));
                                                        } else {
                                                            $rtype = $val;
                                                            if (!($val instanceof tj_JavaishString))
                                                                $robotAction = $val;
                                                            else {
                                                                $rtype = $val;
                                                                $expression = jl_System_out();
                                                                $expressionElmt = $val;
                                                                $robotAction = tj_JavaishString_getValue($expressionElmt);
                                                                $listVal = jl_StringBuilder__init_();
                                                                jl_StringBuilder_append(jl_StringBuilder_append($listVal, $rt_s(340)), $robotAction);
                                                                $robotAction = jl_StringBuilder_toString($listVal);
                                                                $rtype = $val;
                                                                ji_PrintStream_println($expression, $robotAction);
                                                                $robotAction = new tj_JavaishInt;
                                                                $rtype = $robotAction;
                                                                tj_JavaishInt__init_0($robotAction, jl_Integer_parseInt0(tj_JavaishString_getValue($expressionElmt)));
                                                            }
                                                        }
                                                        break g;
                                                    } catch ($$e) {
                                                        $$je = $rt_wrapException($$e);
                                                        if ($$je instanceof jl_Exception) {
                                                        } else {
                                                            throw $$e;
                                                        }
                                                    }
                                                    tj_Error_UnableToParse($rtype.$typeString(), $this.$lineNumber1, $rt_s(187));
                                                    $robotAction = $rtype;
                                                    break g;
                                                case 3:
                                                    if ($val instanceof tj_JavaishString) {
                                                        $robotAction = $val;
                                                        break g;
                                                    }
                                                    try {
                                                        $expressionElmt = $val;
                                                        if ($val instanceof tj_JavaishFloat) {
                                                            $expressionElmt = $val;
                                                            $robotAction = new tj_JavaishString;
                                                            $expressionElmt = $robotAction;
                                                            tj_JavaishString__init_0($robotAction, jl_Float_toString(jl_Float_floatValue(tj_JavaishFloat_getValue($val))));
                                                        } else {
                                                            $expressionElmt = $val;
                                                            if ($val instanceof tj_JavaishInt) {
                                                                $expressionElmt = $val;
                                                                $robotAction = new tj_JavaishString;
                                                                $expressionElmt = $robotAction;
                                                                tj_JavaishString__init_0($robotAction, jl_Integer_toString(jl_Integer_intValue(tj_JavaishInt_getValue($val))));
                                                            } else {
                                                                $expressionElmt = $val;
                                                                if (!($val instanceof tj_JavaishBoolean))
                                                                    $robotAction = $val;
                                                                else {
                                                                    $expressionElmt = $val;
                                                                    $robotAction = new tj_JavaishString;
                                                                    $expressionElmt = $robotAction;
                                                                    tj_JavaishString__init_0($robotAction, jl_Boolean_toString(jl_Boolean_booleanValue(tj_JavaishBoolean_getValue($val))));
                                                                }
                                                            }
                                                        }
                                                        break g;
                                                    } catch ($$e) {
                                                        $$je = $rt_wrapException($$e);
                                                        if ($$je instanceof jl_Exception) {
                                                        } else {
                                                            throw $$e;
                                                        }
                                                    }
                                                    tj_Error_UnableToParse($rt_s(186), $this.$lineNumber1, $expressionElmt.$typeString());
                                                    $robotAction = $expressionElmt;
                                                    break g;
                                                case 4:
                                                    if ($val instanceof tj_JavaishBoolean) {
                                                        $robotAction = $val;
                                                        break g;
                                                    }
                                                    try {
                                                        $expressionElmt = $val;
                                                        if (!($val instanceof tj_JavaishString))
                                                            $robotAction = $val;
                                                        else {
                                                            $expressionElmt = $val;
                                                            $robotAction = new tj_JavaishBoolean;
                                                            $expressionElmt = $robotAction;
                                                            tj_JavaishBoolean__init_0($robotAction, jl_Boolean_valueOf(jl_Boolean_parseBoolean(tj_JavaishString_getValue($val))));
                                                        }
                                                        break g;
                                                    } catch ($$e) {
                                                        $$je = $rt_wrapException($$e);
                                                        if ($$je instanceof jl_Exception) {
                                                        } else {
                                                            throw $$e;
                                                        }
                                                    }
                                                    tj_Error_UnableToParse($rt_s(185), $this.$lineNumber1, $expressionElmt.$typeString());
                                                    $robotAction = $expressionElmt;
                                                    break g;
                                                default:
                                            }
                                            $robotAction = $val;
                                        }
                                        if (!$isComp) {
                                            $total = tj_PythonTranslator_performOperation($this, $operation, $total, $robotAction);
                                            break b;
                                        }
                                        $compVal = tj_PythonTranslator_performOperation($this, $operation, $compVal, $robotAction);
                                        break b;
                                    case 5:
                                        tj_PythonTranslator$Operator_$callClinit();
                                        $operation = tj_PythonTranslator$Operator_DIVIDE;
                                        break b;
                                    case 6:
                                        tj_PythonTranslator$Operator_$callClinit();
                                        $comparison = tj_PythonTranslator$Operator_EQUAL;
                                        $isComp = 1;
                                        break b;
                                    case 7:
                                        $newVal = tj_PythonTranslator_evalExpression($this, $elmt.$expression, $localVariables, $isGlobal);
                                        if (!$isComp) {
                                            $total = tj_PythonTranslator_performOperation($this, $operation, $total, $newVal);
                                            break b;
                                        }
                                        $compVal = tj_PythonTranslator_performOperation($this, $operation, $compVal, $newVal);
                                        break b;
                                    case 8:
                                        $floatElmt = $elmt;
                                        $valF = tj_JavaishFloat__init_(tj_FloatElmt_getValue($floatElmt));
                                        if (!$isComp) {
                                            $total = tj_PythonTranslator_performOperation($this, $operation, $total, $valF);
                                            break b;
                                        }
                                        $compVal = tj_PythonTranslator_performOperation($this, $operation, $compVal, $valF);
                                        break b;
                                    case 9:
                                        tj_PythonTranslator$Operator_$callClinit();
                                        $comparison = tj_PythonTranslator$Operator_GREATER_THAN;
                                        $isComp = 1;
                                        break b;
                                    case 10:
                                        tj_PythonTranslator$Operator_$callClinit();
                                        $comparison = tj_PythonTranslator$Operator_GREATER_THAN_EQUAL;
                                        $isComp = 1;
                                        break b;
                                    case 11:
                                        $integer = $elmt;
                                        $valI = tj_JavaishInt__init_(tj_IntElmt_getValue($integer));
                                        if (!$isComp) {
                                            $total = tj_PythonTranslator_performOperation($this, $operation, $total, $valI);
                                            break b;
                                        }
                                        $compVal = tj_PythonTranslator_performOperation($this, $operation, $compVal, $valI);
                                        break b;
                                    case 12:
                                        tj_PythonTranslator$Operator_$callClinit();
                                        $comparison = tj_PythonTranslator$Operator_LESS_THAN;
                                        $isComp = 1;
                                        break b;
                                    case 13:
                                        tj_PythonTranslator$Operator_$callClinit();
                                        $comparison = tj_PythonTranslator$Operator_LESS_THAN_EQUAL;
                                        $isComp = 1;
                                        break b;
                                    case 14:
                                        tj_PythonTranslator$Operator_$callClinit();
                                        $operation = tj_PythonTranslator$Operator_MINUS;
                                        break b;
                                    case 15:
                                        tj_PythonTranslator$Operator_$callClinit();
                                        $operation = tj_PythonTranslator$Operator_MULTIPLY;
                                        break b;
                                    case 16:
                                        tj_PythonTranslator$Operator_$callClinit();
                                        $comparison = tj_PythonTranslator$Operator_NOT_EQUAL;
                                        $isComp = 1;
                                        break b;
                                    case 17:
                                        break f;
                                    case 18:
                                        tj_PythonTranslator$Operator_$callClinit();
                                        $operation = tj_PythonTranslator$Operator_PLUS;
                                        break b;
                                    case 19:
                                        $string = $elmt;
                                        $valS = tj_JavaishString__init_(tj_StringElmt_getValue($string));
                                        if (!$isComp) {
                                            $total = tj_PythonTranslator_performOperation($this, $operation, $total, $valS);
                                            break b;
                                        }
                                        $compVal = tj_PythonTranslator_performOperation($this, $operation, $compVal, $valS);
                                        break b;
                                    case 20:
                                        break e;
                                    case 21:
                                        $function = $elmt;
                                        $body = tj_Variables_getFunctionBody($this.$globalVariables1, tj_FunctionElmt_getName($function));
                                        $args = tj_Variables_getFunctionArgs($this.$globalVariables1, tj_FunctionElmt_getName($function));
                                        $params = (tj_FunctionElmt_getParams($function)).data;
                                        $paramVals = ju_ArrayList__init_();
                                        $listLength = $params.length;
                                        var$36 = 0;
                                        while (var$36 < $listLength) {
                                            ju_ArrayList_add($paramVals, tj_PythonTranslator_evalExpression($this, $params[var$36], $localVariables, $isGlobal));
                                            var$36 = var$36 + 1 | 0;
                                        }
                                        $valFunc = tj_PythonTranslator_interpretFunction($this, $body, $args, ju_AbstractCollection_toArray($paramVals, $rt_createArray(tj_JavaishVal, ju_ArrayList_size($paramVals))), tj_FunctionElmt_getName($function), $isGlobal, 0);
                                        if (!$isComp) {
                                            $total = tj_PythonTranslator_performOperation($this, $operation, $total, $valFunc);
                                            break b;
                                        }
                                        $compVal = tj_PythonTranslator_performOperation($this, $operation, $compVal, $valFunc);
                                        break b;
                                    case 22:
                                        $input = tj_JavaishString__init_($rt_s(13));
                                        if (!$isComp) {
                                            $total = tj_PythonTranslator_performOperation($this, $operation, $total, $input);
                                            break b;
                                        }
                                        $compVal = tj_PythonTranslator_performOperation($this, $operation, $compVal, $input);
                                        break b;
                                    case 23:
                                        $listVal = $elmt;
                                        $index = tj_PythonTranslator_evalExpression($this, tj_ListValElmt_getIndex($listVal), $localVariables, $isGlobal);
                                        if (!($index instanceof tj_JavaishInt)) {
                                            tj_Error_TypeMismatch($rt_s(187), $index.$typeString(), $this.$lineNumber1);
                                            return null;
                                        }
                                        $expression = $index;
                                        if (tj_Variables_isVariable($localVariables, tj_ListValElmt_getListName($listVal)))
                                            $expressionElmt = tj_JavaishListVal_getValue(tj_Variables_getVariableValue($localVariables, tj_ListValElmt_getListName($listVal)));
                                        else {
                                            if (!tj_Variables_isVariable($this.$globalVariables1, tj_ListValElmt_getListName($listVal))) {
                                                tj_Error_VariableNotDeclared(tj_ListValElmt_getListName($listVal), $this.$lineNumber1);
                                                return null;
                                            }
                                            $expressionElmt = tj_JavaishListVal_getValue(tj_Variables_getVariableValue($this.$globalVariables1, tj_ListValElmt_getListName($listVal)));
                                        }
                                        $listLength = $expressionElmt.$getLength();
                                        if (jl_Integer_intValue(tj_JavaishInt_getValue($expression)) >= $listLength) {
                                            tj_Error_IndexOutOfBounds(jl_Integer_intValue(tj_JavaishInt_getValue($expression)), $this.$lineNumber1, $listLength);
                                            return null;
                                        }
                                        $listValVal = $expressionElmt.$getValue1(jl_Integer_intValue(tj_JavaishInt_getValue($expression)));
                                        if (!$isComp) {
                                            $total = tj_PythonTranslator_performOperation($this, $operation, $total, $listValVal);
                                            break b;
                                        }
                                        $compVal = tj_PythonTranslator_performOperation($this, $operation, $compVal, $listValVal);
                                        break b;
                                    case 24:
                                        break c;
                                    case 25:
                                        $arrayName = tj_ArrayLengthElmt_getArrayName($elmt);
                                        if (tj_Variables_isVariable($localVariables, $arrayName))
                                            $expression = tj_Variables_getVariableValue($localVariables, $arrayName);
                                        else {
                                            if (!tj_Variables_isVariable($this.$globalVariables1, $arrayName)) {
                                                tj_Error_VariableNotDeclared($arrayName, $this.$lineNumber1);
                                                return null;
                                            }
                                            $expression = tj_Variables_getVariableValue($this.$globalVariables1, $arrayName);
                                        }
                                        if (!($expression instanceof tj_JavaishListVal)) {
                                            tj_Error_TypeMismatch($rt_s(293), $expression.$typeString(), $this.$lineNumber1);
                                            return null;
                                        }
                                        $listL = tj_JavaishListVal_getValue($expression);
                                        $length = tj_JavaishInt__init_($listL.$getLength());
                                        if (!$isComp)
                                            $total = tj_PythonTranslator_performOperation($this, $operation, $total, $length);
                                        else
                                            $compVal = tj_PythonTranslator_performOperation($this, $operation, $compVal, $length);
                                        break b;
                                    case 26:
                                        break d;
                                    default:
                                }
                                break b;
                            }
                            $resultO = tj_PythonTranslator_performComparision($this, $comparison, $total, $compVal);
                            if ($resultO === null)
                                return null;
                            if (jl_Boolean_booleanValue(tj_JavaishBoolean_getValue($resultO)) == 1)
                                return tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                            $total = null;
                            $operation = null;
                            $compVal = null;
                            $isComp = 0;
                            break b;
                        }
                        $variable = $elmt;
                        if (tj_Variables_isVariable($localVariables, tj_VariableElmt_getName($variable)))
                            $expression = tj_Variables_getVariableValue($localVariables, tj_VariableElmt_getName($variable));
                        else {
                            if (!tj_Variables_isVariable($this.$globalVariables1, tj_VariableElmt_getName($variable))) {
                                tj_Error_VariableNotDeclared(tj_VariableElmt_getName($variable), $this.$lineNumber1);
                                return null;
                            }
                            $expression = tj_Variables_getVariableValue($this.$globalVariables1, tj_VariableElmt_getName($variable));
                        }
                        if (!$isComp) {
                            $total = tj_PythonTranslator_performOperation($this, $operation, $total, $expression);
                            break b;
                        }
                        $compVal = tj_PythonTranslator_performOperation($this, $operation, $compVal, $expression);
                        break b;
                    }
                    $rtype = tj_RobotActionElmt_getAction($elmt);
                    switch (tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$Statements$RobotType.data[jl_Enum_ordinal($rtype)]) {
                        case 3:
                            if (!$isComp) {
                                $total = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break b;
                            }
                            $compVal = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                            break b;
                        case 4:
                            if (!$isComp) {
                                $total = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break b;
                            }
                            $compVal = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                            break b;
                        case 12:
                            if (!$isComp) {
                                $total = tj_JavaishInt__init_(100);
                                break b;
                            }
                            $compVal = tj_JavaishInt__init_(100);
                            break b;
                        case 13:
                            if (!$isComp) {
                                $total = tj_JavaishInt__init_(100);
                                break b;
                            }
                            $compVal = tj_JavaishInt__init_(100);
                            break b;
                        default:
                    }
                    break b;
                }
                $list = $elmt;
                $type = tj_ListElmt_getListType($list);
                $listExpressions = tj_ListElmt_getList($list);
                $listVals = ju_ArrayList__init_();
                $expression = ju_AbstractList_iterator($listExpressions);
                while (ju_AbstractList$1_hasNext($expression)) {
                    ju_ArrayList_add($listVals, tj_PythonTranslator_evalExpression($this, ju_AbstractList$1_next($expression), $localVariables, $isGlobal));
                }
                switch (tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$JavaishVal$JavaishType.data[jl_Enum_ordinal($type)]) {
                    case 5:
                        $intList = ju_ArrayList__init_();
                        $expression = ju_AbstractList_iterator($listVals);
                        while (ju_AbstractList$1_hasNext($expression)) {
                            $listValI = ju_AbstractList$1_next($expression);
                            if (!($listValI instanceof tj_JavaishInt)) {
                                tj_Error_TypeMismatch($rt_s(187), $listValI.$typeString(), $this.$lineNumber1);
                                return null;
                            }
                            ju_ArrayList_add($intList, $listValI);
                        }
                        $intListVal = tj_JavaishIntList__init_($intList);
                        if (!$isComp) {
                            if ($operation === null) {
                                $total = tj_JavaishListVal__init_($intListVal);
                                break b;
                            }
                            tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(191), $this.$lineNumber1);
                            break b;
                        }
                        if ($operation === null) {
                            $compVal = tj_JavaishListVal__init_($intListVal);
                            break b;
                        }
                        tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(191), $this.$lineNumber1);
                        break b;
                    case 6:
                        $floatList = ju_ArrayList__init_();
                        $expression = ju_AbstractList_iterator($listVals);
                        while (ju_AbstractList$1_hasNext($expression)) {
                            $listValI = ju_AbstractList$1_next($expression);
                            if (!($listValI instanceof tj_JavaishFloat)) {
                                tj_Error_TypeMismatch($rt_s(184), $listValI.$typeString(), $this.$lineNumber1);
                                return null;
                            }
                            ju_ArrayList_add($floatList, $listValI);
                        }
                        $floatListVal = tj_JavaishFloatList__init_($floatList);
                        if (!$isComp) {
                            if ($operation === null) {
                                $total = tj_JavaishListVal__init_($floatListVal);
                                break b;
                            }
                            tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(188), $this.$lineNumber1);
                            break b;
                        }
                        if ($operation === null) {
                            $compVal = tj_JavaishListVal__init_($floatListVal);
                            break b;
                        }
                        tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(188), $this.$lineNumber1);
                        break b;
                    case 7:
                        $stringList = ju_ArrayList__init_();
                        $expression = ju_AbstractList_iterator($listVals);
                        while (ju_AbstractList$1_hasNext($expression)) {
                            $listValI = ju_AbstractList$1_next($expression);
                            if (!($listValI instanceof tj_JavaishString)) {
                                tj_Error_TypeMismatch($rt_s(186), $listValI.$typeString(), $this.$lineNumber1);
                                return null;
                            }
                            ju_ArrayList_add($stringList, $listValI);
                        }
                        $stringListVal = tj_JavaishStringList__init_($stringList);
                        if (!$isComp) {
                            if ($operation === null) {
                                $total = tj_JavaishListVal__init_($stringListVal);
                                break b;
                            }
                            tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(190), $this.$lineNumber1);
                            break b;
                        }
                        if ($operation === null) {
                            $compVal = tj_JavaishListVal__init_($stringListVal);
                            break b;
                        }
                        tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(190), $this.$lineNumber1);
                        break b;
                    case 8:
                        $booleanList = ju_ArrayList__init_();
                        $expression = ju_AbstractList_iterator($listVals);
                        while (ju_AbstractList$1_hasNext($expression)) {
                            $listValI = ju_AbstractList$1_next($expression);
                            if (!($listValI instanceof tj_JavaishBoolean)) {
                                tj_Error_TypeMismatch($rt_s(185), $listValI.$typeString(), $this.$lineNumber1);
                                return null;
                            }
                            ju_ArrayList_add($booleanList, $listValI);
                        }
                        $booleanListVal = tj_JavaishBooleanList__init_($booleanList);
                        if (!$isComp) {
                            if ($operation === null) {
                                $total = tj_JavaishListVal__init_($booleanListVal);
                                break b;
                            }
                            tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(189), $this.$lineNumber1);
                            break b;
                        }
                        if ($operation === null) {
                            $compVal = tj_JavaishListVal__init_($booleanListVal);
                            break b;
                        }
                        tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(189), $this.$lineNumber1);
                        break b;
                    default:
                }
            }
            var$14 = var$14 + 1 | 0;
        }
        return null;
    }
    function tj_PythonTranslator_performComparision($this, $comparison, $left, $right) {
        var $result;
        a: {
            $result = null;
            tj_PythonTranslator$1_$callClinit();
            switch (tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$PythonTranslator$Operator.data[jl_Enum_ordinal($comparison)]) {
                case 1:
                    $comparison = $left.$getType0();
                    tj_JavaishVal$JavaishType_$callClinit();
                    if ($comparison === tj_JavaishVal$JavaishType_STRING && $right.$getType0() === tj_JavaishVal$JavaishType_STRING) {
                        if (!jl_String_equals(tj_JavaishString_getValue($left), tj_JavaishString_getValue($right))) {
                            $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                            break a;
                        }
                        $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                        break a;
                    }
                    if ($left.$getType0() !== tj_JavaishVal$JavaishType_STRING && $right.$getType0() !== tj_JavaishVal$JavaishType_STRING) {
                        if ($left.$getType0() === tj_JavaishVal$JavaishType_BOOLEAN && $right.$getType0() === tj_JavaishVal$JavaishType_BOOLEAN) {
                            if (tj_JavaishBoolean_getValue($left) !== tj_JavaishBoolean_getValue($right)) {
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                break a;
                            }
                            $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                            break a;
                        }
                        if ($left.$getType0() !== tj_JavaishVal$JavaishType_BOOLEAN && $right.$getType0() !== tj_JavaishVal$JavaishType_BOOLEAN) {
                            if ($left.$getType0() === tj_JavaishVal$JavaishType_INT && $right.$getType0() === tj_JavaishVal$JavaishType_INT) {
                                if (tj_JavaishInt_getValue($left) !== tj_JavaishInt_getValue($right)) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break a;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break a;
                            }
                            if ($left.$getType0() === tj_JavaishVal$JavaishType_INT && $right.$getType0() === tj_JavaishVal$JavaishType_FLOAT) {
                                if (jl_Integer_intValue(tj_JavaishInt_getValue($left)) !== jl_Float_floatValue(tj_JavaishFloat_getValue($right))) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break a;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break a;
                            }
                            if ($left.$getType0() === tj_JavaishVal$JavaishType_FLOAT && $right.$getType0() === tj_JavaishVal$JavaishType_INT) {
                                if (jl_Float_floatValue(tj_JavaishFloat_getValue($left)) !== jl_Integer_intValue(tj_JavaishInt_getValue($right))) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break a;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break a;
                            }
                            if (tj_JavaishFloat_getValue($left) !== tj_JavaishFloat_getValue($right)) {
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                break a;
                            }
                            $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                            break a;
                        }
                        tj_Error_TypeMismatch($rt_s(185), $rt_s(294), $this.$lineNumber1);
                        return null;
                    }
                    tj_Error_TypeMismatch($rt_s(186), $rt_s(295), $this.$lineNumber1);
                    return null;
                case 2:
                    $comparison = $left.$getType0();
                    tj_JavaishVal$JavaishType_$callClinit();
                    if ($comparison === tj_JavaishVal$JavaishType_STRING && $right.$getType0() === tj_JavaishVal$JavaishType_STRING) {
                        if (jl_String_equals(tj_JavaishString_getValue($left), tj_JavaishString_getValue($right))) {
                            $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                            break a;
                        }
                        $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                        break a;
                    }
                    if ($left.$getType0() !== tj_JavaishVal$JavaishType_STRING && $right.$getType0() !== tj_JavaishVal$JavaishType_STRING) {
                        if ($left.$getType0() === tj_JavaishVal$JavaishType_BOOLEAN && $right.$getType0() === tj_JavaishVal$JavaishType_BOOLEAN) {
                            if (tj_JavaishBoolean_getValue($left) === tj_JavaishBoolean_getValue($right)) {
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                break a;
                            }
                            $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                            break a;
                        }
                        if ($left.$getType0() !== tj_JavaishVal$JavaishType_BOOLEAN && $right.$getType0() !== tj_JavaishVal$JavaishType_BOOLEAN) {
                            if ($left.$getType0() === tj_JavaishVal$JavaishType_INT && $right.$getType0() === tj_JavaishVal$JavaishType_INT) {
                                if (tj_JavaishInt_getValue($left) === tj_JavaishInt_getValue($right)) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break a;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break a;
                            }
                            if ($left.$getType0() === tj_JavaishVal$JavaishType_INT && $right.$getType0() === tj_JavaishVal$JavaishType_FLOAT) {
                                if (jl_Integer_intValue(tj_JavaishInt_getValue($left)) === jl_Float_floatValue(tj_JavaishFloat_getValue($right))) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break a;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break a;
                            }
                            if ($left.$getType0() === tj_JavaishVal$JavaishType_FLOAT && $right.$getType0() === tj_JavaishVal$JavaishType_INT) {
                                if (jl_Float_floatValue(tj_JavaishFloat_getValue($left)) === jl_Integer_intValue(tj_JavaishInt_getValue($right))) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break a;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break a;
                            }
                            if (tj_JavaishFloat_getValue($left) === tj_JavaishFloat_getValue($right)) {
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                break a;
                            }
                            $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                            break a;
                        }
                        tj_Error_TypeMismatch($rt_s(185), $rt_s(294), $this.$lineNumber1);
                        return null;
                    }
                    tj_Error_TypeMismatch($rt_s(186), $rt_s(295), $this.$lineNumber1);
                    return null;
                case 3:
                    $comparison = $left.$getType0();
                    tj_JavaishVal$JavaishType_$callClinit();
                    if ($comparison !== tj_JavaishVal$JavaishType_STRING && $right.$getType0() !== tj_JavaishVal$JavaishType_STRING) {
                        if ($left.$getType0() !== tj_JavaishVal$JavaishType_BOOLEAN && $right.$getType0() !== tj_JavaishVal$JavaishType_BOOLEAN) {
                            if ($left.$getType0() === tj_JavaishVal$JavaishType_INT && $right.$getType0() === tj_JavaishVal$JavaishType_INT) {
                                if (jl_Integer_intValue(tj_JavaishInt_getValue($left)) >= jl_Integer_intValue(tj_JavaishInt_getValue($right))) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break a;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break a;
                            }
                            if ($left.$getType0() === tj_JavaishVal$JavaishType_INT && $right.$getType0() === tj_JavaishVal$JavaishType_FLOAT) {
                                if (jl_Integer_intValue(tj_JavaishInt_getValue($left)) >= jl_Float_floatValue(tj_JavaishFloat_getValue($right))) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break a;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break a;
                            }
                            if ($left.$getType0() === tj_JavaishVal$JavaishType_FLOAT && $right.$getType0() === tj_JavaishVal$JavaishType_INT) {
                                if (jl_Float_floatValue(tj_JavaishFloat_getValue($left)) >= jl_Integer_intValue(tj_JavaishInt_getValue($right))) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break a;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break a;
                            }
                            if (jl_Float_floatValue(tj_JavaishFloat_getValue($left)) >= jl_Float_floatValue(tj_JavaishFloat_getValue($right))) {
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                break a;
                            }
                            $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                            break a;
                        }
                        tj_Error_TypeMismatch($rt_s(296), $rt_s(185), $this.$lineNumber1);
                        return null;
                    }
                    tj_Error_TypeMismatch($rt_s(296), $rt_s(186), $this.$lineNumber1);
                    return null;
                case 4:
                    $comparison = $left.$getType0();
                    tj_JavaishVal$JavaishType_$callClinit();
                    if ($comparison !== tj_JavaishVal$JavaishType_STRING && $right.$getType0() !== tj_JavaishVal$JavaishType_STRING) {
                        if ($left.$getType0() !== tj_JavaishVal$JavaishType_BOOLEAN && $right.$getType0() !== tj_JavaishVal$JavaishType_BOOLEAN) {
                            if ($left.$getType0() === tj_JavaishVal$JavaishType_INT && $right.$getType0() === tj_JavaishVal$JavaishType_INT) {
                                if (jl_Integer_intValue(tj_JavaishInt_getValue($left)) <= jl_Integer_intValue(tj_JavaishInt_getValue($right))) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break a;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break a;
                            }
                            if ($left.$getType0() === tj_JavaishVal$JavaishType_INT && $right.$getType0() === tj_JavaishVal$JavaishType_FLOAT) {
                                if (jl_Integer_intValue(tj_JavaishInt_getValue($left)) <= jl_Float_floatValue(tj_JavaishFloat_getValue($right))) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break a;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break a;
                            }
                            if ($left.$getType0() === tj_JavaishVal$JavaishType_FLOAT && $right.$getType0() === tj_JavaishVal$JavaishType_INT) {
                                if (jl_Float_floatValue(tj_JavaishFloat_getValue($left)) <= jl_Integer_intValue(tj_JavaishInt_getValue($right))) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break a;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break a;
                            }
                            if (jl_Float_floatValue(tj_JavaishFloat_getValue($left)) <= jl_Float_floatValue(tj_JavaishFloat_getValue($right))) {
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                break a;
                            }
                            $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                            break a;
                        }
                        tj_Error_TypeMismatch($rt_s(296), $rt_s(185), $this.$lineNumber1);
                        return null;
                    }
                    tj_Error_TypeMismatch($rt_s(296), $rt_s(186), $this.$lineNumber1);
                    return null;
                case 5:
                    $comparison = $left.$getType0();
                    tj_JavaishVal$JavaishType_$callClinit();
                    if ($comparison !== tj_JavaishVal$JavaishType_STRING && $right.$getType0() !== tj_JavaishVal$JavaishType_STRING) {
                        if ($left.$getType0() !== tj_JavaishVal$JavaishType_BOOLEAN && $right.$getType0() !== tj_JavaishVal$JavaishType_BOOLEAN) {
                            if ($left.$getType0() === tj_JavaishVal$JavaishType_INT && $right.$getType0() === tj_JavaishVal$JavaishType_INT) {
                                if (jl_Integer_intValue(tj_JavaishInt_getValue($left)) > jl_Integer_intValue(tj_JavaishInt_getValue($right))) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break a;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break a;
                            }
                            if ($left.$getType0() === tj_JavaishVal$JavaishType_INT && $right.$getType0() === tj_JavaishVal$JavaishType_FLOAT) {
                                if (jl_Integer_intValue(tj_JavaishInt_getValue($left)) > jl_Float_floatValue(tj_JavaishFloat_getValue($right))) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break a;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break a;
                            }
                            if ($left.$getType0() === tj_JavaishVal$JavaishType_FLOAT && $right.$getType0() === tj_JavaishVal$JavaishType_INT) {
                                if (jl_Float_floatValue(tj_JavaishFloat_getValue($left)) > jl_Integer_intValue(tj_JavaishInt_getValue($right))) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break a;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break a;
                            }
                            if (jl_Float_floatValue(tj_JavaishFloat_getValue($left)) > jl_Float_floatValue(tj_JavaishFloat_getValue($right))) {
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                break a;
                            }
                            $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                            break a;
                        }
                        tj_Error_TypeMismatch($rt_s(296), $rt_s(185), $this.$lineNumber1);
                        return null;
                    }
                    tj_Error_TypeMismatch($rt_s(296), $rt_s(186), $this.$lineNumber1);
                    return null;
                case 6:
                    $comparison = $left.$getType0();
                    tj_JavaishVal$JavaishType_$callClinit();
                    if ($comparison !== tj_JavaishVal$JavaishType_STRING && $right.$getType0() !== tj_JavaishVal$JavaishType_STRING) {
                        if ($left.$getType0() !== tj_JavaishVal$JavaishType_BOOLEAN && $right.$getType0() !== tj_JavaishVal$JavaishType_BOOLEAN) {
                            if ($left.$getType0() === tj_JavaishVal$JavaishType_INT && $right.$getType0() === tj_JavaishVal$JavaishType_INT) {
                                if (jl_Integer_intValue(tj_JavaishInt_getValue($left)) < jl_Integer_intValue(tj_JavaishInt_getValue($right))) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break a;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break a;
                            }
                            if ($left.$getType0() === tj_JavaishVal$JavaishType_INT && $right.$getType0() === tj_JavaishVal$JavaishType_FLOAT) {
                                if (jl_Integer_intValue(tj_JavaishInt_getValue($left)) < jl_Float_floatValue(tj_JavaishFloat_getValue($right))) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break a;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break a;
                            }
                            if ($left.$getType0() === tj_JavaishVal$JavaishType_FLOAT && $right.$getType0() === tj_JavaishVal$JavaishType_INT) {
                                if (jl_Float_floatValue(tj_JavaishFloat_getValue($left)) < jl_Integer_intValue(tj_JavaishInt_getValue($right))) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break a;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break a;
                            }
                            if (jl_Float_floatValue(tj_JavaishFloat_getValue($left)) < jl_Float_floatValue(tj_JavaishFloat_getValue($right))) {
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                break a;
                            }
                            $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                            break a;
                        }
                        tj_Error_TypeMismatch($rt_s(296), $rt_s(185), $this.$lineNumber1);
                        return null;
                    }
                    tj_Error_TypeMismatch($rt_s(296), $rt_s(186), $this.$lineNumber1);
                    return null;
                default:
            }
        }
        return $result;
    }
    function tj_PythonTranslator_translateExpression($this, $expression, $localVariables, $isGlobal, $javaPrinter) {
        var $expr, var$6, var$7, var$8, $elmt, $val, $valBStr, $cast, $castExpr, $ltype, $floatElmt, $integer, $string, $function, $params, $funcExpr, $valB, var$22, $inputLine, $listVal, $index, $listName, $list, $listExpressions, $listExpr, $arrayName, $action;
        $expr = $rt_s(2);
        var$6 = (tj_Expression_getElements($expression)).data;
        var$7 = var$6.length;
        var$8 = 0;
        while (var$8 < var$7) {
            a: {
                $elmt = var$6[var$8];
                tj_PythonTranslator$1_$callClinit();
                switch (tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element_getType($elmt))]) {
                    case 1:
                        $expression = jl_StringBuilder__init_();
                        jl_StringBuilder_append(jl_StringBuilder_append($expression, $expr), $rt_s(467));
                        $expr = jl_StringBuilder_toString($expression);
                        break a;
                    case 2:
                        $val = tj_PythonTranslator_translateExpression($this, $elmt.$expression0, $localVariables, $isGlobal, $javaPrinter);
                        $expression = jl_StringBuilder__init_();
                        jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($expression, $expr), $rt_s(468)), $val);
                        $expr = jl_StringBuilder_toString($expression);
                        break a;
                    case 3:
                        $valBStr = !tj_BoolElmt_getValue($elmt) ? $rt_s(469) : $rt_s(470);
                        $expression = jl_StringBuilder__init_();
                        jl_StringBuilder_append(jl_StringBuilder_append($expression, $expr), $valBStr);
                        $expr = jl_StringBuilder_toString($expression);
                        break a;
                    case 4:
                        b: {
                            $cast = $elmt;
                            $val = tj_PythonTranslator_evalExpression($this, $cast.$element, $localVariables, $isGlobal);
                            $castExpr = tj_PythonTranslator_translateExpression($this, $cast.$element, $localVariables, $isGlobal, $javaPrinter);
                            $expression = jl_System_out();
                            $valBStr = $val.$typeString();
                            $ltype = jl_StringBuilder__init_();
                            jl_StringBuilder_append(jl_StringBuilder_append3(jl_StringBuilder_append(jl_StringBuilder_append($ltype, $rt_s(343)), $castExpr), 32), $valBStr);
                            ji_PrintStream_println($expression, jl_StringBuilder_toString($ltype));
                            switch (tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$JavaishVal$JavaishType.data[jl_Enum_ordinal($cast.$castType)]) {
                                case 1:
                                    if ($val instanceof tj_JavaishFloat)
                                        break b;
                                    if ($val instanceof tj_JavaishInt) {
                                        $expression = jl_StringBuilder__init_();
                                        jl_StringBuilder_append3(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($expression, $expr), $rt_s(471)), $castExpr), 41);
                                        $expr = jl_StringBuilder_toString($expression);
                                        break b;
                                    }
                                    if (!($val instanceof tj_JavaishString))
                                        break b;
                                    $expression = jl_StringBuilder__init_();
                                    jl_StringBuilder_append3(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($expression, $expr), $rt_s(471)), $castExpr), 41);
                                    $expr = jl_StringBuilder_toString($expression);
                                    break b;
                                case 2:
                                    if ($val instanceof tj_JavaishFloat) {
                                        $expression = jl_StringBuilder__init_();
                                        jl_StringBuilder_append3(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($expression, $expr), $rt_s(472)), $castExpr), 41);
                                        $expr = jl_StringBuilder_toString($expression);
                                        break b;
                                    }
                                    if (!($val instanceof tj_JavaishString))
                                        break b;
                                    $expression = jl_StringBuilder__init_();
                                    jl_StringBuilder_append3(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($expression, $expr), $rt_s(472)), $castExpr), 41);
                                    $expr = jl_StringBuilder_toString($expression);
                                    break b;
                                case 3:
                                    if ($val instanceof tj_JavaishString)
                                        break b;
                                    $expression = jl_StringBuilder__init_();
                                    jl_StringBuilder_append3(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($expression, $expr), $rt_s(473)), $castExpr), 41);
                                    $expr = jl_StringBuilder_toString($expression);
                                    break b;
                                case 4:
                                    if ($val instanceof tj_JavaishBoolean)
                                        break b;
                                    if (!($val instanceof tj_JavaishString))
                                        break b;
                                    $expression = jl_StringBuilder__init_();
                                    jl_StringBuilder_append3(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($expression, $expr), $rt_s(474)), $castExpr), 41);
                                    $expr = jl_StringBuilder_toString($expression);
                                    break b;
                                default:
                            }
                        }
                        $expression = jl_System_out();
                        $cast = jl_StringBuilder__init_();
                        jl_StringBuilder_append(jl_StringBuilder_append($cast, $rt_s(343)), $expr);
                        ji_PrintStream_println($expression, jl_StringBuilder_toString($cast));
                        break a;
                    case 5:
                        $expression = jl_StringBuilder__init_();
                        jl_StringBuilder_append(jl_StringBuilder_append($expression, $expr), $rt_s(350));
                        $expr = jl_StringBuilder_toString($expression);
                        break a;
                    case 6:
                        $expression = jl_StringBuilder__init_();
                        jl_StringBuilder_append(jl_StringBuilder_append($expression, $expr), $rt_s(351));
                        $expr = jl_StringBuilder_toString($expression);
                        break a;
                    case 7:
                        $cast = tj_PythonTranslator_translateExpression($this, $elmt.$expression, $localVariables, $isGlobal, $javaPrinter);
                        $expression = jl_StringBuilder__init_();
                        jl_StringBuilder_append(jl_StringBuilder_append($expression, $expr), $cast);
                        $expr = jl_StringBuilder_toString($expression);
                        break a;
                    case 8:
                        $floatElmt = $elmt;
                        $cast = tj_JavaishFloat_getValue(tj_JavaishFloat__init_(tj_FloatElmt_getValue($floatElmt)));
                        $expression = jl_StringBuilder__init_();
                        jl_StringBuilder_append(jl_StringBuilder_append($expression, $expr), $cast);
                        $expr = jl_StringBuilder_toString($expression);
                        break a;
                    case 9:
                        $expression = jl_StringBuilder__init_();
                        jl_StringBuilder_append(jl_StringBuilder_append($expression, $expr), $rt_s(352));
                        $expr = jl_StringBuilder_toString($expression);
                        break a;
                    case 10:
                        $expression = jl_StringBuilder__init_();
                        jl_StringBuilder_append(jl_StringBuilder_append($expression, $expr), $rt_s(353));
                        $expr = jl_StringBuilder_toString($expression);
                        break a;
                    case 11:
                        $integer = $elmt;
                        $expression = tj_JavaishInt_getValue(tj_JavaishInt__init_(tj_IntElmt_getValue($integer)));
                        $valBStr = jl_StringBuilder__init_();
                        jl_StringBuilder_append(jl_StringBuilder_append($valBStr, $expr), $expression);
                        $expr = jl_StringBuilder_toString($valBStr);
                        break a;
                    case 12:
                        $expression = jl_StringBuilder__init_();
                        jl_StringBuilder_append(jl_StringBuilder_append($expression, $expr), $rt_s(354));
                        $expr = jl_StringBuilder_toString($expression);
                        break a;
                    case 13:
                        $cast = jl_StringBuilder__init_();
                        jl_StringBuilder_append(jl_StringBuilder_append($cast, $expr), $rt_s(355));
                        $expr = jl_StringBuilder_toString($cast);
                        break a;
                    case 14:
                        $expression = jl_StringBuilder__init_();
                        jl_StringBuilder_append(jl_StringBuilder_append($expression, $expr), $rt_s(356));
                        $expr = jl_StringBuilder_toString($expression);
                        break a;
                    case 15:
                        $expression = jl_StringBuilder__init_();
                        jl_StringBuilder_append(jl_StringBuilder_append($expression, $expr), $rt_s(357));
                        $expr = jl_StringBuilder_toString($expression);
                        break a;
                    case 16:
                        $expression = jl_StringBuilder__init_();
                        jl_StringBuilder_append(jl_StringBuilder_append($expression, $expr), $rt_s(358));
                        $expr = jl_StringBuilder_toString($expression);
                        break a;
                    case 17:
                        $expression = jl_StringBuilder__init_();
                        jl_StringBuilder_append(jl_StringBuilder_append($expression, $expr), $rt_s(475));
                        $expr = jl_StringBuilder_toString($expression);
                        break a;
                    case 18:
                        $expression = jl_StringBuilder__init_();
                        jl_StringBuilder_append(jl_StringBuilder_append($expression, $expr), $rt_s(360));
                        $expr = jl_StringBuilder_toString($expression);
                        break a;
                    case 19:
                        $string = $elmt;
                        $cast = tj_JavaishString_getValue(tj_JavaishString__init_(tj_StringElmt_getValue($string)));
                        $expression = jl_StringBuilder__init_();
                        jl_StringBuilder_append3(jl_StringBuilder_append(jl_StringBuilder_append3(jl_StringBuilder_append($expression, $expr), 34), $cast), 34);
                        $expr = jl_StringBuilder_toString($expression);
                        break a;
                    case 20:
                        $cast = tj_VariableElmt_getName($elmt);
                        $expression = jl_StringBuilder__init_();
                        jl_StringBuilder_append(jl_StringBuilder_append($expression, $expr), $cast);
                        $expr = jl_StringBuilder_toString($expression);
                        break a;
                    case 21:
                        $function = $elmt;
                        tj_Variables_getFunctionBody($this.$globalVariables1, tj_FunctionElmt_getName($function));
                        tj_Variables_getFunctionArgs($this.$globalVariables1, tj_FunctionElmt_getName($function));
                        $params = (tj_FunctionElmt_getParams($function)).data;
                        ju_ArrayList__init_0(new ju_ArrayList);
                        $valBStr = tj_FunctionElmt_getName($function);
                        $expression = jl_StringBuilder__init_();
                        jl_StringBuilder_append3(jl_StringBuilder_append($expression, $valBStr), 40);
                        $funcExpr = jl_StringBuilder_toString($expression);
                        $valB = $params.length;
                        var$22 = 0;
                        while (var$22 < $valB) {
                            $expression = tj_PythonTranslator_translateExpression($this, $params[var$22], $localVariables, $isGlobal, $javaPrinter);
                            $valBStr = jl_StringBuilder__init_();
                            jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($valBStr, $funcExpr), $expression), $rt_s(56));
                            $funcExpr = jl_StringBuilder_toString($valBStr);
                            var$22 = var$22 + 1 | 0;
                        }
                        $expression = jl_String_substring($funcExpr, 0, jl_String_length($funcExpr) - 2 | 0);
                        $valBStr = jl_StringBuilder__init_();
                        jl_StringBuilder_append3(jl_StringBuilder_append($valBStr, $expression), 41);
                        $expression = jl_StringBuilder_toString($valBStr);
                        $valBStr = jl_StringBuilder__init_();
                        jl_StringBuilder_append(jl_StringBuilder_append($valBStr, $expr), $expression);
                        $expr = jl_StringBuilder_toString($valBStr);
                        break a;
                    case 22:
                        $inputLine = tj_PythonTranslator_evalShowInputBox($this, $elmt, $localVariables, $isGlobal, $javaPrinter);
                        $expression = jl_StringBuilder__init_();
                        jl_StringBuilder_append(jl_StringBuilder_append($expression, $expr), $inputLine);
                        $expr = jl_StringBuilder_toString($expression);
                        break a;
                    case 23:
                        $listVal = $elmt;
                        $index = tj_PythonTranslator_translateExpression($this, tj_ListValElmt_getIndex($listVal), $localVariables, $isGlobal, $javaPrinter);
                        $listName = tj_ListValElmt_getListName($listVal);
                        $expression = jl_StringBuilder__init_();
                        jl_StringBuilder_append3(jl_StringBuilder_append(jl_StringBuilder_append3(jl_StringBuilder_append(jl_StringBuilder_append($expression, $expr), $listName), 91), $index), 93);
                        $expr = jl_StringBuilder_toString($expression);
                        break a;
                    case 24:
                        $list = $elmt;
                        $ltype = tj_PythonTranslator_typeToString($this, tj_ListElmt_getListType($list));
                        $expression = jl_String_toUpperCase(jl_String_substring($ltype, 0, 1));
                        $valBStr = jl_String_substring0($ltype, 1);
                        $cast = jl_StringBuilder__init_();
                        jl_StringBuilder_append(jl_StringBuilder_append($cast, $expression), $valBStr);
                        jl_StringBuilder_toString($cast);
                        $listExpressions = tj_ListElmt_getList($list);
                        $listExpr = $rt_s(476);
                        $expression = ju_AbstractList_iterator($listExpressions);
                        while (ju_AbstractList$1_hasNext($expression)) {
                            $valBStr = tj_PythonTranslator_translateExpression($this, ju_AbstractList$1_next($expression), $localVariables, $isGlobal, $javaPrinter);
                            $cast = jl_StringBuilder__init_();
                            jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($cast, $listExpr), $valBStr), $rt_s(56));
                            $listExpr = jl_StringBuilder_toString($cast);
                        }
                        $expression = jl_String_substring($listExpr, 0, jl_String_length($listExpr) - 2 | 0);
                        $valBStr = jl_StringBuilder__init_();
                        jl_StringBuilder_append3(jl_StringBuilder_append($valBStr, $expression), 93);
                        $expression = jl_StringBuilder_toString($valBStr);
                        $valBStr = jl_StringBuilder__init_();
                        jl_StringBuilder_append(jl_StringBuilder_append($valBStr, $expr), $expression);
                        $expr = jl_StringBuilder_toString($valBStr);
                        break a;
                    case 25:
                        $arrayName = tj_ArrayLengthElmt_getArrayName($elmt);
                        $expression = jl_StringBuilder__init_();
                        jl_StringBuilder_append3(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($expression, $expr), $rt_s(477)), $arrayName), 41);
                        $expr = jl_StringBuilder_toString($expression);
                        break a;
                    case 26:
                        $action = tj_PythonTranslator_evalRobotElmt($this, $elmt, $localVariables, $isGlobal, $javaPrinter);
                        $expression = jl_StringBuilder__init_();
                        jl_StringBuilder_append(jl_StringBuilder_append($expression, $expr), $action);
                        $expr = jl_StringBuilder_toString($expression);
                        break a;
                    default:
                }
            }
            var$8 = var$8 + 1 | 0;
        }
        return $expr;
    }
    function tj_PythonTranslator_performOperation($this, $operation, $total, $val2) {
        var $result, var$5;
        $result = null;
        if ($operation === null)
            return $val2;
        a: {
            tj_PythonTranslator$1_$callClinit();
            switch (tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$PythonTranslator$Operator.data[jl_Enum_ordinal($operation)]) {
                case 7:
                    var$5 = $total instanceof tj_JavaishString;
                    if (var$5) {
                        if (!($val2 instanceof tj_JavaishString)) {
                            tj_Error_TypeMismatch($rt_s(186), $val2.$typeString(), $this.$lineNumber1);
                            return null;
                        }
                        $result = new tj_JavaishString;
                        $operation = tj_JavaishString_getValue($total);
                        $total = tj_JavaishString_getValue($val2);
                        $val2 = jl_StringBuilder__init_();
                        jl_StringBuilder_append(jl_StringBuilder_append($val2, $operation), $total);
                        tj_JavaishString__init_0($result, jl_StringBuilder_toString($val2));
                        break a;
                    }
                    if ($val2 instanceof tj_JavaishString) {
                        if (!var$5) {
                            tj_Error_TypeMismatch($rt_s(186), $total.$typeString(), $this.$lineNumber1);
                            return null;
                        }
                        $result = new tj_JavaishString;
                        $operation = tj_JavaishString_getValue($total);
                        $total = tj_JavaishString_getValue($val2);
                        $val2 = jl_StringBuilder__init_();
                        jl_StringBuilder_append(jl_StringBuilder_append($val2, $operation), $total);
                        tj_JavaishString__init_0($result, jl_StringBuilder_toString($val2));
                        break a;
                    }
                    if ($total instanceof tj_JavaishFloat) {
                        if (!($val2 instanceof tj_JavaishInt)) {
                            $result = tj_JavaishFloat__init_(jl_Float_floatValue(tj_JavaishFloat_getValue($total)) + jl_Float_floatValue(tj_JavaishFloat_getValue($val2)));
                            break a;
                        }
                        $result = tj_JavaishFloat__init_(jl_Float_floatValue(tj_JavaishFloat_getValue($total)) + jl_Integer_intValue(tj_JavaishInt_getValue($val2)));
                        break a;
                    }
                    if (!($val2 instanceof tj_JavaishFloat)) {
                        $result = tj_JavaishInt__init_(jl_Integer_intValue(tj_JavaishInt_getValue($total)) + jl_Integer_intValue(tj_JavaishInt_getValue($val2)) | 0);
                        break a;
                    }
                    if (!($total instanceof tj_JavaishInt)) {
                        $result = tj_JavaishFloat__init_(jl_Float_floatValue(tj_JavaishFloat_getValue($total)) + jl_Float_floatValue(tj_JavaishFloat_getValue($val2)));
                        break a;
                    }
                    $result = tj_JavaishFloat__init_(jl_Integer_intValue(tj_JavaishInt_getValue($total)) + jl_Float_floatValue(tj_JavaishFloat_getValue($val2)));
                    break a;
                case 8:
                    if (!($total instanceof tj_JavaishString) && !($val2 instanceof tj_JavaishString)) {
                        if ($total instanceof tj_JavaishFloat) {
                            if (!($val2 instanceof tj_JavaishInt)) {
                                $result = tj_JavaishFloat__init_(jl_Float_floatValue(tj_JavaishFloat_getValue($total)) * jl_Float_floatValue(tj_JavaishFloat_getValue($val2)));
                                break a;
                            }
                            $result = tj_JavaishFloat__init_(jl_Float_floatValue(tj_JavaishFloat_getValue($total)) * jl_Integer_intValue(tj_JavaishInt_getValue($val2)));
                            break a;
                        }
                        if (!($val2 instanceof tj_JavaishFloat)) {
                            $result = tj_JavaishInt__init_($rt_imul(jl_Integer_intValue(tj_JavaishInt_getValue($total)), jl_Integer_intValue(tj_JavaishInt_getValue($val2))));
                            break a;
                        }
                        if (!($total instanceof tj_JavaishInt)) {
                            $result = tj_JavaishFloat__init_(jl_Float_floatValue(tj_JavaishFloat_getValue($total)) * jl_Float_floatValue(tj_JavaishFloat_getValue($val2)));
                            break a;
                        }
                        $result = tj_JavaishFloat__init_(jl_Integer_intValue(tj_JavaishInt_getValue($total)) * jl_Float_floatValue(tj_JavaishFloat_getValue($val2)));
                        break a;
                    }
                    tj_Error_TypeMismatch($rt_s(296), $rt_s(186), $this.$lineNumber1);
                    return null;
                case 9:
                    if (!($total instanceof tj_JavaishString) && !($val2 instanceof tj_JavaishString)) {
                        if ($total instanceof tj_JavaishFloat) {
                            if (!($val2 instanceof tj_JavaishInt)) {
                                $result = tj_JavaishFloat__init_(jl_Float_floatValue(tj_JavaishFloat_getValue($total)) / jl_Float_floatValue(tj_JavaishFloat_getValue($val2)));
                                break a;
                            }
                            $result = tj_JavaishFloat__init_(jl_Float_floatValue(tj_JavaishFloat_getValue($total)) / jl_Integer_intValue(tj_JavaishInt_getValue($val2)));
                            break a;
                        }
                        if (!($val2 instanceof tj_JavaishFloat)) {
                            $result = tj_JavaishInt__init_(jl_Integer_intValue(tj_JavaishInt_getValue($total)) / jl_Integer_intValue(tj_JavaishInt_getValue($val2)) | 0);
                            break a;
                        }
                        if (!($total instanceof tj_JavaishInt)) {
                            $result = tj_JavaishFloat__init_(jl_Float_floatValue(tj_JavaishFloat_getValue($total)) / jl_Float_floatValue(tj_JavaishFloat_getValue($val2)));
                            break a;
                        }
                        $result = tj_JavaishFloat__init_(jl_Integer_intValue(tj_JavaishInt_getValue($total)) / jl_Float_floatValue(tj_JavaishFloat_getValue($val2)));
                        break a;
                    }
                    tj_Error_TypeMismatch($rt_s(296), $rt_s(186), $this.$lineNumber1);
                    return null;
                case 10:
                    if (!($total instanceof tj_JavaishString) && !($val2 instanceof tj_JavaishString)) {
                        if ($total instanceof tj_JavaishFloat) {
                            if (!($val2 instanceof tj_JavaishInt)) {
                                $result = tj_JavaishFloat__init_(jl_Float_floatValue(tj_JavaishFloat_getValue($total)) - jl_Float_floatValue(tj_JavaishFloat_getValue($val2)));
                                break a;
                            }
                            $result = tj_JavaishFloat__init_(jl_Float_floatValue(tj_JavaishFloat_getValue($total)) - jl_Integer_intValue(tj_JavaishInt_getValue($val2)));
                            break a;
                        }
                        if (!($val2 instanceof tj_JavaishFloat)) {
                            $result = tj_JavaishInt__init_(jl_Integer_intValue(tj_JavaishInt_getValue($total)) - jl_Integer_intValue(tj_JavaishInt_getValue($val2)) | 0);
                            break a;
                        }
                        if (!($total instanceof tj_JavaishInt)) {
                            $result = tj_JavaishFloat__init_(jl_Float_floatValue(tj_JavaishFloat_getValue($total)) - jl_Float_floatValue(tj_JavaishFloat_getValue($val2)));
                            break a;
                        }
                        $result = tj_JavaishFloat__init_(jl_Integer_intValue(tj_JavaishInt_getValue($total)) - jl_Float_floatValue(tj_JavaishFloat_getValue($val2)));
                        break a;
                    }
                    tj_Error_TypeMismatch($rt_s(296), $rt_s(186), $this.$lineNumber1);
                    return null;
                default:
            }
        }
        return $result;
    }
    function tj_PythonTranslator_evalDeclaration($this, $declaration, $localVariables, $isGlobal, $javaPrinter) {
        var $type, var$6, $listVal, $expr, $line, $prevTabCount, $list, $value;
        $type = $declaration.$varType;
        var$6 = jl_System_out();
        $listVal = jl_String_valueOf($declaration.$varType);
        $expr = $declaration.$name19;
        $line = jl_String_valueOf($declaration.$value20);
        $prevTabCount = $this.$tabCount0;
        $list = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($list);
        jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($list, $rt_s(297)), $listVal), $rt_s(298)), $expr), $rt_s(299)), $line), $rt_s(402)), $prevTabCount);
        ji_PrintStream_println(var$6, jl_AbstractStringBuilder_toString($list));
        $value = tj_PythonTranslator_evalExpression($this, $declaration.$value20, $localVariables, $isGlobal);
        $expr = tj_PythonTranslator_translateExpression($this, $declaration.$value20, $localVariables, $isGlobal, $javaPrinter);
        $line = tj_PythonTranslator_addTabCount($this);
        $prevTabCount = $this.$tabCount0;
        if ($type === $value.$getType0()) {
            tj_JavaishVal$JavaishType_$callClinit();
            if ($type !== tj_JavaishVal$JavaishType_LIST) {
                tj_PythonTranslator_typeToString($this, $type);
                var$6 = $declaration.$name19;
                $listVal = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_($listVal);
                jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($listVal, $line), var$6), $rt_s(333)), $expr);
                ju_ArrayList_add($javaPrinter, jl_AbstractStringBuilder_toString($listVal));
            } else {
                $value.$getValue0();
                var$6 = $declaration.$name19;
                $listVal = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_($listVal);
                jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($listVal, $line), var$6), $rt_s(333)), $expr);
                ju_ArrayList_add($javaPrinter, jl_AbstractStringBuilder_toString($listVal));
            }
            if (!$isGlobal) {
                if ($type !== tj_JavaishVal$JavaishType_LIST)
                    tj_Variables_addVariable($localVariables, $declaration.$name19, $type, $value, $this.$lineNumber1);
                else {
                    $listVal = $value.$getValue0();
                    tj_Variables_addList($localVariables, $declaration.$name19, $type, $listVal.$list, $this.$lineNumber1);
                }
            } else if ($type !== tj_JavaishVal$JavaishType_LIST)
                tj_Variables_addVariable($this.$globalVariables1, $declaration.$name19, $type, $value, $this.$lineNumber1);
            else {
                $listVal = $value.$getValue0();
                tj_Variables_addList($this.$globalVariables1, $declaration.$name19, $type, $listVal.$list, $this.$lineNumber1);
            }
            $this.$tabCount0 = $prevTabCount;
            return;
        }
        tj_JavaishVal$JavaishType_$callClinit();
        if ($type === tj_JavaishVal$JavaishType_FLOAT && $value.$getType0() === tj_JavaishVal$JavaishType_INT) {
            var$6 = $declaration.$name19;
            $listVal = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($listVal);
            jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($listVal, $line), var$6), $rt_s(333)), $expr);
            ju_ArrayList_add($javaPrinter, jl_AbstractStringBuilder_toString($listVal));
            if (!$isGlobal)
                tj_Variables_addVariable($localVariables, $declaration.$name19, $type, tj_JavaishFloat__init_((tj_JavaishInt_getValue($value)).$value), $this.$lineNumber1);
            else
                tj_Variables_addVariable($this.$globalVariables1, $declaration.$name19, $type, tj_JavaishFloat__init_((tj_JavaishInt_getValue($value)).$value), $this.$lineNumber1);
            return;
        }
        if ($value.$getType0() === tj_JavaishVal$JavaishType_LIST) {
            $list = $value.$list;
            if ($list.$getType0() === $type) {
                tj_PythonTranslator_typeToString($this, $list.$getType0());
                var$6 = $declaration.$name19;
                $listVal = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_($listVal);
                jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($listVal, $line), var$6), $rt_s(333)), $expr);
                ju_ArrayList_add($javaPrinter, jl_AbstractStringBuilder_toString($listVal));
                if (!$isGlobal)
                    tj_Variables_addList($localVariables, $declaration.$name19, $type, $list, $this.$lineNumber1);
                else
                    tj_Variables_addList($this.$globalVariables1, $declaration.$name19, $type, $list, $this.$lineNumber1);
                $this.$tabCount0 = $prevTabCount;
                return;
            }
        }
        tj_Error_TypeMismatch($type.$name4, $value.$typeString(), $this.$lineNumber1);
    }
    function tj_PythonTranslator_evalFunction($this, $function, $localVariables, $isGlobal) {
        var $name, $args, $body, $params, $paramVals, var$9, $arg;
        $name = $function.$name18;
        $args = $function.$args1;
        $body = $function.$body;
        if (!$isGlobal) {
            tj_Error_FunctionNotGlobal($name, $this.$lineNumber1);
            return;
        }
        tj_Variables_addFunction($this.$globalVariables1, $name, $body, $args, $this.$lineNumber1);
        if ($args === null) {
            tj_Error_FunctionNotDeclared($name, $this.$lineNumber1);
            return;
        }
        $params = $args.data;
        $paramVals = ju_ArrayList__init_();
        var$9 = $params.length;
        $isGlobal = 0;
        while ($isGlobal < var$9) {
            a: {
                $arg = $params[$isGlobal];
                tj_PythonTranslator$1_$callClinit();
                switch (tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$JavaishVal$JavaishType.data[$arg.$type.$ordinal0]) {
                    case 1:
                        break;
                    case 2:
                        ju_ArrayList_add($paramVals, tj_JavaishInt__init_(0));
                        break a;
                    case 3:
                        ju_ArrayList_add($paramVals, tj_JavaishString__init_($rt_s(2)));
                        break a;
                    case 4:
                        ju_ArrayList_add($paramVals, tj_JavaishBoolean__init_(jl_Boolean_valueOf(0)));
                        break a;
                    default:
                        break a;
                }
                ju_ArrayList_add($paramVals, tj_JavaishFloat__init_(0.0));
            }
            $isGlobal = $isGlobal + 1 | 0;
        }
        tj_PythonTranslator_interpretFunction($this, $body, $args, ju_AbstractCollection_toArray($paramVals, $rt_createArray(tj_JavaishVal, $paramVals.$size0)), $name, 0, 1);
    }
    function tj_PythonTranslator_evalIf($this, $ifStmt, $localVariables, $isGlobal, $pastResult, $javaPrinter) {
        var $condition, $body, $conditionString;
        $condition = $ifStmt.$condition0;
        $body = $ifStmt.$body;
        $conditionString = tj_PythonTranslator_translateExpression($this, $condition, $localVariables, $isGlobal, $javaPrinter);
        $pastResult = tj_PythonTranslator_addTabCount($this);
        $ifStmt = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($ifStmt);
        jl_AbstractStringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($ifStmt, $pastResult), $rt_s(478)), $conditionString), 58);
        ju_ArrayList_add($javaPrinter, jl_AbstractStringBuilder_toString($ifStmt));
        $this.$tabCount0 = $this.$tabCount0 + 1 | 0;
        tj_PythonTranslator_interpretBody($this, $body, $localVariables, 0, $javaPrinter);
        $this.$tabCount0 = $this.$tabCount0 - 1 | 0;
    }
    function tj_PythonTranslator_evalPrint($this, $printStmt, $localVariables, $isGlobal, $javaPrinter) {
        var $expr;
        $expr = tj_PythonTranslator_translateExpression($this, $printStmt.$value21, $localVariables, $isGlobal, $javaPrinter);
        $printStmt = tj_PythonTranslator_addTabCount($this);
        $localVariables = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($localVariables);
        jl_AbstractStringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($localVariables, $printStmt), $rt_s(479)), $expr), 41);
        ju_ArrayList_add($javaPrinter, jl_AbstractStringBuilder_toString($localVariables));
    }
    function tj_PythonTranslator_evalWhile($this, $whileStmt, $localVariables, $isGlobal, $javaPrinter) {
        var $condString, $condition, var$7;
        $condString = tj_PythonTranslator_translateExpression($this, $whileStmt.$condition1, $localVariables, $isGlobal, $javaPrinter);
        $condition = tj_PythonTranslator_addTabCount($this);
        var$7 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$7);
        jl_AbstractStringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$7, $condition), $rt_s(480)), $condString), 58);
        ju_ArrayList_add($javaPrinter, jl_AbstractStringBuilder_toString(var$7));
        $this.$tabCount0 = $this.$tabCount0 + 1 | 0;
        tj_PythonTranslator_interpretBody($this, $whileStmt.$body, $localVariables, 0, $javaPrinter);
        $this.$tabCount0 = $this.$tabCount0 - 1 | 0;
    }
    function tj_PythonTranslator_evalForEach($this, $foreachStmt, $localVariables, $isGlobal, $javaPrinter) {
        var $tempVarName, $listName, var$7, $list;
        $tempVarName = $foreachStmt.$tempVar;
        $listName = $foreachStmt.$listVar;
        if (tj_Variables_isVariable($localVariables, $listName))
            var$7 = tj_Variables_getVariableValue($localVariables, $listName);
        else {
            if (!tj_Variables_isVariable($this.$globalVariables1, $listName)) {
                tj_Error_VariableNotDeclared($listName, $this.$lineNumber1);
                return;
            }
            var$7 = tj_Variables_getVariableValue($this.$globalVariables1, $listName);
        }
        $list = var$7.$getType0();
        tj_JavaishVal$JavaishType_$callClinit();
        if ($list !== tj_JavaishVal$JavaishType_LIST) {
            tj_Error_TypeMismatch($rt_s(293), var$7.$typeString(), $this.$lineNumber1);
            return;
        }
        $list = var$7.$list;
        if ($list.$getType0() === tj_JavaishVal$JavaishType_STRINGLIST) {
            if (!$isGlobal)
                tj_Variables_addVariable($localVariables, $tempVarName, tj_JavaishVal$JavaishType_STRING, tj_JavaishString__init_($rt_s(2)), $this.$lineNumber1);
            else
                tj_Variables_addVariable($this.$globalVariables1, $tempVarName, tj_JavaishVal$JavaishType_STRING, tj_JavaishString__init_($rt_s(2)), $this.$lineNumber1);
            $list = tj_PythonTranslator_addTabCount($this);
            var$7 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_(var$7);
            jl_AbstractStringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$7, $list), $rt_s(481)), $tempVarName), $rt_s(40)), $listName), 58);
            ju_ArrayList_add($javaPrinter, jl_AbstractStringBuilder_toString(var$7));
            $this.$tabCount0 = $this.$tabCount0 + 1 | 0;
            tj_PythonTranslator_interpretBody($this, $foreachStmt.$body, $localVariables, 0, $javaPrinter);
            $this.$tabCount0 = $this.$tabCount0 - 1 | 0;
        } else if ($list.$getType0() === tj_JavaishVal$JavaishType_BOOLEANLIST) {
            if (!$isGlobal)
                tj_Variables_addVariable($localVariables, $tempVarName, tj_JavaishVal$JavaishType_BOOLEAN, tj_JavaishBoolean__init_(jl_Boolean_valueOf(0)), $this.$lineNumber1);
            else
                tj_Variables_addVariable($this.$globalVariables1, $tempVarName, tj_JavaishVal$JavaishType_BOOLEAN, tj_JavaishBoolean__init_(jl_Boolean_valueOf(0)), $this.$lineNumber1);
            $list = tj_PythonTranslator_addTabCount($this);
            var$7 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_(var$7);
            jl_AbstractStringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$7, $list), $rt_s(481)), $tempVarName), $rt_s(40)), $listName), 58);
            ju_ArrayList_add($javaPrinter, jl_AbstractStringBuilder_toString(var$7));
            $this.$tabCount0 = $this.$tabCount0 + 1 | 0;
            tj_PythonTranslator_interpretBody($this, $foreachStmt.$body, $localVariables, 0, $javaPrinter);
            $this.$tabCount0 = $this.$tabCount0 - 1 | 0;
        } else if ($list.$getType0() === tj_JavaishVal$JavaishType_INTLIST) {
            if (!$isGlobal)
                tj_Variables_addVariable($localVariables, $tempVarName, tj_JavaishVal$JavaishType_INT, tj_JavaishInt__init_(0), $this.$lineNumber1);
            else
                tj_Variables_addVariable($this.$globalVariables1, $tempVarName, tj_JavaishVal$JavaishType_INT, tj_JavaishInt__init_(0), $this.$lineNumber1);
            $list = tj_PythonTranslator_addTabCount($this);
            var$7 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_(var$7);
            jl_AbstractStringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$7, $list), $rt_s(481)), $tempVarName), $rt_s(40)), $listName), 58);
            ju_ArrayList_add($javaPrinter, jl_AbstractStringBuilder_toString(var$7));
            $this.$tabCount0 = $this.$tabCount0 + 1 | 0;
            tj_PythonTranslator_interpretBody($this, $foreachStmt.$body, $localVariables, 0, $javaPrinter);
            $this.$tabCount0 = $this.$tabCount0 - 1 | 0;
        } else {
            if ($list.$getType0() !== tj_JavaishVal$JavaishType_FLOATLIST) {
                tj_Error_TypeMismatch($rt_s(293), var$7.$typeString(), $this.$lineNumber1);
                return;
            }
            if (!$isGlobal)
                tj_Variables_addVariable($localVariables, $tempVarName, tj_JavaishVal$JavaishType_FLOAT, tj_JavaishFloat__init_(0.0), $this.$lineNumber1);
            else
                tj_Variables_addVariable($this.$globalVariables1, $tempVarName, tj_JavaishVal$JavaishType_FLOAT, tj_JavaishFloat__init_(0.0), $this.$lineNumber1);
            var$7 = tj_PythonTranslator_addTabCount($this);
            $list = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($list);
            jl_AbstractStringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($list, var$7), $rt_s(481)), $tempVarName), $rt_s(40)), $listName), 58);
            ju_ArrayList_add($javaPrinter, jl_AbstractStringBuilder_toString($list));
            $this.$tabCount0 = $this.$tabCount0 + 1 | 0;
            tj_PythonTranslator_interpretBody($this, $foreachStmt.$body, $localVariables, 0, $javaPrinter);
            $this.$tabCount0 = $this.$tabCount0 - 1 | 0;
        }
    }
    function tj_PythonTranslator_evalForWhen($this, $forwhenStmt, $localVariables, $isGlobal, $javaPrinter) {
        var $incVarName, $newVar, $condString, $incExpr, var$9, $condition;
        $incVarName = $forwhenStmt.$incVar;
        $newVar = 0;
        if (!tj_Variables_isVariable($localVariables, $incVarName) && !tj_Variables_isVariable($this.$globalVariables1, $incVarName)) {
            $newVar = 1;
            tj_JavaishVal$JavaishType_$callClinit();
            tj_Variables_addVariable($localVariables, $incVarName, tj_JavaishVal$JavaishType_INT, tj_JavaishInt__init_(0), $this.$lineNumber1);
        }
        $condString = tj_PythonTranslator_translateExpression($this, $forwhenStmt.$condition2, $localVariables, $isGlobal, $javaPrinter);
        $incExpr = tj_PythonTranslator_translateExpression($this, $forwhenStmt.$increment, $localVariables, $isGlobal, $javaPrinter);
        if ($newVar) {
            var$9 = tj_PythonTranslator_addTabCount($this);
            $condition = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($condition);
            jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($condition, var$9), $incVarName), $rt_s(482));
            ju_ArrayList_add($javaPrinter, jl_AbstractStringBuilder_toString($condition));
        }
        var$9 = tj_PythonTranslator_addTabCount($this);
        $condition = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($condition);
        jl_AbstractStringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($condition, var$9), $rt_s(480)), $condString), 58);
        ju_ArrayList_add($javaPrinter, jl_AbstractStringBuilder_toString($condition));
        $this.$tabCount0 = $this.$tabCount0 + 1 | 0;
        tj_PythonTranslator_interpretBody($this, $forwhenStmt.$body, $localVariables, 0, $javaPrinter);
        $localVariables = tj_PythonTranslator_addTabCount($this);
        $forwhenStmt = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($forwhenStmt);
        jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($forwhenStmt, $localVariables), $incVarName), $rt_s(380)), $incExpr);
        ju_ArrayList_add($javaPrinter, jl_AbstractStringBuilder_toString($forwhenStmt));
        $this.$tabCount0 = $this.$tabCount0 - 1 | 0;
    }
    function tj_PythonTranslator_evalShowMsgBox($this, $showMsgStmt, $localVariables, $isGlobal, $javaPrinter) {
        var $expression, $value;
        $expression = $showMsgStmt.$value22;
        if (tj_PythonTranslator_evalExpression($this, $expression, $localVariables, $isGlobal) === null)
            return;
        if (!$this.$usedMessageBox)
            $this.$usedMessageBox = 1;
        $showMsgStmt = tj_PythonTranslator_addTabCount($this);
        $localVariables = tj_PythonTranslator_translateExpression($this, $expression, $localVariables, $isGlobal, $javaPrinter);
        $value = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($value);
        jl_AbstractStringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($value, $showMsgStmt), $rt_s(479)), $localVariables), 41);
        ju_ArrayList_add($javaPrinter, jl_AbstractStringBuilder_toString($value));
    }
    function tj_PythonTranslator_evalShowInputBox($this, $showInputBoxElmt, $localVariables, $isGlobal, $javaPrinter) {
        var $value, $expression;
        ji_PrintStream_println(jl_System_out(), $rt_s(383));
        $value = $rt_s(2);
        $expression = $showInputBoxElmt.$value2;
        if ($expression !== null)
            $value = tj_PythonTranslator_translateExpression($this, $expression, $localVariables, $isGlobal, $javaPrinter);
        $showInputBoxElmt = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($showInputBoxElmt);
        jl_AbstractStringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($showInputBoxElmt, $rt_s(483)), $value), 41);
        $localVariables = jl_AbstractStringBuilder_toString($showInputBoxElmt);
        ji_PrintStream_println(jl_System_out(), $localVariables);
        return $localVariables;
    }
    function tj_PythonTranslator_evalReturn($this, $returnStmt, $localVariables, $returnVal, $isGlobal, $javaPrinter) {
        var $expression, $value, $expr;
        $expression = $returnStmt.$value17;
        $value = null;
        $expr = $rt_s(2);
        if ($returnStmt.$hasReturn0) {
            $value = tj_PythonTranslator_evalExpression($this, $expression, $localVariables, $isGlobal);
            $returnStmt = tj_PythonTranslator_translateExpression($this, $expression, $localVariables, $isGlobal, $javaPrinter);
            $localVariables = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($localVariables);
            jl_AbstractStringBuilder_append($localVariables, 32);
            jl_StringBuilder_append($localVariables, $returnStmt);
            $expr = jl_AbstractStringBuilder_toString($localVariables);
        }
        $returnVal.$hasReturn = 1;
        $returnVal.$value0 = $value;
        $returnStmt = tj_PythonTranslator_addTabCount($this);
        $localVariables = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($localVariables);
        jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($localVariables, $returnStmt), $rt_s(198)), $expr);
        ju_ArrayList_add($javaPrinter, jl_AbstractStringBuilder_toString($localVariables));
    }
    function tj_PythonTranslator_evalMutation($this, $mutationStmt, $localVariables, $isGlobal, $javaPrinter) {
        var $type, $name, $varType, $value, $list, $expression, $exprJustOne, $elements, $line, $integer, $newVal;
        $type = $mutationStmt.$mutationType;
        $name = $mutationStmt.$varName;
        $varType = tj_Variables_getVariableType($this.$globalVariables1, $name);
        $value = tj_PythonTranslator_evalExpression($this, $mutationStmt.$value23, $localVariables, $isGlobal);
        tj_JavaishVal$JavaishType_$callClinit();
        if ($varType !== tj_JavaishVal$JavaishType_STRINGLIST && $varType !== tj_JavaishVal$JavaishType_BOOLEANLIST && $varType !== tj_JavaishVal$JavaishType_INTLIST && $varType !== tj_JavaishVal$JavaishType_FLOATLIST) {
            $list = tj_Variables_isVariable($localVariables, $name) ? tj_Variables_getVariableValue($localVariables, $name) : tj_Variables_getVariableValue($this.$globalVariables1, $name);
            if ($list === null) {
                tj_Error_VariableNotDeclared($name, $this.$lineNumber1);
                return;
            }
            if ($list.$getType0() === tj_JavaishVal$JavaishType_STRING) {
                tj_Statements$MutationType_$callClinit();
                if ($type !== tj_Statements$MutationType_ADD) {
                    tj_Error_CantPerformMutation($list.$typeString(), $this.$lineNumber1);
                    return;
                }
            }
            $expression = $mutationStmt.$value23;
            $exprJustOne = 0;
            $elements = $expression.$elements.data;
            if ($elements.length == 1) {
                $line = $elements[0].$type0;
                tj_Element$ElementType_$callClinit();
                if ($line === tj_Element$ElementType_INTEGER && $elements[0].$value26 == 1)
                    $exprJustOne = 1;
            }
            a: {
                $line = tj_PythonTranslator_addTabCount($this);
                tj_PythonTranslator$1_$callClinit();
                switch (tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$Statements$MutationType.data[$type.$ordinal0]) {
                    case 1:
                        $mutationStmt = tj_PythonTranslator_translateExpression($this, $expression, $localVariables, $isGlobal, $javaPrinter);
                        $expression = new jl_StringBuilder;
                        jl_AbstractStringBuilder__init_($expression);
                        jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($expression, $line), $name), $rt_s(380)), $mutationStmt);
                        $line = jl_AbstractStringBuilder_toString($expression);
                        break a;
                    case 2:
                        $integer = tj_PythonTranslator_translateExpression($this, $expression, $localVariables, $isGlobal, $javaPrinter);
                        $varType = new jl_StringBuilder;
                        jl_AbstractStringBuilder__init_($varType);
                        jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($varType, $line), $name), $rt_s(387)), $integer);
                        $line = jl_AbstractStringBuilder_toString($varType);
                        break a;
                    case 3:
                        if (!$exprJustOne) {
                            $integer = tj_PythonTranslator_translateExpression($this, $expression, $localVariables, $isGlobal, $javaPrinter);
                            $mutationStmt = new jl_StringBuilder;
                            jl_AbstractStringBuilder__init_($mutationStmt);
                            jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($mutationStmt, $line), $name), $rt_s(388)), $integer);
                            $line = jl_AbstractStringBuilder_toString($mutationStmt);
                            break a;
                        }
                        $integer = tj_PythonTranslator_translateExpression($this, $expression, $localVariables, $isGlobal, $javaPrinter);
                        $mutationStmt = new jl_StringBuilder;
                        jl_AbstractStringBuilder__init_($mutationStmt);
                        jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($mutationStmt, $line), $name), $rt_s(388)), $integer);
                        $line = jl_AbstractStringBuilder_toString($mutationStmt);
                        break a;
                    case 4:
                        if (!$exprJustOne) {
                            $integer = tj_PythonTranslator_translateExpression($this, $expression, $localVariables, $isGlobal, $javaPrinter);
                            $mutationStmt = new jl_StringBuilder;
                            jl_AbstractStringBuilder__init_($mutationStmt);
                            jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($mutationStmt, $line), $name), $rt_s(389)), $integer);
                            $line = jl_AbstractStringBuilder_toString($mutationStmt);
                            break a;
                        }
                        $integer = tj_PythonTranslator_translateExpression($this, $expression, $localVariables, $isGlobal, $javaPrinter);
                        $mutationStmt = new jl_StringBuilder;
                        jl_AbstractStringBuilder__init_($mutationStmt);
                        jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($mutationStmt, $line), $name), $rt_s(389)), $integer);
                        $line = jl_AbstractStringBuilder_toString($mutationStmt);
                        break a;
                    default:
                }
            }
            ju_ArrayList_add($javaPrinter, $line);
            $newVal = tj_PythonTranslator_performOperation($this, tj_PythonTranslator_mutationTypeToOperator($this, $type), $list, $value);
            if (tj_Variables_isVariable($localVariables, $name)) {
                tj_Variables_setVariableValue($localVariables, $name, $newVal, $this.$lineNumber1);
                return;
            }
            tj_Variables_setVariableValue($this.$globalVariables1, $name, $newVal, $this.$lineNumber1);
            return;
        }
        $expression = tj_Variables_isVariable($localVariables, $name) ? (tj_Variables_getList($localVariables, $name)).$list : (tj_Variables_getList($this.$globalVariables1, $name)).$list;
        if ($expression === null) {
            tj_Error_VariableNotDeclared($name, $this.$lineNumber1);
            return;
        }
        $list = tj_PythonTranslator_performListOperation($this, tj_PythonTranslator_mutationTypeToOperator($this, $type), $expression, $value, 0);
        $expression = tj_PythonTranslator_addTabCount($this);
        $mutationStmt = tj_PythonTranslator_translateExpression($this, $mutationStmt.$value23, $localVariables, $isGlobal, $javaPrinter);
        $type = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($type);
        jl_AbstractStringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($type, $expression), $name), $rt_s(484)), $mutationStmt), 41);
        ju_ArrayList_add($javaPrinter, jl_AbstractStringBuilder_toString($type));
        if (tj_Variables_isVariable($localVariables, $name)) {
            tj_Variables_setVariableValue($localVariables, $name, tj_JavaishListVal__init_($list), $this.$lineNumber1);
            return;
        }
        tj_Variables_setVariableValue($this.$globalVariables1, $name, tj_JavaishListVal__init_($list), $this.$lineNumber1);
    }
    function tj_PythonTranslator_evalRemoveAt($this, $removeAtStmt, $localVariables, $isGlobal, $javaPrinter) {
        var $name, $varType, $index, $indexVal, $list;
        $name = $removeAtStmt.$listName0;
        $varType = tj_Variables_getVariableType($this.$globalVariables1, $name);
        $index = tj_PythonTranslator_evalExpression($this, $removeAtStmt.$location, $localVariables, $isGlobal);
        tj_JavaishVal$JavaishType_$callClinit();
        if ($varType !== tj_JavaishVal$JavaishType_STRINGLIST && $varType !== tj_JavaishVal$JavaishType_BOOLEANLIST && $varType !== tj_JavaishVal$JavaishType_INTLIST && $varType !== tj_JavaishVal$JavaishType_FLOATLIST) {
            tj_Error_TypeMismatch($rt_s(293), $varType.$name4, $this.$lineNumber1);
            return;
        }
        $varType = tj_Variables_isVariable($localVariables, $name) ? (tj_Variables_getList($localVariables, $name)).$list : (tj_Variables_getList($this.$globalVariables1, $name)).$list;
        if ($varType === null) {
            tj_Error_VariableNotDeclared($name, $this.$lineNumber1);
            return;
        }
        if ($index.$getType0() !== tj_JavaishVal$JavaishType_INT) {
            tj_Error_TypeMismatch($rt_s(187), $index.$typeString(), $this.$lineNumber1);
            return;
        }
        $indexVal = (tj_JavaishInt_getValue($index)).$value;
        tj_PythonTranslator$Operator_$callClinit();
        $list = tj_PythonTranslator_performListOperation($this, tj_PythonTranslator$Operator_REMOVEAT, $varType, null, $indexVal);
        $removeAtStmt = tj_PythonTranslator_addTabCount($this);
        $varType = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($varType);
        jl_AbstractStringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($varType, $removeAtStmt), $name), $rt_s(485)), $indexVal), 41);
        ju_ArrayList_add($javaPrinter, jl_AbstractStringBuilder_toString($varType));
        if (tj_Variables_isVariable($localVariables, $name)) {
            tj_Variables_setVariableValue($localVariables, $name, tj_JavaishListVal__init_($list), $this.$lineNumber1);
            return;
        }
        tj_Variables_setVariableValue($this.$globalVariables1, $name, tj_JavaishListVal__init_($list), $this.$lineNumber1);
    }
    function tj_PythonTranslator_evalRemoveFrom($this, $removeFromStmt, $localVariables, $isGlobal, $javaPrinter) {
        var $name, $varType, $value, var$8, $list, var$10;
        $name = $removeFromStmt.$listName1;
        $varType = tj_Variables_getVariableType($this.$globalVariables1, $name);
        $value = tj_PythonTranslator_evalExpression($this, $removeFromStmt.$value24, $localVariables, $isGlobal);
        tj_JavaishVal$JavaishType_$callClinit();
        if ($varType !== tj_JavaishVal$JavaishType_STRINGLIST && $varType !== tj_JavaishVal$JavaishType_BOOLEANLIST && $varType !== tj_JavaishVal$JavaishType_INTLIST && $varType !== tj_JavaishVal$JavaishType_FLOATLIST)
            return;
        var$8 = tj_Variables_isVariable($localVariables, $name) ? (tj_Variables_getList($localVariables, $name)).$list : (tj_Variables_getList($this.$globalVariables1, $name)).$list;
        if (var$8 === null) {
            tj_Error_VariableNotDeclared($name, $this.$lineNumber1);
            return;
        }
        tj_PythonTranslator$Operator_$callClinit();
        $list = tj_PythonTranslator_performListOperation($this, tj_PythonTranslator$Operator_REMOVEFROM, var$8, $value, 0);
        var$10 = jl_System_out();
        var$8 = $list.$listString();
        $value = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($value);
        jl_StringBuilder_append(jl_StringBuilder_append($value, $rt_s(300)), var$8);
        ji_PrintStream_println(var$10, jl_AbstractStringBuilder_toString($value));
        if ($varType !== tj_JavaishVal$JavaishType_INTLIST) {
            var$8 = tj_PythonTranslator_addTabCount($this);
            $removeFromStmt = tj_PythonTranslator_translateExpression($this, $removeFromStmt.$value24, $localVariables, $isGlobal, $javaPrinter);
            var$10 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_(var$10);
            jl_AbstractStringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$10, var$8), $name), $rt_s(391)), $removeFromStmt), 41);
            ju_ArrayList_add($javaPrinter, jl_AbstractStringBuilder_toString(var$10));
        } else {
            var$8 = tj_PythonTranslator_addTabCount($this);
            $value = tj_PythonTranslator_translateExpression($this, $removeFromStmt.$value24, $localVariables, $isGlobal, $javaPrinter);
            $removeFromStmt = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($removeFromStmt);
            jl_AbstractStringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($removeFromStmt, var$8), $name), $rt_s(391)), $value), 41);
            ju_ArrayList_add($javaPrinter, jl_AbstractStringBuilder_toString($removeFromStmt));
        }
        if (tj_Variables_isVariable($localVariables, $name)) {
            tj_Variables_setVariableValue($localVariables, $name, tj_JavaishListVal__init_($list), $this.$lineNumber1);
            return;
        }
        tj_Variables_setVariableValue($this.$globalVariables1, $name, tj_JavaishListVal__init_($list), $this.$lineNumber1);
    }
    function tj_PythonTranslator_evalRemoveAllFrom($this, $removeAllFromStmt, $localVariables, $isGlobal, $javaPrinter) {
        var $name, $varType, $value, $list, var$9;
        $name = $removeAllFromStmt.$listName2;
        $varType = tj_Variables_getVariableType($this.$globalVariables1, $name);
        $value = tj_PythonTranslator_evalExpression($this, $removeAllFromStmt.$value25, $localVariables, $isGlobal);
        tj_JavaishVal$JavaishType_$callClinit();
        if ($varType !== tj_JavaishVal$JavaishType_STRINGLIST && $varType !== tj_JavaishVal$JavaishType_BOOLEANLIST && $varType !== tj_JavaishVal$JavaishType_INTLIST && $varType !== tj_JavaishVal$JavaishType_FLOATLIST)
            return;
        $list = tj_Variables_isVariable($localVariables, $name) ? (tj_Variables_getList($localVariables, $name)).$list : (tj_Variables_getList($this.$globalVariables1, $name)).$list;
        if ($list === null) {
            tj_Error_VariableNotDeclared($name, $this.$lineNumber1);
            return;
        }
        tj_PythonTranslator$Operator_$callClinit();
        $list = tj_PythonTranslator_performListOperation($this, tj_PythonTranslator$Operator_REMOVEALLFROM, $list, $value, 0);
        $varType = jl_System_out();
        $value = $list.$listString();
        var$9 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$9);
        jl_StringBuilder_append(jl_StringBuilder_append(var$9, $rt_s(300)), $value);
        ji_PrintStream_println($varType, jl_AbstractStringBuilder_toString(var$9));
        $value = tj_PythonTranslator_addTabCount($this);
        $varType = tj_PythonTranslator_translateExpression($this, $removeAllFromStmt.$value25, $localVariables, $isGlobal, $javaPrinter);
        var$9 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$9);
        jl_AbstractStringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$9, $value), $name), $rt_s(486)), $name), $rt_s(487)), $varType), 93);
        ju_ArrayList_add($javaPrinter, jl_AbstractStringBuilder_toString(var$9));
        if (tj_Variables_isVariable($localVariables, $name)) {
            tj_Variables_setVariableValue($localVariables, $name, tj_JavaishListVal__init_($list), $this.$lineNumber1);
            return;
        }
        tj_Variables_setVariableValue($this.$globalVariables1, $name, tj_JavaishListVal__init_($list), $this.$lineNumber1);
    }
    function tj_PythonTranslator_performListOperation($this, $operation, $list, $val, $index) {
        var $result, $listInnerType, $valType, $booleanListVal, $floatListVal, $intVal, $intListVal, $stringListVal, $booleanVal, $i, $stringVal;
        a: {
            $result = null;
            tj_PythonTranslator$1_$callClinit();
            switch (tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$PythonTranslator$Operator.data[jl_Enum_ordinal($operation)]) {
                case 7:
                    $listInnerType = $list.$getInnerType();
                    $valType = $val.$getType0();
                    if ($listInnerType !== $valType) {
                        tj_Error_TypeMismatch(jl_Enum_toString($listInnerType), jl_Enum_toString($valType), $this.$lineNumber1);
                        return null;
                    }
                    $operation = $list.$getType0();
                    tj_JavaishVal$JavaishType_$callClinit();
                    if ($operation === tj_JavaishVal$JavaishType_BOOLEANLIST) {
                        $booleanListVal = tj_JavaishBooleanList_getList($list);
                        ju_ArrayList_add($booleanListVal, $val);
                        $result = tj_JavaishBooleanList__init_($booleanListVal);
                        break a;
                    }
                    if ($list.$getType0() === tj_JavaishVal$JavaishType_FLOATLIST) {
                        $floatListVal = tj_JavaishFloatList_getList($list);
                        if ($val.$getType0() !== tj_JavaishVal$JavaishType_INT)
                            ju_ArrayList_add($floatListVal, $val);
                        else {
                            $intVal = $val;
                            ju_ArrayList_add($floatListVal, tj_JavaishFloat__init_(jl_Integer_intValue(tj_JavaishInt_getValue($intVal))));
                        }
                        $result = tj_JavaishFloatList__init_($floatListVal);
                        break a;
                    }
                    if ($list.$getType0() === tj_JavaishVal$JavaishType_INTLIST) {
                        $intListVal = tj_JavaishIntList_getList($list);
                        ju_ArrayList_add($intListVal, $val);
                        $result = tj_JavaishIntList__init_($intListVal);
                        break a;
                    }
                    if ($list.$getType0() !== tj_JavaishVal$JavaishType_STRINGLIST)
                        break a;
                    $stringListVal = tj_JavaishStringList_getList($list);
                    ju_ArrayList_add($stringListVal, $val);
                    $result = tj_JavaishStringList__init_($stringListVal);
                    break a;
                case 8:
                case 9:
                case 10:
                    break;
                case 11:
                    $operation = $list.$getType0();
                    tj_JavaishVal$JavaishType_$callClinit();
                    if ($operation === tj_JavaishVal$JavaishType_BOOLEANLIST) {
                        $booleanListVal = tj_JavaishBooleanList_getList($list);
                        ju_ArrayList_remove($booleanListVal, $index);
                        $result = tj_JavaishBooleanList__init_($booleanListVal);
                        break a;
                    }
                    if ($list.$getType0() === tj_JavaishVal$JavaishType_FLOATLIST) {
                        $floatListVal = tj_JavaishFloatList_getList($list);
                        ju_ArrayList_remove($floatListVal, $index);
                        $result = tj_JavaishFloatList__init_($floatListVal);
                        break a;
                    }
                    if ($list.$getType0() === tj_JavaishVal$JavaishType_INTLIST) {
                        $intListVal = tj_JavaishIntList_getList($list);
                        ju_ArrayList_remove($intListVal, $index);
                        $result = tj_JavaishIntList__init_($intListVal);
                        break a;
                    }
                    if ($list.$getType0() !== tj_JavaishVal$JavaishType_STRINGLIST)
                        break a;
                    $stringListVal = tj_JavaishStringList_getList($list);
                    ju_ArrayList_remove($stringListVal, $index);
                    $result = tj_JavaishStringList__init_($stringListVal);
                    break a;
                case 12:
                    $operation = $list.$getType0();
                    tj_JavaishVal$JavaishType_$callClinit();
                    if ($operation === tj_JavaishVal$JavaishType_BOOLEANLIST) {
                        $booleanListVal = tj_JavaishBooleanList_getList($list);
                        $booleanVal = $val;
                        $i = 0;
                        b: {
                            while (true) {
                                if ($i >= ju_ArrayList_size($booleanListVal))
                                    break b;
                                if (tj_JavaishBoolean_getValue(ju_ArrayList_get($booleanListVal, $i)) === tj_JavaishBoolean_getValue($booleanVal))
                                    break;
                                $i = $i + 1 | 0;
                            }
                            ju_ArrayList_remove($booleanListVal, $i);
                        }
                        $result = tj_JavaishBooleanList__init_($booleanListVal);
                        break a;
                    }
                    if ($list.$getType0() === tj_JavaishVal$JavaishType_FLOATLIST) {
                        $floatListVal = tj_JavaishFloatList_getList($list);
                        if ($val.$getType0() !== tj_JavaishVal$JavaishType_INT)
                            $operation = $val;
                        else {
                            $intVal = $val;
                            $operation = tj_JavaishFloat__init_(jl_Integer_intValue(tj_JavaishInt_getValue($intVal)));
                        }
                        $i = 0;
                        c: {
                            while (true) {
                                if ($i >= ju_ArrayList_size($floatListVal))
                                    break c;
                                if (tj_JavaishFloat_getValue(ju_ArrayList_get($floatListVal, $i)) === tj_JavaishFloat_getValue($operation))
                                    break;
                                $i = $i + 1 | 0;
                            }
                            ju_ArrayList_remove($floatListVal, $i);
                        }
                        $result = tj_JavaishFloatList__init_($floatListVal);
                        break a;
                    }
                    if ($list.$getType0() !== tj_JavaishVal$JavaishType_INTLIST) {
                        if ($list.$getType0() !== tj_JavaishVal$JavaishType_STRINGLIST)
                            break a;
                        $stringListVal = tj_JavaishStringList_getList($list);
                        $stringVal = $val;
                        $i = 0;
                        d: {
                            while (true) {
                                if ($i >= ju_ArrayList_size($stringListVal))
                                    break d;
                                if (jl_String_equals(tj_JavaishString_getValue(ju_ArrayList_get($stringListVal, $i)), tj_JavaishString_getValue($stringVal)))
                                    break;
                                $i = $i + 1 | 0;
                            }
                            ju_ArrayList_remove($stringListVal, $i);
                        }
                        $result = tj_JavaishStringList__init_($stringListVal);
                        break a;
                    }
                    $intListVal = tj_JavaishIntList_getList($list);
                    $intVal = $val;
                    $i = 0;
                    e: {
                        while (true) {
                            if ($i >= ju_ArrayList_size($intListVal))
                                break e;
                            if (tj_JavaishInt_getValue(ju_ArrayList_get($intListVal, $i)) === tj_JavaishInt_getValue($intVal))
                                break;
                            $i = $i + 1 | 0;
                        }
                        ju_ArrayList_remove($intListVal, $i);
                    }
                    $result = tj_JavaishIntList__init_($intListVal);
                    $operation = jl_System_out();
                    $list = jl_String_valueOf(tj_JavaishInt_getType($intVal));
                    $index = ju_ArrayList_size($intListVal);
                    $val = jl_StringBuilder__init_();
                    jl_StringBuilder_append0(jl_StringBuilder_append3(jl_StringBuilder_append(jl_StringBuilder_append($val, $rt_s(301)), $list), 32), $index);
                    ji_PrintStream_println($operation, jl_StringBuilder_toString($val));
                    break a;
                case 13:
                    $operation = $list.$getType0();
                    tj_JavaishVal$JavaishType_$callClinit();
                    if ($operation === tj_JavaishVal$JavaishType_BOOLEANLIST) {
                        $booleanListVal = tj_JavaishBooleanList_getList($list);
                        $booleanVal = $val;
                        $i = 0;
                        while ($i < ju_ArrayList_size($booleanListVal)) {
                            if (tj_JavaishBoolean_getValue(ju_ArrayList_get($booleanListVal, $i)) === tj_JavaishBoolean_getValue($booleanVal)) {
                                ju_ArrayList_remove($booleanListVal, $i);
                                $i = $i + (-1) | 0;
                            }
                            $i = $i + 1 | 0;
                        }
                        $result = tj_JavaishBooleanList__init_($booleanListVal);
                        break a;
                    }
                    if ($list.$getType0() === tj_JavaishVal$JavaishType_FLOATLIST) {
                        $floatListVal = tj_JavaishFloatList_getList($list);
                        if ($val.$getType0() !== tj_JavaishVal$JavaishType_INT)
                            $operation = $val;
                        else {
                            $intVal = $val;
                            $operation = tj_JavaishFloat__init_(jl_Integer_intValue(tj_JavaishInt_getValue($intVal)));
                        }
                        $i = 0;
                        while ($i < ju_ArrayList_size($floatListVal)) {
                            if (tj_JavaishFloat_getValue(ju_ArrayList_get($floatListVal, $i)) === tj_JavaishFloat_getValue($operation)) {
                                ju_ArrayList_remove($floatListVal, $i);
                                $i = $i + (-1) | 0;
                            }
                            $i = $i + 1 | 0;
                        }
                        $result = tj_JavaishFloatList__init_($floatListVal);
                        break a;
                    }
                    if ($list.$getType0() === tj_JavaishVal$JavaishType_INTLIST) {
                        $intListVal = tj_JavaishIntList_getList($list);
                        $intVal = $val;
                        $i = 0;
                        while ($i < ju_ArrayList_size($intListVal)) {
                            if (tj_JavaishInt_getValue(ju_ArrayList_get($intListVal, $i)) === tj_JavaishInt_getValue($intVal)) {
                                ju_ArrayList_remove($intListVal, $i);
                                $i = $i + (-1) | 0;
                            }
                            $i = $i + 1 | 0;
                        }
                        $result = tj_JavaishIntList__init_($intListVal);
                        break a;
                    }
                    if ($list.$getType0() !== tj_JavaishVal$JavaishType_STRINGLIST)
                        break a;
                    $stringListVal = tj_JavaishStringList_getList($list);
                    $stringVal = $val;
                    $i = 0;
                    while ($i < ju_ArrayList_size($stringListVal)) {
                        if (jl_String_equals(tj_JavaishString_getValue(ju_ArrayList_get($stringListVal, $i)), tj_JavaishString_getValue($stringVal))) {
                            ju_ArrayList_remove($stringListVal, $i);
                            $i = $i + (-1) | 0;
                        }
                        $i = $i + 1 | 0;
                    }
                    $result = tj_JavaishStringList__init_($stringListVal);
                    break a;
                default:
            }
            tj_Error_CantPerformOperation(jl_Enum_toString($operation), $list.$typeString(), $this.$lineNumber1);
        }
        return $result;
    }
    function tj_PythonTranslator_mutationTypeToOperator($this, $type) {
        tj_PythonTranslator$1_$callClinit();
        switch (tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$Statements$MutationType.data[$type.$ordinal0]) {
            case 1:
                tj_PythonTranslator$Operator_$callClinit();
                return tj_PythonTranslator$Operator_PLUS;
            case 2:
                tj_PythonTranslator$Operator_$callClinit();
                return tj_PythonTranslator$Operator_MINUS;
            case 3:
                tj_PythonTranslator$Operator_$callClinit();
                return tj_PythonTranslator$Operator_MULTIPLY;
            case 4:
                tj_PythonTranslator$Operator_$callClinit();
                return tj_PythonTranslator$Operator_DIVIDE;
            default:
        }
        return null;
    }
    function tj_PythonTranslator_typeToString($this, $value) {
        tj_PythonTranslator$1_$callClinit();
        switch (tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$JavaishVal$JavaishType.data[$value.$ordinal0]) {
            case 1:
                break;
            case 2:
                return $rt_s(244);
            case 3:
                return $rt_s(186);
            case 4:
                return $rt_s(395);
            case 5:
                return $rt_s(244);
            case 6:
                return $rt_s(246);
            case 7:
                return $rt_s(186);
            case 8:
                return $rt_s(395);
            case 9:
                return $rt_s(293);
            default:
                return null;
        }
        return $rt_s(246);
    }
    function tj_PythonTranslator_addTabCount($this) {
        var $tabs, $i, var$3;
        $tabs = $rt_s(2);
        $i = 0;
        while ($i < $this.$tabCount0) {
            var$3 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_(var$3);
            jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$3, $tabs), 9);
            $tabs = jl_AbstractStringBuilder_toString(var$3);
            $i = $i + 1 | 0;
        }
        return $tabs;
    }
    var jn_URLEncoder = $rt_classWithoutFields();
    function jn_URLEncoder_encode($s, $enc) {
        var $buf, $start, $i, $ch;
        ju_Objects_requireNonNull($s);
        ju_Objects_requireNonNull($enc);
        $buf = new jl_StringBuffer;
        jl_AbstractStringBuilder__init_2($buf, jl_String_length($s) + 16 | 0);
        $start = (-1);
        $i = 0;
        while ($i < jl_String_length($s)) {
            $ch = jl_String_charAt($s, $i);
            if (!(!($ch >= 97 && $ch <= 122) && !($ch >= 65 && $ch <= 90) && !($ch >= 48 && $ch <= 57) && jl_String_indexOf0($rt_s(488), $ch) <= (-1))) {
                if ($start >= 0) {
                    jn_URLEncoder_convert(jl_String_substring($s, $start, $i), $buf, $enc);
                    $start = (-1);
                }
                if ($ch != 32)
                    jl_AbstractStringBuilder_append($buf, $ch);
                else
                    jl_AbstractStringBuilder_append($buf, 43);
            } else if ($start < 0)
                $start = $i;
            $i = $i + 1 | 0;
        }
        if ($start >= 0)
            jn_URLEncoder_convert(jl_String_substring0($s, $start), $buf, $enc);
        return jl_AbstractStringBuilder_toString($buf);
    }
    function jn_URLEncoder_convert($s, $buf, $enc) {
        var $bytes, var$5, $j, var$7, var$8, var$9, var$10, var$11, var$12, var$13, var$14;
        $bytes = $s.$characters;
        $s = jnc_Charset_encode($enc, jn_CharBuffer_wrap($bytes, 0, $bytes.data.length));
        if (!$s.$position && $s.$limit == $s.$capacity)
            $bytes = $s.$array0;
        else {
            $bytes = $rt_createByteArray(jn_Buffer_remaining($s));
            var$5 = $bytes.data;
            $j = 0;
            var$7 = var$5.length;
            if ($j > var$7) {
                $enc = new jl_IndexOutOfBoundsException;
                $s = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_($s);
                jl_AbstractStringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append($s, $rt_s(489)), $j), $rt_s(490)), var$7), 41);
                jl_Throwable__init_($enc, jl_AbstractStringBuilder_toString($s));
                $rt_throw($enc);
            }
            var$8 = $j + var$7 | 0;
            if (var$8 > var$7) {
                $s = new jl_IndexOutOfBoundsException;
                $buf = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_($buf);
                jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append($buf, $rt_s(491)), var$8), $rt_s(492)), var$7);
                jl_Throwable__init_($s, jl_AbstractStringBuilder_toString($buf));
                $rt_throw($s);
            }
            if (jn_Buffer_remaining($s) < var$7) {
                $s = new jn_BufferUnderflowException;
                jl_Exception__init_($s);
                $rt_throw($s);
            }
            if (var$7 < 0) {
                $s = new jl_IndexOutOfBoundsException;
                $buf = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_($buf);
                jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append($buf, $rt_s(493)), var$7), $rt_s(494));
                jl_Throwable__init_($s, jl_AbstractStringBuilder_toString($buf));
                $rt_throw($s);
            }
            var$9 = $s.$position;
            var$10 = var$9 + $s.$start2 | 0;
            var$11 = 0;
            while (var$11 < var$7) {
                var$12 = $j + 1 | 0;
                var$13 = $s.$array0.data;
                var$14 = var$10 + 1 | 0;
                var$5[$j] = var$13[var$10];
                var$11 = var$11 + 1 | 0;
                $j = var$12;
                var$10 = var$14;
            }
            $s.$position = var$9 + var$7 | 0;
        }
        $j = 0;
        while (true) {
            var$5 = $bytes.data;
            if ($j >= var$5.length)
                break;
            jl_AbstractStringBuilder_append($buf, 37);
            jl_AbstractStringBuilder_append($buf, jl_String_charAt($rt_s(495), (var$5[$j] & 240) >> 4));
            jl_AbstractStringBuilder_append($buf, jl_String_charAt($rt_s(495), var$5[$j] & 15));
            $j = $j + 1 | 0;
        }
    }
    function jn_URL() {
        var a = this; jl_Object.call(a);
        a.$hashCode1 = 0;
        a.$file = null;
        a.$protocol = null;
        a.$host = null;
        a.$port = 0;
        a.$authority = null;
        a.$userInfo = null;
        a.$path = null;
        a.$query = null;
        a.$ref = null;
        a.$strmHandler = null;
    }
    var jn_URL_streamHandlers = null;
    var jn_URL_streamHandlerFactory = null;
    function jn_URL__init_(var_0, var_1, var_2) {
        var var_3 = new jn_URL();
        jn_URL__init_0(var_3, var_0, var_1, var_2);
        return var_3;
    }
    function jn_URL__init_0($this, $context, $spec, $handler) {
        var $index, $e, $startIPv6Addr, $c, $valid, $i, $cPath, $$je;
        $this.$port = (-1);
        $this.$strmHandler = $handler;
        if ($spec === null) {
            $context = new jn_MalformedURLException;
            jl_Exception__init_($context);
            $rt_throw($context);
        }
        $handler = jl_String_trim($spec);
        a: {
            try {
                $index = jl_String_indexOf0($handler, 58);
                break a;
            } catch ($$e) {
                $$je = $rt_wrapException($$e);
                if ($$je instanceof jl_NullPointerException) {
                    $e = $$je;
                } else {
                    throw $$e;
                }
            }
            $context = new jn_MalformedURLException;
            jl_Throwable__init_($context, $e.$toString());
            $rt_throw($context);
        }
        $startIPv6Addr = jl_String_indexOf0($handler, 91);
        if ($index > 0 && !($startIPv6Addr != (-1) && $index >= $startIPv6Addr)) {
            b: {
                c: {
                    $spec = jl_String_substring($handler, 0, $index);
                    $this.$protocol = $spec;
                    $c = jl_String_charAt($spec, 0);
                    if (!(97 <= $c && $c <= 122)) {
                        if (65 > $c)
                            break c;
                        if ($c > 90)
                            break c;
                    }
                    $valid = 1;
                    break b;
                }
                $valid = 0;
            }
            $i = 1;
            while ($valid && $i < jl_String_length($this.$protocol)) {
                $valid = jl_String_charAt($this.$protocol, $i);
                $valid = !(97 <= $valid && $valid <= 122) && !(65 <= $valid && $valid <= 90) && !(48 <= $valid && $valid <= 57) && $valid != 43 && $valid != 45 && $valid != 46 ? 0 : 1;
                $i = $i + 1 | 0;
            }
            if ($valid)
                $this.$protocol = jl_String_toLowerCase($this.$protocol);
            else {
                $this.$protocol = null;
                $index = (-1);
            }
        }
        $e = $this.$protocol;
        if ($e === null) {
            if ($context === null) {
                $context = new jn_MalformedURLException;
                jl_Exception__init_($context);
                $rt_throw($context);
            }
            jn_URL_set($this, $context.$protocol, $context.$host, $context.$port, $context.$authority, $context.$userInfo, $context.$path, $context.$query, null);
            if ($this.$strmHandler === null)
                $this.$strmHandler = $context.$strmHandler;
        } else if ($context !== null && jl_String_equals($e, $context.$protocol)) {
            $cPath = $context.$path;
            if ($cPath !== null && $cPath.$startsWith0($rt_s(496)))
                jn_URL_set($this, $this.$protocol, $context.$host, $context.$port, $context.$authority, $context.$userInfo, $cPath, $context.$query, null);
            if ($this.$strmHandler === null)
                $this.$strmHandler = $context.$strmHandler;
        }
        if ($this.$strmHandler === null) {
            d: {
                $context = ju_HashMap_get(jn_URL_streamHandlers, $this.$protocol);
                $this.$strmHandler = $context;
                if ($context === null) {
                    $context = jn_URL_streamHandlerFactory;
                    if ($context !== null) {
                        $context = $context.$createURLStreamHandler($this.$protocol);
                        $this.$strmHandler = $context;
                        if ($context !== null) {
                            ju_HashMap_put(jn_URL_streamHandlers, $this.$protocol, $context);
                            break d;
                        }
                    }
                    e: {
                        $context = $this.$protocol;
                        $startIPv6Addr = (-1);
                        switch (jl_String_hashCode($context)) {
                            case 101730:
                                if (!jl_String_equals($context, $rt_s(497)))
                                    break e;
                                $startIPv6Addr = 2;
                                break e;
                            case 3213448:
                                if (!jl_String_equals($context, $rt_s(498)))
                                    break e;
                                $startIPv6Addr = 0;
                                break e;
                            case 99617003:
                                if (!jl_String_equals($context, $rt_s(499)))
                                    break e;
                                $startIPv6Addr = 1;
                                break e;
                            default:
                        }
                    }
                    f: {
                        switch ($startIPv6Addr) {
                            case 0:
                            case 1:
                                $this.$strmHandler = new jni_XHRStreamHandler;
                                break f;
                            case 2:
                                break;
                            default:
                                $this.$strmHandler = jni_DummyStreamHandler__init_((-1));
                                break f;
                        }
                        $this.$strmHandler = jni_DummyStreamHandler__init_(21);
                    }
                }
            }
            if ($this.$strmHandler === null) {
                $context = new jn_MalformedURLException;
                jl_Exception__init_($context);
                $rt_throw($context);
            }
        }
        g: {
            try {
                jn_URLStreamHandler_parseURL($this.$strmHandler, $this, $handler, $index + 1 | 0, jl_String_length($handler));
                break g;
            } catch ($$e) {
                $$je = $rt_wrapException($$e);
                if ($$je instanceof jl_Exception) {
                    $e = $$je;
                } else {
                    throw $$e;
                }
            }
            $context = new jn_MalformedURLException;
            jl_Throwable__init_($context, jl_Throwable_toString($e));
            $rt_throw($context);
        }
        if ($this.$port >= (-1))
            return;
        $context = new jn_MalformedURLException;
        jl_Exception__init_($context);
        $rt_throw($context);
    }
    function jn_URL_set($this, $protocol, $host, $port, $authority, $userInfo, $path, $query, $ref) {
        var var$9, var$10, var$11;
        if ($query === null)
            var$9 = $path;
        else if (jl_String_isEmpty($query))
            var$9 = $path;
        else if ($path === null) {
            var$9 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_(var$9);
            jl_AbstractStringBuilder_append(var$9, 63);
            jl_StringBuilder_append(var$9, $query);
            var$9 = jl_AbstractStringBuilder_toString(var$9);
        } else {
            var$9 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_(var$9);
            var$10 = jl_StringBuilder_append(var$9, $path);
            jl_AbstractStringBuilder_append(var$10, 63);
            jl_StringBuilder_append(var$10, $query);
            var$9 = jl_AbstractStringBuilder_toString(var$9);
        }
        if ($this.$protocol === null)
            $this.$protocol = $protocol;
        $this.$host = $host;
        $this.$file = var$9;
        $this.$port = $port;
        $this.$ref = $ref;
        $this.$hashCode1 = 0;
        if ($host !== null && jl_String_length($host) > 0) {
            $protocol = $this.$host;
            $this.$authority = $protocol;
            $port = $this.$port;
            if ($port != (-1)) {
                $host = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_($host);
                $protocol = jl_StringBuilder_append($host, $protocol);
                jl_AbstractStringBuilder_append($protocol, 58);
                jl_StringBuilder_append0($protocol, $port);
                $this.$authority = jl_AbstractStringBuilder_toString($host);
            }
        }
        $port = (-1);
        $protocol = $this.$host;
        if ($protocol !== null)
            $port = jl_String_lastIndexOf($protocol, 64);
        if ($port < 0)
            $this.$userInfo = null;
        else {
            $this.$userInfo = jl_String_substring($this.$host, 0, $port);
            $this.$host = jl_String_substring0($this.$host, $port + 1 | 0);
        }
        var$11 = (-1);
        $protocol = $this.$file;
        if ($protocol !== null)
            var$11 = jl_String_indexOf0($protocol, 63);
        if (var$11 < 0) {
            $this.$query = null;
            $this.$path = $this.$file;
        } else {
            $this.$query = jl_String_substring0($this.$file, var$11 + 1 | 0);
            $this.$path = jl_String_substring($this.$file, 0, var$11);
        }
        $this.$authority = $authority;
        $this.$userInfo = $userInfo;
        $this.$path = $path;
        $this.$query = $query;
    }
    function jn_URL__clinit_() {
        jn_URL_streamHandlers = ju_HashMap__init_();
    }
    function jn_URLConnection() {
        var a = this; jl_Object.call(a);
        a.$url = null;
        a.$lastModified = Long_ZERO;
        a.$useCaches = 0;
        a.$connected = 0;
        a.$doInput = 0;
        a.$allowUserInteraction = 0;
        a.$requestProperties = null;
    }
    var jn_URLConnection_defaultAllowUserInteraction = 0;
    var jn_URLConnection_defaultUseCaches = 0;
    function jn_URLConnection__clinit_() {
        jn_URLConnection_defaultUseCaches = 1;
    }
    function jn_HttpURLConnection() {
        var a = this; jn_URLConnection.call(a);
        a.$methodTokens = null;
        a.$method = null;
        a.$responseCode = 0;
        a.$responseMessage = null;
        a.$instanceFollowRedirects = 0;
        a.$chunkLength = 0;
        a.$fixedContentLength = 0;
    }
    var jn_HttpURLConnection_followRedirects = 0;
    function jn_HttpURLConnection__clinit_() {
        jn_HttpURLConnection_followRedirects = 1;
    }
    var ju_Comparator = $rt_classWithoutFields(0);
    var jl_String$_clinit_$lambda$_89_0 = $rt_classWithoutFields();
    var jl_IndexOutOfBoundsException = $rt_classWithoutFields(jl_RuntimeException);
    var jlr_Array = $rt_classWithoutFields();
    function jlr_Array_getLength(var$1) {
        if (var$1 === null || var$1.constructor.$meta.item === undefined) {
            $rt_throw(jl_IllegalArgumentException__init_());
        }
        return var$1.data.length;
    }
    function jlr_Array_newInstance($componentType, $length) {
        if ($componentType === null) {
            $componentType = new jl_NullPointerException;
            jl_Exception__init_($componentType);
            $rt_throw($componentType);
        }
        if ($componentType === $rt_cls($rt_voidcls())) {
            $componentType = new jl_IllegalArgumentException;
            jl_Exception__init_($componentType);
            $rt_throw($componentType);
        }
        if ($length >= 0)
            return jlr_Array_newInstanceImpl($componentType.$platformClass, $length);
        $componentType = new jl_NegativeArraySizeException;
        jl_Exception__init_($componentType);
        $rt_throw($componentType);
    }
    function jlr_Array_newInstanceImpl(var$1, var$2) {
        if (var$1.$meta.primitive) {
            if (var$1 == $rt_bytecls()) {
                return $rt_createByteArray(var$2);
            }
            if (var$1 == $rt_shortcls()) {
                return $rt_createShortArray(var$2);
            }
            if (var$1 == $rt_charcls()) {
                return $rt_createCharArray(var$2);
            }
            if (var$1 == $rt_intcls()) {
                return $rt_createIntArray(var$2);
            }
            if (var$1 == $rt_longcls()) {
                return $rt_createLongArray(var$2);
            }
            if (var$1 == $rt_floatcls()) {
                return $rt_createFloatArray(var$2);
            }
            if (var$1 == $rt_doublecls()) {
                return $rt_createDoubleArray(var$2);
            }
            if (var$1 == $rt_booleancls()) {
                return $rt_createBooleanArray(var$2);
            }
        } else {
            return $rt_createArray(var$1, var$2)
        }
    }
    function jlr_Array_getImpl(var$1, var$2) {
        var item = var$1.data[var$2];
        var type = var$1.constructor.$meta.item;
        if (type === $rt_intcls()) {
            return jl_Integer_valueOf(item);
        } else if (type === $rt_longcls()) {
            return jl_Long_valueOf0(item);
        } else if (type === $rt_floatcls()) {
            return jl_Float_valueOf(item);
        } else if (type === $rt_doublecls()) {
            return jl_Double_valueOf0(item);
        } else if (type === $rt_booleancls()) {
            return jl_Boolean_valueOf(item);
        } else {
            return item;
        }
    }
    var jl_NullPointerException = $rt_classWithoutFields(jl_RuntimeException);
    var jl_ArrayStoreException = $rt_classWithoutFields(jl_RuntimeException);
    var jl_Character = $rt_classWithoutFields();
    var jl_Character_TYPE = null;
    var jl_Character_digitMapping = null;
    var jl_Character_upperCaseMapping = null;
    var jl_Character_lowerCaseMapping = null;
    var jl_Character_classMapping = null;
    var jl_Character_characterCache = null;
    var jl_Character_$$metadata$$0 = null;
    var jl_Character_$$metadata$$1 = null;
    var jl_Character_$$metadata$$3 = null;
    var jl_Character_$$metadata$$4 = null;
    function jl_Character_toString($c) {
        var var$2, var$3;
        var$2 = new jl_String;
        var$3 = $rt_createCharArray(1);
        var$3.data[0] = $c;
        jl_String__init_0(var$2, var$3);
        return var$2;
    }
    function jl_Character_isSupplementaryCodePoint($codePoint) {
        return $codePoint >= 65536 && $codePoint <= 1114111 ? 1 : 0;
    }
    function jl_Character_isHighSurrogate($ch) {
        return ($ch & 64512) != 55296 ? 0 : 1;
    }
    function jl_Character_isLowSurrogate($ch) {
        return ($ch & 64512) != 56320 ? 0 : 1;
    }
    function jl_Character_isSurrogate($ch) {
        return !jl_Character_isHighSurrogate($ch) && !jl_Character_isLowSurrogate($ch) ? 0 : 1;
    }
    function jl_Character_isSurrogatePair($high, $low) {
        return jl_Character_isHighSurrogate($high) && jl_Character_isLowSurrogate($low) ? 1 : 0;
    }
    function jl_Character_toCodePoint($high, $low) {
        return (($high & 1023) << 10 | $low & 1023) + 65536 | 0;
    }
    function jl_Character_highSurrogate($codePoint) {
        return (55296 | ($codePoint - 65536 | 0) >> 10 & 1023) & 65535;
    }
    function jl_Character_lowSurrogate($codePoint) {
        return (56320 | $codePoint & 1023) & 65535;
    }
    function jl_Character_toLowerCase($ch) {
        return jl_Character_toLowerCase0($ch) & 65535;
    }
    function jl_Character_toLowerCase0($ch) {
        if (jl_Character_lowerCaseMapping === null) {
            if (jl_Character_$$metadata$$0 === null)
                jl_Character_$$metadata$$0 = jl_Character_acquireLowerCaseMapping$$create();
            jl_Character_lowerCaseMapping = otciu_UnicodeHelper_decodeCaseMapping((jl_Character_$$metadata$$0.value !== null ? $rt_str(jl_Character_$$metadata$$0.value) : null));
        }
        return jl_Character_mapChar(jl_Character_lowerCaseMapping, $ch);
    }
    function jl_Character_toUpperCase0($ch) {
        return jl_Character_toUpperCase($ch) & 65535;
    }
    function jl_Character_toUpperCase($codePoint) {
        if (jl_Character_upperCaseMapping === null) {
            if (jl_Character_$$metadata$$1 === null)
                jl_Character_$$metadata$$1 = jl_Character_acquireUpperCaseMapping$$create();
            jl_Character_upperCaseMapping = otciu_UnicodeHelper_decodeCaseMapping((jl_Character_$$metadata$$1.value !== null ? $rt_str(jl_Character_$$metadata$$1.value) : null));
        }
        return jl_Character_mapChar(jl_Character_upperCaseMapping, $codePoint);
    }
    function jl_Character_mapChar($table, $codePoint) {
        var var$3, var$4, var$5, $index, var$7;
        $table = $table.data;
        var$3 = 0;
        var$4 = $table.length / 2 | 0;
        var$5 = var$4 - 1 | 0;
        a: {
            while (true) {
                $index = (var$3 + var$5 | 0) / 2 | 0;
                var$7 = $rt_compare($table[$index * 2 | 0], $codePoint);
                if (!var$7)
                    break;
                if (var$7 <= 0) {
                    var$3 = $index + 1 | 0;
                    if (var$3 > var$5)
                        break a;
                } else {
                    $index = $index - 1 | 0;
                    if ($index < var$3)
                        break a;
                    var$5 = $index;
                }
            }
        }
        if ($index >= 0 && $index < var$4)
            return $codePoint + $table[($index * 2 | 0) + 1 | 0] | 0;
        return 0;
    }
    function jl_Character_digit($ch, $radix) {
        if ($radix >= 2 && $radix <= 36) {
            $ch = jl_Character_getNumericValue($ch);
            if ($ch >= $radix)
                $ch = (-1);
        } else
            $ch = (-1);
        return $ch;
    }
    function jl_Character_getNumericValue($codePoint) {
        var var$2, var$3, var$4, var$5, $digitMapping, $u, $idx, $val, var$10, $l;
        if (jl_Character_digitMapping === null) {
            if (jl_Character_$$metadata$$3 === null)
                jl_Character_$$metadata$$3 = jl_Character_obtainDigitMapping$$create();
            var$2 = (jl_Character_$$metadata$$3.value !== null ? $rt_str(jl_Character_$$metadata$$3.value) : null);
            var$3 = otci_CharFlow__init_(jl_String_toCharArray(var$2));
            var$4 = otci_Base46_decodeUnsigned(var$3);
            var$5 = $rt_createIntArray(var$4 * 2 | 0);
            $digitMapping = var$5.data;
            $u = 0;
            $idx = 0;
            $val = 0;
            var$10 = 0;
            while (var$10 < var$4) {
                $idx = $idx + otci_Base46_decode(var$3) | 0;
                $val = $val + otci_Base46_decode(var$3) | 0;
                $l = $u + 1 | 0;
                $digitMapping[$u] = $idx;
                $u = $l + 1 | 0;
                $digitMapping[$l] = $val;
                var$10 = var$10 + 1 | 0;
            }
            jl_Character_digitMapping = var$5;
        }
        $digitMapping = jl_Character_digitMapping.data;
        $l = 0;
        $u = ($digitMapping.length / 2 | 0) - 1 | 0;
        while ($u >= $l) {
            $idx = ($l + $u | 0) / 2 | 0;
            var$4 = $idx * 2 | 0;
            $val = $rt_compare($codePoint, $digitMapping[var$4]);
            if ($val > 0)
                $l = $idx + 1 | 0;
            else {
                if ($val >= 0)
                    return $digitMapping[var$4 + 1 | 0];
                $u = $idx - 1 | 0;
            }
        }
        return (-1);
    }
    function jl_Character_forDigit($digit, $radix) {
        if ($radix >= 2 && $radix <= 36 && $digit < $radix)
            return $digit < 10 ? (48 + $digit | 0) & 65535 : ((97 + $digit | 0) - 10 | 0) & 65535;
        return 0;
    }
    function jl_Character_toChars($codePoint) {
        var var$2;
        if ($codePoint < 65536) {
            var$2 = $rt_createCharArray(1);
            var$2.data[0] = $codePoint & 65535;
            return var$2;
        }
        return $rt_createCharArrayFromData([jl_Character_highSurrogate($codePoint), jl_Character_lowSurrogate($codePoint)]);
    }
    function jl_Character_getType($codePoint) {
        var $u, $range, $classes, var$5, var$6, var$7, var$8, var$9, var$10, var$11, var$12, var$13, $l, $i;
        $u = $codePoint > 0 && $codePoint <= 65535 ? 1 : 0;
        if ($u && jl_Character_isSurrogate($codePoint & 65535))
            return 19;
        if (jl_Character_classMapping === null) {
            if (jl_Character_$$metadata$$4 === null)
                jl_Character_$$metadata$$4 = jl_Character_obtainClasses$$create();
            $range = (jl_Character_$$metadata$$4.value !== null ? $rt_str(jl_Character_$$metadata$$4.value) : null);
            $classes = $rt_createArray(otciu_UnicodeHelper$Range, 16384);
            var$5 = $classes.data;
            var$6 = $rt_createByteArray(16384);
            var$7 = var$6.data;
            var$8 = 0;
            var$9 = 0;
            var$10 = 0;
            var$11 = 0;
            while (var$11 < jl_String_length($range)) {
                var$12 = otciu_UnicodeHelper_decodeByte(jl_String_charAt($range, var$11));
                if (var$12 == 64) {
                    var$11 = var$11 + 1 | 0;
                    var$12 = otciu_UnicodeHelper_decodeByte(jl_String_charAt($range, var$11));
                    var$13 = 0;
                    $u = 1;
                    $l = 0;
                    while ($l < 3) {
                        var$11 = var$11 + 1 | 0;
                        var$13 = var$13 | $rt_imul($u, otciu_UnicodeHelper_decodeByte(jl_String_charAt($range, var$11)));
                        $u = $u * 64 | 0;
                        $l = $l + 1 | 0;
                    }
                } else if (var$12 < 32)
                    var$13 = 1;
                else {
                    var$12 = (var$12 - 32 | 0) << 24 >> 24;
                    var$11 = var$11 + 1 | 0;
                    var$13 = otciu_UnicodeHelper_decodeByte(jl_String_charAt($range, var$11));
                }
                if (!var$12 && var$13 >= 128) {
                    if (var$8 > 0) {
                        $u = var$9 + 1 | 0;
                        var$5[var$9] = otciu_UnicodeHelper$Range__init_(var$10, var$10 + var$8 | 0, ju_Arrays_copyOf1(var$6, var$8));
                        var$9 = $u;
                    }
                    var$10 = var$10 + (var$8 + var$13 | 0) | 0;
                    var$8 = 0;
                } else {
                    $u = var$8 + var$13 | 0;
                    if ($u < var$7.length)
                        $l = var$9;
                    else {
                        $l = var$9 + 1 | 0;
                        var$5[var$9] = otciu_UnicodeHelper$Range__init_(var$10, var$10 + var$8 | 0, ju_Arrays_copyOf1(var$6, var$8));
                        var$10 = var$10 + $u | 0;
                        var$8 = 0;
                    }
                    while (true) {
                        $u = var$13 + (-1) | 0;
                        if (var$13 <= 0)
                            break;
                        $i = var$8 + 1 | 0;
                        var$7[var$8] = var$12;
                        var$8 = $i;
                        var$13 = $u;
                    }
                    var$9 = $l;
                }
                var$11 = var$11 + 1 | 0;
            }
            jl_Character_classMapping = ju_Arrays_copyOf($classes, var$9);
        }
        $classes = jl_Character_classMapping.data;
        $l = 0;
        $u = $classes.length - 1 | 0;
        while ($l <= $u) {
            $i = ($l + $u | 0) / 2 | 0;
            $range = $classes[$i];
            if ($codePoint >= $range.$end0)
                $l = $i + 1 | 0;
            else {
                $u = $range.$start3;
                if ($codePoint >= $u)
                    return $range.$data.data[$codePoint - $u | 0];
                $u = $i - 1 | 0;
            }
        }
        return 0;
    }
    function jl_Character_isUpperCase($codePoint) {
        return jl_Character_getType($codePoint) != 1 ? 0 : 1;
    }
    function jl_Character_isLetter($codePoint) {
        switch (jl_Character_getType($codePoint)) {
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
                break;
            default:
                return 0;
        }
        return 1;
    }
    function jl_Character_isLetterOrDigit($codePoint) {
        a: {
            switch (jl_Character_getType($codePoint)) {
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 9:
                    break;
                case 6:
                case 7:
                case 8:
                    break a;
                default:
                    break a;
            }
            return 1;
        }
        return 0;
    }
    function jl_Character_isIdentifierIgnorable($codePoint) {
        a: {
            if (!($codePoint >= 0 && $codePoint <= 8) && !($codePoint >= 14 && $codePoint <= 27)) {
                if ($codePoint < 127)
                    break a;
                if ($codePoint > 159)
                    break a;
            }
            return 1;
        }
        return jl_Character_getType($codePoint) != 16 ? 0 : 1;
    }
    function jl_Character_isSpaceChar($codePoint) {
        switch (jl_Character_getType($codePoint)) {
            case 12:
            case 13:
            case 14:
                break;
            default:
                return 0;
        }
        return 1;
    }
    function jl_Character_isWhitespace($codePoint) {
        switch ($codePoint) {
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 28:
            case 29:
            case 30:
            case 31:
                break;
            case 160:
            case 8199:
            case 8239:
                return 0;
            default:
                return jl_Character_isSpaceChar($codePoint);
        }
        return 1;
    }
    function jl_Character__clinit_() {
        jl_Character_TYPE = $rt_cls($rt_charcls());
        jl_Character_characterCache = $rt_createArray(jl_Character, 128);
    }
    function jl_Character_acquireLowerCaseMapping$$create() {
        return {"value" : ">W  H#F#U 4%F#O #F#/ d%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #a1# #%# #%# #%# %%# #%# #%# #%# #%# #%# #%# #%# %%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #<+#%# #%# #%# \'.3#%# #%# #{1#%# #w1%%# %J\'#k1#o1#%# #w1#!3# #23#*3#%# \'23#:3# #>3#%# #%# #%# #N3#%# #N3# %%# #N3#%# #J3%%# #%# #R3#%# \'%# /)#%# #)#%# #)#%# #%# #%# #%# #%# #%# #%# #%# #%# %%# #%# #%# #%# #%# #%# #%# #%# #%# %)#%# #%# #8)#L%#%# #%# #%# #"
        + "%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #a+# #%# #%# #%# #%# #%# #%# #%# #%# #%# /B45#%# #,/#645# %%# #P1#!\'#*\'#%# #%# #%# #%# #%# <-%# #%# \'%# 1&++ %_## #Z#)k%%g%% #F#W hA# 1%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# +]%# %%# #?#%# %a+\'N\'AF#b &#%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# 3%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #^#%# #%# #%# #%# #%# #%# #%# %%# #%# #%# #%# #%# #%# #%# #%"
        + "# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# %*%r iB#oq-&# _?gejg#A1 o$#mo%&# {-%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# 3,4/# #%# #%# #%"
        + "# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# 3C1 1C1 1C1 1C1 1C1 3C/ 1C1 QC1 1C1 1C1 1C%8\'%G# 7i\')G# 7C%D)\' 7C%u)%?# 7X+%P+%G# L-q*/# \'Pw/#8m/# -6## |bA G%# kC.#U !r*%&# &#%# #,05#qX\'#H.5# %%# #%# #%# #e25#D05#q25#m25# #%# %%# 1865%%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# "
        + "#%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# 1%# #%# )%# (a=%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# G%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# y%%# #%# #%# #%# #%# #%# #%# \'%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# 5%# #%# #4Fd#%# #%# #%# #%# #%# )%# #<{p# %%# #%# \'%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #P}p#}}p#m}p#D}p#P}p# #@yp#D{p#Lyp#Br#%# #%# #%# #%"
        + "# #%# #%# #%# #%# #,%#L}p#LJd#%# #%# -%# +%# #%# Y%# ,T5F#U TUg#r {%g#r >\'c#p Lnk%F# *J#F#b o@5F#b Jo=N#f "};
    }
    function jl_Character_acquireUpperCaseMapping$$create() {
        return {"value" : "<Y  ,%H#U :#>b# v
        + " #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# \'\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# 1\'# %665% #\'# )\'# #\'# #\'# #\'# #\'#o25#c25#k25#03#}1# #y1% #m1# #q1#{}p# \'y1#k}p# #$3# #:{p#N}p# #,3#43#N}p#*05#B}p# %43# #B05#<3# %@3# /F.5# %P3# #J}p#P3# \'B{p#P3#$\'#L3%,\'# +T3# 5Jyp#>yp# Z\'_\'# x\'# #\'# \'\'\' #_+\' !#a##]#\' #H#CD##H#3m%#i%% #e%#P%# \'(%#D%#C# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'#i\'#P\'#=#(+# #4)# %\'# %\'# .#H#bP\'A #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# 3\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# "
        + "#\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# %\'# #\'# #\'# #\'# #\'# #\'# #\'#`# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'% &#,%n mB#ko%x %ko%\' RAC1 >$#yu+#uu+#Pu+#Hu+%Lu+#0u+#io+#>@d1 (+2Fd# \'oX\'# AJJd# N%\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #"
        + "\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# +X%# +\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'#A1 1A1 1A1 1A1 1A1 3A# #A# #A# #A% /A1 16\'%g\')B)%V+%s)%N+)A1 1A1 1A1 1A% #E# 5<m-# )E# 9A% =A% \'=# ;E# R/8## ddA )\'# @E0#U Nr,%&# #\'# \'D45#845# #\'# #\'# #\'# -"
        + "\'# %\'# 5\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# 1\'# #\'# )\'- /qq-&# i]=\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# G\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# y%\'# #\'# #\'# #\'# #\'# #\'# #\'# \'\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'#"
        + " #\'# #\'# #\'# #\'# 5\'# #\'# %\'# #\'# #\'# #\'# #\'# )\'# )\'# #\'#*%# %\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# 7\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# )\'# #\'- #\'% )\'# #\'S )\'# cEDr# Yiejg# e*5H#U eUi#r {%i#r <\'e#<% Vlm%:# RH#H#b o@5H#b No=P#f "};
    }
    function jl_Character_obtainDigitMapping$$create() {
        return {"value" : "&C*% %%%%%%%%%%%%%%%%%%A%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%=,#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%_H#T#%%%%%%%%%%%%%%%%%%s+G%%%%%%%%%%%%%%%%%%_1G%%%%%%%%%%%%%%%%%%{CG%%%%%%%%%%%%%%%%%%2+G%%%%%%%%%%%%%%%%%%2+G%%%%%%%%%%%%%%%%%%2+G%%%%%%%%%%%%%%%%%%2+G%%%%%%%%%%%%%%%%%%2+G%%%%%%%%%%%%%%%%%%2+G%%%%%%%%%%%%%%%%%%2+G%%%%%%%%%%%%%%%%%%2+G%%%%%%%%%%%%%%%%%%2+G%%%%%%%%%%%%%%%%%%6)G%%%%%%%%%%%%%%%%%%2+G%%%%%%%%%%%%%%%%%%*\'G%%%%%%%%%%%%%%%%%%.9G%%%%%%%%%%%%%%%%%%*\'G%%%%%%%%%%%%%%%%%%!i#G"
        + "%%%%%%%%%%%%%%%%%%c#G%%%%%%%%%%%%%%%%%%*;G%%%%%%%%%%%%%%%%%%Z+G%%%%%%%%%%%%%%%%%%:/G%%%%%%%%%%%%%%%%%%=G%%%%%%%%%%%%%%%%%%{/G%%%%%%%%%%%%%%%%%%k\'G%%%%%%%%%%%%%%%%%%s+G%%%%%%%%%%%%%%%%%%=G%%%%%%%%%%%%%%%%%%R@dG%%%%%%%%%%%%%%%%%%R[G%%%%%%%%%%%%%%%%%%c#G%%%%%%%%%%%%%%%%%%_1G%%%%%%%%%%%%%%%%%%!#G%%%%%%%%%%%%%%%%%%k\'G%%%%%%%%%%%%%%%%%%cCG%%%%%%%%%%%%%%%%%%o*IG%%%%%%%%%%%%%%%%%%A%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%=,#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%c:#T#%%%%%%%%%%%%%%%%%%w&%G%%%%%"
        + "%%%%%%%%%%%%%BhG%%%%%%%%%%%%%%%%%%Z+G%%%%%%%%%%%%%%%%%%_%G%%%%%%%%%%%%%%%%%%>-G%%%%%%%%%%%%%%%%%%.9G%%%%%%%%%%%%%%%%%%w=G%%%%%%%%%%%%%%%%%%2+G%%%%%%%%%%%%%%%%%%>AG%%%%%%%%%%%%%%%%%%N)G%%%%%%%%%%%%%%%%%%N)G%%%%%%%%%%%%%%%%%%FEG%%%%%%%%%%%%%%%%%%N)G%%%%%%%%%%%%%%%%%%!dG%%%%%%%%%%%%%%%%%%g5G%%%%%%%%%%%%%%%%%%*\'G%%%%%%%%%%%%%%%%%%FEG%%%%%%%%%%%%%%%%%%*0EG%%%%%%%%%%%%%%%%%%k\'G%%%%%%%%%%%%%%%%%%s+G%%%%%%%%%%%%%%%%%%28UG%%%%%%%%%%%%%%%%%%%G%%%%%%%%%%%%%%%%%%%G%%%%%%%%%%%%%%%%%%%G%%%%%%%%%%%%%%%%%%%G%%%%%%%%%%%%%%%"
        + "%%%!8%G%%%%%%%%%%%%%%%%%%FEG%%%%%%%%%%%%%%%%%%sKG%%%%%%%%%%%%%%%%%%>&#G%%%%%%%%%%%%%%%%%%wN)G%%%%%%%%%%%%%%%%%%"};
    }
    function jl_Character_obtainClasses$$create() {
        return {"value" : "PA-Y$;Y$679:95Y#J+Y#Z$Y#B;697<8<C;6:7:PB-9[%=9<=&>:1=<=:L#<#Y#<,&?L$9B8:B(C9:C)!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!C#!#!#!#!#!#!#!#!C#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#B##!#!C$B##!#B##B$C#B%#B##B$C$B##B##!#!#B##!C#!#B##B$#!#B#C#&!C$F%!$#!$#!$#!#!#!#!#!#!#!#!C#!#!#!#!#!#!#!#!#!C#!$#!#B$#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!C(B##B#C#!#B%#!#!#!#!Cg&C<E3]%E-]/E&](%<%]2b\'Q! !#!#%<!#A#%C$9!A%]#!9B$ ! B##B2 B*CD!C#B$C$!#!#!#!#!#!#!#!#!#!#!#!C&!#:!#B#C#BTCQ!#!#!#!#"
        + "!#!#!#!#!#!#!#!#!#!#!#!#!#=G&H#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#B##!#!#!#!#!#!C#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!# BGA#%Y\'CJ95A#^#; GN5\'9G#9G#9\'A)F<A%F%Y#A,Q\'Z$Y#;Y#^#G,91Y$FA%F+G6J+Y%F#\'b&D! 9&G(1=G\'E#G#=G%F#J+F$^#&Y/ 1&\'F?G<A#b&:! G,&A/J+FBG*E#=Y$%A#\'[#F7G%%G*%G$%G&A#Y0 F:G$A#9 F,A&F9<F\' Q#A\'G)FJ%G91GA)FW\')\'&I$G)I%\'I#&G(F+G#Y#J+9%F0\'I# F)A#F#A#F7 F( &A$F%A#\'&I$G%A#I#A#I#\'&A))A%F# F$G#A#J+F#[#L\'=;&9\'A#G#) F\'A%F#A#F7 F( F# F#"
        + " F#A#\' I$G#A%G#A#G$A$\'A(F% &A(J+G#F$\'9A+G#) F* F$ F7 F( F# F&A#\'&I$G& G#) I#\'A#&A0F#G#A#J+9;A(&G\' \'I# F)A#F#A#F7 F( F# F&A#\'&)\')G%A#I#A#I#\'A(G#)A%F# F$G#A#J+=&L\'A+\'& F\'A$F$ F%A$F# & F#A$F#A$F$A$F-A%I#\'I#A$I$ I$\'A#&A\')A/J+L$^\';=A&\'I$\'F) F$ F8 F1A#\'&G$I% G$ G%A(G# F$A#&A#F#G#A#J+A(9L(=&\'I#9F) F$ F8 F+ F&A#\'&)\'I& \'I# I#G#A(I#A\'F# F#G#A#J+ F#)A-G#I#F* F$ FJG#&I$G% I$ I$\'&=A%F$)L(F$G#A#J+L*=F\' \'I# F3A$F9 F* &A#F(A$\'A%I$G$ \' I)A\'J+A#I#9A-FQ\'F#G(A%;F\'%G)9J+Y#AFF# & F& F9 & F+\'F#G*&A#F& % G( J+A#F%AA&^$Y0=9^$G#^\'J+"
        + "L+=\'=\'=\'6767I#F) FEA%G/)G&9G#F&G, GE ^)\'^\' ^#Y&^%Y#AFFLI#G%)G\')G#I#G#&J+Y\'F\'I#G#F%G$&I$F#I(F$G%F.\'I#G#I\'\'&)J+I$\'^#BG !A&!A#CL9%C$b&*&  F%A#F( & F%A#FJ F%A#FB F%A#F( & F%A#F0 FZ F%A#FeA#G$Y*L5A$F1^+A\'b!7! A#C\'A#5b&M* =9F2-F;67A$FmY$K$F)A(F3G$)A*F4G#)Y#A*F3G#A-F. F$ G#A-FUG#)G(I)\'I#G,Y$%Y$;&\'A#J+A\'L+A\'Y\'5Y%G$1\'J+A\'FD%FVA(F&G#FC\'&A&FhA+F@ G$I%G#I$A%I#\'I\'G$A%=A$Y#J+F?A#F&A,FMA%F;A\'J+,A$^CF8G#I#\'A#Y#FV)\')G( \')\'I#G)I\'G+A#\'J+A\'J+A\'Y(%Y\'A#G/(G1ARG%)FP\')G&)\'I&\'I#F)A$J+Y(^+G*^*Y# G#)F?)G%I#G#)G$F#J+FM\')G#I$\')G$I#A)Y%"
        + "FEI)G)I#G#A$Y&J+A$F$J+F?E\'Y#C*A(BLA#B$Y)A)G$9G.)G(F%\'F\'\'F#)G#&A&CMEaC.%CCEFGb!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!C*!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!C*B)C\'A#B\'A#C)B)C)B)C\'A#B\'A#C) ! ! ! !C)B)C/A#C)D)C)D)C)D)C& C#B%$<#]$C$ C#B%$]$C%A#C#B% ]$C)B&]$A#C$ C#B%$]# M,Q&U\'Y#>?6_#?6>Y)./Q&-Y*>?Y%X#Y$:67Y,:98Y+-Q& Q+,%A#L\'Z$67%L+Z$67 E.A$[BA0G."
        + "H%\'H$G-A0^#!^%!^##B$C#B$#=!^#:B&^\'!=!=!=B%=#B%#F%#^#C#B#Z&!C%=:^##=L1KD!#K%,^#A%Z&^&Z#^%:^#:^#:^(:^@Z#^#:=:^@b:-% ^)6767^5Z#^(67b=2! :^?Z:^IZ\'^gA:^,A6L^^pL7b=X# :^*:^WZ)b=P! :b=Y$ 67676767676767L?^MZ&67Z@6767676767Z1b= % b:$# 6767676767676767676767Za6767ZA67b:#% ^QZ6^#Z\'^HA#^A b=J! BQCQ!#B$C#!#!#!#B%#!C#!C\'E#B$#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!C#^\'!#!#G$!#A&Y%,Y#CG #A&#A#FYA(%9A/\'F8A*F( F( F( F( F( F( F( F( GAY#>?>?Y$>?9>?Y*5Y#59>?Y#>?67676767Y"
        + "&%Y+U#Y%596Y.^#Y$676767675AC^; b=:! A-b=7$ A;^-A%-Y$=%&+6767676767^#6767676756W#=K*G%I#5E&^#K$%&9^# b&7! A#G#]#E#&5b&;! 9E$&A&FL b&?!  ^#L%^+FA^EA-F1^@ L+^?L)=L0^AL+^HL0b= & &b `G!&^b&b   %b `(!F7%b&X2 A$^XA*FIE\'Y#b&-% %Y$F1J+F#A5!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#&\'H$9G+9%!#!#!#!#!#!#!#!#!#!#!#!#!#!#E#G#FhK+G#Y\'A)]8E*]#!#!#!#!#!#!#!C$!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#%C)!#!#B##!#!#!#!#%]#!#!#&!#!C$!#!#!#!#!#!#!#!#!#!#B&#B&#!#!#!#!#!#!#!#B%#!#A&!# # #!#!#A9E$!#&E##F(\'F"
        + "$\'F%\'F8I#G#)^%\'A$L\'^#;=A\'FUY%A)I#FSI1G#A)Y#J+A\'G3F\'Y$&9F#\'J+F=G)Y#F8G,I#A,9F>A$G$)FP\'I#G%I#G#I$Y. %J+A%Y#F&\'%F*J+F& FJG\'I#G#I#G#A*F$\'F)\')A#J+A#Y%F1%F\'^$&)\')FS\'&G$F#G#F&G#&\'&A9F#%Y#F,)G#I#Y#&E#)\'A+F\'A#F\'A#F\'A*F( F( CL<E%C*%]#A%b#1! FDI#\'I#\'I#9)\'A#J+A\'&b CO#&A-F8A%FRA%4b `. T#b `! T#b `0 43b `D!3b&O& A#b&K! AGC(A-C&A&&\'F+:F. F& & F# F# b&M! ]2A1b&L& 76^1FbA#FWA(=AAF-;^$G1Y(679A\'G19U#X#6767676767676767Y#67Y%X$Y$ Y%5676767Y$:5Z$ 9;Y#A%F& b&(# A#1 Y$;Y$679:95Y#J+Y#Z$Y#B;697<8<C;6:7:67967Y#F+%FNE#F@A$F\'A#F\'A#F\'A#"
        + "F$A$[#:<=[# =Z%^#A+Q$^#A#F- F; F4 F# F0A#F/ACb&]! A&Y$A%LNA$^*KVL%^2L#^$ ^.A$=AP^N\'b ## F>A$FRA0\'L<A%FAL%A*F5+F)+A&FGG&A&F? 9FEA%F)9K&AKBICIFpA#J+A\'BEA%CEA%FIA)FUA,9B, B0 B( B# C, C0 C( C#Aeb&X% A*F7A+F)A9E\' EK E*AgF\'A#& FM F#A$&A#F8 9L)F8^#L(F@A)L*AQF4 F#A&L&F7L\'A$9F;A&9AbFYA%L#F#L1A#LO&G$ G#A&G%F% F$ F>A#G$A%\'L*A(Y*A(F>L#9F>L$AAF)=F=G#A%L&Y(A*FWA$Y(F7A#L)F4A&L)F3A(Y%A-L(b 1! FkAXBTA.CTA(L\'FEG%A)J+b G% L@ FK G#5A#F#AmG$F>L+&A)F7G,L%Y&A7F3G%Y%AGF6L(A5F8A*)\')FVG0Y(A%L5J+\'F#G#&A*G$)FNI$G%I#G#Y#1Y%\'A+1A#F:A(J+"
        + "A\'G$FEG&)G) J+Y%&I#&A)FD\'Y#&A*G#)FQI$G*I#F%Y%G%9)\'J+&9&Y$ L5A,F3 F:I$G$I#\')G#Y\'\'F#\'A`F( & F% F0 F+9A\'FP\'I$G)A&J+A\'G#I# F)A#F#A#F7 F( F# F& G#&I#\'I%A#I#A#I$A#&A\')A&F&I#A#G(A$G&b ,# FVI$G)I#G$)\'F%Y&J+Y# 9\'F$A?FQI$G\')\'I%G#)G#F#9&A)J+b G# FPI$G%A#I%G#)G#Y8F%G#ACFQI$G)I#\')G#Y$&A,J+A\'Y.A4FL\')\'I#G\')\'&9A\'J+AWF<A#G$I#G%)G&A%J+L#Y$=F(b Z# FMI$G*)G#9b E! BACAJ+L*A-F)A#&A#F) F# F9I\' I#A#G#)\'&)&)\'Y$A*J+AhF)A#FHI$G%A#G#I%\'&9&)A<&G+FIG\')&G%Y)\'A)&G\'I#G$FOG.)G#Y$&Y&A.FkA(Y+b W$ F* FF)G( G\')\'&Y&A+J+L4A$Y#F?A#G7 )G()G#)G#AkF("
        + " F# FGG\'A$\' G# G(&\'A)J+A\'F\' F# FAI& G# I#\')\'&A(J+b W% F4G#I#Y#A(G#&)F. FCI#G&A$I#\')\'Y.J+b 7! &A0L6^)[%^2A.9b&;/ b G! b+P!  Y&A,b&%$ b -J b&B! Y#A.b&Q1 Q1\'F\'G0b K` b&(* b Z\'#b&Z) A(F@ J+A%Y#Fq J+A\'F?A#G&9A+FQG(Y&^%E%9=A+J+ L( F6A&F4b Q+ BACAL8Y%b F! FmA%\'&IXA(G%E.AbE#9%\'A,I#A/&b W@!&A)b&74 AK&A(&b H,#E% E( E# b&D% A0&A>F$A#&A/F%A)b&-\' b %E b&L! A&F.A$F*A(F+A#=G#9Q%b =*!GOA#G8A*b=U! A^b=W$ A+^HA#^^I#G$^$I\'Q)G)^#G(^?G%^_A6^dG$=b [! L5A-L5A-b=8! A*L:b (# B;C;B;C( C3B;C;! B#A#!A#B#A#B% B)C% # C( C,B;C;B# B%A#B) "
        + "B( C;B# B% B& !A$B( C;B;C;B;C;B;C;B;C;B;C;B;C=A#B::C::C\'B::C::C\'B::C::C\'B::C::C\'B::C::C\'!#A#JSb= ) GX^%GS^)\'^/\'^#Y&A0G& G0b 12 C+&C5A\'C\'b 6$ G( G2A#G( G# G&A&E`AB\'b Q! FNA$G(E(A#J+A%&=b  & F?\'A2FMG%J+A&;b 1( F<%G%J+b G, F( F% F# F0 b&&$ A#L*G(AJBCCCG(%A%J+A%Y#b 2- L]=L$;L%AnLN=L0b #$ F% F< F# &A#& F+ F% & &A\'&A%& & & F$ F# &A#& & & & & F# &A#F% F( F% F% & F+ F2A&F$ F& F2AUZ#b /% ^MA%b=E! A-^0A#^0 ^0 ^FA+L.b=B# AY^>A.^MA%^*A(^#A/^\'b ;# b=]$ ]&b=9, A%^2A$^.A$b=X! A%b=@! A\'^-A%=A0^-A%^YA)^+A\'^IA)^?A#^#Apb=5& A"
        + "-^/A#^.A$^*A(^O ^(A)^/A%^*A(^*A(b=4#  ^XAFJ+b \'1 &b   %b   %b ?<#&AA&b Y !&A\'&b =$ &A#&b  ;!&A/&b PU!&b @Q b&?) b C8 &b *.!&A&&b ?!!&b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b 2R!1A?b1A! b  # b\'Q$ b   %b   %b   %b 1Y$3b   %b   %b   %b ^a$3A#3b   %b   %b   %b ^a$3"};
    }
    var ju_Map = $rt_classWithoutFields(0);
    function ju_AbstractMap() {
        var a = this; jl_Object.call(a);
        a.$cachedKeySet = null;
        a.$cachedValues = null;
    }
    function ju_HashMap() {
        var a = this; ju_AbstractMap.call(a);
        a.$elementCount = 0;
        a.$elementData = null;
        a.$modCount1 = 0;
        a.$loadFactor = 0.0;
        a.$threshold = 0;
    }
    function ju_HashMap__init_() {
        var var_0 = new ju_HashMap();
        ju_HashMap__init_1(var_0);
        return var_0;
    }
    function ju_HashMap__init_0(var_0) {
        var var_1 = new ju_HashMap();
        ju_HashMap__init_2(var_1, var_0);
        return var_1;
    }
    function ju_HashMap__init_1($this) {
        ju_HashMap__init_2($this, 16);
    }
    function ju_HashMap__init_2($this, $capacity) {
        var var$2;
        if ($capacity < 0) {
            var$2 = new jl_IllegalArgumentException;
            jl_Exception__init_(var$2);
            $rt_throw(var$2);
        }
        $capacity = ju_HashMap_calculateCapacity($capacity);
        $this.$elementCount = 0;
        $this.$elementData = $rt_createArray(ju_HashMap$HashEntry, $capacity);
        $this.$loadFactor = 0.75;
        ju_HashMap_computeThreshold($this);
    }
    function ju_HashMap_calculateCapacity($x) {
        var var$2;
        if ($x >= 1073741824)
            return 1073741824;
        if (!$x)
            return 16;
        var$2 = $x - 1 | 0;
        $x = var$2 | var$2 >> 1;
        $x = $x | $x >> 2;
        $x = $x | $x >> 4;
        $x = $x | $x >> 8;
        return ($x | $x >> 16) + 1 | 0;
    }
    function ju_HashMap_computeThreshold($this) {
        $this.$threshold = $this.$elementData.data.length * $this.$loadFactor | 0;
    }
    function ju_HashMap_containsKey($this, $key) {
        return ju_HashMap_getEntry($this, $key) === null ? 0 : 1;
    }
    function ju_HashMap_entrySet($this) {
        var var$1;
        var$1 = new ju_HashMap$HashMapEntrySet;
        var$1.$associatedMap = $this;
        return var$1;
    }
    function ju_HashMap_get($this, $key) {
        var $m;
        $m = ju_HashMap_getEntry($this, $key);
        if ($m === null)
            return null;
        return $m.$value1;
    }
    function ju_HashMap_getEntry($this, $key) {
        var $m, $hash;
        if ($key === null)
            $m = ju_HashMap_findNullKeyEntry($this);
        else {
            $hash = $key.$hashCode0();
            $m = ju_HashMap_findNonNullKeyEntry($this, $key, $hash & ($this.$elementData.data.length - 1 | 0), $hash);
        }
        return $m;
    }
    function ju_HashMap_findNonNullKeyEntry($this, $key, $index, $keyHash) {
        var $m;
        $m = $this.$elementData.data[$index];
        while ($m !== null && !($m.$origKeyHash == $keyHash && ju_HashMap_areEqualKeys($key, $m.$key))) {
            $m = $m.$next2;
        }
        return $m;
    }
    function ju_HashMap_findNullKeyEntry($this) {
        var $m;
        $m = $this.$elementData.data[0];
        while ($m !== null && $m.$key !== null) {
            $m = $m.$next2;
        }
        return $m;
    }
    function ju_HashMap_keySet($this) {
        var var$1;
        if ($this.$cachedKeySet === null) {
            var$1 = new ju_HashMap$1;
            var$1.$this$01 = $this;
            $this.$cachedKeySet = var$1;
        }
        return $this.$cachedKeySet;
    }
    function ju_HashMap_put($this, $key, $value) {
        var var$3, var$4, var$5;
        if ($key === null) {
            var$3 = ju_HashMap_findNullKeyEntry($this);
            if (var$3 === null) {
                $this.$modCount1 = $this.$modCount1 + 1 | 0;
                var$3 = ju_HashMap_createHashedEntry($this, null, 0, 0);
                var$4 = $this.$elementCount + 1 | 0;
                $this.$elementCount = var$4;
                if (var$4 > $this.$threshold)
                    ju_HashMap_rehash($this);
            }
        } else {
            var$4 = $key.$hashCode0();
            var$5 = var$4 & ($this.$elementData.data.length - 1 | 0);
            var$3 = ju_HashMap_findNonNullKeyEntry($this, $key, var$5, var$4);
            if (var$3 === null) {
                $this.$modCount1 = $this.$modCount1 + 1 | 0;
                var$3 = ju_HashMap_createHashedEntry($this, $key, var$5, var$4);
                var$4 = $this.$elementCount + 1 | 0;
                $this.$elementCount = var$4;
                if (var$4 > $this.$threshold)
                    ju_HashMap_rehash($this);
            }
        }
        $key = var$3.$value1;
        var$3.$value1 = $value;
        return $key;
    }
    function ju_HashMap_createHashedEntry($this, $key, $index, $hash) {
        var $entry, var$5, var$6;
        $entry = new ju_HashMap$HashEntry;
        var$5 = null;
        $entry.$key = $key;
        $entry.$value1 = var$5;
        $entry.$origKeyHash = $hash;
        var$6 = $this.$elementData.data;
        $entry.$next2 = var$6[$index];
        var$6[$index] = $entry;
        return $entry;
    }
    function ju_HashMap_rehash($this) {
        var var$1, var$2, var$3, var$4, var$5, var$6, var$7, var$8;
        var$1 = $this.$elementData.data.length;
        var$1 = ju_HashMap_calculateCapacity(!var$1 ? 1 : var$1 << 1);
        var$2 = $rt_createArray(ju_HashMap$HashEntry, var$1);
        var$3 = var$2.data;
        var$4 = 0;
        var$5 = var$1 - 1 | 0;
        while (true) {
            var$6 = $this.$elementData.data;
            if (var$4 >= var$6.length)
                break;
            var$7 = var$6[var$4];
            var$6[var$4] = null;
            while (var$7 !== null) {
                var$1 = var$7.$origKeyHash & var$5;
                var$8 = var$7.$next2;
                var$7.$next2 = var$3[var$1];
                var$3[var$1] = var$7;
                var$7 = var$8;
            }
            var$4 = var$4 + 1 | 0;
        }
        $this.$elementData = var$2;
        ju_HashMap_computeThreshold($this);
    }
    function ju_HashMap_remove($this, $key) {
        var var$2, var$3, $entry, var$5, var$6, var$7;
        a: {
            var$2 = 0;
            var$3 = null;
            if ($key === null) {
                $entry = $this.$elementData.data[0];
                while ($entry !== null) {
                    if ($entry.$key === null)
                        break a;
                    $key = $entry.$next2;
                    var$3 = $entry;
                    $entry = $key;
                }
            } else {
                var$5 = jl_String_hashCode($key);
                var$6 = $this.$elementData.data;
                var$2 = var$5 & (var$6.length - 1 | 0);
                $entry = var$6[var$2];
                while ($entry !== null && !($entry.$origKeyHash == var$5 && ju_HashMap_areEqualKeys($key, $entry.$key))) {
                    var$7 = $entry.$next2;
                    var$3 = $entry;
                    $entry = var$7;
                }
            }
        }
        if ($entry === null)
            $entry = null;
        else {
            if (var$3 !== null)
                var$3.$next2 = $entry.$next2;
            else
                $this.$elementData.data[var$2] = $entry.$next2;
            $this.$modCount1 = $this.$modCount1 + 1 | 0;
            $this.$elementCount = $this.$elementCount - 1 | 0;
        }
        if ($entry === null)
            return null;
        return $entry.$value1;
    }
    function ju_HashMap_areEqualKeys($key1, $key2) {
        return $key1 !== $key2 && !$key1.$equals($key2) ? 0 : 1;
    }
    var tj_ClassStmt = $rt_classWithoutFields(tj_Statements);
    function tj_ClassStmt_getLine($this) {
        return $this.$line;
    }
    function jnc_Charset() {
        var a = this; jl_Object.call(a);
        a.$canonicalName = null;
        a.$aliases = null;
    }
    function jnc_Charset__init_($this, $canonicalName, $aliases) {
        var var$3, var$4, var$5;
        var$3 = $aliases.data;
        jnc_Charset_checkCanonicalName($canonicalName);
        var$4 = var$3.length;
        var$5 = 0;
        while (var$5 < var$4) {
            jnc_Charset_checkCanonicalName(var$3[var$5]);
            var$5 = var$5 + 1 | 0;
        }
        $this.$canonicalName = $canonicalName;
        $this.$aliases = $aliases.$clone();
    }
    function jnc_Charset_checkCanonicalName($name) {
        var $i, $c;
        if (jl_String_isEmpty($name))
            $rt_throw(jnc_IllegalCharsetNameException__init_($name));
        if (!jnc_Charset_isValidCharsetStart(jl_String_charAt($name, 0)))
            $rt_throw(jnc_IllegalCharsetNameException__init_($name));
        $i = 1;
        while ($i < jl_String_length($name)) {
            a: {
                $c = jl_String_charAt($name, $i);
                switch ($c) {
                    case 43:
                    case 45:
                    case 46:
                    case 58:
                    case 95:
                        break;
                    default:
                        if (jnc_Charset_isValidCharsetStart($c))
                            break a;
                        else
                            $rt_throw(jnc_IllegalCharsetNameException__init_($name));
                }
            }
            $i = $i + 1 | 0;
        }
    }
    function jnc_Charset_isValidCharsetStart($c) {
        a: {
            b: {
                if (!($c >= 48 && $c <= 57) && !($c >= 97 && $c <= 122)) {
                    if ($c < 65)
                        break b;
                    if ($c > 90)
                        break b;
                }
                $c = 1;
                break a;
            }
            $c = 0;
        }
        return $c;
    }
    function jnc_Charset_forName($charsetName) {
        var $charset;
        if ($charsetName === null) {
            $charsetName = new jl_IllegalArgumentException;
            jl_Throwable__init_($charsetName, $rt_s(500));
            $rt_throw($charsetName);
        }
        jnc_Charset_checkCanonicalName($charsetName);
        jnc_Charset$Charsets_$callClinit();
        $charset = ju_HashMap_get(jnc_Charset$Charsets_value, jl_String_toUpperCase($charsetName));
        if ($charset !== null)
            return $charset;
        $charset = new jnc_UnsupportedCharsetException;
        jl_Exception__init_($charset);
        $charset.$charsetName = $charsetName;
        $rt_throw($charset);
    }
    function jnc_Charset_name($this) {
        return $this.$canonicalName;
    }
    function jnc_Charset_encode($this, $cb) {
        var var$2, $e, $$je;
        a: {
            try {
                var$2 = $this.$newEncoder();
                jnc_CodingErrorAction_$callClinit();
                $cb = jnc_CharsetEncoder_encode0(jnc_CharsetEncoder_onUnmappableCharacter(jnc_CharsetEncoder_onMalformedInput(var$2, jnc_CodingErrorAction_REPLACE), jnc_CodingErrorAction_REPLACE), $cb);
            } catch ($$e) {
                $$je = $rt_wrapException($$e);
                if ($$je instanceof jnc_CharacterCodingException) {
                    $e = $$je;
                    break a;
                } else {
                    throw $$e;
                }
            }
            return $cb;
        }
        var$2 = new jl_AssertionError;
        jl_Throwable__init_2(var$2, $rt_s(501), $e);
        $rt_throw(var$2);
    }
    var jnci_UTF8Charset = $rt_classWithoutFields(jnc_Charset);
    var jnci_UTF8Charset_INSTANCE = null;
    function jnci_UTF8Charset_$callClinit() {
        jnci_UTF8Charset_$callClinit = $rt_eraseClinit(jnci_UTF8Charset);
        jnci_UTF8Charset__clinit_();
    }
    function jnci_UTF8Charset_newEncoder($this) {
        var var$1;
        var$1 = new jnci_UTF8Encoder;
        jnci_BufferedEncoder__init_(var$1, $this, 2.0, 4.0);
        return var$1;
    }
    function jnci_UTF8Charset__clinit_() {
        var var$1;
        var$1 = new jnci_UTF8Charset;
        jnci_UTF8Charset_$callClinit();
        jnc_Charset__init_(var$1, $rt_s(28), $rt_createArray(jl_String, 0));
        jnci_UTF8Charset_INSTANCE = var$1;
    }
    var tj_Runner$1 = $rt_classWithoutFields();
    var tj_Runner$1_$SwitchMap$trackerjo$javaish$Statements$StmtType = null;
    var tj_Runner$1_$SwitchMap$trackerjo$javaish$Element$ElementType = null;
    var tj_Runner$1_$SwitchMap$trackerjo$javaish$JavaishVal$JavaishType = null;
    function tj_Runner$1_$callClinit() {
        tj_Runner$1_$callClinit = $rt_eraseClinit(tj_Runner$1);
        tj_Runner$1__clinit_();
    }
    function tj_Runner$1__clinit_() {
        var var$1, var$2;
        var$1 = $rt_createIntArray((tj_JavaishVal$JavaishType_values()).data.length);
        var$2 = var$1.data;
        tj_Runner$1_$SwitchMap$trackerjo$javaish$JavaishVal$JavaishType = var$1;
        var$2[jl_Enum_ordinal(tj_JavaishVal$JavaishType_FLOAT)] = 1;
        tj_Runner$1_$SwitchMap$trackerjo$javaish$JavaishVal$JavaishType.data[jl_Enum_ordinal(tj_JavaishVal$JavaishType_INT)] = 2;
        tj_Runner$1_$SwitchMap$trackerjo$javaish$JavaishVal$JavaishType.data[jl_Enum_ordinal(tj_JavaishVal$JavaishType_STRING)] = 3;
        tj_Runner$1_$SwitchMap$trackerjo$javaish$JavaishVal$JavaishType.data[jl_Enum_ordinal(tj_JavaishVal$JavaishType_BOOLEAN)] = 4;
        tj_Runner$1_$SwitchMap$trackerjo$javaish$JavaishVal$JavaishType.data[jl_Enum_ordinal(tj_JavaishVal$JavaishType_FLOATLIST)] = 5;
        tj_Runner$1_$SwitchMap$trackerjo$javaish$JavaishVal$JavaishType.data[jl_Enum_ordinal(tj_JavaishVal$JavaishType_INTLIST)] = 6;
        tj_Runner$1_$SwitchMap$trackerjo$javaish$JavaishVal$JavaishType.data[jl_Enum_ordinal(tj_JavaishVal$JavaishType_STRINGLIST)] = 7;
        tj_Runner$1_$SwitchMap$trackerjo$javaish$JavaishVal$JavaishType.data[jl_Enum_ordinal(tj_JavaishVal$JavaishType_BOOLEANLIST)] = 8;
        var$2 = $rt_createIntArray((tj_Element$ElementType_values()).data.length);
        var$1 = var$2.data;
        tj_Runner$1_$SwitchMap$trackerjo$javaish$Element$ElementType = var$2;
        var$1[jl_Enum_ordinal(tj_Element$ElementType_EXPRESSION)] = 1;
        tj_Runner$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_NOT)] = 2;
        tj_Runner$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_CAST)] = 3;
        tj_Runner$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_SHOWINPUTBOX)] = 4;
        tj_Runner$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_FUNCTION)] = 5;
        tj_Runner$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_LIST)] = 6;
        tj_Runner$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_ARRAYLENGTH)] = 7;
        tj_Runner$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_VARIABLE)] = 8;
        tj_Runner$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_LISTVAL)] = 9;
        tj_Runner$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_STRING)] = 10;
        tj_Runner$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_AND)] = 11;
        tj_Runner$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_OR)] = 12;
        tj_Runner$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_PLUS)] = 13;
        tj_Runner$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_MINUS)] = 14;
        tj_Runner$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_MULTIPLY)] = 15;
        tj_Runner$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_DIVIDE)] = 16;
        tj_Runner$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_FLOAT)] = 17;
        tj_Runner$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_INTEGER)] = 18;
        tj_Runner$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_BOOL)] = 19;
        tj_Runner$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_EQUAL)] = 20;
        tj_Runner$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_NOT_EQUAL)] = 21;
        tj_Runner$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_GREATER_THAN)] = 22;
        tj_Runner$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_LESS_THAN)] = 23;
        tj_Runner$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_GREATER_THAN_EQUAL)] = 24;
        tj_Runner$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_LESS_THAN_EQUAL)] = 25;
        var$2 = $rt_createIntArray((tj_Statements$StmtType_values()).data.length);
        var$1 = var$2.data;
        tj_Runner$1_$SwitchMap$trackerjo$javaish$Statements$StmtType = var$2;
        var$1[jl_Enum_ordinal(tj_Statements$StmtType_DECLARATION)] = 1;
        tj_Runner$1_$SwitchMap$trackerjo$javaish$Statements$StmtType.data[jl_Enum_ordinal(tj_Statements$StmtType_IF)] = 2;
        tj_Runner$1_$SwitchMap$trackerjo$javaish$Statements$StmtType.data[jl_Enum_ordinal(tj_Statements$StmtType_ELSE)] = 3;
        tj_Runner$1_$SwitchMap$trackerjo$javaish$Statements$StmtType.data[jl_Enum_ordinal(tj_Statements$StmtType_ELSEIF)] = 4;
        tj_Runner$1_$SwitchMap$trackerjo$javaish$Statements$StmtType.data[jl_Enum_ordinal(tj_Statements$StmtType_END)] = 5;
        tj_Runner$1_$SwitchMap$trackerjo$javaish$Statements$StmtType.data[jl_Enum_ordinal(tj_Statements$StmtType_RETURN)] = 6;
        tj_Runner$1_$SwitchMap$trackerjo$javaish$Statements$StmtType.data[jl_Enum_ordinal(tj_Statements$StmtType_MUTATION)] = 7;
        tj_Runner$1_$SwitchMap$trackerjo$javaish$Statements$StmtType.data[jl_Enum_ordinal(tj_Statements$StmtType_FUNCTION)] = 8;
        tj_Runner$1_$SwitchMap$trackerjo$javaish$Statements$StmtType.data[jl_Enum_ordinal(tj_Statements$StmtType_CALL)] = 9;
        tj_Runner$1_$SwitchMap$trackerjo$javaish$Statements$StmtType.data[jl_Enum_ordinal(tj_Statements$StmtType_ASSIGNMENT)] = 10;
        tj_Runner$1_$SwitchMap$trackerjo$javaish$Statements$StmtType.data[jl_Enum_ordinal(tj_Statements$StmtType_FOREACH)] = 11;
        tj_Runner$1_$SwitchMap$trackerjo$javaish$Statements$StmtType.data[jl_Enum_ordinal(tj_Statements$StmtType_FORWHEN)] = 12;
        tj_Runner$1_$SwitchMap$trackerjo$javaish$Statements$StmtType.data[jl_Enum_ordinal(tj_Statements$StmtType_SHOWMSGBOX)] = 13;
        tj_Runner$1_$SwitchMap$trackerjo$javaish$Statements$StmtType.data[jl_Enum_ordinal(tj_Statements$StmtType_PRINT)] = 14;
        tj_Runner$1_$SwitchMap$trackerjo$javaish$Statements$StmtType.data[jl_Enum_ordinal(tj_Statements$StmtType_WHILE)] = 15;
        tj_Runner$1_$SwitchMap$trackerjo$javaish$Statements$StmtType.data[jl_Enum_ordinal(tj_Statements$StmtType_REMOVEALLFROM)] = 16;
        tj_Runner$1_$SwitchMap$trackerjo$javaish$Statements$StmtType.data[jl_Enum_ordinal(tj_Statements$StmtType_REMOVEFROM)] = 17;
        tj_Runner$1_$SwitchMap$trackerjo$javaish$Statements$StmtType.data[jl_Enum_ordinal(tj_Statements$StmtType_REMOVEAT)] = 18;
    }
    function tj_DeclarationStmt() {
        var a = this; tj_Statements.call(a);
        a.$name19 = null;
        a.$varType = null;
        a.$value20 = null;
    }
    function tj_DeclarationStmt__init_(var_0, var_1, var_2, var_3) {
        var var_4 = new tj_DeclarationStmt();
        tj_DeclarationStmt__init_0(var_4, var_0, var_1, var_2, var_3);
        return var_4;
    }
    function tj_DeclarationStmt__init_0($this, $line, $name, $varType, $value) {
        tj_Statements__init_($this);
        $this.$line = $line;
        $this.$name19 = $name;
        $this.$varType = $varType;
        $this.$value20 = $value;
        tj_Statements$StmtType_$callClinit();
        $this.$type1 = tj_Statements$StmtType_DECLARATION;
    }
    function tj_DeclarationStmt_getName($this) {
        return $this.$name19;
    }
    function tj_DeclarationStmt_getVarType($this) {
        return $this.$varType;
    }
    function tj_DeclarationStmt_getValue($this) {
        return $this.$value20;
    }
    function tj_DeclarationStmt_getLine($this) {
        return $this.$line;
    }
    function tj_IfStmt() {
        tj_Statements.call(this);
        this.$condition0 = null;
    }
    function tj_IfStmt__init_(var_0, var_1) {
        var var_2 = new tj_IfStmt();
        tj_IfStmt__init_0(var_2, var_0, var_1);
        return var_2;
    }
    function tj_IfStmt__init_0($this, $line, $condition) {
        tj_Statements__init_($this);
        $this.$line = $line;
        $this.$condition0 = $condition;
        tj_Statements$StmtType_$callClinit();
        $this.$type1 = tj_Statements$StmtType_IF;
        $this.$isBlock = 1;
    }
    function tj_IfStmt_getCondition($this) {
        return $this.$condition0;
    }
    function tj_IfStmt_getLine($this) {
        return $this.$line;
    }
    var tj_ElseStmt = $rt_classWithoutFields(tj_Statements);
    function tj_ElseStmt__init_(var_0) {
        var var_1 = new tj_ElseStmt();
        tj_ElseStmt__init_0(var_1, var_0);
        return var_1;
    }
    function tj_ElseStmt__init_0($this, $line) {
        tj_Statements__init_($this);
        $this.$line = $line;
        tj_Statements$StmtType_$callClinit();
        $this.$type1 = tj_Statements$StmtType_ELSE;
    }
    function tj_ElseStmt_getLine($this) {
        return $this.$line;
    }
    function tj_ElseIfStmt() {
        tj_Statements.call(this);
        this.$condition = null;
    }
    function tj_ElseIfStmt__init_(var_0, var_1) {
        var var_2 = new tj_ElseIfStmt();
        tj_ElseIfStmt__init_0(var_2, var_0, var_1);
        return var_2;
    }
    function tj_ElseIfStmt__init_0($this, $line, $condition) {
        tj_Statements__init_($this);
        $this.$line = $line;
        $this.$condition = $condition;
        tj_Statements$StmtType_$callClinit();
        $this.$type1 = tj_Statements$StmtType_ELSEIF;
    }
    function tj_ElseIfStmt_getCondition($this) {
        return $this.$condition;
    }
    function tj_ElseIfStmt_getLine($this) {
        return $this.$line;
    }
    function tj_ReturnStmt() {
        var a = this; tj_Statements.call(a);
        a.$value17 = null;
        a.$hasReturn0 = 0;
    }
    function tj_ReturnStmt__init_(var_0, var_1, var_2) {
        var var_3 = new tj_ReturnStmt();
        tj_ReturnStmt__init_0(var_3, var_0, var_1, var_2);
        return var_3;
    }
    function tj_ReturnStmt__init_0($this, $line, $value, $hasReturn) {
        tj_Statements__init_($this);
        $this.$line = $line;
        $this.$value17 = $value;
        tj_Statements$StmtType_$callClinit();
        $this.$type1 = tj_Statements$StmtType_RETURN;
        $this.$hasReturn0 = $hasReturn;
    }
    function tj_ReturnStmt_getValue($this) {
        return $this.$value17;
    }
    function tj_ReturnStmt_getLine($this) {
        return $this.$line;
    }
    function tj_MutationStmt() {
        var a = this; tj_Statements.call(a);
        a.$varName = null;
        a.$value23 = null;
        a.$mutationType = null;
    }
    function tj_MutationStmt__init_(var_0, var_1, var_2, var_3) {
        var var_4 = new tj_MutationStmt();
        tj_MutationStmt__init_0(var_4, var_0, var_1, var_2, var_3);
        return var_4;
    }
    function tj_MutationStmt__init_0($this, $line, $varName, $value, $mutationType) {
        tj_Statements__init_($this);
        $this.$line = $line;
        $this.$varName = $varName;
        $this.$value23 = $value;
        $this.$mutationType = $mutationType;
        tj_Statements$StmtType_$callClinit();
        $this.$type1 = tj_Statements$StmtType_MUTATION;
    }
    function tj_MutationStmt_getVarName($this) {
        return $this.$varName;
    }
    function tj_MutationStmt_getValue($this) {
        return $this.$value23;
    }
    function tj_MutationStmt_getMutationType($this) {
        return $this.$mutationType;
    }
    function tj_MutationStmt_getLine($this) {
        return $this.$line;
    }
    function tj_FunctionStmt() {
        var a = this; tj_Statements.call(a);
        a.$name18 = null;
        a.$args1 = null;
    }
    function tj_FunctionStmt__init_(var_0, var_1, var_2) {
        var var_3 = new tj_FunctionStmt();
        tj_FunctionStmt__init_0(var_3, var_0, var_1, var_2);
        return var_3;
    }
    function tj_FunctionStmt__init_0($this, $line, $name, $args) {
        tj_Statements__init_($this);
        $this.$line = $line;
        $this.$name18 = $name;
        $this.$args1 = $args;
        tj_Statements$StmtType_$callClinit();
        $this.$type1 = tj_Statements$StmtType_FUNCTION;
        $this.$isBlock = 1;
    }
    function tj_FunctionStmt_getName($this) {
        return $this.$name18;
    }
    function tj_FunctionStmt_getArgs($this) {
        return $this.$args1;
    }
    function tj_FunctionStmt_getLine($this) {
        return $this.$line;
    }
    function tj_CallStmt() {
        var a = this; tj_Statements.call(a);
        a.$name17 = null;
        a.$params0 = null;
    }
    function tj_CallStmt__init_(var_0, var_1, var_2) {
        var var_3 = new tj_CallStmt();
        tj_CallStmt__init_0(var_3, var_0, var_1, var_2);
        return var_3;
    }
    function tj_CallStmt__init_0($this, $line, $name, $params) {
        tj_Statements__init_($this);
        $this.$line = $line;
        $this.$name17 = $name;
        $this.$params0 = $params;
        tj_Statements$StmtType_$callClinit();
        $this.$type1 = tj_Statements$StmtType_CALL;
    }
    function tj_CallStmt_getName($this) {
        return $this.$name17;
    }
    function tj_CallStmt_getParams($this) {
        return $this.$params0;
    }
    function tj_CallStmt_getLine($this) {
        return $this.$line;
    }
    function tj_AssignmentStmt() {
        var a = this; tj_Statements.call(a);
        a.$name16 = null;
        a.$value16 = null;
    }
    function tj_AssignmentStmt__init_(var_0, var_1, var_2) {
        var var_3 = new tj_AssignmentStmt();
        tj_AssignmentStmt__init_0(var_3, var_0, var_1, var_2);
        return var_3;
    }
    function tj_AssignmentStmt__init_0($this, $line, $name, $value) {
        tj_Statements__init_($this);
        $this.$line = $line;
        $this.$name16 = $name;
        $this.$value16 = $value;
        tj_Statements$StmtType_$callClinit();
        $this.$type1 = tj_Statements$StmtType_ASSIGNMENT;
    }
    function tj_AssignmentStmt_getName($this) {
        return $this.$name16;
    }
    function tj_AssignmentStmt_getValue($this) {
        return $this.$value16;
    }
    function tj_AssignmentStmt_getLine($this) {
        return $this.$line;
    }
    function tj_ForEachStmt() {
        var a = this; tj_Statements.call(a);
        a.$tempVar = null;
        a.$listVar = null;
    }
    function tj_ForEachStmt__init_(var_0, var_1, var_2) {
        var var_3 = new tj_ForEachStmt();
        tj_ForEachStmt__init_0(var_3, var_0, var_1, var_2);
        return var_3;
    }
    function tj_ForEachStmt__init_0($this, $line, $tempVar, $listVar) {
        tj_Statements__init_($this);
        $this.$line = $line;
        $this.$tempVar = $tempVar;
        $this.$listVar = $listVar;
        tj_Statements$StmtType_$callClinit();
        $this.$type1 = tj_Statements$StmtType_FOREACH;
        $this.$isBlock = 1;
    }
    function tj_ForEachStmt_getTempVar($this) {
        return $this.$tempVar;
    }
    function tj_ForEachStmt_getListVar($this) {
        return $this.$listVar;
    }
    function tj_ForEachStmt_getLine($this) {
        return $this.$line;
    }
    function tj_ForWhenStmt() {
        var a = this; tj_Statements.call(a);
        a.$incVar = null;
        a.$increment = null;
        a.$condition2 = null;
    }
    function tj_ForWhenStmt__init_(var_0, var_1, var_2, var_3) {
        var var_4 = new tj_ForWhenStmt();
        tj_ForWhenStmt__init_0(var_4, var_0, var_1, var_2, var_3);
        return var_4;
    }
    function tj_ForWhenStmt__init_0($this, $line, $condition, $increment, $lineVar) {
        tj_Statements__init_($this);
        $this.$line = $line;
        $this.$condition2 = $condition;
        $this.$increment = $increment;
        tj_Statements$StmtType_$callClinit();
        $this.$type1 = tj_Statements$StmtType_FORWHEN;
        $this.$incVar = $lineVar;
        $this.$isBlock = 1;
    }
    function tj_ForWhenStmt_getCondition($this) {
        return $this.$condition2;
    }
    function tj_ForWhenStmt_getIncrement($this) {
        return $this.$increment;
    }
    function tj_ForWhenStmt_getIncVar($this) {
        return $this.$incVar;
    }
    function tj_ForWhenStmt_getLine($this) {
        return $this.$line;
    }
    function tj_ShowMsgBoxStmt() {
        tj_Statements.call(this);
        this.$value22 = null;
    }
    function tj_ShowMsgBoxStmt__init_(var_0, var_1) {
        var var_2 = new tj_ShowMsgBoxStmt();
        tj_ShowMsgBoxStmt__init_0(var_2, var_0, var_1);
        return var_2;
    }
    function tj_ShowMsgBoxStmt__init_0($this, $line, $value) {
        tj_Statements__init_($this);
        $this.$line = $line;
        $this.$value22 = $value;
        tj_Statements$StmtType_$callClinit();
        $this.$type1 = tj_Statements$StmtType_SHOWMSGBOX;
    }
    function tj_ShowMsgBoxStmt_getValue($this) {
        return $this.$value22;
    }
    function tj_ShowMsgBoxStmt_getLine($this) {
        return $this.$line;
    }
    function tj_PrintStmt() {
        tj_Statements.call(this);
        this.$value21 = null;
    }
    function tj_PrintStmt__init_(var_0, var_1) {
        var var_2 = new tj_PrintStmt();
        tj_PrintStmt__init_0(var_2, var_0, var_1);
        return var_2;
    }
    function tj_PrintStmt__init_0($this, $line, $value) {
        tj_Statements__init_($this);
        $this.$line = $line;
        $this.$value21 = $value;
        tj_Statements$StmtType_$callClinit();
        $this.$type1 = tj_Statements$StmtType_PRINT;
    }
    function tj_PrintStmt_getValue($this) {
        return $this.$value21;
    }
    function tj_PrintStmt_getLine($this) {
        return $this.$line;
    }
    function tj_WhileStmt() {
        tj_Statements.call(this);
        this.$condition1 = null;
    }
    function tj_WhileStmt__init_(var_0, var_1) {
        var var_2 = new tj_WhileStmt();
        tj_WhileStmt__init_0(var_2, var_0, var_1);
        return var_2;
    }
    function tj_WhileStmt__init_0($this, $line, $condition) {
        tj_Statements__init_($this);
        $this.$line = $line;
        $this.$condition1 = $condition;
        tj_Statements$StmtType_$callClinit();
        $this.$type1 = tj_Statements$StmtType_WHILE;
        $this.$isBlock = 1;
    }
    function tj_WhileStmt_getLine($this) {
        return $this.$line;
    }
    function tj_WhileStmt_getCondition($this) {
        return $this.$condition1;
    }
    function tj_RemoveAllFromStmt() {
        var a = this; tj_Statements.call(a);
        a.$listName2 = null;
        a.$value25 = null;
    }
    function tj_RemoveAllFromStmt__init_(var_0, var_1, var_2) {
        var var_3 = new tj_RemoveAllFromStmt();
        tj_RemoveAllFromStmt__init_0(var_3, var_0, var_1, var_2);
        return var_3;
    }
    function tj_RemoveAllFromStmt__init_0($this, $line, $name, $value) {
        tj_Statements__init_($this);
        $this.$listName2 = $name;
        tj_Statements$StmtType_$callClinit();
        $this.$type1 = tj_Statements$StmtType_REMOVEALLFROM;
        $this.$value25 = $value;
        $this.$line = $line;
    }
    function tj_RemoveAllFromStmt_getListName($this) {
        return $this.$listName2;
    }
    function tj_RemoveAllFromStmt_getValue($this) {
        return $this.$value25;
    }
    function tj_RemoveFromStmt() {
        var a = this; tj_Statements.call(a);
        a.$value24 = null;
        a.$listName1 = null;
    }
    function tj_RemoveFromStmt__init_(var_0, var_1, var_2) {
        var var_3 = new tj_RemoveFromStmt();
        tj_RemoveFromStmt__init_0(var_3, var_0, var_1, var_2);
        return var_3;
    }
    function tj_RemoveFromStmt__init_0($this, $line, $value, $name) {
        tj_Statements__init_($this);
        $this.$value24 = $value;
        $this.$listName1 = $name;
        tj_Statements$StmtType_$callClinit();
        $this.$type1 = tj_Statements$StmtType_REMOVEFROM;
        $this.$line = $line;
    }
    function tj_RemoveFromStmt_getValue($this) {
        return $this.$value24;
    }
    function tj_RemoveFromStmt_getListName($this) {
        return $this.$listName1;
    }
    function tj_RemoveAtStmt() {
        var a = this; tj_Statements.call(a);
        a.$location = null;
        a.$listName0 = null;
    }
    function tj_RemoveAtStmt__init_(var_0, var_1, var_2) {
        var var_3 = new tj_RemoveAtStmt();
        tj_RemoveAtStmt__init_0(var_3, var_0, var_1, var_2);
        return var_3;
    }
    function tj_RemoveAtStmt__init_0($this, $line, $location, $name) {
        tj_Statements__init_($this);
        $this.$location = $location;
        $this.$listName0 = $name;
        tj_Statements$StmtType_$callClinit();
        $this.$type1 = tj_Statements$StmtType_REMOVEAT;
        $this.$line = $line;
    }
    function tj_RemoveAtStmt_getLocation($this) {
        return $this.$location;
    }
    function tj_RemoveAtStmt_getListName($this) {
        return $this.$listName0;
    }
    var ju_Map$Entry = $rt_classWithoutFields(0);
    function jl_Enum() {
        var a = this; jl_Object.call(a);
        a.$name4 = null;
        a.$ordinal0 = 0;
    }
    function jl_Enum__init_($this, $name, $ordinal) {
        $this.$name4 = $name;
        $this.$ordinal0 = $ordinal;
    }
    function jl_Enum_name($this) {
        return $this.$name4;
    }
    function jl_Enum_ordinal($this) {
        return $this.$ordinal0;
    }
    function jl_Enum_toString($this) {
        return $this.$name4;
    }
    function jl_Enum_equals($this, $other) {
        return $this !== $other ? 0 : 1;
    }
    function jl_Enum_valueOf($enumType, $name) {
        var $constants, var$4, var$5, $constant, var$7;
        if (!($enumType.$platformClass.$meta.enum ? 1 : 0))
            $constants = null;
        else {
            $enumType.$platformClass.$clinit();
            $constants = (otp_Platform_getEnumConstants($enumType.$platformClass)).$clone();
        }
        if ($constants === null) {
            $enumType = new jl_IllegalArgumentException;
            jl_Throwable__init_($enumType, $rt_s(502));
            $rt_throw($enumType);
        }
        $constants = $constants.data;
        var$4 = $constants.length;
        var$5 = 0;
        while (true) {
            if (var$5 >= var$4) {
                $constant = new jl_IllegalArgumentException;
                $enumType = jl_String_valueOf($enumType);
                $name = jl_String_valueOf($name);
                var$7 = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_(var$7);
                jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$7, $rt_s(503)), $enumType), $rt_s(504)), $name), $rt_s(505));
                jl_Throwable__init_($constant, jl_AbstractStringBuilder_toString(var$7));
                $rt_throw($constant);
            }
            $constant = $constants[var$5];
            if (jl_String_equals($constant.$name4, $name))
                break;
            var$5 = var$5 + 1 | 0;
        }
        return $constant;
    }
    var tj_JavaishVal$JavaishType = $rt_classWithoutFields(jl_Enum);
    var tj_JavaishVal$JavaishType_INT = null;
    var tj_JavaishVal$JavaishType_FLOAT = null;
    var tj_JavaishVal$JavaishType_STRING = null;
    var tj_JavaishVal$JavaishType_BOOLEAN = null;
    var tj_JavaishVal$JavaishType_INTLIST = null;
    var tj_JavaishVal$JavaishType_FLOATLIST = null;
    var tj_JavaishVal$JavaishType_STRINGLIST = null;
    var tj_JavaishVal$JavaishType_BOOLEANLIST = null;
    var tj_JavaishVal$JavaishType_LIST = null;
    var tj_JavaishVal$JavaishType_$VALUES = null;
    function tj_JavaishVal$JavaishType_$callClinit() {
        tj_JavaishVal$JavaishType_$callClinit = $rt_eraseClinit(tj_JavaishVal$JavaishType);
        tj_JavaishVal$JavaishType__clinit_();
    }
    function tj_JavaishVal$JavaishType__init_(var_0, var_1) {
        var var_2 = new tj_JavaishVal$JavaishType();
        tj_JavaishVal$JavaishType__init_0(var_2, var_0, var_1);
        return var_2;
    }
    function tj_JavaishVal$JavaishType_values() {
        tj_JavaishVal$JavaishType_$callClinit();
        return tj_JavaishVal$JavaishType_$VALUES.$clone();
    }
    function tj_JavaishVal$JavaishType_valueOf($name) {
        tj_JavaishVal$JavaishType_$callClinit();
        return jl_Enum_valueOf($rt_cls(tj_JavaishVal$JavaishType), $name);
    }
    function tj_JavaishVal$JavaishType__init_0($this, var$1, var$2) {
        tj_JavaishVal$JavaishType_$callClinit();
        jl_Enum__init_($this, var$1, var$2);
    }
    function tj_JavaishVal$JavaishType__clinit_() {
        var var$1;
        tj_JavaishVal$JavaishType_INT = tj_JavaishVal$JavaishType__init_($rt_s(179), 0);
        tj_JavaishVal$JavaishType_FLOAT = tj_JavaishVal$JavaishType__init_($rt_s(180), 1);
        tj_JavaishVal$JavaishType_STRING = tj_JavaishVal$JavaishType__init_($rt_s(178), 2);
        tj_JavaishVal$JavaishType_BOOLEAN = tj_JavaishVal$JavaishType__init_($rt_s(181), 3);
        tj_JavaishVal$JavaishType_INTLIST = tj_JavaishVal$JavaishType__init_($rt_s(75), 4);
        tj_JavaishVal$JavaishType_FLOATLIST = tj_JavaishVal$JavaishType__init_($rt_s(76), 5);
        tj_JavaishVal$JavaishType_STRINGLIST = tj_JavaishVal$JavaishType__init_($rt_s(77), 6);
        tj_JavaishVal$JavaishType_BOOLEANLIST = tj_JavaishVal$JavaishType__init_($rt_s(78), 7);
        var$1 = tj_JavaishVal$JavaishType__init_($rt_s(282), 8);
        tj_JavaishVal$JavaishType_LIST = var$1;
        tj_JavaishVal$JavaishType_$VALUES = $rt_createArrayFromData(tj_JavaishVal$JavaishType, [tj_JavaishVal$JavaishType_INT, tj_JavaishVal$JavaishType_FLOAT, tj_JavaishVal$JavaishType_STRING, tj_JavaishVal$JavaishType_BOOLEAN, tj_JavaishVal$JavaishType_INTLIST, tj_JavaishVal$JavaishType_FLOATLIST, tj_JavaishVal$JavaishType_STRINGLIST, tj_JavaishVal$JavaishType_BOOLEANLIST, var$1]);
    }
    var tj_JavaishVal = $rt_classWithoutFields(0);
    function tj_JavaishListVal() {
        var a = this; jl_Object.call(a);
        a.$list = null;
        a.$type2 = null;
    }
    function tj_JavaishListVal__init_(var_0) {
        var var_1 = new tj_JavaishListVal();
        tj_JavaishListVal__init_0(var_1, var_0);
        return var_1;
    }
    function tj_JavaishListVal_getValue($this) {
        return $this.$list;
    }
    function tj_JavaishListVal__init_0($this, $value) {
        tj_JavaishVal$JavaishType_$callClinit();
        $this.$type2 = tj_JavaishVal$JavaishType_LIST;
        $this.$list = $value;
    }
    function tj_JavaishListVal_getType($this) {
        return $this.$type2;
    }
    function tj_JavaishListVal_typeString($this) {
        return $rt_s(293);
    }
    function tj_JavaishListVal_getValue0($this) {
        return $this.$list;
    }
    function tj_FunctionVar() {
        var a = this; jl_Object.call(a);
        a.$name11 = null;
        a.$body0 = null;
        a.$args = null;
        a.$lineNumber3 = 0;
    }
    var jl_Readable = $rt_classWithoutFields(0);
    function ji_Reader() {
        jl_Object.call(this);
        this.$lock = null;
    }
    function ji_Reader__init_($this) {
        $this.$lock = new jl_Object;
    }
    function ji_StringReader() {
        var a = this; ji_Reader.call(a);
        a.$string = null;
        a.$index1 = 0;
    }
    function ji_StringReader_read($this) {
        var var$1, var$2;
        ji_StringReader_checkOpened($this);
        if ($this.$index1 >= jl_String_length($this.$string))
            return (-1);
        var$1 = $this.$string;
        var$2 = $this.$index1;
        $this.$index1 = var$2 + 1 | 0;
        return jl_String_charAt(var$1, var$2);
    }
    function ji_StringReader_checkOpened($this) {
        var var$1;
        if ($this.$string !== null)
            return;
        var$1 = new ji_IOException;
        jl_Exception__init_(var$1);
        $rt_throw(var$1);
    }
    var oj_JSONObject$Null = $rt_classWithoutFields();
    function oj_JSONObject$Null_equals($this, $object) {
        return $object !== null && $object !== $this ? 0 : 1;
    }
    function oj_JSONObject$Null_toString($this) {
        return $rt_s(11);
    }
    function tj_Argument() {
        var a = this; jl_Object.call(a);
        a.$type = null;
        a.$name3 = null;
    }
    function tj_Argument__init_(var_0, var_1) {
        var var_2 = new tj_Argument();
        tj_Argument__init_0(var_2, var_0, var_1);
        return var_2;
    }
    function tj_Argument__init_0($this, $type, $name) {
        $this.$type = $type;
        $this.$name3 = $name;
    }
    var tj_Statements$StmtType = $rt_classWithoutFields(jl_Enum);
    var tj_Statements$StmtType_FUNCTION = null;
    var tj_Statements$StmtType_IF = null;
    var tj_Statements$StmtType_WHILE = null;
    var tj_Statements$StmtType_FOREACH = null;
    var tj_Statements$StmtType_RETURN = null;
    var tj_Statements$StmtType_CALL = null;
    var tj_Statements$StmtType_ASSIGNMENT = null;
    var tj_Statements$StmtType_DECLARATION = null;
    var tj_Statements$StmtType_VARIABLE = null;
    var tj_Statements$StmtType_MUTATION = null;
    var tj_Statements$StmtType_END = null;
    var tj_Statements$StmtType_ELSE = null;
    var tj_Statements$StmtType_CLASS = null;
    var tj_Statements$StmtType_ELSEIF = null;
    var tj_Statements$StmtType_FORWHEN = null;
    var tj_Statements$StmtType_PRINT = null;
    var tj_Statements$StmtType_SHOWMSGBOX = null;
    var tj_Statements$StmtType_REMOVEAT = null;
    var tj_Statements$StmtType_REMOVEFROM = null;
    var tj_Statements$StmtType_REMOVEALLFROM = null;
    var tj_Statements$StmtType_COMMENT = null;
    var tj_Statements$StmtType_IMPORT = null;
    var tj_Statements$StmtType_ROBOT = null;
    var tj_Statements$StmtType_$VALUES = null;
    function tj_Statements$StmtType_$callClinit() {
        tj_Statements$StmtType_$callClinit = $rt_eraseClinit(tj_Statements$StmtType);
        tj_Statements$StmtType__clinit_();
    }
    function tj_Statements$StmtType__init_(var_0, var_1) {
        var var_2 = new tj_Statements$StmtType();
        tj_Statements$StmtType__init_0(var_2, var_0, var_1);
        return var_2;
    }
    function tj_Statements$StmtType_values() {
        tj_Statements$StmtType_$callClinit();
        return tj_Statements$StmtType_$VALUES.$clone();
    }
    function tj_Statements$StmtType_valueOf($name) {
        tj_Statements$StmtType_$callClinit();
        return jl_Enum_valueOf($rt_cls(tj_Statements$StmtType), $name);
    }
    function tj_Statements$StmtType__init_0($this, var$1, var$2) {
        tj_Statements$StmtType_$callClinit();
        jl_Enum__init_($this, var$1, var$2);
    }
    function tj_Statements$StmtType__clinit_() {
        var var$1;
        tj_Statements$StmtType_FUNCTION = tj_Statements$StmtType__init_($rt_s(82), 0);
        tj_Statements$StmtType_IF = tj_Statements$StmtType__init_($rt_s(253), 1);
        tj_Statements$StmtType_WHILE = tj_Statements$StmtType__init_($rt_s(259), 2);
        tj_Statements$StmtType_FOREACH = tj_Statements$StmtType__init_($rt_s(256), 3);
        tj_Statements$StmtType_RETURN = tj_Statements$StmtType__init_($rt_s(252), 4);
        tj_Statements$StmtType_CALL = tj_Statements$StmtType__init_($rt_s(254), 5);
        tj_Statements$StmtType_ASSIGNMENT = tj_Statements$StmtType__init_($rt_s(262), 6);
        tj_Statements$StmtType_DECLARATION = tj_Statements$StmtType__init_($rt_s(260), 7);
        tj_Statements$StmtType_VARIABLE = tj_Statements$StmtType__init_($rt_s(276), 8);
        tj_Statements$StmtType_MUTATION = tj_Statements$StmtType__init_($rt_s(264), 9);
        tj_Statements$StmtType_END = tj_Statements$StmtType__init_($rt_s(506), 10);
        tj_Statements$StmtType_ELSE = tj_Statements$StmtType__init_($rt_s(255), 11);
        tj_Statements$StmtType_CLASS = tj_Statements$StmtType__init_($rt_s(507), 12);
        tj_Statements$StmtType_ELSEIF = tj_Statements$StmtType__init_($rt_s(268), 13);
        tj_Statements$StmtType_FORWHEN = tj_Statements$StmtType__init_($rt_s(257), 14);
        tj_Statements$StmtType_PRINT = tj_Statements$StmtType__init_($rt_s(258), 15);
        tj_Statements$StmtType_SHOWMSGBOX = tj_Statements$StmtType__init_($rt_s(267), 16);
        tj_Statements$StmtType_REMOVEAT = tj_Statements$StmtType__init_($rt_s(261), 17);
        tj_Statements$StmtType_REMOVEFROM = tj_Statements$StmtType__init_($rt_s(263), 18);
        tj_Statements$StmtType_REMOVEALLFROM = tj_Statements$StmtType__init_($rt_s(266), 19);
        tj_Statements$StmtType_COMMENT = tj_Statements$StmtType__init_($rt_s(265), 20);
        tj_Statements$StmtType_IMPORT = tj_Statements$StmtType__init_($rt_s(508), 21);
        var$1 = tj_Statements$StmtType__init_($rt_s(509), 22);
        tj_Statements$StmtType_ROBOT = var$1;
        tj_Statements$StmtType_$VALUES = $rt_createArrayFromData(tj_Statements$StmtType, [tj_Statements$StmtType_FUNCTION, tj_Statements$StmtType_IF, tj_Statements$StmtType_WHILE, tj_Statements$StmtType_FOREACH, tj_Statements$StmtType_RETURN, tj_Statements$StmtType_CALL, tj_Statements$StmtType_ASSIGNMENT, tj_Statements$StmtType_DECLARATION, tj_Statements$StmtType_VARIABLE, tj_Statements$StmtType_MUTATION, tj_Statements$StmtType_END, tj_Statements$StmtType_ELSE, tj_Statements$StmtType_CLASS, tj_Statements$StmtType_ELSEIF,
        tj_Statements$StmtType_FORWHEN, tj_Statements$StmtType_PRINT, tj_Statements$StmtType_SHOWMSGBOX, tj_Statements$StmtType_REMOVEAT, tj_Statements$StmtType_REMOVEFROM, tj_Statements$StmtType_REMOVEALLFROM, tj_Statements$StmtType_COMMENT, tj_Statements$StmtType_IMPORT, var$1]);
    }
    function tj_Element() {
        jl_Object.call(this);
        this.$type0 = null;
    }
    function tj_Element_getType($this) {
        return $this.$type0;
    }
    function tj_Element_getTypeS($this) {
        return jl_Enum_toString($this.$type0);
    }
    function tj_Expression() {
        var a = this; jl_Object.call(a);
        a.$line1 = 0;
        a.$goal = 0;
        a.$returnType1 = null;
        a.$elements = null;
        a.$column = 0;
    }
    function tj_Expression__init_(var_0, var_1, var_2) {
        var var_3 = new tj_Expression();
        tj_Expression__init_0(var_3, var_0, var_1, var_2);
        return var_3;
    }
    function tj_Expression__init_1(var_0, var_1, var_2, var_3) {
        var var_4 = new tj_Expression();
        tj_Expression__init_2(var_4, var_0, var_1, var_2, var_3);
        return var_4;
    }
    function tj_Expression__init_0($this, $elements, $returnType, $line) {
        $this.$elements = $elements;
        $this.$returnType1 = $returnType;
        $this.$line1 = $line;
    }
    function tj_Expression__init_2($this, $expression, $returnType, $line, $column) {
        $this.$returnType1 = $returnType;
        $this.$line1 = $line;
        $this.$column = $column;
        $this.$elements = tj_Expression_parseExpression($this, $expression, $column);
    }
    function tj_Expression_getLine($this) {
        return $this.$line1;
    }
    function tj_Expression_parseExpression($this, $expression, $column) {
        var $functionArg, $elmt, $iter, $i, $readingString, $lastReadString, $readingFunction, $readingFunctionArgs, $readingExpression, $readingCast, $readingArray, $readingArrayElmt, $readingArrayElmtArgs, $readingArrayArgExpression, $readingGetArrayLength, $readingRobotAction, $readingNot, $castType, $castReturnType, $elements, $currentElement, $currentFunctionName, $currentArrayName, $currentExpressionDepth, $currentCastDepth, $currentFunctionDepth, $currentArrayArgDepth, $functionArgs, $arrayElmts, $c,
        $nextChar, var$34, var$35, var$36, var$37, $index, $newFunctionArgs, $functionArgsArray, $notElements, $notArgs, $arrayElmt, $$je;
        $functionArg = jl_System_out();
        $elmt = jl_StringBuilder__init_();
        jl_StringBuilder_append(jl_StringBuilder_append($elmt, $rt_s(510)), $expression);
        ji_PrintStream_println($functionArg, jl_StringBuilder_toString($elmt));
        $iter = 0;
        $i = 0;
        $readingString = 0;
        $lastReadString = 0;
        $readingFunction = 0;
        $readingFunctionArgs = 0;
        $readingExpression = 0;
        $readingCast = 0;
        $readingArray = 0;
        $readingArrayElmt = 0;
        $readingArrayElmtArgs = 0;
        $readingArrayArgExpression = 0;
        $readingGetArrayLength = 0;
        $readingRobotAction = 0;
        $readingNot = 0;
        $castType = null;
        tj_Expression$ExpressionReturnType_$callClinit();
        $castReturnType = tj_Expression$ExpressionReturnType_NUMBER;
        $elements = ju_ArrayList__init_();
        $currentElement = $rt_s(2);
        $currentFunctionName = $rt_s(2);
        $currentArrayName = $rt_s(2);
        $currentExpressionDepth = 0;
        $currentCastDepth = 0;
        $currentFunctionDepth = 0;
        $currentArrayArgDepth = 0;
        $functionArgs = ju_ArrayList__init_();
        $arrayElmts = ju_ArrayList__init_();
        while ($i < jl_String_length($expression)) {
            $c = jl_String_charAt($expression, $i);
            $nextChar = 32;
            var$34 = $i + 1 | 0;
            if (var$34 < jl_String_length($expression))
                $nextChar = jl_String_charAt($expression, var$34);
            a: {
                var$35 = $rt_compare($c, 40);
                if (!var$35 && !$readingFunction && !$readingString) {
                    if ($readingExpression && !$readingCast && !$readingArrayElmtArgs) {
                        $currentExpressionDepth = $currentExpressionDepth + 1 | 0;
                        $functionArg = jl_StringBuilder__init_();
                        jl_StringBuilder_append3(jl_StringBuilder_append($functionArg, $currentElement), $c);
                        $currentElement = jl_StringBuilder_toString($functionArg);
                    } else if (tj_Expression_possibleFunctionName($this, $currentElement) && !$readingCast) {
                        $currentFunctionDepth = $currentFunctionDepth + 1 | 0;
                        $readingFunction = 1;
                        $readingFunctionArgs = 1;
                        $currentFunctionName = $currentElement;
                        $currentElement = $rt_s(2);
                    } else if ($readingCast) {
                        $currentCastDepth = $currentCastDepth + 1 | 0;
                        $functionArg = jl_StringBuilder__init_();
                        jl_StringBuilder_append3(jl_StringBuilder_append($functionArg, $currentElement), $c);
                        $currentElement = jl_StringBuilder_toString($functionArg);
                    } else if (!$readingArrayElmtArgs) {
                        $readingExpression = 1;
                        $currentExpressionDepth = $currentExpressionDepth + 1 | 0;
                    } else {
                        $currentArrayArgDepth = $currentArrayArgDepth + 1 | 0;
                        $readingArrayArgExpression = 1;
                        $functionArg = jl_StringBuilder__init_();
                        jl_StringBuilder_append3(jl_StringBuilder_append($functionArg, $currentElement), $c);
                        $currentElement = jl_StringBuilder_toString($functionArg);
                    }
                } else {
                    var$36 = $rt_compare($c, 41);
                    if (!var$36 && !$readingFunction && !$readingString) {
                        if ($readingExpression) {
                            $currentExpressionDepth = $currentExpressionDepth + (-1) | 0;
                            if ($currentExpressionDepth) {
                                $functionArg = jl_StringBuilder__init_();
                                jl_StringBuilder_append3(jl_StringBuilder_append($functionArg, $currentElement), $c);
                                $currentElement = jl_StringBuilder_toString($functionArg);
                            } else {
                                $readingExpression = 0;
                                $functionArg = jl_System_out();
                                $elmt = jl_StringBuilder__init_();
                                jl_StringBuilder_append4(jl_StringBuilder_append($elmt, $rt_s(511)), $readingArray);
                                ji_PrintStream_println($functionArg, jl_StringBuilder_toString($elmt));
                                if (!$readingArray) {
                                    ju_ArrayList_add($elements, tj_ExpressionElmt__init_(tj_Expression__init_(tj_Expression_parseExpression($this, $currentElement, $column + $i | 0), tj_Expression$ExpressionReturnType_NUMBER, $this.$line1)));
                                    $currentElement = $rt_s(2);
                                }
                            }
                        } else if ($readingCast) {
                            $currentCastDepth = $currentCastDepth + (-1) | 0;
                            if ($currentCastDepth) {
                                $functionArg = jl_StringBuilder__init_();
                                jl_StringBuilder_append3(jl_StringBuilder_append($functionArg, $currentElement), $c);
                                $currentElement = jl_StringBuilder_toString($functionArg);
                            } else {
                                $readingCast = 0;
                                ju_ArrayList_add($elements, tj_CastElmt__init_($castType, tj_Expression__init_(tj_Expression_parseExpression($this, $currentElement, $column + $i | 0), $castReturnType, $this.$line1)));
                                $currentElement = $rt_s(2);
                            }
                        } else if (!$readingArrayElmtArgs) {
                            $functionArg = jl_StringBuilder__init_();
                            jl_StringBuilder_append3(jl_StringBuilder_append($functionArg, $currentElement), $c);
                            $currentElement = jl_StringBuilder_toString($functionArg);
                        } else {
                            $currentArrayArgDepth = $currentArrayArgDepth + (-1) | 0;
                            if ($currentArrayArgDepth) {
                                $functionArg = jl_StringBuilder__init_();
                                jl_StringBuilder_append3(jl_StringBuilder_append($functionArg, $currentElement), $c);
                                $currentElement = jl_StringBuilder_toString($functionArg);
                            } else {
                                $readingArrayElmtArgs = 0;
                                $readingArrayArgExpression = 0;
                                $functionArg = jl_StringBuilder__init_();
                                jl_StringBuilder_append3(jl_StringBuilder_append($functionArg, $currentElement), $c);
                                $currentElement = jl_StringBuilder_toString($functionArg);
                                ji_PrintStream_println(jl_System_out(), $rt_s(512));
                                $functionArg = jl_System_out();
                                $elmt = jl_StringBuilder__init_();
                                jl_StringBuilder_append(jl_StringBuilder_append($elmt, $rt_s(512)), $currentElement);
                                ji_PrintStream_println($functionArg, jl_StringBuilder_toString($elmt));
                                ju_ArrayList_add($elements, tj_ListValElmt__init_($currentArrayName, tj_Expression__init_(tj_Expression_parseExpression($this, $currentElement, $column + $i | 0), tj_Expression$ExpressionReturnType_NUMBER, $this.$line1)));
                                $currentElement = $rt_s(2);
                            }
                        }
                    } else {
                        var$37 = $rt_compare($c, 34);
                        if (!var$37 && !$readingFunction && !$readingExpression && !$readingCast && !$readingArray) {
                            if (!$readingString)
                                $readingString = 1;
                            else {
                                $readingString = 0;
                                if (!$readingArray)
                                    ju_ArrayList_add($elements, tj_StringElmt__init_($currentElement));
                                $currentElement = $rt_s(2);
                                $lastReadString = 1;
                            }
                        } else if (!var$37 && $readingFunction) {
                            if (!$readingString) {
                                $readingString = 1;
                                $functionArg = jl_StringBuilder__init_();
                                jl_StringBuilder_append3(jl_StringBuilder_append($functionArg, $currentElement), $c);
                                $currentElement = jl_StringBuilder_toString($functionArg);
                            } else {
                                $readingString = 0;
                                $functionArg = jl_StringBuilder__init_();
                                jl_StringBuilder_append3(jl_StringBuilder_append($functionArg, $currentElement), $c);
                                $currentElement = jl_StringBuilder_toString($functionArg);
                            }
                        } else {
                            b: {
                                if ($c != 33)
                                    break b;
                                if ($readingString)
                                    break b;
                                if ($readingArrayArgExpression)
                                    break b;
                                if ($readingCast)
                                    break b;
                                if ($readingExpression)
                                    break b;
                                if ($readingFunctionArgs)
                                    break b;
                                if ($nextChar == 61)
                                    break b;
                                if ($nextChar == 60)
                                    break b;
                                if ($nextChar == 62)
                                    break b;
                                ji_PrintStream_println(jl_System_out(), $rt_s(513));
                                $readingNot = 1;
                                break a;
                            }
                            if ($c != 32) {
                                if ($readingFunction && $readingFunctionArgs && $c == 44 && !$readingString) {
                                    ju_ArrayList_add($functionArgs, tj_Expression__init_(tj_Expression_parseExpression($this, $currentElement, $column + $i | 0), tj_Expression$ExpressionReturnType_NUMBER, $this.$line1));
                                    $currentElement = $rt_s(2);
                                } else if ($readingFunction && !var$36 && !$readingString) {
                                    $currentFunctionDepth = $currentFunctionDepth + (-1) | 0;
                                    if ($currentFunctionDepth) {
                                        $functionArg = jl_StringBuilder__init_();
                                        jl_StringBuilder_append3(jl_StringBuilder_append($functionArg, $currentElement), $c);
                                        $currentElement = jl_StringBuilder_toString($functionArg);
                                    } else {
                                        $iter = $iter + 1 | 0;
                                        if (jl_String_equals($currentFunctionName, $rt_s(231)))
                                            $this.$goal = 1;
                                        $functionArg = jl_System_out();
                                        $elmt = jl_StringBuilder__init_();
                                        jl_StringBuilder_append(jl_StringBuilder_append($elmt, $rt_s(514)), $expression);
                                        ji_PrintStream_println($functionArg, jl_StringBuilder_toString($elmt));
                                        $functionArg = jl_System_out();
                                        $elmt = jl_StringBuilder__init_();
                                        jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append0($elmt, $iter), $rt_s(515)), $currentFunctionName), $rt_s(516)), $currentElement);
                                        ji_PrintStream_println($functionArg, jl_StringBuilder_toString($elmt));
                                        ju_ArrayList_add($functionArgs, tj_Expression__init_(tj_Expression_parseExpression($this, $currentElement, $column + $i | 0), tj_Expression$ExpressionReturnType_NUMBER, $this.$line1));
                                        $currentElement = $rt_s(2);
                                        $readingFunctionArgs = 0;
                                        $readingFunction = 0;
                                        if ($readingRobotAction) {
                                            $functionArg = jl_System_out();
                                            $elmt = jl_StringBuilder__init_();
                                            jl_StringBuilder_append(jl_StringBuilder_append($elmt, $rt_s(517)), $currentFunctionName);
                                            ji_PrintStream_println($functionArg, jl_StringBuilder_toString($elmt));
                                            c: {
                                                try {
                                                    tj_Statements$RobotType_valueOf(jl_String_toUpperCase($currentFunctionName));
                                                    break c;
                                                } catch ($$e) {
                                                    $$je = $rt_wrapException($$e);
                                                    if ($$je instanceof jl_IllegalArgumentException) {
                                                    } else {
                                                        throw $$e;
                                                    }
                                                }
                                                tj_Error_InvalidRobotAction($currentFunctionName, tj_Expression_getLine($this));
                                            }
                                            ju_ArrayList_add($elements, tj_RobotActionElmt__init_(tj_Statements$RobotType_valueOf(jl_String_toUpperCase($currentFunctionName)), $functionArgs));
                                            $readingRobotAction = 0;
                                        } else if (jl_String_equals($currentFunctionName, $rt_s(232))) {
                                            if (ju_ArrayList_size($functionArgs) != 1)
                                                tj_Error_ArgumentLengthMismatch($currentFunctionName, tj_Expression_getLine($this), 1, ju_ArrayList_size($functionArgs));
                                            $functionArg = new tj_CastElmt;
                                            tj_JavaishVal$JavaishType_$callClinit();
                                            tj_CastElmt__init_0($functionArg, tj_JavaishVal$JavaishType_STRING, ju_ArrayList_get($functionArgs, 0));
                                            ju_ArrayList_add($elements, $functionArg);
                                            $functionArg = jl_System_out();
                                            $elmt = tj_Expression_toString(ju_ArrayList_get($functionArgs, 0));
                                            $index = jl_StringBuilder__init_();
                                            jl_StringBuilder_append(jl_StringBuilder_append($index, $rt_s(518)), $elmt);
                                            ji_PrintStream_println($functionArg, jl_StringBuilder_toString($index));
                                        } else if (jl_String_equals($currentFunctionName, $rt_s(235))) {
                                            if (ju_ArrayList_size($functionArgs) != 1)
                                                tj_Error_ArgumentLengthMismatch($currentFunctionName, tj_Expression_getLine($this), 1, ju_ArrayList_size($functionArgs));
                                            $functionArg = new tj_CastElmt;
                                            tj_JavaishVal$JavaishType_$callClinit();
                                            tj_CastElmt__init_0($functionArg, tj_JavaishVal$JavaishType_FLOAT, ju_ArrayList_get($functionArgs, 0));
                                            ju_ArrayList_add($elements, $functionArg);
                                        } else if (jl_String_equals($currentFunctionName, $rt_s(233))) {
                                            if (ju_ArrayList_size($functionArgs) != 1)
                                                tj_Error_ArgumentLengthMismatch($currentFunctionName, tj_Expression_getLine($this), 1, ju_ArrayList_size($functionArgs));
                                            $functionArg = new tj_CastElmt;
                                            tj_JavaishVal$JavaishType_$callClinit();
                                            tj_CastElmt__init_0($functionArg, tj_JavaishVal$JavaishType_INT, ju_ArrayList_get($functionArgs, 0));
                                            ju_ArrayList_add($elements, $functionArg);
                                        } else if (!jl_String_equals($currentFunctionName, $rt_s(234))) {
                                            if (jl_String_equals($currentFunctionName, $rt_s(231))) {
                                                if (ju_ArrayList_size($functionArgs) != 1)
                                                    tj_Error_ArgumentLengthMismatch($rt_s(231), tj_Expression_getLine($this), 1, ju_ArrayList_size($functionArgs));
                                                ju_ArrayList_add($elements, tj_ShowInputBoxElmt__init_(ju_ArrayList_get($functionArgs, 0)));
                                            } else {
                                                $newFunctionArgs = ju_ArrayList__init_();
                                                $elmt = ju_AbstractList_iterator($functionArgs);
                                                while (ju_AbstractList$1_hasNext($elmt)) {
                                                    $functionArg = ju_AbstractList$1_next($elmt);
                                                    if ($functionArg.$elements.data.length)
                                                        ju_ArrayList_add($newFunctionArgs, $functionArg);
                                                }
                                                $functionArgsArray = ju_AbstractCollection_toArray($newFunctionArgs, $rt_createArray(tj_Expression, ju_ArrayList_size($newFunctionArgs)));
                                                $notElements = $rt_createArray(tj_Element, 1);
                                                $notElements.data[0] = tj_FunctionElmt__init_($currentFunctionName, $functionArgsArray);
                                                if (!$readingNot)
                                                    ju_ArrayList_add($elements, tj_FunctionElmt__init_($currentFunctionName, $functionArgsArray));
                                                else {
                                                    ji_PrintStream_println(jl_System_out(), $rt_s(519));
                                                    ju_ArrayList_add($elements, tj_NotElmt__init_(tj_Expression__init_($notElements, tj_Expression$ExpressionReturnType_NUMBER, $this.$line1)));
                                                    $readingNot = 0;
                                                }
                                            }
                                        } else {
                                            if (ju_ArrayList_size($functionArgs) != 1)
                                                tj_Error_ArgumentLengthMismatch($currentFunctionName, tj_Expression_getLine($this), 1, ju_ArrayList_size($functionArgs));
                                            if (!$readingNot) {
                                                $functionArg = new tj_CastElmt;
                                                tj_JavaishVal$JavaishType_$callClinit();
                                                tj_CastElmt__init_0($functionArg, tj_JavaishVal$JavaishType_BOOLEAN, ju_ArrayList_get($functionArgs, 0));
                                                ju_ArrayList_add($elements, $functionArg);
                                            } else {
                                                ji_PrintStream_println(jl_System_out(), $rt_s(519));
                                                $notArgs = $rt_createArray(tj_Element, 1);
                                                $functionArgsArray = $notArgs.data;
                                                $functionArg = new tj_CastElmt;
                                                tj_JavaishVal$JavaishType_$callClinit();
                                                tj_CastElmt__init_0($functionArg, tj_JavaishVal$JavaishType_BOOLEAN, ju_ArrayList_get($functionArgs, 0));
                                                $functionArgsArray[0] = $functionArg;
                                                ju_ArrayList_add($elements, tj_NotElmt__init_(tj_Expression__init_($notArgs, tj_Expression$ExpressionReturnType_NUMBER, $this.$line1)));
                                                $readingNot = 0;
                                            }
                                        }
                                        $currentFunctionName = $rt_s(2);
                                        $functionArgs = ju_ArrayList__init_();
                                    }
                                } else if (!var$35 && $readingFunction && !$readingString) {
                                    $currentFunctionDepth = $currentFunctionDepth + 1 | 0;
                                    $functionArg = jl_StringBuilder__init_();
                                    jl_StringBuilder_append3(jl_StringBuilder_append($functionArg, $currentElement), $c);
                                    $currentElement = jl_StringBuilder_toString($functionArg);
                                } else if ($c == 91 && !$readingArray && !$readingString && !$readingFunction) {
                                    if (jl_String_equals($currentElement, $rt_s(2)))
                                        $readingArray = 1;
                                } else if ($c == 44 && !$readingString && $readingArray) {
                                    $arrayElmt = tj_Expression__init_(tj_Expression_parseExpression($this, $currentElement, $column + $i | 0), tj_Expression$ExpressionReturnType_NUMBER, $this.$line1);
                                    $currentElement = $rt_s(2);
                                    ju_ArrayList_add($arrayElmts, $arrayElmt);
                                } else if ($c == 93 && !$readingString && $readingArray) {
                                    ju_ArrayList_add($arrayElmts, tj_Expression__init_(tj_Expression_parseExpression($this, $currentElement, $column + $i | 0), tj_Expression$ExpressionReturnType_NUMBER, $this.$line1));
                                    ju_ArrayList_add($elements, tj_ListElmt__init_($arrayElmts, tj_Expression_returnTypeToJavaishType($this, tj_Expression_getReturnType($this))));
                                    $readingArray = 0;
                                    $currentElement = $rt_s(2);
                                    $arrayElmts = ju_ArrayList__init_();
                                } else {
                                    $functionArg = jl_StringBuilder__init_();
                                    jl_StringBuilder_append3(jl_StringBuilder_append($functionArg, $currentElement), $c);
                                    $currentElement = jl_StringBuilder_toString($functionArg);
                                }
                            } else if (!$readingString && !$readingExpression && !$readingCast && !$readingFunctionArgs && !$readingArrayArgExpression) {
                                if (jl_String_equals($currentElement, $rt_s(204)) && !$readingString && !$readingFunctionArgs) {
                                    $readingRobotAction = 1;
                                    $currentElement = $rt_s(2);
                                    break a;
                                }
                                if (jl_String_equals($currentElement, $rt_s(520)) && !$readingFunction) {
                                    $readingFunction = 1;
                                    $currentElement = $rt_s(2);
                                    break a;
                                }
                                if (jl_String_equals($currentElement, $rt_s(521)) && jl_String_equals(tj_Expression_nextWord($this, $expression, var$34), $rt_s(221))) {
                                    ju_ArrayList_add($elements, tj_NotEqualElmt__init_());
                                    $i = $i + 5 | 0;
                                    $currentElement = $rt_s(2);
                                    break a;
                                }
                                if (jl_String_equals($currentElement, $rt_s(521))) {
                                    $readingNot = 1;
                                    $currentElement = $rt_s(2);
                                    break a;
                                }
                                if (jl_String_equals($currentElement, $rt_s(522)) && jl_String_equals(tj_Expression_nextWord($this, $expression, var$34), $rt_s(523))) {
                                    if (!jl_String_equals(tj_Expression_nextWord($this, $expression, $i + 6 | 0), $rt_s(524))) {
                                        ju_ArrayList_add($elements, tj_GreaterThanElmt__init_());
                                        $i = $i + 4 | 0;
                                        $currentElement = $rt_s(2);
                                        break a;
                                    }
                                    ju_ArrayList_add($elements, tj_GreaterThanEqualElmt__init_());
                                    $i = $i + 16 | 0;
                                    $currentElement = $rt_s(2);
                                    break a;
                                }
                                if (jl_String_equals($currentElement, $rt_s(525)) && jl_String_equals(tj_Expression_nextWord($this, $expression, var$34), $rt_s(523))) {
                                    if (!jl_String_equals(tj_Expression_nextWord($this, $expression, $i + 6 | 0), $rt_s(524))) {
                                        ju_ArrayList_add($elements, tj_LessThanElmt__init_());
                                        $i = $i + 4 | 0;
                                        $currentElement = $rt_s(2);
                                        break a;
                                    }
                                    ju_ArrayList_add($elements, tj_LessThanEqualElmt__init_());
                                    $i = $i + 16 | 0;
                                    $currentElement = $rt_s(2);
                                    break a;
                                }
                                if (jl_String_equals(tj_Expression_nextWord($this, $expression, var$34), $rt_s(227)) && !$readingString && !$readingFunctionArgs && !$readingExpression) {
                                    $readingArrayElmt = 1;
                                    $currentArrayName = $currentElement;
                                    $currentElement = $rt_s(2);
                                    break a;
                                }
                                if (jl_String_equals($currentElement, $rt_s(227)) && !$readingString && $readingArrayElmt) {
                                    $readingArrayElmtArgs = 1;
                                    $currentElement = $rt_s(2);
                                    break a;
                                }
                                if (jl_String_equals($currentElement, $rt_s(80))) {
                                    $functionArg = jl_System_out();
                                    $elmt = tj_Expression_nextWord($this, $expression, var$34);
                                    $index = jl_StringBuilder__init_();
                                    jl_StringBuilder_append(jl_StringBuilder_append($index, $rt_s(526)), $elmt);
                                    ji_PrintStream_println($functionArg, jl_StringBuilder_toString($index));
                                    if (!jl_String_equals(tj_Expression_nextWord($this, $expression, var$34), $rt_s(527)))
                                        break a;
                                    $readingGetArrayLength = 1;
                                    $currentElement = $rt_s(2);
                                    $i = $i + 3 | 0;
                                    break a;
                                }
                                if ($readingGetArrayLength) {
                                    ju_ArrayList_add($elements, tj_ArrayLengthElmt__init_($currentElement));
                                    $currentElement = $rt_s(2);
                                    $readingGetArrayLength = 0;
                                    break a;
                                }
                                if ($readingArrayElmtArgs && !$readingString && !$readingArrayArgExpression) {
                                    ju_ArrayList_add($elements, tj_ListValElmt__init_($currentArrayName, tj_Expression__init_(tj_Expression_parseExpression($this, $currentElement, $column + $i | 0), tj_Expression$ExpressionReturnType_NUMBER, $this.$line1)));
                                    $currentElement = $rt_s(2);
                                    break a;
                                }
                                if (jl_String_length($currentElement) <= 0)
                                    break a;
                                if (jl_String_equals($currentElement, $rt_s(521)))
                                    break a;
                                if ($readingFunction)
                                    break a;
                                if (!$readingNot)
                                    ju_ArrayList_add($elements, tj_Expression_parseElement($this, $currentElement, $column + $i | 0));
                                else {
                                    ji_PrintStream_println(jl_System_out(), $rt_s(519));
                                    ju_ArrayList_add($elements, tj_NotElmt__init_(tj_Expression__init_(tj_Expression_parseExpression($this, $currentElement, $column + $i | 0), tj_Expression$ExpressionReturnType_NUMBER, $this.$line1)));
                                    $readingNot = 0;
                                }
                                $currentElement = $rt_s(2);
                                $lastReadString = 0;
                            } else {
                                $functionArg = jl_StringBuilder__init_();
                                jl_StringBuilder_append3(jl_StringBuilder_append($functionArg, $currentElement), $c);
                                $currentElement = jl_StringBuilder_toString($functionArg);
                            }
                        }
                    }
                }
            }
            $i = $i + 1 | 0;
        }
        if (!($currentArrayArgDepth <= 0 && $currentExpressionDepth <= 0 && $currentFunctionDepth <= 0 && $currentCastDepth <= 0))
            tj_Error_UnclosedParenthesis(tj_Expression_getLine($this), $column + $i | 0);
        if ($readingArray)
            tj_Error_UnclosedBracket(tj_Expression_getLine($this), $column + $i | 0);
        if (jl_String_length($currentElement) > 0 && !$lastReadString) {
            if ($readingArrayElmtArgs)
                ju_ArrayList_add($elements, tj_ListValElmt__init_($currentArrayName, tj_Expression__init_(tj_Expression_parseExpression($this, $currentElement, $column + $i | 0), tj_Expression$ExpressionReturnType_NUMBER, $this.$line1)));
            else if ($readingGetArrayLength)
                ju_ArrayList_add($elements, tj_ArrayLengthElmt__init_($currentElement));
            else if (!$readingNot)
                ju_ArrayList_add($elements, tj_Expression_parseElement($this, $currentElement, $column + $i | 0));
            else {
                ji_PrintStream_println(jl_System_out(), $rt_s(519));
                ju_ArrayList_add($elements, tj_NotElmt__init_(tj_Expression__init_(tj_Expression_parseExpression($this, $currentElement, $column + $i | 0), tj_Expression$ExpressionReturnType_NUMBER, $this.$line1)));
            }
        }
        return ju_AbstractCollection_toArray($elements, $rt_createArray(tj_Element, ju_ArrayList_size($elements)));
    }
    function tj_Expression_possibleFunctionName($this, $name) {
        var $functionName;
        $functionName = (jl_String_split($name, $rt_s(230))).data[0];
        if (!jl_String_contains($functionName, $rt_s(138)) && jl_String_length($functionName))
            return 1;
        return 0;
    }
    function tj_Expression_parseElement($this, $element, $column) {
        var var$3, var$4, var$5, var$6, var$7, var$8, $$je;
        a: {
            try {
                jl_Integer_parseInt0($element);
                var$3 = 1;
                break a;
            } catch ($$e) {
                $$je = $rt_wrapException($$e);
                if ($$je instanceof jl_NumberFormatException) {
                } else {
                    throw $$e;
                }
            }
            var$3 = 0;
        }
        if (var$3)
            return tj_IntElmt__init_(jl_Integer_parseInt0($element));
        b: {
            try {
                jl_Float_parseFloat($element);
                var$3 = 1;
                break b;
            } catch ($$e) {
                $$je = $rt_wrapException($$e);
                if ($$je instanceof jl_NumberFormatException) {
                } else {
                    throw $$e;
                }
            }
            var$3 = 0;
        }
        if (var$3)
            return tj_FloatElmt__init_(jl_Float_parseFloat($element));
        if (!jl_String_equals($element, $rt_s(21)) && !jl_String_equals($element, $rt_s(20))) {
            if (!jl_String_equals($element, $rt_s(221)) && !jl_String_equals($element, $rt_s(528))) {
                if (jl_String_equals($element, $rt_s(529)))
                    return tj_NotEqualElmt__init_();
                if (jl_String_equals($element, $rt_s(530)))
                    return tj_GreaterThanElmt__init_();
                if (jl_String_equals($element, $rt_s(531)))
                    return tj_LessThanElmt__init_();
                if (jl_String_equals($element, $rt_s(532)))
                    return tj_GreaterThanEqualElmt__init_();
                if (jl_String_equals($element, $rt_s(533)))
                    return tj_LessThanEqualElmt__init_();
                if (!jl_String_equals($element, $rt_s(534)) && !jl_String_equals($element, $rt_s(535))) {
                    if (!jl_String_equals($element, $rt_s(524)) && !jl_String_equals($element, $rt_s(536))) {
                        if (!jl_String_equals($element, $rt_s(537)) && !jl_String_equals($element, $rt_s(538))) {
                            if (!jl_String_equals($element, $rt_s(539)) && !jl_String_equals($element, $rt_s(540))) {
                                if (!jl_String_equals($element, $rt_s(541)) && !jl_String_equals($element, $rt_s(542))) {
                                    if (!jl_String_equals($element, $rt_s(195)) && !jl_String_equals($element, $rt_s(496))) {
                                        var$3 = 0;
                                        c: {
                                            while (var$3 < jl_String_length($element)) {
                                                var$4 = jl_String_charAt($element, var$3);
                                                if (!jl_Character_isLetter(var$4) && var$4 != 95 && var$3 <= 0) {
                                                    var$3 = 0;
                                                    break c;
                                                }
                                                var$3 = var$3 + 1 | 0;
                                            }
                                            var$3 = 1;
                                        }
                                        if (var$3)
                                            return tj_VariableElmt__init_($element);
                                        var$3 = $this.$line1;
                                        var$5 = new jl_StringBuilder;
                                        jl_AbstractStringBuilder__init_(var$5);
                                        jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(var$5, $rt_s(543)), var$3), $rt_s(544)), $column), $rt_s(10)), $element);
                                        var$5 = jl_AbstractStringBuilder_toString(var$5);
                                        var$6 = $rt_createArray(jl_String, 2);
                                        var$7 = var$6.data;
                                        var$7[0] = var$5;
                                        var$5 = new jl_StringBuilder;
                                        jl_AbstractStringBuilder__init_(var$5);
                                        jl_StringBuilder_append0(var$5, var$3);
                                        var$7[1] = jl_AbstractStringBuilder_toString(var$5);
                                        tj_Error_errorLog$js_body$_1(otji_JS_wrap(var$6));
                                        var$5 = new jl_RuntimeException;
                                        var$8 = new jl_StringBuilder;
                                        jl_AbstractStringBuilder__init_(var$8);
                                        jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(var$8, $rt_s(543)), var$3), $rt_s(544)), $column), $rt_s(10)), $element);
                                        jl_Throwable__init_(var$5, jl_AbstractStringBuilder_toString(var$8));
                                        $rt_throw(var$5);
                                    }
                                    return tj_DivideElmt__init_();
                                }
                                return tj_MultiplyElmt__init_();
                            }
                            return tj_MinusElmt__init_();
                        }
                        return tj_PlusElmt__init_();
                    }
                    return tj_OrElmt__init_();
                }
                return tj_AndElmt__init_();
            }
            return tj_EqualElmt__init_();
        }
        return tj_BoolElmt__init_(jl_Boolean_parseBoolean($element));
    }
    function tj_Expression_getReturnType($this) {
        return $this.$returnType1;
    }
    function tj_Expression_getElements($this) {
        return $this.$elements;
    }
    function tj_Expression_nextWord($this, $str, $i) {
        var $word, $c, var$5;
        $word = $rt_s(2);
        while ($i < jl_String_length($str)) {
            $c = jl_String_charAt($str, $i);
            if ($c == 32)
                return $word;
            var$5 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_(var$5);
            jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$5, $word), $c);
            $word = jl_AbstractStringBuilder_toString(var$5);
            $i = $i + 1 | 0;
        }
        return $word;
    }
    function tj_Expression_toString($this) {
        var $str, var$2, var$3, var$4, $elmt, var$6;
        $str = $rt_s(2);
        var$2 = $this.$elements.data;
        var$3 = var$2.length;
        var$4 = 0;
        while (var$4 < var$3) {
            $elmt = var$2[var$4].$toString();
            var$6 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_(var$6);
            jl_AbstractStringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$6, $str), $elmt), 32);
            $str = jl_AbstractStringBuilder_toString(var$6);
            var$4 = var$4 + 1 | 0;
        }
        if (jl_String_length($str) > 0)
            $str = jl_String_substring($str, 0, jl_String_length($str) - 1 | 0);
        return $str;
    }
    function tj_Expression_returnTypeToJavaishType($this, $returnType) {
        tj_Expression$1_$callClinit();
        switch (tj_Expression$1_$SwitchMap$trackerjo$javaish$Expression$ExpressionReturnType.data[$returnType.$ordinal0]) {
            case 1:
                tj_JavaishVal$JavaishType_$callClinit();
                return tj_JavaishVal$JavaishType_INT;
            case 2:
                tj_JavaishVal$JavaishType_$callClinit();
                return tj_JavaishVal$JavaishType_FLOAT;
            case 3:
                tj_JavaishVal$JavaishType_$callClinit();
                return tj_JavaishVal$JavaishType_STRING;
            case 4:
                tj_JavaishVal$JavaishType_$callClinit();
                return tj_JavaishVal$JavaishType_BOOLEAN;
            case 5:
                tj_JavaishVal$JavaishType_$callClinit();
                return tj_JavaishVal$JavaishType_INTLIST;
            case 6:
                tj_JavaishVal$JavaishType_$callClinit();
                return tj_JavaishVal$JavaishType_FLOATLIST;
            case 7:
                tj_JavaishVal$JavaishType_$callClinit();
                return tj_JavaishVal$JavaishType_STRINGLIST;
            case 8:
                tj_JavaishVal$JavaishType_$callClinit();
                return tj_JavaishVal$JavaishType_BOOLEANLIST;
            default:
        }
        return null;
    }
    var tj_Expression$ExpressionReturnType = $rt_classWithoutFields(jl_Enum);
    var tj_Expression$ExpressionReturnType_INT = null;
    var tj_Expression$ExpressionReturnType_FLOAT = null;
    var tj_Expression$ExpressionReturnType_STRING = null;
    var tj_Expression$ExpressionReturnType_BOOL = null;
    var tj_Expression$ExpressionReturnType_NUMBER = null;
    var tj_Expression$ExpressionReturnType_INTLIST = null;
    var tj_Expression$ExpressionReturnType_FLOATLIST = null;
    var tj_Expression$ExpressionReturnType_STRINGLIST = null;
    var tj_Expression$ExpressionReturnType_BOOLEANLIST = null;
    var tj_Expression$ExpressionReturnType_$VALUES = null;
    function tj_Expression$ExpressionReturnType_$callClinit() {
        tj_Expression$ExpressionReturnType_$callClinit = $rt_eraseClinit(tj_Expression$ExpressionReturnType);
        tj_Expression$ExpressionReturnType__clinit_();
    }
    function tj_Expression$ExpressionReturnType__init_(var_0, var_1) {
        var var_2 = new tj_Expression$ExpressionReturnType();
        tj_Expression$ExpressionReturnType__init_0(var_2, var_0, var_1);
        return var_2;
    }
    function tj_Expression$ExpressionReturnType_values() {
        tj_Expression$ExpressionReturnType_$callClinit();
        return tj_Expression$ExpressionReturnType_$VALUES.$clone();
    }
    function tj_Expression$ExpressionReturnType_valueOf($name) {
        tj_Expression$ExpressionReturnType_$callClinit();
        return jl_Enum_valueOf($rt_cls(tj_Expression$ExpressionReturnType), $name);
    }
    function tj_Expression$ExpressionReturnType__init_0($this, var$1, var$2) {
        tj_Expression$ExpressionReturnType_$callClinit();
        jl_Enum__init_($this, var$1, var$2);
    }
    function tj_Expression$ExpressionReturnType__clinit_() {
        var var$1;
        tj_Expression$ExpressionReturnType_INT = tj_Expression$ExpressionReturnType__init_($rt_s(179), 0);
        tj_Expression$ExpressionReturnType_FLOAT = tj_Expression$ExpressionReturnType__init_($rt_s(180), 1);
        tj_Expression$ExpressionReturnType_STRING = tj_Expression$ExpressionReturnType__init_($rt_s(178), 2);
        tj_Expression$ExpressionReturnType_BOOL = tj_Expression$ExpressionReturnType__init_($rt_s(280), 3);
        tj_Expression$ExpressionReturnType_NUMBER = tj_Expression$ExpressionReturnType__init_($rt_s(545), 4);
        tj_Expression$ExpressionReturnType_INTLIST = tj_Expression$ExpressionReturnType__init_($rt_s(75), 5);
        tj_Expression$ExpressionReturnType_FLOATLIST = tj_Expression$ExpressionReturnType__init_($rt_s(76), 6);
        tj_Expression$ExpressionReturnType_STRINGLIST = tj_Expression$ExpressionReturnType__init_($rt_s(77), 7);
        var$1 = tj_Expression$ExpressionReturnType__init_($rt_s(78), 8);
        tj_Expression$ExpressionReturnType_BOOLEANLIST = var$1;
        tj_Expression$ExpressionReturnType_$VALUES = $rt_createArrayFromData(tj_Expression$ExpressionReturnType, [tj_Expression$ExpressionReturnType_INT, tj_Expression$ExpressionReturnType_FLOAT, tj_Expression$ExpressionReturnType_STRING, tj_Expression$ExpressionReturnType_BOOL, tj_Expression$ExpressionReturnType_NUMBER, tj_Expression$ExpressionReturnType_INTLIST, tj_Expression$ExpressionReturnType_FLOATLIST, tj_Expression$ExpressionReturnType_STRINGLIST, var$1]);
    }
    var tj_Statements$MutationType = $rt_classWithoutFields(jl_Enum);
    var tj_Statements$MutationType_ADD = null;
    var tj_Statements$MutationType_SUBTRACT = null;
    var tj_Statements$MutationType_MULTIPLY = null;
    var tj_Statements$MutationType_DIVIDE = null;
    var tj_Statements$MutationType_$VALUES = null;
    function tj_Statements$MutationType_$callClinit() {
        tj_Statements$MutationType_$callClinit = $rt_eraseClinit(tj_Statements$MutationType);
        tj_Statements$MutationType__clinit_();
    }
    function tj_Statements$MutationType__init_(var_0, var_1) {
        var var_2 = new tj_Statements$MutationType();
        tj_Statements$MutationType__init_0(var_2, var_0, var_1);
        return var_2;
    }
    function tj_Statements$MutationType_values() {
        tj_Statements$MutationType_$callClinit();
        return tj_Statements$MutationType_$VALUES.$clone();
    }
    function tj_Statements$MutationType_valueOf($name) {
        tj_Statements$MutationType_$callClinit();
        return jl_Enum_valueOf($rt_cls(tj_Statements$MutationType), $name);
    }
    function tj_Statements$MutationType__init_0($this, var$1, var$2) {
        tj_Statements$MutationType_$callClinit();
        jl_Enum__init_($this, var$1, var$2);
    }
    function tj_Statements$MutationType__clinit_() {
        var var$1;
        tj_Statements$MutationType_ADD = tj_Statements$MutationType__init_($rt_s(303), 0);
        tj_Statements$MutationType_SUBTRACT = tj_Statements$MutationType__init_($rt_s(302), 1);
        tj_Statements$MutationType_MULTIPLY = tj_Statements$MutationType__init_($rt_s(290), 2);
        var$1 = tj_Statements$MutationType__init_($rt_s(292), 3);
        tj_Statements$MutationType_DIVIDE = var$1;
        tj_Statements$MutationType_$VALUES = $rt_createArrayFromData(tj_Statements$MutationType, [tj_Statements$MutationType_ADD, tj_Statements$MutationType_SUBTRACT, tj_Statements$MutationType_MULTIPLY, var$1]);
    }
    var ju_Objects = $rt_classWithoutFields();
    function ju_Objects_equals($a, $b) {
        if ($a === $b)
            return 1;
        return $a !== null ? $a.$equals($b) : $b !== null ? 0 : 1;
    }
    function ju_Objects_requireNonNull($obj) {
        if ($obj !== null)
            return $obj;
        $obj = new jl_NullPointerException;
        jl_Throwable__init_($obj, $rt_s(2));
        $rt_throw($obj);
    }
    var ji_IOException = $rt_classWithoutFields(jl_Exception);
    var ji_UnsupportedEncodingException = $rt_classWithoutFields(ji_IOException);
    var jl_IllegalArgumentException = $rt_classWithoutFields(jl_RuntimeException);
    function jl_IllegalArgumentException__init_() {
        var var_0 = new jl_IllegalArgumentException();
        jl_IllegalArgumentException__init_0(var_0);
        return var_0;
    }
    function jl_IllegalArgumentException__init_0($this) {
        jl_Exception__init_($this);
    }
    function jnc_UnsupportedCharsetException() {
        jl_IllegalArgumentException.call(this);
        this.$charsetName = null;
    }
    var jn_URLStreamHandler = $rt_classWithoutFields();
    function jn_URLStreamHandler_parseURL($this, $u, $str, $start, $end) {
        var $parseString, $questionMarkIndex, $host, $port, $ref, $file, $query, $authority, $userInfo, $refIdx, $hostIdx, $userIdx, $fileEnd, $portIdx, $endOfIPv6Addr, $canonicalize, $queryIdx, $portString, $last, $$je;
        if ($end >= $start && $end >= 0) {
            $parseString = jl_String_substring($str, $start, $end);
            $start = $end - $start | 0;
            $questionMarkIndex = 0;
            $host = $u.$host;
            $port = $u.$port;
            $ref = $u.$ref;
            $file = $u.$path;
            $query = $u.$query;
            $authority = $u.$authority;
            $userInfo = $u.$userInfo;
            $refIdx = jl_String_indexOf($parseString, 35, 0);
            if (jl_String_startsWith0($parseString, $rt_s(193)) && !jl_String_startsWith0($parseString, $rt_s(546))) {
                $hostIdx = 2;
                $port = (-1);
                $end = jl_String_indexOf($parseString, 47, $hostIdx);
                $questionMarkIndex = jl_String_indexOf($parseString, 63, $hostIdx);
                if ($questionMarkIndex == (-1))
                    $questionMarkIndex = $end;
                else if ($end != (-1) && $end <= $questionMarkIndex)
                    $questionMarkIndex = $end;
                if ($questionMarkIndex == (-1)) {
                    $file = $rt_s(2);
                    $questionMarkIndex = $start;
                }
                $end = $refIdx == (-1) ? $questionMarkIndex : $refIdx < $questionMarkIndex ? $refIdx : $questionMarkIndex;
                $userIdx = jl_String_lastIndexOf0($parseString, 64, $end);
                $authority = jl_String_substring($parseString, $hostIdx, $end);
                $fileEnd = $rt_compare($userIdx, (-1));
                if ($fileEnd > 0) {
                    $userInfo = jl_String_substring($parseString, $hostIdx, $userIdx);
                    $hostIdx = $userIdx + 1 | 0;
                }
                if (!$fileEnd)
                    $userIdx = $hostIdx;
                a: {
                    $portIdx = jl_String_indexOf($parseString, 58, $userIdx);
                    $endOfIPv6Addr = jl_String_indexOf0($parseString, 93);
                    if ($endOfIPv6Addr == (-1))
                        $fileEnd = $portIdx;
                    else {
                        try {
                            $canonicalize = $portIdx;
                            $queryIdx = jl_String_length($parseString);
                            $fileEnd = $endOfIPv6Addr + 1 | 0;
                            if ($queryIdx <= $fileEnd) {
                                $canonicalize = $portIdx;
                                $fileEnd = (-1);
                                $canonicalize = $fileEnd;
                            } else {
                                $canonicalize = $portIdx;
                                if (jl_String_charAt($parseString, $fileEnd) == 58) {
                                    $canonicalize = $fileEnd;
                                    $canonicalize = $portIdx;
                                } else {
                                    $canonicalize = $portIdx;
                                    $fileEnd = (-1);
                                    $canonicalize = $fileEnd;
                                }
                                $canonicalize = $fileEnd;
                            }
                            break a;
                        } catch ($$e) {
                            $$je = $rt_wrapException($$e);
                            if ($$je instanceof jl_Exception) {
                            } else {
                                throw $$e;
                            }
                        }
                        $fileEnd = $canonicalize;
                    }
                }
                if ($fileEnd != (-1) && $fileEnd <= $questionMarkIndex) {
                    $host = jl_String_substring($parseString, $hostIdx, $fileEnd);
                    $portString = jl_String_substring($parseString, $fileEnd + 1 | 0, $end);
                    if (!jl_String_isEmpty($portString))
                        $port = jl_Integer_parseInt0($portString);
                } else
                    $host = jl_String_substring($parseString, $hostIdx, $end);
            }
            $end = $rt_compare($refIdx, (-1));
            if ($end > 0)
                $ref = jl_String_substring($parseString, $refIdx + 1 | 0, $start);
            $fileEnd = $end ? $refIdx : $start;
            $queryIdx = jl_String_lastIndexOf0($parseString, 63, $fileEnd);
            $canonicalize = 0;
            if ($queryIdx <= (-1)) {
                if (!$refIdx)
                    $queryIdx = $fileEnd;
                else {
                    $query = null;
                    $queryIdx = $fileEnd;
                }
            } else {
                $query = jl_String_substring($parseString, $queryIdx + 1 | 0, $fileEnd);
                if (!$queryIdx && $file !== null) {
                    if (jl_String_equals($file, $rt_s(2)))
                        $file = $rt_s(496);
                    else if (jl_String_startsWith0($file, $rt_s(496)))
                        $canonicalize = 1;
                    $file = jl_String_substring($file, 0, jl_String_lastIndexOf($file, 47) + 1 | 0);
                }
            }
            if ($questionMarkIndex > (-1)) {
                if ($questionMarkIndex < $start && jl_String_charAt($parseString, $questionMarkIndex) == 47)
                    $file = jl_String_substring($parseString, $questionMarkIndex, $queryIdx);
                else if ($queryIdx > $questionMarkIndex) {
                    if ($file === null)
                        $file = $rt_s(2);
                    else if (jl_String_equals($file, $rt_s(2)))
                        $file = $rt_s(496);
                    else if (jl_String_startsWith0($file, $rt_s(496)))
                        $canonicalize = 1;
                    $last = jl_String_lastIndexOf($file, 47) + 1 | 0;
                    if (!$last)
                        $file = jl_String_substring($parseString, $questionMarkIndex, $queryIdx);
                    else {
                        $str = jl_String_substring($file, 0, $last);
                        $parseString = jl_String_substring($parseString, $questionMarkIndex, $queryIdx);
                        $file = new jl_StringBuilder;
                        jl_AbstractStringBuilder__init_($file);
                        jl_StringBuilder_append(jl_StringBuilder_append($file, $str), $parseString);
                        $file = jl_AbstractStringBuilder_toString($file);
                    }
                }
            }
            if ($file === null)
                $file = $rt_s(2);
            if ($host === null)
                $host = $rt_s(2);
            if ($canonicalize)
                $file = jn_URLStreamHandler_canonicalizePath($file);
            jn_URL_set($u, $u.$protocol, $host, $port, $authority, $userInfo, $file, $query, $ref);
            return;
        }
        b: {
            if ($end <= (-2147483647)) {
                if ($start >= jl_String_length($str))
                    break b;
                if ($start < 0)
                    break b;
            }
            if (!(jl_String_startsWith($str, $rt_s(193), $start) && jl_String_indexOf($str, 47, $start + 2 | 0) == (-1)))
                return;
        }
        $u = new jl_StringIndexOutOfBoundsException;
        $str = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($str);
        jl_AbstractStringBuilder_append1($str, $rt_s(547));
        jl_Throwable__init_($u, jl_AbstractStringBuilder_toString(jl_StringBuilder_append0($str, $end)));
        $rt_throw($u);
    }
    function jn_URLStreamHandler_canonicalizePath($path) {
        var $dirIndex, var$3, var$4;
        while (true) {
            $dirIndex = jl_String_indexOf2($path, $rt_s(548));
            if ($dirIndex < 0)
                break;
            var$3 = jl_String_substring($path, 0, $dirIndex + 1 | 0);
            $path = jl_String_substring0($path, $dirIndex + 3 | 0);
            var$4 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_(var$4);
            jl_StringBuilder_append(jl_StringBuilder_append(var$4, var$3), $path);
            $path = jl_AbstractStringBuilder_toString(var$4);
        }
        if (jl_String_endsWith($path, $rt_s(549)))
            $path = jl_String_substring($path, 0, jl_String_length($path) - 1 | 0);
        while (true) {
            $dirIndex = jl_String_indexOf2($path, $rt_s(550));
            if ($dirIndex < 0)
                break;
            if (!$dirIndex) {
                $path = jl_String_substring0($path, 3);
                continue;
            }
            var$3 = jl_String_substring($path, 0, jl_String_lastIndexOf0($path, 47, $dirIndex - 1 | 0));
            $path = jl_String_substring0($path, $dirIndex + 3 | 0);
            var$4 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_(var$4);
            jl_StringBuilder_append(jl_StringBuilder_append(var$4, var$3), $path);
            $path = jl_AbstractStringBuilder_toString(var$4);
        }
        if (jl_String_endsWith($path, $rt_s(551)) && jl_String_length($path) > 3)
            $path = jl_String_substring($path, 0, jl_String_lastIndexOf0($path, 47, jl_String_length($path) - 4 | 0) + 1 | 0);
        return $path;
    }
    function jn_URLStreamHandler_setURL($this, $u, $protocol, $host, $port, $authority, $userInfo, $file, $query, $ref) {
        jn_URL_set($u, $protocol, $host, $port, $authority, $userInfo, $file, $query, $ref);
    }
    function jn_URLStreamHandler_toExternalForm($this, $url) {
        var $answer, $authority, $file, $ref;
        $answer = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($answer);
        jl_AbstractStringBuilder_append1($answer, $url.$protocol);
        jl_AbstractStringBuilder_append($answer, 58);
        $authority = $url.$authority;
        if ($authority !== null && jl_String_length($authority) > 0) {
            jl_AbstractStringBuilder_append1($answer, $rt_s(193));
            jl_AbstractStringBuilder_append1($answer, $url.$authority);
        }
        $file = $url.$file;
        $ref = $url.$ref;
        if ($file !== null)
            jl_AbstractStringBuilder_append1($answer, $file);
        if ($ref !== null) {
            jl_AbstractStringBuilder_append($answer, 35);
            jl_AbstractStringBuilder_append1($answer, $ref);
        }
        return jl_AbstractStringBuilder_toString($answer);
    }
    function otji_JSWrapper() {
        jl_Object.call(this);
        this.$js = null;
    }
    var otji_JSWrapper_hashCodes = null;
    var otji_JSWrapper_wrappers = null;
    var otji_JSWrapper_stringWrappers = null;
    var otji_JSWrapper_numberWrappers = null;
    var otji_JSWrapper_stringFinalizationRegistry = null;
    var otji_JSWrapper_numberFinalizationRegistry = null;
    function otji_JSWrapper_$callClinit() {
        otji_JSWrapper_$callClinit = $rt_eraseClinit(otji_JSWrapper);
        otji_JSWrapper__clinit_();
    }
    function otji_JSWrapper__init_(var_0) {
        var var_1 = new otji_JSWrapper();
        otji_JSWrapper__init_0(var_1, var_0);
        return var_1;
    }
    function otji_JSWrapper__init_0($this, $js) {
        otji_JSWrapper_$callClinit();
        $this.$js = $js;
    }
    function otji_JSWrapper_wrap($o) {
        var $jsNumber, $type, $existingRef, $existing, $wrapper, $wrapperAsJs;
        otji_JSWrapper_$callClinit();
        if ($o === null)
            return null;
        a: {
            $jsNumber = $o;
            if (otji_JSWrapper_wrappers !== null) {
                $type = $rt_str(typeof otji_JSWrapper_javaToJs($jsNumber));
                if (!jl_String_equals($type, $rt_s(552)) && !jl_String_equals($type, $rt_s(210))) {
                    if (jl_String_equals($type, $rt_s(553))) {
                        $existingRef = otji_JSWrapper_stringWrappers.get($jsNumber);
                        $existing = (typeof otji_JSWrapper_javaToJs($existingRef) === 'undefined' ? 1 : 0) ? void 0 : $existingRef.deref();
                        if (!(typeof otji_JSWrapper_javaToJs($existing) === 'undefined' ? 1 : 0))
                            return $existing;
                        $wrapper = otji_JSWrapper__init_($jsNumber);
                        $wrapperAsJs = $wrapper;
                        otji_JSWrapper_stringWrappers.set($jsNumber, new $rt_globals.WeakRef($wrapperAsJs));
                        otji_JSWrapper_register$js_body$_4(otji_JSWrapper_stringFinalizationRegistry, $wrapperAsJs, $jsNumber);
                        return $wrapper;
                    }
                    if (!jl_String_equals($type, $rt_s(554)))
                        break a;
                    else {
                        $existingRef = otji_JSWrapper_numberWrappers.get($jsNumber);
                        $existing = (typeof otji_JSWrapper_javaToJs($existingRef) === 'undefined' ? 1 : 0) ? void 0 : $existingRef.deref();
                        if (!(typeof otji_JSWrapper_javaToJs($existing) === 'undefined' ? 1 : 0))
                            return $existing;
                        $wrapper = otji_JSWrapper__init_($jsNumber);
                        $wrapperAsJs = $wrapper;
                        otji_JSWrapper_numberWrappers.set($jsNumber, new $rt_globals.WeakRef($wrapperAsJs));
                        otji_JSWrapper_register$js_body$_4(otji_JSWrapper_numberFinalizationRegistry, $wrapperAsJs, $jsNumber);
                        return $wrapper;
                    }
                }
                $existingRef = otji_JSWrapper_wrappers.get($jsNumber);
                $existing = (typeof otji_JSWrapper_javaToJs($existingRef) === 'undefined' ? 1 : 0) ? void 0 : $existingRef.deref();
                if (!(typeof otji_JSWrapper_javaToJs($existing) === 'undefined' ? 1 : 0))
                    return $existing;
                $wrapper = otji_JSWrapper__init_($jsNumber);
                otji_JSWrapper_wrappers.set($jsNumber, new $rt_globals.WeakRef($wrapper));
                return $wrapper;
            }
        }
        return otji_JSWrapper__init_($jsNumber);
    }
    function otji_JSWrapper_unwrap($o) {
        otji_JSWrapper_$callClinit();
        if ($o !== null)
            return $o.$js;
        return null;
    }
    function otji_JSWrapper_javaToJs($o) {
        otji_JSWrapper_$callClinit();
        if ($o === null)
            return null;
        return $o instanceof $rt_objcls() && $o instanceof otji_JSWrapper ? otji_JSWrapper_unwrap($o) : $o;
    }
    function otji_JSWrapper_jsToJava($o) {
        otji_JSWrapper_$callClinit();
        if ($o === null)
            return null;
        return $o instanceof $rt_objcls() ? $o : otji_JSWrapper_wrap($o);
    }
    function otji_JSWrapper__clinit_() {
        otji_JSWrapper_hashCodes = new $rt_globals.WeakMap();
        otji_JSWrapper_wrappers = !(typeof $rt_globals.WeakRef !== 'undefined' ? 1 : 0) ? null : new $rt_globals.WeakMap();
        otji_JSWrapper_stringWrappers = !(typeof $rt_globals.WeakRef !== 'undefined' ? 1 : 0) ? null : new $rt_globals.Map();
        otji_JSWrapper_numberWrappers = !(typeof $rt_globals.WeakRef !== 'undefined' ? 1 : 0) ? null : new $rt_globals.Map();
        otji_JSWrapper_stringFinalizationRegistry = otji_JSWrapper_stringWrappers === null ? null : new $rt_globals.FinalizationRegistry(otji_JS_function(new otji_JSWrapper$_clinit_$lambda$_29_0, "accept"));
        otji_JSWrapper_numberFinalizationRegistry = otji_JSWrapper_numberWrappers === null ? null : new $rt_globals.FinalizationRegistry(otji_JS_function(new otji_JSWrapper$_clinit_$lambda$_29_1, "accept"));
    }
    function otji_JSWrapper_register$js_body$_4(var$1, var$2, var$3) {
        return var$1.register(var$2, var$3);
    }
    function tj_ExpressionElmt() {
        tj_Element.call(this);
        this.$expression = null;
    }
    function tj_ExpressionElmt__init_(var_0) {
        var var_1 = new tj_ExpressionElmt();
        tj_ExpressionElmt__init_0(var_1, var_0);
        return var_1;
    }
    function tj_ExpressionElmt__init_0($this, $expression) {
        tj_Element$ElementType_$callClinit();
        $this.$type0 = tj_Element$ElementType_EXPRESSION;
        $this.$expression = $expression;
    }
    function tj_ExpressionElmt_toString($this) {
        var var$1, var$2;
        var$1 = tj_Expression_toString($this.$expression);
        var$2 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$2);
        jl_AbstractStringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$2, $rt_s(555)), var$1), 41);
        return jl_AbstractStringBuilder_toString(var$2);
    }
    function tj_NotElmt() {
        tj_Element.call(this);
        this.$expression0 = null;
    }
    function tj_NotElmt__init_(var_0) {
        var var_1 = new tj_NotElmt();
        tj_NotElmt__init_0(var_1, var_0);
        return var_1;
    }
    function tj_NotElmt__init_0($this, $expression) {
        tj_Element$ElementType_$callClinit();
        $this.$type0 = tj_Element$ElementType_NOT;
        $this.$expression0 = $expression;
    }
    function tj_NotElmt_toString($this) {
        var var$1, var$2;
        var$1 = tj_Expression_toString($this.$expression0);
        var$2 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$2);
        jl_AbstractStringBuilder_append(var$2, 33);
        jl_StringBuilder_append(var$2, var$1);
        return jl_AbstractStringBuilder_toString(var$2);
    }
    function tj_CastElmt() {
        var a = this; tj_Element.call(a);
        a.$castType = null;
        a.$element = null;
    }
    function tj_CastElmt__init_(var_0, var_1) {
        var var_2 = new tj_CastElmt();
        tj_CastElmt__init_0(var_2, var_0, var_1);
        return var_2;
    }
    function tj_CastElmt__init_0($this, $type, $element) {
        tj_Element$ElementType_$callClinit();
        $this.$type0 = tj_Element$ElementType_CAST;
        $this.$castType = $type;
        $this.$element = $element;
    }
    function tj_CastElmt_toString($this) {
        var var$1, var$2, var$3;
        var$1 = jl_Enum_toString($this.$castType);
        var$2 = tj_Expression_toString($this.$element);
        var$3 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$3);
        jl_AbstractStringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$3, $rt_s(556)), var$1), $rt_s(56)), var$2), 41);
        return jl_AbstractStringBuilder_toString(var$3);
    }
    function tj_ShowInputBoxElmt() {
        tj_Element.call(this);
        this.$value2 = null;
    }
    function tj_ShowInputBoxElmt__init_(var_0) {
        var var_1 = new tj_ShowInputBoxElmt();
        tj_ShowInputBoxElmt__init_0(var_1, var_0);
        return var_1;
    }
    function tj_ShowInputBoxElmt__init_0($this, $value) {
        $this.$value2 = $value;
        tj_Element$ElementType_$callClinit();
        $this.$type0 = tj_Element$ElementType_SHOWINPUTBOX;
    }
    function tj_FunctionElmt() {
        var a = this; tj_Element.call(a);
        a.$name5 = null;
        a.$params = null;
    }
    function tj_FunctionElmt__init_(var_0, var_1) {
        var var_2 = new tj_FunctionElmt();
        tj_FunctionElmt__init_0(var_2, var_0, var_1);
        return var_2;
    }
    function tj_FunctionElmt__init_0($this, $name, $params) {
        tj_Element$ElementType_$callClinit();
        $this.$type0 = tj_Element$ElementType_FUNCTION;
        $this.$name5 = $name;
        $this.$params = $params;
    }
    function tj_FunctionElmt_getName($this) {
        return $this.$name5;
    }
    function tj_FunctionElmt_getParams($this) {
        return $this.$params;
    }
    function tj_FunctionElmt_toString($this) {
        var var$1, $expression, var$3, var$4, var$5, var$6;
        var$1 = $this.$name5;
        $expression = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($expression);
        jl_AbstractStringBuilder_append(jl_StringBuilder_append($expression, var$1), 40);
        var$1 = jl_AbstractStringBuilder_toString($expression);
        var$3 = $this.$params.data;
        var$4 = var$3.length;
        var$5 = 0;
        while (var$5 < var$4) {
            $expression = tj_Expression_toString(var$3[var$5]);
            var$6 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_(var$6);
            jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$6, var$1), $expression), $rt_s(56));
            var$1 = jl_AbstractStringBuilder_toString(var$6);
            var$5 = var$5 + 1 | 0;
        }
        var$1 = jl_String_substring(var$1, 0, jl_String_length(var$1) - 2 | 0);
        $expression = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($expression);
        jl_AbstractStringBuilder_append(jl_StringBuilder_append($expression, var$1), 41);
        return jl_AbstractStringBuilder_toString($expression);
    }
    function tj_ListElmt() {
        var a = this; tj_Element.call(a);
        a.$list0 = null;
        a.$listType = null;
    }
    function tj_ListElmt__init_(var_0, var_1) {
        var var_2 = new tj_ListElmt();
        tj_ListElmt__init_0(var_2, var_0, var_1);
        return var_2;
    }
    function tj_ListElmt__init_0($this, $list, $listType) {
        $this.$list0 = $list;
        tj_Element$ElementType_$callClinit();
        $this.$type0 = tj_Element$ElementType_LIST;
        $this.$listType = $listType;
    }
    function tj_ListElmt_getList($this) {
        return $this.$list0;
    }
    function tj_ListElmt_getListType($this) {
        return $this.$listType;
    }
    function tj_ListElmt_toString($this) {
        var $str, var$2, $expression, var$4;
        $str = $rt_s(476);
        var$2 = ju_AbstractList_iterator($this.$list0);
        while (ju_AbstractList$1_hasNext(var$2)) {
            $expression = tj_Expression_toString(ju_AbstractList$1_next(var$2));
            var$4 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_(var$4);
            jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$4, $str), $expression), $rt_s(56));
            $str = jl_AbstractStringBuilder_toString(var$4);
        }
        $str = jl_String_substring($str, 0, jl_String_length($str) - 2 | 0);
        var$2 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$2);
        jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$2, $str), 93);
        return jl_AbstractStringBuilder_toString(var$2);
    }
    function tj_ArrayLengthElmt() {
        tj_Element.call(this);
        this.$arrayName = null;
    }
    function tj_ArrayLengthElmt__init_(var_0) {
        var var_1 = new tj_ArrayLengthElmt();
        tj_ArrayLengthElmt__init_0(var_1, var_0);
        return var_1;
    }
    function tj_ArrayLengthElmt__init_0($this, $arrayName) {
        $this.$arrayName = $arrayName;
        tj_Element$ElementType_$callClinit();
        $this.$type0 = tj_Element$ElementType_ARRAYLENGTH;
    }
    function tj_ArrayLengthElmt_getArrayName($this) {
        return $this.$arrayName;
    }
    function tj_ArrayLengthElmt_toString($this) {
        var var$1, var$2;
        var$1 = $this.$arrayName;
        var$2 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$2);
        jl_StringBuilder_append(jl_StringBuilder_append(var$2, var$1), $rt_s(557));
        return jl_AbstractStringBuilder_toString(var$2);
    }
    function tj_VariableElmt() {
        tj_Element.call(this);
        this.$name6 = null;
    }
    function tj_VariableElmt__init_(var_0) {
        var var_1 = new tj_VariableElmt();
        tj_VariableElmt__init_0(var_1, var_0);
        return var_1;
    }
    function tj_VariableElmt__init_0($this, $name) {
        tj_Element$ElementType_$callClinit();
        $this.$type0 = tj_Element$ElementType_VARIABLE;
        $this.$name6 = $name;
    }
    function tj_VariableElmt_toString($this) {
        return $this.$name6;
    }
    function tj_VariableElmt_getName($this) {
        return $this.$name6;
    }
    function tj_ListValElmt() {
        var a = this; tj_Element.call(a);
        a.$listName = null;
        a.$index = null;
    }
    function tj_ListValElmt__init_(var_0, var_1) {
        var var_2 = new tj_ListValElmt();
        tj_ListValElmt__init_0(var_2, var_0, var_1);
        return var_2;
    }
    function tj_ListValElmt__init_0($this, $listName, $index) {
        $this.$listName = $listName;
        $this.$index = $index;
        tj_Element$ElementType_$callClinit();
        $this.$type0 = tj_Element$ElementType_LISTVAL;
    }
    function tj_ListValElmt_getListName($this) {
        return $this.$listName;
    }
    function tj_ListValElmt_getIndex($this) {
        return $this.$index;
    }
    function tj_ListValElmt_toString($this) {
        var var$1, var$2, var$3;
        var$1 = $this.$listName;
        var$2 = tj_Expression_toString($this.$index);
        var$3 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$3);
        var$1 = jl_StringBuilder_append(var$3, var$1);
        jl_AbstractStringBuilder_append(var$1, 91);
        jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$1, var$2), 93);
        return jl_AbstractStringBuilder_toString(var$3);
    }
    function ji_BufferedReader() {
        var a = this; ji_Reader.call(a);
        a.$innerReader = null;
        a.$buffer2 = null;
        a.$index2 = 0;
        a.$count0 = 0;
        a.$eof0 = 0;
        a.$mark = 0;
    }
    function ji_BufferedReader_read($this) {
        var var$1, var$2, var$3, var$4, var$5, var$6, var$7, var$8, var$9;
        if ($this.$innerReader === null) {
            var$1 = new ji_IOException;
            jl_Exception__init_(var$1);
            $rt_throw(var$1);
        }
        if ($this.$index2 >= $this.$count0) {
            var$2 = 0;
            if ($this.$eof0)
                var$2 = 0;
            else {
                a: {
                    while (true) {
                        var$3 = $this.$buffer2.data;
                        var$4 = var$3.length;
                        if (var$2 >= var$4)
                            break a;
                        var$1 = $this.$innerReader;
                        var$5 = var$4 - var$2 | 0;
                        ji_StringReader_checkOpened(var$1);
                        if (var$1.$index1 >= jl_String_length(var$1.$string))
                            var$6 = (-1);
                        else {
                            var$6 = jl_Math_min(jl_String_length(var$1.$string) - var$1.$index1 | 0, var$5);
                            var$4 = 0;
                            var$7 = var$2;
                            while (var$4 < var$6) {
                                var$5 = var$7 + 1 | 0;
                                var$8 = var$1.$string;
                                var$9 = var$1.$index1;
                                var$1.$index1 = var$9 + 1 | 0;
                                var$3[var$7] = jl_String_charAt(var$8, var$9);
                                var$4 = var$4 + 1 | 0;
                                var$7 = var$5;
                            }
                        }
                        if (var$6 == (-1)) {
                            $this.$eof0 = 1;
                            break a;
                        }
                        if (!var$6)
                            break;
                        var$2 = var$2 + var$6 | 0;
                    }
                }
                $this.$count0 = var$2;
                $this.$index2 = 0;
                $this.$mark = (-1);
                var$2 = 1;
            }
            if (!var$2)
                return (-1);
        }
        var$3 = $this.$buffer2.data;
        var$4 = $this.$index2;
        $this.$index2 = var$4 + 1 | 0;
        return var$3[var$4];
    }
    function tj_JavaishFloat() {
        var a = this; jl_Object.call(a);
        a.$value27 = 0.0;
        a.$type3 = null;
    }
    function tj_JavaishFloat__init_(var_0) {
        var var_1 = new tj_JavaishFloat();
        tj_JavaishFloat__init_0(var_1, var_0);
        return var_1;
    }
    function tj_JavaishFloat_getValue($this) {
        var var$1, var$2;
        var$1 = $this.$value27;
        var$2 = new jl_Float;
        var$2.$value3 = var$1;
        return var$2;
    }
    function tj_JavaishFloat__init_0($this, $value) {
        tj_JavaishVal$JavaishType_$callClinit();
        $this.$type3 = tj_JavaishVal$JavaishType_FLOAT;
        $this.$value27 = $value;
    }
    function tj_JavaishFloat_getType($this) {
        return $this.$type3;
    }
    function tj_JavaishFloat_typeString($this) {
        return $rt_s(246);
    }
    function tj_JavaishFloat_getValue0($this) {
        return tj_JavaishFloat_getValue($this);
    }
    function jl_Float() {
        jl_Number.call(this);
        this.$value3 = 0.0;
    }
    var jl_Float_TYPE = null;
    function jl_Float_intValue($this) {
        return $this.$value3 | 0;
    }
    function jl_Float_floatValue($this) {
        return $this.$value3;
    }
    function jl_Float_toString($d) {
        var var$2;
        var$2 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$2);
        jl_AbstractStringBuilder_insert1(var$2, var$2.$length0, $d);
        return jl_AbstractStringBuilder_toString(var$2);
    }
    function jl_Float_toString0($this) {
        return jl_Float_toString($this.$value3);
    }
    function jl_Float_equals($this, $other) {
        if ($this === $other)
            return 1;
        return $other instanceof jl_Float && jl_Float_floatToIntBits($other.$value3) == jl_Float_floatToIntBits($this.$value3) ? 1 : 0;
    }
    function jl_Float_parseFloat($string) {
        var $start, $end, $negative, $c, $mantissa, $exp, $mantissaPos, $hasOneDigit, var$10, $negativeExp, $numExp;
        if (jl_String_isEmpty($string)) {
            $string = new jl_NumberFormatException;
            jl_Exception__init_($string);
            $rt_throw($string);
        }
        $start = 0;
        $end = jl_String_length($string);
        while (true) {
            if (jl_String_charAt($string, $start) > 32) {
                while (jl_String_charAt($string, $end - 1 | 0) <= 32) {
                    $end = $end + (-1) | 0;
                }
                $negative = 0;
                if (jl_String_charAt($string, $start) == 45) {
                    $start = $start + 1 | 0;
                    $negative = 1;
                } else if (jl_String_charAt($string, $start) == 43)
                    $start = $start + 1 | 0;
                if ($start == $end) {
                    $string = new jl_NumberFormatException;
                    jl_Exception__init_($string);
                    $rt_throw($string);
                }
                a: {
                    $c = jl_String_charAt($string, $start);
                    $mantissa = 0;
                    $exp = (-1);
                    $mantissaPos = 100000000;
                    $hasOneDigit = 0;
                    if ($c != 46) {
                        $hasOneDigit = 1;
                        if ($c >= 48 && $c <= 57) {
                            b: {
                                while ($start < $end) {
                                    if (jl_String_charAt($string, $start) != 48)
                                        break b;
                                    $start = $start + 1 | 0;
                                }
                            }
                            while ($start < $end) {
                                var$10 = jl_String_charAt($string, $start);
                                if (var$10 < 48)
                                    break a;
                                if (var$10 > 57)
                                    break a;
                                if ($mantissaPos > 0) {
                                    $mantissa = $mantissa + $rt_imul($mantissaPos, var$10 - 48 | 0) | 0;
                                    $mantissaPos = $rt_udiv($mantissaPos, 10);
                                }
                                $exp = $exp + 1 | 0;
                                $start = $start + 1 | 0;
                            }
                        } else {
                            $string = new jl_NumberFormatException;
                            jl_Exception__init_($string);
                            $rt_throw($string);
                        }
                    }
                }
                if ($start < $end && jl_String_charAt($string, $start) == 46) {
                    $start = $start + 1 | 0;
                    c: {
                        while (true) {
                            if ($start >= $end)
                                break c;
                            $c = jl_String_charAt($string, $start);
                            var$10 = $rt_compare($c, 48);
                            if (var$10 < 0)
                                break c;
                            if ($c > 57)
                                break;
                            if (!$mantissa && !var$10)
                                $exp = $exp + (-1) | 0;
                            else if ($mantissaPos > 0) {
                                $mantissa = $mantissa + $rt_imul($mantissaPos, $c - 48 | 0) | 0;
                                $mantissaPos = $rt_udiv($mantissaPos, 10);
                            }
                            $start = $start + 1 | 0;
                            $hasOneDigit = 1;
                        }
                    }
                    if (!$hasOneDigit) {
                        $string = new jl_NumberFormatException;
                        jl_Exception__init_($string);
                        $rt_throw($string);
                    }
                }
                if ($start < $end) {
                    $c = jl_String_charAt($string, $start);
                    if ($c != 101 && $c != 69) {
                        $string = new jl_NumberFormatException;
                        jl_Exception__init_($string);
                        $rt_throw($string);
                    }
                    $c = $start + 1 | 0;
                    $negativeExp = 0;
                    if ($c == $end) {
                        $string = new jl_NumberFormatException;
                        jl_Exception__init_($string);
                        $rt_throw($string);
                    }
                    if (jl_String_charAt($string, $c) == 45) {
                        $c = $c + 1 | 0;
                        $negativeExp = 1;
                    } else if (jl_String_charAt($string, $c) == 43)
                        $c = $c + 1 | 0;
                    $numExp = 0;
                    $start = 0;
                    d: {
                        while (true) {
                            if ($c >= $end)
                                break d;
                            $mantissaPos = jl_String_charAt($string, $c);
                            if ($mantissaPos < 48)
                                break d;
                            if ($mantissaPos > 57)
                                break;
                            $numExp = (10 * $numExp | 0) + ($mantissaPos - 48 | 0) | 0;
                            $start = 1;
                            $c = $c + 1 | 0;
                        }
                    }
                    if (!$start) {
                        $string = new jl_NumberFormatException;
                        jl_Exception__init_($string);
                        $rt_throw($string);
                    }
                    if ($negativeExp)
                        $numExp =  -$numExp | 0;
                    $exp = $exp + $numExp | 0;
                }
                return otcit_FloatSynthesizer_synthesizeFloat($mantissa, $exp, $negative);
            }
            $start = $start + 1 | 0;
            if ($start == $end)
                break;
        }
        $string = new jl_NumberFormatException;
        jl_Exception__init_($string);
        $rt_throw($string);
    }
    function jl_Float_floatToIntBits($value) {
        if ($rt_globals.isNaN($value) ? 1 : 0)
            return 2143289344;
        return $rt_floatToRawIntBits($value);
    }
    function jl_Float__clinit_() {
        jl_Float_TYPE = $rt_cls($rt_floatcls());
    }
    function tj_JavaishInt() {
        var a = this; jl_Object.call(a);
        a.$value28 = 0;
        a.$type4 = null;
    }
    function tj_JavaishInt__init_(var_0) {
        var var_1 = new tj_JavaishInt();
        tj_JavaishInt__init_0(var_1, var_0);
        return var_1;
    }
    function tj_JavaishInt_getValue($this) {
        return jl_Integer_valueOf($this.$value28);
    }
    function tj_JavaishInt__init_0($this, $value) {
        tj_JavaishVal$JavaishType_$callClinit();
        $this.$type4 = tj_JavaishVal$JavaishType_INT;
        $this.$value28 = $value;
    }
    function tj_JavaishInt_getType($this) {
        return $this.$type4;
    }
    function tj_JavaishInt_typeString($this) {
        return $rt_s(244);
    }
    function tj_JavaishInt_getValue0($this) {
        return tj_JavaishInt_getValue($this);
    }
    function tj_JavaishString() {
        var a = this; jl_Object.call(a);
        a.$value29 = null;
        a.$type5 = null;
    }
    function tj_JavaishString__init_(var_0) {
        var var_1 = new tj_JavaishString();
        tj_JavaishString__init_0(var_1, var_0);
        return var_1;
    }
    function tj_JavaishString_getValue($this) {
        return $this.$value29;
    }
    function tj_JavaishString__init_0($this, $value) {
        tj_JavaishVal$JavaishType_$callClinit();
        $this.$type5 = tj_JavaishVal$JavaishType_STRING;
        $this.$value29 = $value;
    }
    function tj_JavaishString_getType($this) {
        return $this.$type5;
    }
    function tj_JavaishString_typeString($this) {
        return $rt_s(186);
    }
    function tj_JavaishString_getValue0($this) {
        return $this.$value29;
    }
    function tj_JavaishBoolean() {
        var a = this; jl_Object.call(a);
        a.$value18 = null;
        a.$type6 = null;
    }
    function tj_JavaishBoolean__init_(var_0) {
        var var_1 = new tj_JavaishBoolean();
        tj_JavaishBoolean__init_0(var_1, var_0);
        return var_1;
    }
    function tj_JavaishBoolean_getValue($this) {
        return $this.$value18;
    }
    function tj_JavaishBoolean__init_0($this, $value) {
        tj_JavaishVal$JavaishType_$callClinit();
        $this.$type6 = tj_JavaishVal$JavaishType_BOOLEAN;
        $this.$value18 = $value;
    }
    function tj_JavaishBoolean_getType($this) {
        return $this.$type6;
    }
    function tj_JavaishBoolean_typeString($this) {
        return $rt_s(395);
    }
    function tj_JavaishBoolean_getValue0($this) {
        return $this.$value18;
    }
    function jl_Boolean() {
        jl_Object.call(this);
        this.$value19 = 0;
    }
    var jl_Boolean_TRUE = null;
    var jl_Boolean_FALSE = null;
    var jl_Boolean_TYPE = null;
    function jl_Boolean__init_(var_0) {
        var var_1 = new jl_Boolean();
        jl_Boolean__init_0(var_1, var_0);
        return var_1;
    }
    function jl_Boolean__init_0($this, $value) {
        $this.$value19 = $value;
    }
    function jl_Boolean_parseBoolean($s) {
        return $s !== null && jl_String_equals(jl_String_toLowerCase($s), $rt_s(21)) ? 1 : 0;
    }
    function jl_Boolean_booleanValue($this) {
        return $this.$value19;
    }
    function jl_Boolean_valueOf($value) {
        return !$value ? jl_Boolean_FALSE : jl_Boolean_TRUE;
    }
    function jl_Boolean_toString($value) {
        return !$value ? $rt_s(20) : $rt_s(21);
    }
    function jl_Boolean_toString0($this) {
        return jl_Boolean_toString($this.$value19);
    }
    function jl_Boolean_equals($this, $obj) {
        if ($this === $obj)
            return 1;
        return $obj instanceof jl_Boolean && $obj.$value19 == $this.$value19 ? 1 : 0;
    }
    function jl_Boolean__clinit_() {
        jl_Boolean_TRUE = jl_Boolean__init_(1);
        jl_Boolean_FALSE = jl_Boolean__init_(0);
        jl_Boolean_TYPE = $rt_cls($rt_booleancls());
    }
    var tj_JavaishList = $rt_classWithoutFields(0);
    function tj_JavaishBooleanList() {
        var a = this; jl_Object.call(a);
        a.$value11 = null;
        a.$type7 = null;
    }
    function tj_JavaishBooleanList__init_(var_0) {
        var var_1 = new tj_JavaishBooleanList();
        tj_JavaishBooleanList__init_0(var_1, var_0);
        return var_1;
    }
    function tj_JavaishBooleanList_getList($this) {
        return $this.$value11;
    }
    function tj_JavaishBooleanList__init_0($this, $value) {
        tj_JavaishVal$JavaishType_$callClinit();
        $this.$type7 = tj_JavaishVal$JavaishType_BOOLEANLIST;
        $this.$value11 = $value;
    }
    function tj_JavaishBooleanList_getType($this) {
        return $this.$type7;
    }
    function tj_JavaishBooleanList_typeString($this) {
        return $rt_s(558);
    }
    function tj_JavaishBooleanList_getInnerType($this) {
        tj_JavaishVal$JavaishType_$callClinit();
        return tj_JavaishVal$JavaishType_BOOLEAN;
    }
    function tj_JavaishBooleanList_listString($this) {
        var $listString, var$2, $i, var$4;
        $listString = $rt_s(476);
        var$2 = ju_AbstractList_iterator($this.$value11);
        while (ju_AbstractList$1_hasNext(var$2)) {
            $i = jl_String_valueOf((ju_AbstractList$1_next(var$2)).$type6);
            var$4 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_(var$4);
            jl_AbstractStringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$4, $listString), $i), 44);
            $listString = jl_AbstractStringBuilder_toString(var$4);
        }
        $listString = jl_String_substring($listString, 0, jl_String_length($listString) - 1 | 0);
        var$2 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$2);
        jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$2, $listString), 93);
        return jl_AbstractStringBuilder_toString(var$2);
    }
    function tj_JavaishBooleanList_getLength($this) {
        return $this.$value11.$size0;
    }
    function tj_JavaishBooleanList_getValue($this, var$1) {
        return ju_ArrayList_get($this.$value11, var$1);
    }
    function tj_JavaishStringList() {
        var a = this; jl_Object.call(a);
        a.$value13 = null;
        a.$type8 = null;
    }
    function tj_JavaishStringList__init_(var_0) {
        var var_1 = new tj_JavaishStringList();
        tj_JavaishStringList__init_0(var_1, var_0);
        return var_1;
    }
    function tj_JavaishStringList_getList($this) {
        return $this.$value13;
    }
    function tj_JavaishStringList__init_0($this, $value) {
        tj_JavaishVal$JavaishType_$callClinit();
        $this.$type8 = tj_JavaishVal$JavaishType_STRINGLIST;
        $this.$value13 = $value;
    }
    function tj_JavaishStringList_getType($this) {
        return $this.$type8;
    }
    function tj_JavaishStringList_typeString($this) {
        return $rt_s(248);
    }
    function tj_JavaishStringList_getInnerType($this) {
        tj_JavaishVal$JavaishType_$callClinit();
        return tj_JavaishVal$JavaishType_STRING;
    }
    function tj_JavaishStringList_listString($this) {
        var $listString, var$2, $i, var$4;
        $listString = $rt_s(476);
        var$2 = ju_AbstractList_iterator($this.$value13);
        while (ju_AbstractList$1_hasNext(var$2)) {
            $i = jl_String_valueOf((ju_AbstractList$1_next(var$2)).$type5);
            var$4 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_(var$4);
            jl_AbstractStringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$4, $listString), $i), 44);
            $listString = jl_AbstractStringBuilder_toString(var$4);
        }
        $listString = jl_String_substring($listString, 0, jl_String_length($listString) - 1 | 0);
        var$2 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$2);
        jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$2, $listString), 93);
        return jl_AbstractStringBuilder_toString(var$2);
    }
    function tj_JavaishStringList_getLength($this) {
        return $this.$value13.$size0;
    }
    function tj_JavaishStringList_getValue($this, var$1) {
        return ju_ArrayList_get($this.$value13, var$1);
    }
    function tj_JavaishIntList() {
        var a = this; jl_Object.call(a);
        a.$value15 = null;
        a.$type9 = null;
    }
    function tj_JavaishIntList__init_(var_0) {
        var var_1 = new tj_JavaishIntList();
        tj_JavaishIntList__init_0(var_1, var_0);
        return var_1;
    }
    function tj_JavaishIntList_getList($this) {
        return $this.$value15;
    }
    function tj_JavaishIntList__init_0($this, $value) {
        tj_JavaishVal$JavaishType_$callClinit();
        $this.$type9 = tj_JavaishVal$JavaishType_INTLIST;
        $this.$value15 = $value;
    }
    function tj_JavaishIntList_getType($this) {
        return $this.$type9;
    }
    function tj_JavaishIntList_typeString($this) {
        return $rt_s(247);
    }
    function tj_JavaishIntList_getInnerType($this) {
        tj_JavaishVal$JavaishType_$callClinit();
        return tj_JavaishVal$JavaishType_INT;
    }
    function tj_JavaishIntList_listString($this) {
        var $listString, var$2, $i, var$4;
        $listString = $rt_s(476);
        var$2 = ju_AbstractList_iterator($this.$value15);
        while (ju_AbstractList$1_hasNext(var$2)) {
            $i = jl_String_valueOf((ju_AbstractList$1_next(var$2)).$type4);
            var$4 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_(var$4);
            jl_AbstractStringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$4, $listString), $i), 44);
            $listString = jl_AbstractStringBuilder_toString(var$4);
        }
        $listString = jl_String_substring($listString, 0, jl_String_length($listString) - 1 | 0);
        var$2 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$2);
        jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$2, $listString), 93);
        return jl_AbstractStringBuilder_toString(var$2);
    }
    function tj_JavaishIntList_getLength($this) {
        return $this.$value15.$size0;
    }
    function tj_JavaishIntList_getValue($this, var$1) {
        return ju_ArrayList_get($this.$value15, var$1);
    }
    function tj_JavaishFloatList() {
        var a = this; jl_Object.call(a);
        a.$value9 = null;
        a.$type10 = null;
    }
    function tj_JavaishFloatList__init_(var_0) {
        var var_1 = new tj_JavaishFloatList();
        tj_JavaishFloatList__init_0(var_1, var_0);
        return var_1;
    }
    function tj_JavaishFloatList_getList($this) {
        return $this.$value9;
    }
    function tj_JavaishFloatList__init_0($this, $value) {
        tj_JavaishVal$JavaishType_$callClinit();
        $this.$type10 = tj_JavaishVal$JavaishType_FLOATLIST;
        $this.$value9 = $value;
    }
    function tj_JavaishFloatList_getType($this) {
        return $this.$type10;
    }
    function tj_JavaishFloatList_typeString($this) {
        return $rt_s(243);
    }
    function tj_JavaishFloatList_getInnerType($this) {
        tj_JavaishVal$JavaishType_$callClinit();
        return tj_JavaishVal$JavaishType_FLOAT;
    }
    function tj_JavaishFloatList_listString($this) {
        var $listString, var$2, $i, var$4;
        $listString = $rt_s(476);
        var$2 = ju_AbstractList_iterator($this.$value9);
        while (ju_AbstractList$1_hasNext(var$2)) {
            $i = jl_String_valueOf((ju_AbstractList$1_next(var$2)).$type3);
            var$4 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_(var$4);
            jl_AbstractStringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$4, $listString), $i), 44);
            $listString = jl_AbstractStringBuilder_toString(var$4);
        }
        $listString = jl_String_substring($listString, 0, jl_String_length($listString) - 1 | 0);
        var$2 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$2);
        jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$2, $listString), 93);
        return jl_AbstractStringBuilder_toString(var$2);
    }
    function tj_JavaishFloatList_getLength($this) {
        return $this.$value9.$size0;
    }
    function tj_JavaishFloatList_getValue($this, var$1) {
        return ju_ArrayList_get($this.$value9, var$1);
    }
    var tj_Element$ElementType = $rt_classWithoutFields(jl_Enum);
    var tj_Element$ElementType_PLUS = null;
    var tj_Element$ElementType_MINUS = null;
    var tj_Element$ElementType_DIVIDE = null;
    var tj_Element$ElementType_MULTIPLY = null;
    var tj_Element$ElementType_FLOAT = null;
    var tj_Element$ElementType_INTEGER = null;
    var tj_Element$ElementType_VARIABLE = null;
    var tj_Element$ElementType_FUNCTION = null;
    var tj_Element$ElementType_EQUAL = null;
    var tj_Element$ElementType_NOT_EQUAL = null;
    var tj_Element$ElementType_LESS_THAN = null;
    var tj_Element$ElementType_GREATER_THAN = null;
    var tj_Element$ElementType_LESS_THAN_EQUAL = null;
    var tj_Element$ElementType_GREATER_THAN_EQUAL = null;
    var tj_Element$ElementType_STRING = null;
    var tj_Element$ElementType_BOOL = null;
    var tj_Element$ElementType_AND = null;
    var tj_Element$ElementType_OR = null;
    var tj_Element$ElementType_NOT = null;
    var tj_Element$ElementType_EXPRESSION = null;
    var tj_Element$ElementType_CAST = null;
    var tj_Element$ElementType_SHOWINPUTBOX = null;
    var tj_Element$ElementType_LIST = null;
    var tj_Element$ElementType_LISTVAL = null;
    var tj_Element$ElementType_ARRAYLENGTH = null;
    var tj_Element$ElementType_RobotActionElmt = null;
    var tj_Element$ElementType_$VALUES = null;
    function tj_Element$ElementType_$callClinit() {
        tj_Element$ElementType_$callClinit = $rt_eraseClinit(tj_Element$ElementType);
        tj_Element$ElementType__clinit_();
    }
    function tj_Element$ElementType__init_(var_0, var_1) {
        var var_2 = new tj_Element$ElementType();
        tj_Element$ElementType__init_0(var_2, var_0, var_1);
        return var_2;
    }
    function tj_Element$ElementType_values() {
        tj_Element$ElementType_$callClinit();
        return tj_Element$ElementType_$VALUES.$clone();
    }
    function tj_Element$ElementType__init_0($this, var$1, var$2) {
        tj_Element$ElementType_$callClinit();
        jl_Enum__init_($this, var$1, var$2);
    }
    function tj_Element$ElementType__clinit_() {
        var var$1;
        tj_Element$ElementType_PLUS = tj_Element$ElementType__init_($rt_s(283), 0);
        tj_Element$ElementType_MINUS = tj_Element$ElementType__init_($rt_s(285), 1);
        tj_Element$ElementType_DIVIDE = tj_Element$ElementType__init_($rt_s(292), 2);
        tj_Element$ElementType_MULTIPLY = tj_Element$ElementType__init_($rt_s(290), 3);
        tj_Element$ElementType_FLOAT = tj_Element$ElementType__init_($rt_s(180), 4);
        tj_Element$ElementType_INTEGER = tj_Element$ElementType__init_($rt_s(271), 5);
        tj_Element$ElementType_VARIABLE = tj_Element$ElementType__init_($rt_s(276), 6);
        tj_Element$ElementType_FUNCTION = tj_Element$ElementType__init_($rt_s(82), 7);
        tj_Element$ElementType_EQUAL = tj_Element$ElementType__init_($rt_s(284), 8);
        tj_Element$ElementType_NOT_EQUAL = tj_Element$ElementType__init_($rt_s(289), 9);
        tj_Element$ElementType_LESS_THAN = tj_Element$ElementType__init_($rt_s(274), 10);
        tj_Element$ElementType_GREATER_THAN = tj_Element$ElementType__init_($rt_s(288), 11);
        tj_Element$ElementType_LESS_THAN_EQUAL = tj_Element$ElementType__init_($rt_s(272), 12);
        tj_Element$ElementType_GREATER_THAN_EQUAL = tj_Element$ElementType__init_($rt_s(286), 13);
        tj_Element$ElementType_STRING = tj_Element$ElementType__init_($rt_s(178), 14);
        tj_Element$ElementType_BOOL = tj_Element$ElementType__init_($rt_s(280), 15);
        tj_Element$ElementType_AND = tj_Element$ElementType__init_($rt_s(278), 16);
        tj_Element$ElementType_OR = tj_Element$ElementType__init_($rt_s(277), 17);
        tj_Element$ElementType_NOT = tj_Element$ElementType__init_($rt_s(279), 18);
        tj_Element$ElementType_EXPRESSION = tj_Element$ElementType__init_($rt_s(273), 19);
        tj_Element$ElementType_CAST = tj_Element$ElementType__init_($rt_s(281), 20);
        tj_Element$ElementType_SHOWINPUTBOX = tj_Element$ElementType__init_($rt_s(291), 21);
        tj_Element$ElementType_LIST = tj_Element$ElementType__init_($rt_s(282), 22);
        tj_Element$ElementType_LISTVAL = tj_Element$ElementType__init_($rt_s(287), 23);
        tj_Element$ElementType_ARRAYLENGTH = tj_Element$ElementType__init_($rt_s(275), 24);
        var$1 = tj_Element$ElementType__init_($rt_s(559), 25);
        tj_Element$ElementType_RobotActionElmt = var$1;
        tj_Element$ElementType_$VALUES = $rt_createArrayFromData(tj_Element$ElementType, [tj_Element$ElementType_PLUS, tj_Element$ElementType_MINUS, tj_Element$ElementType_DIVIDE, tj_Element$ElementType_MULTIPLY, tj_Element$ElementType_FLOAT, tj_Element$ElementType_INTEGER, tj_Element$ElementType_VARIABLE, tj_Element$ElementType_FUNCTION, tj_Element$ElementType_EQUAL, tj_Element$ElementType_NOT_EQUAL, tj_Element$ElementType_LESS_THAN, tj_Element$ElementType_GREATER_THAN, tj_Element$ElementType_LESS_THAN_EQUAL,
        tj_Element$ElementType_GREATER_THAN_EQUAL, tj_Element$ElementType_STRING, tj_Element$ElementType_BOOL, tj_Element$ElementType_AND, tj_Element$ElementType_OR, tj_Element$ElementType_NOT, tj_Element$ElementType_EXPRESSION, tj_Element$ElementType_CAST, tj_Element$ElementType_SHOWINPUTBOX, tj_Element$ElementType_LIST, tj_Element$ElementType_LISTVAL, tj_Element$ElementType_ARRAYLENGTH, var$1]);
    }
    function tj_StringElmt() {
        tj_Element.call(this);
        this.$value30 = null;
    }
    function tj_StringElmt__init_(var_0) {
        var var_1 = new tj_StringElmt();
        tj_StringElmt__init_0(var_1, var_0);
        return var_1;
    }
    function tj_StringElmt__init_0($this, $value) {
        tj_Element$ElementType_$callClinit();
        $this.$type0 = tj_Element$ElementType_STRING;
        $this.$value30 = $value;
    }
    function tj_StringElmt_toString($this) {
        return $this.$value30;
    }
    function tj_StringElmt_getValue($this) {
        return $this.$value30;
    }
    var tj_AndElmt = $rt_classWithoutFields(tj_Element);
    function tj_AndElmt__init_() {
        var var_0 = new tj_AndElmt();
        tj_AndElmt__init_0(var_0);
        return var_0;
    }
    function tj_AndElmt__init_0($this) {
        tj_Element$ElementType_$callClinit();
        $this.$type0 = tj_Element$ElementType_AND;
    }
    function tj_AndElmt_toString($this) {
        return $rt_s(535);
    }
    var tj_OrElmt = $rt_classWithoutFields(tj_Element);
    function tj_OrElmt__init_() {
        var var_0 = new tj_OrElmt();
        tj_OrElmt__init_0(var_0);
        return var_0;
    }
    function tj_OrElmt__init_0($this) {
        tj_Element$ElementType_$callClinit();
        $this.$type0 = tj_Element$ElementType_OR;
    }
    function tj_OrElmt_toString($this) {
        return $rt_s(536);
    }
    var tj_PlusElmt = $rt_classWithoutFields(tj_Element);
    function tj_PlusElmt__init_() {
        var var_0 = new tj_PlusElmt();
        tj_PlusElmt__init_0(var_0);
        return var_0;
    }
    function tj_PlusElmt__init_0($this) {
        tj_Element$ElementType_$callClinit();
        $this.$type0 = tj_Element$ElementType_PLUS;
    }
    function tj_PlusElmt_toString($this) {
        return $rt_s(538);
    }
    var tj_MinusElmt = $rt_classWithoutFields(tj_Element);
    function tj_MinusElmt__init_() {
        var var_0 = new tj_MinusElmt();
        tj_MinusElmt__init_0(var_0);
        return var_0;
    }
    function tj_MinusElmt__init_0($this) {
        tj_Element$ElementType_$callClinit();
        $this.$type0 = tj_Element$ElementType_MINUS;
    }
    function tj_MinusElmt_toString($this) {
        return $rt_s(540);
    }
    var tj_MultiplyElmt = $rt_classWithoutFields(tj_Element);
    function tj_MultiplyElmt__init_() {
        var var_0 = new tj_MultiplyElmt();
        tj_MultiplyElmt__init_0(var_0);
        return var_0;
    }
    function tj_MultiplyElmt__init_0($this) {
        tj_Element$ElementType_$callClinit();
        $this.$type0 = tj_Element$ElementType_MULTIPLY;
    }
    function tj_MultiplyElmt_toString($this) {
        return $rt_s(542);
    }
    var tj_DivideElmt = $rt_classWithoutFields(tj_Element);
    function tj_DivideElmt__init_() {
        var var_0 = new tj_DivideElmt();
        tj_DivideElmt__init_0(var_0);
        return var_0;
    }
    function tj_DivideElmt__init_0($this) {
        tj_Element$ElementType_$callClinit();
        $this.$type0 = tj_Element$ElementType_DIVIDE;
    }
    function tj_DivideElmt_toString($this) {
        return $rt_s(496);
    }
    function tj_FloatElmt() {
        tj_Element.call(this);
        this.$value31 = 0.0;
    }
    function tj_FloatElmt__init_(var_0) {
        var var_1 = new tj_FloatElmt();
        tj_FloatElmt__init_0(var_1, var_0);
        return var_1;
    }
    function tj_FloatElmt__init_0($this, $value) {
        tj_Element$ElementType_$callClinit();
        $this.$type0 = tj_Element$ElementType_FLOAT;
        $this.$value31 = $value;
    }
    function tj_FloatElmt_toString($this) {
        return jl_Float_toString($this.$value31);
    }
    function tj_FloatElmt_getValue($this) {
        return $this.$value31;
    }
    function tj_IntElmt() {
        tj_Element.call(this);
        this.$value26 = 0;
    }
    function tj_IntElmt__init_(var_0) {
        var var_1 = new tj_IntElmt();
        tj_IntElmt__init_0(var_1, var_0);
        return var_1;
    }
    function tj_IntElmt__init_0($this, $value) {
        tj_Element$ElementType_$callClinit();
        $this.$type0 = tj_Element$ElementType_INTEGER;
        $this.$value26 = $value;
    }
    function tj_IntElmt_toString($this) {
        return jl_Integer_toString($this.$value26);
    }
    function tj_IntElmt_getValue($this) {
        return $this.$value26;
    }
    function tj_BoolElmt() {
        tj_Element.call(this);
        this.$value32 = 0;
    }
    function tj_BoolElmt__init_(var_0) {
        var var_1 = new tj_BoolElmt();
        tj_BoolElmt__init_0(var_1, var_0);
        return var_1;
    }
    function tj_BoolElmt__init_0($this, $value) {
        tj_Element$ElementType_$callClinit();
        $this.$type0 = tj_Element$ElementType_BOOL;
        $this.$value32 = $value;
    }
    function tj_BoolElmt_toString($this) {
        return jl_Boolean_toString($this.$value32);
    }
    function tj_BoolElmt_getValue($this) {
        return $this.$value32;
    }
    var tj_EqualElmt = $rt_classWithoutFields(tj_Element);
    function tj_EqualElmt__init_() {
        var var_0 = new tj_EqualElmt();
        tj_EqualElmt__init_0(var_0);
        return var_0;
    }
    function tj_EqualElmt__init_0($this) {
        tj_Element$ElementType_$callClinit();
        $this.$type0 = tj_Element$ElementType_EQUAL;
    }
    function tj_EqualElmt_toString($this) {
        return $rt_s(528);
    }
    var tj_NotEqualElmt = $rt_classWithoutFields(tj_Element);
    function tj_NotEqualElmt__init_() {
        var var_0 = new tj_NotEqualElmt();
        tj_NotEqualElmt__init_0(var_0);
        return var_0;
    }
    function tj_NotEqualElmt__init_0($this) {
        tj_Element$ElementType_$callClinit();
        $this.$type0 = tj_Element$ElementType_NOT_EQUAL;
    }
    function tj_NotEqualElmt_toString($this) {
        return $rt_s(529);
    }
    var tj_GreaterThanElmt = $rt_classWithoutFields(tj_Element);
    function tj_GreaterThanElmt__init_() {
        var var_0 = new tj_GreaterThanElmt();
        tj_GreaterThanElmt__init_0(var_0);
        return var_0;
    }
    function tj_GreaterThanElmt__init_0($this) {
        tj_Element$ElementType_$callClinit();
        $this.$type0 = tj_Element$ElementType_GREATER_THAN;
    }
    function tj_GreaterThanElmt_toString($this) {
        return $rt_s(530);
    }
    var tj_LessThanElmt = $rt_classWithoutFields(tj_Element);
    function tj_LessThanElmt__init_() {
        var var_0 = new tj_LessThanElmt();
        tj_LessThanElmt__init_0(var_0);
        return var_0;
    }
    function tj_LessThanElmt__init_0($this) {
        tj_Element$ElementType_$callClinit();
        $this.$type0 = tj_Element$ElementType_LESS_THAN;
    }
    function tj_LessThanElmt_toString($this) {
        return $rt_s(531);
    }
    var tj_GreaterThanEqualElmt = $rt_classWithoutFields(tj_Element);
    function tj_GreaterThanEqualElmt__init_() {
        var var_0 = new tj_GreaterThanEqualElmt();
        tj_GreaterThanEqualElmt__init_0(var_0);
        return var_0;
    }
    function tj_GreaterThanEqualElmt__init_0($this) {
        tj_Element$ElementType_$callClinit();
        $this.$type0 = tj_Element$ElementType_GREATER_THAN_EQUAL;
    }
    function tj_GreaterThanEqualElmt_toString($this) {
        return $rt_s(532);
    }
    var tj_LessThanEqualElmt = $rt_classWithoutFields(tj_Element);
    function tj_LessThanEqualElmt__init_() {
        var var_0 = new tj_LessThanEqualElmt();
        tj_LessThanEqualElmt__init_0(var_0);
        return var_0;
    }
    function tj_LessThanEqualElmt__init_0($this) {
        tj_Element$ElementType_$callClinit();
        $this.$type0 = tj_Element$ElementType_LESS_THAN_EQUAL;
    }
    function tj_LessThanEqualElmt_toString($this) {
        return $rt_s(533);
    }
    var jnc_Charset$Charsets = $rt_classWithoutFields();
    var jnc_Charset$Charsets_value = null;
    function jnc_Charset$Charsets_$callClinit() {
        jnc_Charset$Charsets_$callClinit = $rt_eraseClinit(jnc_Charset$Charsets);
        jnc_Charset$Charsets__clinit_();
    }
    function jnc_Charset$Charsets__clinit_() {
        var $charsets, var$2, var$3, $charset;
        jnc_Charset$Charsets_value = ju_HashMap__init_();
        $charsets = $rt_createArray(jnc_Charset, 6).data;
        jnc_StandardCharsets_$callClinit();
        $charsets[0] = jnc_StandardCharsets_UTF_8;
        $charsets[1] = jnc_StandardCharsets_US_ASCII;
        $charsets[2] = jnc_StandardCharsets_ISO_8859_1;
        $charsets[3] = jnc_StandardCharsets_UTF_16;
        $charsets[4] = jnc_StandardCharsets_UTF_16BE;
        $charsets[5] = jnc_StandardCharsets_UTF_16LE;
        var$2 = $charsets.length;
        var$3 = 0;
        while (var$3 < var$2) {
            $charset = $charsets[var$3];
            ju_HashMap_put(jnc_Charset$Charsets_value, $charset.$canonicalName, $charset);
            var$3 = var$3 + 1 | 0;
        }
    }
    var jl_StringBuffer = $rt_classWithoutFields(jl_AbstractStringBuilder);
    function jl_StringBuffer_insert($this, var$1, var$2, var$3, var$4) {
        jl_AbstractStringBuilder_insert4($this, var$1, var$2, var$3, var$4);
        return $this;
    }
    function jl_StringBuffer_append($this, var$1, var$2, var$3) {
        jl_AbstractStringBuilder_append2($this, var$1, var$2, var$3);
        return $this;
    }
    function jl_StringBuffer_ensureCapacity($this, var$1) {
        jl_AbstractStringBuilder_ensureCapacity($this, var$1);
    }
    function jl_StringBuffer_insert0($this, var$1, var$2) {
        jl_AbstractStringBuilder_insert3($this, var$1, var$2);
        return $this;
    }
    function jl_StringBuffer_insert1($this, var$1, var$2) {
        jl_AbstractStringBuilder_insert($this, var$1, var$2);
        return $this;
    }
    var jn_MalformedURLException = $rt_classWithoutFields(ji_IOException);
    var jl_NumberFormatException = $rt_classWithoutFields(jl_IllegalArgumentException);
    var otcit_FloatSynthesizer = $rt_classWithoutFields();
    var otcit_FloatSynthesizer_mantissa10Table = null;
    var otcit_FloatSynthesizer_exp10Table = null;
    function otcit_FloatSynthesizer_synthesizeFloat($mantissa, $exp, $negative) {
        var $indexInTable, var$5, $binMantissa, $binExp, $binMantissaShift, $iee754;
        $indexInTable = 50 + $exp | 0;
        if ($mantissa) {
            var$5 = otcit_FloatSynthesizer_mantissa10Table.data;
            if ($indexInTable <= var$5.length && $indexInTable >= 0) {
                $binMantissa = otcit_FloatAnalyzer_mulAndShiftRight($mantissa, var$5[$indexInTable], 0);
                $binExp = otcit_FloatSynthesizer_exp10Table.data[$indexInTable] - 1 | 0;
                $binMantissaShift = (32 - jl_Integer_numberOfLeadingZeros($binMantissa) | 0) - 30 | 0;
                $mantissa = $binMantissaShift >= 0 ? $binMantissa >>> $binMantissaShift | 0 : $binMantissa << ( -$binMantissaShift | 0);
                $exp = $binExp + $binMantissaShift | 0;
                if ($exp >= 255)
                    return !$negative ? Infinity : (-Infinity);
                $mantissa = $mantissa + 32 | 0;
                if ($mantissa & (-1073741824)) {
                    $mantissa = $mantissa >>> 1 | 0;
                    $exp = $exp + 1 | 0;
                }
                if ($exp <= 0) {
                    $mantissa = $mantissa >> jl_Math_min(( -$exp | 0) + 1 | 0, 32);
                    $exp = 0;
                }
                $iee754 = ($mantissa >>> 6 | 0) & 8388607 | $exp << 23;
                if ($negative)
                    $iee754 = $iee754 ^ (-2147483648);
                return $rt_intBitsToFloat($iee754);
            }
        }
        return $rt_intBitsToFloat(!$negative ? 0 : (-2147483648));
    }
    function otcit_FloatSynthesizer__clinit_() {
        otcit_FloatSynthesizer_mantissa10Table = $rt_createIntArrayFromData([(-1598972629), (-924973963), (-82475629), (-1662160004), (-1003958181), (-181205903), (-1723866425), (-1081091207), (-277622185), (-1784126602), (-1156416428), (-371778711), (-1842974431), (-1229976214), (-463728444), (-1900443013), (-1301811943), (-553523104), (-1956564676), (-1371964021), (-641213203), (-2011370988), (-1440471911), (-726848064), (-2064892776), (-1507374146), (-810475859), (-2117160148), (-1572708361), (-892143627),
        (-41437709), (-1636511304), (-971897307), (-141129809), (-1698818867), (-1049781759), (-238485375), (-1759666096), (-1125840795), (-333559170), (-1819087217), (-1200117198), (-426404673), (-1877115657), (-1272652747), (-517074110), (-1933784055), (-1343488244), (-605618481), (-1989124287), (-1412663534), (-692087594), (-2043167482), (-1480217529), (-776530087), (-2095944040), (-1546188227), (-858993459), (-2147483648), (-1610612736), (-939524096), (-100663296), (-1673527296), (-1018167296), (-198967296),
        (-1734967296), (-1094967296), (-294967296), (-1794967296), (-1169967296), (-388717296), (-1853561046), (-1243209483), (-480270030), (-1910781505), (-1314735057), (-569676998), (-1966660859), (-1384584250), (-656988489), (-2021230542), (-1452796353), (-742253617), (-2074521247), (-1519409734), (-825520344), (-2126562951), (-1584461865), (-906835507), (-59802560), (-1647989336), (-986244846), (-159064233), (-1710027882), (-1063793028), (-255999461), (-1770612399), (-1139523675), (-350662770), (-1829776967)]);
        otcit_FloatSynthesizer_exp10Table = $rt_createIntArrayFromData([(-35), (-32), (-29), (-25), (-22), (-19), (-15), (-12), (-9), (-5), (-2), 1, 5, 8, 11, 15, 18, 21, 25, 28, 31, 35, 38, 41, 45, 48, 51, 55, 58, 61, 64, 68, 71, 74, 78, 81, 84, 88, 91, 94, 98, 101, 104, 108, 111, 114, 118, 121, 124, 128, 131, 134, 138, 141, 144, 148, 151, 154, 158, 161, 164, 167, 171, 174, 177, 181, 184, 187, 191, 194, 197, 201, 204, 207, 211, 214, 217, 221, 224, 227, 231, 234, 237, 241, 244, 247, 251, 254, 257, 260, 264,
        267, 270, 274, 277, 280, 284, 287, 290, 294]);
    }
    function jnc_IllegalCharsetNameException() {
        jl_IllegalArgumentException.call(this);
        this.$charsetName0 = null;
    }
    function jnc_IllegalCharsetNameException__init_(var_0) {
        var var_1 = new jnc_IllegalCharsetNameException();
        jnc_IllegalCharsetNameException__init_0(var_1, var_0);
        return var_1;
    }
    function jnc_IllegalCharsetNameException__init_0($this, $charsetName) {
        jl_Exception__init_($this);
        $this.$charsetName0 = $charsetName;
    }
    var otjc_JSWeakMap = $rt_classWithoutFields();
    var otjc_JSWeakRef = $rt_classWithoutFields();
    var otjc_JSMap = $rt_classWithoutFields();
    var otjc_JSFinalizationRegistryConsumer = $rt_classWithoutFields(0);
    var otji_JSWrapper$_clinit_$lambda$_29_0 = $rt_classWithoutFields();
    function otji_JSWrapper$_clinit_$lambda$_29_0_accept$exported$0(var$0, var$1) {
        var var$2;
        var$1 = otji_JSWrapper_jsToJava(var$1);
        var$2 = otji_JSWrapper_stringWrappers;
        var$1 = otji_JSWrapper_unwrap(var$1);
        var$2.delete(var$1);
    }
    var otjc_JSFinalizationRegistry = $rt_classWithoutFields();
    var otji_JSWrapper$_clinit_$lambda$_29_1 = $rt_classWithoutFields();
    function otji_JSWrapper$_clinit_$lambda$_29_1_accept$exported$0(var$0, var$1) {
        var var$2;
        var$1 = otji_JSWrapper_jsToJava(var$1);
        var$2 = otji_JSWrapper_numberWrappers;
        var$1 = otji_JSWrapper_unwrap(var$1);
        var$2.delete(var$1);
    }
    var jl_Math = $rt_classWithoutFields();
    function jl_Math_round($a) {
        return $a + jl_Math_sign($a) * 0.5 | 0;
    }
    function jl_Math_min($a, $b) {
        if ($a < $b)
            $b = $a;
        return $b;
    }
    function jl_Math_max($a, $b) {
        if ($a > $b)
            $b = $a;
        return $b;
    }
    function jl_Math_sign(var$1) {
        return Math.sign(var$1);
    }
    var otcit_FloatAnalyzer = $rt_classWithoutFields();
    var otcit_FloatAnalyzer_MAX_MANTISSA = 0;
    var otcit_FloatAnalyzer_mantissa10Table = null;
    var otcit_FloatAnalyzer_exp10Table = null;
    function otcit_FloatAnalyzer_analyze($d, $result) {
        var $bits, $mantissa, $exponent, var$6, $decExponent, $decMantissaLow, $posCmp, $mantissaShift, $decMantissa, $decMantissaHi, $lowerPos, $lowerPos_0, $upperPos, $upperPos_0;
        $bits = jl_Float_floatToIntBits($d);
        $result.$sign = !($bits & (-2147483648)) ? 0 : 1;
        $mantissa = $bits & 8388607;
        $exponent = $bits >> 23 & 255;
        if (!$mantissa && !$exponent) {
            $result.$mantissa = 0;
            $result.$exponent = 0;
            return;
        }
        if ($exponent)
            $bits = $mantissa | 8388608;
        else {
            $bits = $mantissa << 1;
            while (Long_eq(Long_and(Long_fromInt($bits), Long_fromInt(8388608)), Long_ZERO)) {
                $bits = $bits << 1;
                $exponent = $exponent + (-1) | 0;
            }
        }
        var$6 = otcit_FloatAnalyzer_exp10Table.data;
        $mantissa = 0;
        $decExponent = var$6.length;
        $decMantissaLow = $rt_compare($mantissa, $decExponent);
        if ($decMantissaLow > 0) {
            $result = new jl_IllegalArgumentException;
            jl_Exception__init_($result);
            $rt_throw($result);
        }
        a: {
            if (!$decMantissaLow)
                $decExponent = (-1);
            else {
                $decMantissaLow = $decExponent - 1 | 0;
                while (true) {
                    $decExponent = ($mantissa + $decMantissaLow | 0) / 2 | 0;
                    $posCmp = var$6[$decExponent];
                    if ($posCmp == $exponent)
                        break;
                    if ($exponent >= $posCmp) {
                        $mantissa = $decExponent + 1 | 0;
                        if ($mantissa > $decMantissaLow) {
                            $decExponent = ( -$decExponent | 0) - 2 | 0;
                            break a;
                        }
                    } else {
                        $decMantissaLow = $decExponent - 1 | 0;
                        if ($decMantissaLow < $mantissa) {
                            $decExponent = ( -$decExponent | 0) - 1 | 0;
                            break a;
                        }
                    }
                }
            }
        }
        if ($decExponent < 0)
            $decExponent =  -$decExponent | 0;
        $mantissa = $decExponent + 1 | 0;
        $mantissaShift = 9 + ($exponent - var$6[$mantissa] | 0) | 0;
        $decMantissa = otcit_FloatAnalyzer_mulAndShiftRight($bits, otcit_FloatAnalyzer_mantissa10Table.data[$mantissa], $mantissaShift);
        if ($decMantissa < otcit_FloatAnalyzer_MAX_MANTISSA) {
            while ($rt_ucmp($decMantissa, otcit_FloatAnalyzer_MAX_MANTISSA) <= 0) {
                $decExponent = $decExponent + (-1) | 0;
                $decMantissa = ($decMantissa * 10 | 0) + 9 | 0;
            }
            var$6 = otcit_FloatAnalyzer_exp10Table.data;
            $mantissa = $decExponent + 1 | 0;
            $mantissaShift = 9 + ($exponent - var$6[$mantissa] | 0) | 0;
            $decMantissa = otcit_FloatAnalyzer_mulAndShiftRight($bits, otcit_FloatAnalyzer_mantissa10Table.data[$mantissa], $mantissaShift);
        }
        $exponent = $bits << 1;
        $decMantissaLow = $exponent + 1 | 0;
        var$6 = otcit_FloatAnalyzer_mantissa10Table.data;
        $mantissa = $decExponent + 1 | 0;
        $posCmp = var$6[$mantissa];
        $bits = $mantissaShift - 1 | 0;
        $decMantissaHi = otcit_FloatAnalyzer_mulAndShiftRight($decMantissaLow, $posCmp, $bits);
        $decMantissaLow = otcit_FloatAnalyzer_mulAndShiftRight($exponent - 1 | 0, otcit_FloatAnalyzer_mantissa10Table.data[$mantissa], $bits);
        $lowerPos = 1;
        while (true) {
            $lowerPos_0 = $lowerPos * 10 | 0;
            if ($rt_ucmp($rt_udiv($decMantissa, $lowerPos_0), $rt_udiv($decMantissaLow, $lowerPos_0)) <= 0)
                break;
            $lowerPos = $lowerPos_0;
        }
        $upperPos = 1;
        while (true) {
            $upperPos_0 = $upperPos * 10 | 0;
            if ($rt_ucmp($rt_udiv($decMantissa, $upperPos_0), $rt_udiv($decMantissaHi, $upperPos_0)) >= 0)
                break;
            $upperPos = $upperPos_0;
        }
        $posCmp = $rt_ucmp($lowerPos, $upperPos);
        $mantissa = $posCmp > 0 ? $rt_imul($rt_udiv($decMantissa, $lowerPos), $lowerPos) : $posCmp < 0 ? $rt_imul($rt_udiv($decMantissa, $upperPos), $upperPos) + $upperPos | 0 : $rt_imul($rt_udiv(($decMantissa + ($upperPos / 2 | 0) | 0), $upperPos), $upperPos);
        if (jl_Long_compareUnsigned(Long_fromInt($mantissa), Long_fromInt(1000000000)) >= 0)
            while (true) {
                $decExponent = $decExponent + 1 | 0;
                $mantissa = $rt_udiv($mantissa, 10);
                if ($rt_ucmp($mantissa, 1000000000) < 0)
                    break;
            }
        else if ($rt_ucmp($mantissa, 100000000) < 0) {
            $decExponent = $decExponent + (-1) | 0;
            $mantissa = $mantissa * 10 | 0;
        }
        $result.$mantissa = $mantissa;
        $result.$exponent = $decExponent - 50 | 0;
    }
    function otcit_FloatAnalyzer_mulAndShiftRight($a, $b, $shift) {
        return Long_lo(Long_shru(Long_mul(Long_and(Long_fromInt($a), Long_create(4294967295, 0)), Long_and(Long_fromInt($b), Long_create(4294967295, 0))), 32 - $shift | 0));
    }
    function otcit_FloatAnalyzer__clinit_() {
        otcit_FloatAnalyzer_MAX_MANTISSA = $rt_udiv((-1), 10);
        otcit_FloatAnalyzer_mantissa10Table = $rt_createIntArrayFromData([(-18543760), (-873828468), (-1558056233), (-2105438446), (-791721136), (-1492370368), (-2052889754), (-707643228), (-1425108042), (-1999079893), (-621547450), (-1356231419), (-1943978595), (-533385374), (-1285701758), (-1887554866), (-443107408), (-1213479385), (-1829776968), (-350662770), (-1139523676), (-1770612400), (-255999462), (-1063793029), (-1710027882), (-159064234), (-986244846), (-1647989336), (-59802560), (-906835507), (-1584461865),
        (-2126562952), (-825520345), (-1519409735), (-2074521247), (-742253618), (-1452796353), (-2021230542), (-656988489), (-1384584251), (-1966660860), (-569676998), (-1314735058), (-1910781505), (-480270031), (-1243209484), (-1853561046), (-388717296), (-1169967296), (-1794967296), (-294967296), (-1094967296), (-1734967296), (-198967296), (-1018167296), (-1673527296), (-100663296), (-939524096), (-1610612736), (-2147483648), (-858993460), (-1546188227), (-2095944041), (-776530088), (-1480217529), (-2043167483),
        (-692087595), (-1412663535), (-1989124287), (-605618482), (-1343488245), (-1933784055), (-517074110), (-1272652747), (-1877115657), (-426404674), (-1200117198), (-1819087218), (-333559171), (-1125840796), (-1759666096), (-238485376), (-1049781760), (-1698818867), (-141129810), (-971897307), (-1636511305), (-41437710), (-892143627), (-1572708361), (-2117160148), (-810475859), (-1507374147), (-2064892777), (-726848065), (-1440471911), (-2011370988), (-641213203), (-1371964022), (-1956564688)]);
        otcit_FloatAnalyzer_exp10Table = $rt_createIntArrayFromData([(-37), (-34), (-31), (-28), (-24), (-21), (-18), (-14), (-11), (-8), (-4), (-1), 2, 6, 9, 12, 16, 19, 22, 26, 29, 32, 36, 39, 42, 46, 49, 52, 56, 59, 62, 65, 69, 72, 75, 79, 82, 85, 89, 92, 95, 99, 102, 105, 109, 112, 115, 119, 122, 125, 129, 132, 135, 139, 142, 145, 149, 152, 155, 158, 162, 165, 168, 172, 175, 178, 182, 185, 188, 192, 195, 198, 202, 205, 208, 212, 215, 218, 222, 225, 228, 232, 235, 238, 242, 245, 248, 252, 255, 258, 261, 265,
        268, 271, 275, 278, 281, 285, 288, 291]);
    }
    var jnc_StandardCharsets = $rt_classWithoutFields();
    var jnc_StandardCharsets_UTF_8 = null;
    var jnc_StandardCharsets_US_ASCII = null;
    var jnc_StandardCharsets_ISO_8859_1 = null;
    var jnc_StandardCharsets_UTF_16 = null;
    var jnc_StandardCharsets_UTF_16BE = null;
    var jnc_StandardCharsets_UTF_16LE = null;
    function jnc_StandardCharsets_$callClinit() {
        jnc_StandardCharsets_$callClinit = $rt_eraseClinit(jnc_StandardCharsets);
        jnc_StandardCharsets__clinit_();
    }
    function jnc_StandardCharsets__clinit_() {
        var var$1;
        jnci_UTF8Charset_$callClinit();
        jnc_StandardCharsets_UTF_8 = jnci_UTF8Charset_INSTANCE;
        var$1 = new jnci_AsciiCharset;
        jnc_Charset__init_(var$1, $rt_s(560), $rt_createArray(jl_String, 0));
        jnc_StandardCharsets_US_ASCII = var$1;
        var$1 = new jnci_Iso8859Charset;
        jnc_Charset__init_(var$1, $rt_s(561), $rt_createArray(jl_String, 0));
        jnc_StandardCharsets_ISO_8859_1 = var$1;
        jnc_StandardCharsets_UTF_16 = jnci_UTF16Charset__init_($rt_s(562), 1, 0);
        jnc_StandardCharsets_UTF_16BE = jnci_UTF16Charset__init_($rt_s(563), 0, 0);
        jnc_StandardCharsets_UTF_16LE = jnci_UTF16Charset__init_($rt_s(564), 0, 1);
    }
    var jl_CloneNotSupportedException = $rt_classWithoutFields(jl_Exception);
    var jnci_AsciiCharset = $rt_classWithoutFields(jnc_Charset);
    function jnci_AsciiCharset_newEncoder($this) {
        var var$1;
        var$1 = new jnci_AsciiEncoder;
        jnci_BufferedEncoder__init_(var$1, $this, 1.0, 1.0);
        return var$1;
    }
    var jnci_Iso8859Charset = $rt_classWithoutFields(jnc_Charset);
    function jnci_Iso8859Charset_newEncoder($this) {
        var var$1;
        var$1 = new jnci_Iso8859Encoder;
        jnci_BufferedEncoder__init_(var$1, $this, 1.0, 1.0);
        return var$1;
    }
    function jnci_UTF16Charset() {
        var a = this; jnc_Charset.call(a);
        a.$bom = 0;
        a.$littleEndian = 0;
    }
    function jnci_UTF16Charset__init_(var_0, var_1, var_2) {
        var var_3 = new jnci_UTF16Charset();
        jnci_UTF16Charset__init_0(var_3, var_0, var_1, var_2);
        return var_3;
    }
    function jnci_UTF16Charset__init_0($this, $canonicalName, $bom, $littleEndian) {
        jnc_Charset__init_($this, $canonicalName, $rt_createArray(jl_String, 0));
        $this.$bom = $bom;
        $this.$littleEndian = $littleEndian;
    }
    function jnci_UTF16Charset_newEncoder($this) {
        var var$1, var$2, var$3;
        var$1 = new jnci_UTF16Encoder;
        var$2 = $this.$bom;
        var$3 = $this.$littleEndian;
        jnci_BufferedEncoder__init_(var$1, $this, 2.0, 4.0);
        var$1.$bom0 = var$2;
        var$1.$littleEndian0 = var$3;
        return var$1;
    }
    var otjc_JSObjects = $rt_classWithoutFields();
    var otpp_ResourceAccessor = $rt_classWithoutFields();
    var otciu_UnicodeHelper = $rt_classWithoutFields();
    function otciu_UnicodeHelper_decodeCaseMapping($text) {
        var $flow, $sz, $data, var$5, $last, $i, var$8;
        $flow = otci_CharFlow__init_(jl_String_toCharArray($text));
        $sz = otci_Base46_decodeUnsigned($flow);
        $data = $rt_createIntArray($sz * 2 | 0);
        var$5 = $data.data;
        $last = 0;
        $i = 0;
        while ($i < $sz) {
            $last = $last + otci_Base46_decodeUnsigned($flow) | 0;
            var$8 = $i * 2 | 0;
            var$5[var$8] = $last;
            var$5[var$8 + 1 | 0] = otci_Base46_decode($flow);
            $i = $i + 1 | 0;
        }
        return $data;
    }
    function otciu_UnicodeHelper_decodeByte($c) {
        if ($c > 92)
            return (($c - 32 | 0) - 2 | 0) << 24 >> 24;
        if ($c <= 34)
            return ($c - 32 | 0) << 24 >> 24;
        return (($c - 32 | 0) - 1 | 0) << 24 >> 24;
    }
    function otci_CharFlow() {
        var a = this; jl_Object.call(a);
        a.$characters0 = null;
        a.$pointer = 0;
    }
    function otci_CharFlow__init_(var_0) {
        var var_1 = new otci_CharFlow();
        otci_CharFlow__init_0(var_1, var_0);
        return var_1;
    }
    function otci_CharFlow__init_0($this, $characters) {
        $this.$characters0 = $characters;
    }
    var otci_Base46 = $rt_classWithoutFields();
    function otci_Base46_decodeUnsigned($seq) {
        var $number, $pos, var$4, $hasMore, $digit;
        $number = 0;
        $pos = 1;
        while (true) {
            var$4 = $seq.$characters0.data;
            $hasMore = $seq.$pointer;
            $seq.$pointer = $hasMore + 1 | 0;
            $digit = var$4[$hasMore];
            $digit = $digit < 34 ? $digit - 32 | 0 : $digit >= 92 ? ($digit - 32 | 0) - 2 | 0 : ($digit - 32 | 0) - 1 | 0;
            $hasMore = ($digit % 2 | 0) != 1 ? 0 : 1;
            $number = $number + $rt_imul($pos, $digit / 2 | 0) | 0;
            $pos = $pos * 46 | 0;
            if (!$hasMore)
                break;
        }
        return $number;
    }
    function otci_Base46_decode($seq) {
        var $number, $result;
        $number = otci_Base46_decodeUnsigned($seq);
        $result = $number / 2 | 0;
        if ($number % 2 | 0)
            $result =  -$result | 0;
        return $result;
    }
    function ju_MapEntry() {
        var a = this; jl_Object.call(a);
        a.$key = null;
        a.$value1 = null;
    }
    function ju_MapEntry_getKey($this) {
        return $this.$key;
    }
    function ju_MapEntry_getValue($this) {
        return $this.$value1;
    }
    function ju_HashMap$HashEntry() {
        var a = this; ju_MapEntry.call(a);
        a.$origKeyHash = 0;
        a.$next2 = null;
    }
    var jl_StringIndexOutOfBoundsException = $rt_classWithoutFields(jl_IndexOutOfBoundsException);
    function jur_Pattern() {
        var a = this; jl_Object.call(a);
        a.$lexemes = null;
        a.$flags1 = 0;
        a.$backRefs = null;
        a.$needsBackRefReplacement = 0;
        a.$globalGroupIndex = 0;
        a.$compCount = 0;
        a.$consCount = 0;
        a.$start = null;
    }
    function jur_Pattern_pattern($this) {
        return $this.$lexemes.$orig;
    }
    function jur_Pattern_processExpression($this, $ch, $newFlags, $last) {
        var $children, $saveFlags, $saveChangedFlags, $fSet, $child, var$9;
        $children = ju_ArrayList__init_();
        $saveFlags = $this.$flags1;
        $saveChangedFlags = 0;
        if ($newFlags != $saveFlags)
            $this.$flags1 = $newFlags;
        a: {
            switch ($ch) {
                case -1073741784:
                    $fSet = new jur_NonCapFSet;
                    $newFlags = $this.$consCount + 1 | 0;
                    $this.$consCount = $newFlags;
                    jur_FSet__init_($fSet, $newFlags);
                    break a;
                case -536870872:
                case -268435416:
                    break;
                case -134217688:
                case -67108824:
                    $fSet = new jur_BehindFSet;
                    $newFlags = $this.$consCount + 1 | 0;
                    $this.$consCount = $newFlags;
                    jur_FSet__init_($fSet, $newFlags);
                    break a;
                case -33554392:
                    $fSet = new jur_AtomicFSet;
                    $newFlags = $this.$consCount + 1 | 0;
                    $this.$consCount = $newFlags;
                    jur_FSet__init_($fSet, $newFlags);
                    break a;
                default:
                    $newFlags = $this.$globalGroupIndex + 1 | 0;
                    $this.$globalGroupIndex = $newFlags;
                    if ($last !== null)
                        $fSet = jur_FSet__init_0($newFlags);
                    else {
                        $fSet = new jur_FinalSet;
                        jur_FSet__init_($fSet, 0);
                        $saveChangedFlags = 1;
                    }
                    $newFlags = $this.$globalGroupIndex;
                    if ($newFlags <= (-1))
                        break a;
                    if ($newFlags >= 10)
                        break a;
                    $this.$backRefs.data[$newFlags] = $fSet;
                    break a;
            }
            $fSet = new jur_AheadFSet;
            jur_FSet__init_($fSet, (-1));
        }
        while (true) {
            if (jur_Lexer_isLetter($this.$lexemes) && $this.$lexemes.$lookAhead == (-536870788)) {
                $last = jur_CharClass__init_(jur_Pattern_hasFlag($this, 2), jur_Pattern_hasFlag($this, 64));
                while (!jur_Lexer_isEmpty($this.$lexemes) && jur_Lexer_isLetter($this.$lexemes)) {
                    $child = $this.$lexemes;
                    var$9 = $child.$lookAhead;
                    if (var$9 && var$9 != (-536870788) && var$9 != (-536870871))
                        break;
                    jur_CharClass_add($last, jur_Lexer_next($child));
                    $child = $this.$lexemes;
                    if ($child.$ch != (-536870788))
                        continue;
                    jur_Lexer_next($child);
                }
                $child = jur_Pattern_processRangeSet($this, $last);
                $child.$setNext($fSet);
            } else if ($this.$lexemes.$ch == (-536870788)) {
                $child = jur_EmptySet__init_($fSet);
                jur_Lexer_next($this.$lexemes);
            } else {
                $child = jur_Pattern_processSubExpression($this, $fSet);
                $last = $this.$lexemes;
                if ($last.$ch == (-536870788))
                    jur_Lexer_next($last);
            }
            if ($child !== null)
                ju_ArrayList_add($children, $child);
            if (jur_Lexer_isEmpty($this.$lexemes))
                break;
            if ($this.$lexemes.$ch == (-536870871))
                break;
        }
        if ($this.$lexemes.$lookBack == (-536870788))
            ju_ArrayList_add($children, jur_EmptySet__init_($fSet));
        if ($this.$flags1 != $saveFlags && !$saveChangedFlags) {
            $this.$flags1 = $saveFlags;
            $last = $this.$lexemes;
            $last.$flags0 = $saveFlags;
            $last.$lookAhead = $last.$ch;
            $last.$lookAheadST = $last.$curST;
            var$9 = $last.$curToc;
            $last.$index3 = var$9 + 1 | 0;
            $last.$lookAheadToc = var$9;
            jur_Lexer_movePointer($last);
        }
        switch ($ch) {
            case -1073741784:
                break;
            case -536870872:
                $last = new jur_PositiveLookAhead;
                jur_JointSet__init_($last, $children, $fSet);
                return $last;
            case -268435416:
                $last = new jur_NegativeLookAhead;
                jur_JointSet__init_($last, $children, $fSet);
                return $last;
            case -134217688:
                $last = new jur_PositiveLookBehind;
                jur_JointSet__init_($last, $children, $fSet);
                return $last;
            case -67108824:
                $last = new jur_NegativeLookBehind;
                jur_JointSet__init_($last, $children, $fSet);
                return $last;
            case -33554392:
                $last = new jur_AtomicJointSet;
                jur_JointSet__init_($last, $children, $fSet);
                return $last;
            default:
                switch ($children.$size0) {
                    case 0:
                        break;
                    case 1:
                        return jur_SingleSet__init_(ju_ArrayList_get($children, 0), $fSet);
                    default:
                        return jur_JointSet__init_0($children, $fSet);
                }
                return jur_EmptySet__init_($fSet);
        }
        $last = new jur_NonCapJointSet;
        jur_JointSet__init_($last, $children, $fSet);
        return $last;
    }
    function jur_Pattern_processDecomposedChar($this) {
        var $codePoints, $curSymb, $curSymbIndex, $codePointsHangul, var$5, var$6, $readCodePoints;
        $codePoints = $rt_createIntArray(4);
        $curSymb = (-1);
        $curSymbIndex = (-1);
        if (!jur_Lexer_isEmpty($this.$lexemes) && jur_Lexer_isLetter($this.$lexemes)) {
            $codePointsHangul = $codePoints.data;
            $curSymb = jur_Lexer_next($this.$lexemes);
            $codePointsHangul[0] = $curSymb;
            $curSymbIndex = $curSymb - 4352 | 0;
        }
        if ($curSymbIndex >= 0 && $curSymbIndex < 19) {
            $codePointsHangul = $rt_createCharArray(3);
            $codePoints = $codePointsHangul.data;
            $codePoints[0] = $curSymb & 65535;
            var$5 = $this.$lexemes;
            var$6 = var$5.$ch;
            $readCodePoints = var$6 - 4449 | 0;
            if ($readCodePoints >= 0 && $readCodePoints < 21) {
                $codePoints[1] = var$6 & 65535;
                jur_Lexer_next(var$5);
                var$5 = $this.$lexemes;
                var$6 = var$5.$ch;
                $curSymb = var$6 - 4519 | 0;
                if ($curSymb >= 0 && $curSymb < 28) {
                    $codePoints[2] = var$6 & 65535;
                    jur_Lexer_next(var$5);
                    return jur_HangulDecomposedCharSet__init_($codePointsHangul, 3);
                }
                return jur_HangulDecomposedCharSet__init_($codePointsHangul, 2);
            }
            if (!jur_Pattern_hasFlag($this, 2))
                return jur_CharSet__init_($codePoints[0]);
            if (jur_Pattern_hasFlag($this, 64))
                return jur_UCICharSet__init_($codePoints[0]);
            return jur_CICharSet__init_($codePoints[0]);
        }
        $codePointsHangul = $codePoints.data;
        $curSymb = 1;
        while ($curSymb < 4 && !jur_Lexer_isEmpty($this.$lexemes) && jur_Lexer_isLetter($this.$lexemes)) {
            $readCodePoints = $curSymb + 1 | 0;
            $codePointsHangul[$curSymb] = jur_Lexer_next($this.$lexemes);
            $curSymb = $readCodePoints;
        }
        if ($curSymb == 1) {
            $readCodePoints = $codePointsHangul[0];
            if (!(jur_Lexer_singleDecompTable.$get2($readCodePoints) == jur_Lexer_singleDecompTableSize ? 0 : 1))
                return jur_Pattern_processCharSet($this, $codePointsHangul[0]);
        }
        if (!jur_Pattern_hasFlag($this, 2))
            return jur_DecomposedCharSet__init_($codePoints, $curSymb);
        if (jur_Pattern_hasFlag($this, 64)) {
            var$5 = new jur_UCIDecomposedCharSet;
            jur_DecomposedCharSet__init_0(var$5, $codePoints, $curSymb);
            return var$5;
        }
        var$5 = new jur_CIDecomposedCharSet;
        jur_DecomposedCharSet__init_0(var$5, $codePoints, $curSymb);
        return var$5;
    }
    function jur_Pattern_processSubExpression($this, $last) {
        var $cur, $term, var$4, $next, var$6, var$7, var$8;
        if (jur_Lexer_isLetter($this.$lexemes) && !jur_Lexer_isNextSpecial($this.$lexemes) && jur_Lexer_isLetter0($this.$lexemes.$lookAhead)) {
            if (jur_Pattern_hasFlag($this, 128)) {
                $cur = jur_Pattern_processDecomposedChar($this);
                if (!jur_Lexer_isEmpty($this.$lexemes)) {
                    $term = $this.$lexemes;
                    var$4 = $term.$ch;
                    if (!(var$4 == (-536870871) && !($last instanceof jur_FinalSet)) && var$4 != (-536870788) && !jur_Lexer_isLetter($term))
                        $cur = jur_Pattern_processQuantifier($this, $last, $cur);
                }
            } else if (!jur_Lexer_isHighSurrogate($this.$lexemes) && !jur_Lexer_isLowSurrogate($this.$lexemes)) {
                $next = new jl_StringBuffer;
                jl_AbstractStringBuilder__init_($next);
                while (!jur_Lexer_isEmpty($this.$lexemes) && jur_Lexer_isLetter($this.$lexemes) && !jur_Lexer_isHighSurrogate($this.$lexemes) && !jur_Lexer_isLowSurrogate($this.$lexemes)) {
                    if (!(!jur_Lexer_isNextSpecial($this.$lexemes) && !$this.$lexemes.$lookAhead) && !(!jur_Lexer_isNextSpecial($this.$lexemes) && jur_Lexer_isLetter0($this.$lexemes.$lookAhead))) {
                        var$6 = $this.$lexemes.$lookAhead;
                        if (var$6 != (-536870871) && (var$6 & (-2147418113)) != (-2147483608) && var$6 != (-536870788) && var$6 != (-536870876))
                            break;
                    }
                    var$4 = jur_Lexer_next($this.$lexemes);
                    if (!jl_Character_isSupplementaryCodePoint(var$4))
                        jl_AbstractStringBuilder_append($next, var$4 & 65535);
                    else
                        jl_AbstractStringBuilder_append3($next, jl_Character_toChars(var$4));
                }
                if (!jur_Pattern_hasFlag($this, 2)) {
                    $cur = new jur_SequenceSet;
                    jur_LeafSet__init_($cur);
                    $cur.$string1 = jl_AbstractStringBuilder_toString($next);
                    var$4 = $next.$length0;
                    $cur.$charCount = var$4;
                    $cur.$leftToRight = jur_SequenceSet$IntHash__init_(var$4);
                    $cur.$rightToLeft = jur_SequenceSet$IntHash__init_($cur.$charCount);
                    var$7 = 0;
                    while (var$7 < ($cur.$charCount - 1 | 0)) {
                        jur_SequenceSet$IntHash_put($cur.$leftToRight, jl_String_charAt($cur.$string1, var$7), ($cur.$charCount - var$7 | 0) - 1 | 0);
                        jur_SequenceSet$IntHash_put($cur.$rightToLeft, jl_String_charAt($cur.$string1, ($cur.$charCount - var$7 | 0) - 1 | 0), ($cur.$charCount - var$7 | 0) - 1 | 0);
                        var$7 = var$7 + 1 | 0;
                    }
                } else if (jur_Pattern_hasFlag($this, 64))
                    $cur = jur_UCISequenceSet__init_($next);
                else {
                    $cur = new jur_CISequenceSet;
                    jur_LeafSet__init_($cur);
                    $cur.$string2 = jl_AbstractStringBuilder_toString($next);
                    $cur.$charCount = $next.$length0;
                }
            } else
                $cur = jur_Pattern_processQuantifier($this, $last, jur_Pattern_processTerminal($this, $last));
        } else {
            $term = $this.$lexemes;
            if ($term.$ch != (-536870871))
                $cur = jur_Pattern_processQuantifier($this, $last, jur_Pattern_processTerminal($this, $last));
            else {
                if ($last instanceof jur_FinalSet)
                    $rt_throw(jur_PatternSyntaxException__init_0($rt_s(2), $term.$orig, jur_Lexer_getIndex($term)));
                $cur = jur_EmptySet__init_($last);
            }
        }
        a: {
            if (!jur_Lexer_isEmpty($this.$lexemes)) {
                var$4 = $this.$lexemes.$ch;
                if (!(var$4 == (-536870871) && !($last instanceof jur_FinalSet)) && var$4 != (-536870788)) {
                    $next = jur_Pattern_processSubExpression($this, $last);
                    if ($cur instanceof jur_LeafQuantifierSet && !($cur instanceof jur_CompositeQuantifierSet) && !($cur instanceof jur_GroupQuantifierSet) && !($cur instanceof jur_AltQuantifierSet)) {
                        var$8 = $cur;
                        if (!$next.$first(var$8.$innerSet)) {
                            $cur = new jur_UnifiedQuantifierSet;
                            jur_LeafQuantifierSet__init_($cur, var$8.$innerSet, var$8.$next4, var$8.$type11);
                            $cur.$innerSet.$setNext($cur);
                        }
                    }
                    if (($next.$getType4() & 65535) != 43)
                        $cur.$setNext($next);
                    else
                        $cur.$setNext($next.$innerSet);
                    break a;
                }
            }
            if ($cur === null)
                return null;
            $cur.$setNext($last);
        }
        if (($cur.$getType4() & 65535) != 43)
            return $cur;
        return $cur.$innerSet;
    }
    function jur_Pattern_processQuantifier($this, $last, $term) {
        var $q, $quant, $leaf, var$6, $q_0;
        $q = $this.$lexemes;
        $quant = $q.$ch;
        if ($term !== null && !($term instanceof jur_LeafSet)) {
            switch ($quant) {
                case -2147483606:
                    jur_Lexer_next($q);
                    $q = new jur_PossessiveGroupQuantifierSet;
                    jur_QuantifierSet__init_($q, $term, $last, $quant);
                    jur_FSet_$callClinit();
                    $term.$setNext(jur_FSet_posFSet);
                    return $q;
                case -2147483605:
                    jur_Lexer_next($q);
                    $q = new jur_PosPlusGroupQuantifierSet;
                    jur_QuantifierSet__init_($q, $term, $last, (-2147483606));
                    jur_FSet_$callClinit();
                    $term.$setNext(jur_FSet_posFSet);
                    return $q;
                case -2147483585:
                    jur_Lexer_next($q);
                    $q = new jur_PosAltGroupQuantifierSet;
                    jur_QuantifierSet__init_($q, $term, $last, (-536870849));
                    jur_FSet_$callClinit();
                    $term.$setNext(jur_FSet_posFSet);
                    return $q;
                case -2147483525:
                    $leaf = new jur_PosCompositeGroupQuantifierSet;
                    $q = jur_Lexer_nextSpecial($q);
                    var$6 = $this.$compCount + 1 | 0;
                    $this.$compCount = var$6;
                    jur_CompositeGroupQuantifierSet__init_($leaf, $q, $term, $last, (-536870849), var$6);
                    jur_FSet_$callClinit();
                    $term.$setNext(jur_FSet_posFSet);
                    return $leaf;
                case -1073741782:
                case -1073741781:
                    jur_Lexer_next($q);
                    $q = new jur_ReluctantGroupQuantifierSet;
                    jur_QuantifierSet__init_($q, $term, $last, $quant);
                    $term.$setNext($q);
                    return $q;
                case -1073741761:
                    jur_Lexer_next($q);
                    $q = new jur_RelAltGroupQuantifierSet;
                    jur_QuantifierSet__init_($q, $term, $last, (-536870849));
                    $term.$setNext($last);
                    return $q;
                case -1073741701:
                    $q_0 = new jur_RelCompositeGroupQuantifierSet;
                    $q = jur_Lexer_nextSpecial($q);
                    $quant = $this.$compCount + 1 | 0;
                    $this.$compCount = $quant;
                    jur_CompositeGroupQuantifierSet__init_($q_0, $q, $term, $last, (-536870849), $quant);
                    $term.$setNext($q_0);
                    return $q_0;
                case -536870870:
                case -536870869:
                    jur_Lexer_next($q);
                    if ($term.$getType4() != (-2147483602)) {
                        $q = new jur_GroupQuantifierSet;
                        jur_QuantifierSet__init_($q, $term, $last, $quant);
                    } else if (jur_Pattern_hasFlag($this, 32)) {
                        $q = new jur_DotAllQuantifierSet;
                        jur_QuantifierSet__init_($q, $term, $last, $quant);
                    } else {
                        $q = new jur_DotQuantifierSet;
                        $leaf = jur_AbstractLineTerminator_getInstance($this.$flags1);
                        jur_QuantifierSet__init_($q, $term, $last, $quant);
                        $q.$lt = $leaf;
                    }
                    $term.$setNext($q);
                    return $q;
                case -536870849:
                    jur_Lexer_next($q);
                    $q = new jur_AltGroupQuantifierSet;
                    jur_QuantifierSet__init_($q, $term, $last, (-536870849));
                    $term.$setNext($last);
                    return $q;
                case -536870789:
                    $q_0 = new jur_CompositeGroupQuantifierSet;
                    $q = jur_Lexer_nextSpecial($q);
                    $quant = $this.$compCount + 1 | 0;
                    $this.$compCount = $quant;
                    jur_CompositeGroupQuantifierSet__init_($q_0, $q, $term, $last, (-536870849), $quant);
                    $term.$setNext($q_0);
                    return $q_0;
                default:
            }
            return $term;
        }
        $leaf = null;
        if ($term !== null)
            $leaf = $term;
        switch ($quant) {
            case -2147483606:
            case -2147483605:
                jur_Lexer_next($q);
                $q = new jur_PossessiveQuantifierSet;
                jur_LeafQuantifierSet__init_($q, $leaf, $last, $quant);
                $leaf.$next4 = $q;
                return $q;
            case -2147483585:
                jur_Lexer_next($q);
                $term = new jur_PossessiveAltQuantifierSet;
                jur_LeafQuantifierSet__init_($term, $leaf, $last, (-2147483585));
                return $term;
            case -2147483525:
                $term = new jur_PossessiveCompositeQuantifierSet;
                jur_CompositeQuantifierSet__init_($term, jur_Lexer_nextSpecial($q), $leaf, $last, (-2147483525));
                return $term;
            case -1073741782:
            case -1073741781:
                jur_Lexer_next($q);
                $q = new jur_ReluctantQuantifierSet;
                jur_LeafQuantifierSet__init_($q, $leaf, $last, $quant);
                $leaf.$next4 = $q;
                return $q;
            case -1073741761:
                jur_Lexer_next($q);
                $term = new jur_ReluctantAltQuantifierSet;
                jur_LeafQuantifierSet__init_($term, $leaf, $last, (-1073741761));
                return $term;
            case -1073741701:
                $term = new jur_ReluctantCompositeQuantifierSet;
                jur_CompositeQuantifierSet__init_($term, jur_Lexer_nextSpecial($q), $leaf, $last, (-1073741701));
                return $term;
            case -536870870:
            case -536870869:
                jur_Lexer_next($q);
                $q = jur_LeafQuantifierSet__init_0($leaf, $last, $quant);
                $leaf.$next4 = $q;
                return $q;
            case -536870849:
                jur_Lexer_next($q);
                $term = new jur_AltQuantifierSet;
                jur_LeafQuantifierSet__init_($term, $leaf, $last, (-536870849));
                return $term;
            case -536870789:
                return jur_CompositeQuantifierSet__init_0(jur_Lexer_nextSpecial($q), $leaf, $last, (-536870789));
            default:
        }
        return $term;
    }
    function jur_Pattern_processTerminal($this, $last) {
        var $term, var$3, var$4, $ch, $newFlags, $number, $negative, $cc;
        $term = null;
        var$3 = $last instanceof jur_FinalSet;
        while (true) {
            a: {
                var$4 = $this.$lexemes;
                $ch = var$4.$ch;
                if (($ch & (-2147418113)) == (-2147483608)) {
                    jur_Lexer_next(var$4);
                    $newFlags = ($ch & 16711680) >> 16;
                    $ch = $ch & (-16711681);
                    if ($ch == (-16777176))
                        $this.$flags1 = $newFlags;
                    else {
                        if ($ch != (-1073741784))
                            $newFlags = $this.$flags1;
                        $term = jur_Pattern_processExpression($this, $ch, $newFlags, $last);
                        var$4 = $this.$lexemes;
                        if (var$4.$ch != (-536870871))
                            $rt_throw(jur_PatternSyntaxException__init_0($rt_s(2), var$4.$orig, var$4.$curToc));
                        jur_Lexer_next(var$4);
                    }
                } else {
                    b: {
                        c: {
                            switch ($ch) {
                                case -2147483599:
                                case -2147483598:
                                case -2147483597:
                                case -2147483596:
                                case -2147483595:
                                case -2147483594:
                                case -2147483593:
                                case -2147483592:
                                case -2147483591:
                                    break c;
                                case -2147483583:
                                    break;
                                case -2147483582:
                                    jur_Lexer_next(var$4);
                                    $term = jur_WordBoundary__init_(0);
                                    break a;
                                case -2147483577:
                                    jur_Lexer_next(var$4);
                                    $term = new jur_PreviousMatch;
                                    jur_AbstractSet__init_($term);
                                    break a;
                                case -2147483558:
                                    jur_Lexer_next(var$4);
                                    $term = new jur_EOLSet;
                                    $number = $this.$consCount + 1 | 0;
                                    $this.$consCount = $number;
                                    jur_EOLSet__init_($term, $number);
                                    break a;
                                case -2147483550:
                                    jur_Lexer_next(var$4);
                                    $term = jur_WordBoundary__init_(1);
                                    break a;
                                case -2147483526:
                                    jur_Lexer_next(var$4);
                                    $term = new jur_EOISet;
                                    jur_AbstractSet__init_($term);
                                    break a;
                                case -536870876:
                                    jur_Lexer_next(var$4);
                                    $this.$consCount = $this.$consCount + 1 | 0;
                                    if (jur_Pattern_hasFlag($this, 8)) {
                                        if (jur_Pattern_hasFlag($this, 1)) {
                                            $term = jur_UMultiLineEOLSet__init_($this.$consCount);
                                            break a;
                                        }
                                        $term = jur_MultiLineEOLSet__init_($this.$consCount);
                                        break a;
                                    }
                                    if (jur_Pattern_hasFlag($this, 1)) {
                                        $term = jur_UEOLSet__init_($this.$consCount);
                                        break a;
                                    }
                                    $term = jur_EOLSet__init_0($this.$consCount);
                                    break a;
                                case -536870866:
                                    jur_Lexer_next(var$4);
                                    if (jur_Pattern_hasFlag($this, 32)) {
                                        $term = jur_DotAllSet__init_();
                                        break a;
                                    }
                                    $term = jur_DotSet__init_(jur_AbstractLineTerminator_getInstance($this.$flags1));
                                    break a;
                                case -536870821:
                                    jur_Lexer_next(var$4);
                                    $negative = 0;
                                    $term = $this.$lexemes;
                                    if ($term.$ch == (-536870818)) {
                                        $negative = 1;
                                        jur_Lexer_next($term);
                                    }
                                    $term = jur_Pattern_processRangeSet($this, jur_Pattern_processRangeExpression($this, $negative));
                                    $term.$setNext($last);
                                    var$4 = $this.$lexemes;
                                    if (var$4.$ch != (-536870819))
                                        $rt_throw(jur_PatternSyntaxException__init_0($rt_s(2), var$4.$orig, var$4.$curToc));
                                    jur_Lexer_setMode(var$4, 1);
                                    jur_Lexer_next($this.$lexemes);
                                    break a;
                                case -536870818:
                                    jur_Lexer_next(var$4);
                                    $this.$consCount = $this.$consCount + 1 | 0;
                                    if (!jur_Pattern_hasFlag($this, 8)) {
                                        $term = new jur_SOLSet;
                                        jur_AbstractSet__init_($term);
                                        break a;
                                    }
                                    $term = new jur_MultiLineSOLSet;
                                    var$4 = jur_AbstractLineTerminator_getInstance($this.$flags1);
                                    jur_AbstractSet__init_($term);
                                    $term.$lt0 = var$4;
                                    break a;
                                case 0:
                                    $cc = var$4.$curST;
                                    if ($cc !== null)
                                        $term = jur_Pattern_processRangeSet($this, $cc);
                                    else {
                                        if (jur_Lexer_isEmpty(var$4)) {
                                            $term = jur_EmptySet__init_($last);
                                            break a;
                                        }
                                        $term = jur_CharSet__init_($ch & 65535);
                                    }
                                    jur_Lexer_next($this.$lexemes);
                                    break a;
                                default:
                                    break b;
                            }
                            jur_Lexer_next(var$4);
                            $term = new jur_SOLSet;
                            jur_AbstractSet__init_($term);
                            break a;
                        }
                        $number = ($ch & 2147483647) - 48 | 0;
                        if ($this.$globalGroupIndex < $number)
                            $rt_throw(jur_PatternSyntaxException__init_0($rt_s(2), jur_Lexer_toString(var$4), jur_Lexer_getIndex($this.$lexemes)));
                        jur_Lexer_next(var$4);
                        $this.$consCount = $this.$consCount + 1 | 0;
                        $term = !jur_Pattern_hasFlag($this, 2) ? jur_BackReferenceSet__init_($number, $this.$consCount) : jur_Pattern_hasFlag($this, 64) ? jur_UCIBackReferenceSet__init_($number, $this.$consCount) : jur_CIBackReferenceSet__init_($number, $this.$consCount);
                        $this.$backRefs.data[$number].$isBackReferenced = 1;
                        $this.$needsBackRefReplacement = 1;
                        break a;
                    }
                    if ($ch >= 0 && !jur_Lexer_isSpecial(var$4)) {
                        $term = jur_Pattern_processCharSet($this, $ch);
                        jur_Lexer_next($this.$lexemes);
                    } else if ($ch == (-536870788))
                        $term = jur_EmptySet__init_($last);
                    else {
                        if ($ch != (-536870871)) {
                            $last = new jur_PatternSyntaxException;
                            $term = !jur_Lexer_isSpecial($this.$lexemes) ? jl_Character_toString($ch & 65535) : $this.$lexemes.$curST.$toString();
                            var$4 = $this.$lexemes;
                            jur_PatternSyntaxException__init_($last, $term, var$4.$orig, var$4.$curToc);
                            $rt_throw($last);
                        }
                        if (var$3) {
                            $last = new jur_PatternSyntaxException;
                            var$4 = $this.$lexemes;
                            jur_PatternSyntaxException__init_($last, $rt_s(2), var$4.$orig, var$4.$curToc);
                            $rt_throw($last);
                        }
                        $term = jur_EmptySet__init_($last);
                    }
                }
            }
            if ($ch != (-16777176))
                break;
        }
        return $term;
    }
    function jur_Pattern_processRangeExpression($this, $alt) {
        var $res, $buffer, $intersection, $notClosed, $firstInClass, $cs, $cur, $negative, $$je;
        $res = jur_CharClass__init_(jur_Pattern_hasFlag($this, 2), jur_Pattern_hasFlag($this, 64));
        jur_AbstractCharClass_setNegative($res, $alt);
        $buffer = (-1);
        $intersection = 0;
        $notClosed = 0;
        $firstInClass = 1;
        a: {
            b: {
                c: while (true) {
                    if (jur_Lexer_isEmpty($this.$lexemes))
                        break a;
                    $cs = $this.$lexemes;
                    $alt = $cs.$ch;
                    $notClosed = $alt == (-536870819) && !$firstInClass ? 0 : 1;
                    if (!$notClosed)
                        break a;
                    d: {
                        switch ($alt) {
                            case -536870874:
                                if ($buffer >= 0)
                                    jur_CharClass_add($res, $buffer);
                                $buffer = jur_Lexer_next($this.$lexemes);
                                $cs = $this.$lexemes;
                                if ($cs.$ch != (-536870874)) {
                                    $buffer = 38;
                                    break d;
                                }
                                if ($cs.$lookAhead == (-536870821)) {
                                    jur_Lexer_next($cs);
                                    $intersection = 1;
                                    $buffer = (-1);
                                    break d;
                                }
                                jur_Lexer_next($cs);
                                if ($firstInClass) {
                                    $res = jur_Pattern_processRangeExpression($this, 0);
                                    break d;
                                }
                                if ($this.$lexemes.$ch == (-536870819))
                                    break d;
                                jur_CharClass_intersection($res, jur_Pattern_processRangeExpression($this, 0));
                                break d;
                            case -536870867:
                                if (!$firstInClass) {
                                    $alt = $cs.$lookAhead;
                                    if ($alt != (-536870819) && $alt != (-536870821) && $buffer >= 0) {
                                        jur_Lexer_next($cs);
                                        $cs = $this.$lexemes;
                                        $cur = $cs.$ch;
                                        if (jur_Lexer_isSpecial($cs))
                                            break c;
                                        if ($cur < 0) {
                                            $negative = $this.$lexemes.$lookAhead;
                                            if ($negative != (-536870819) && $negative != (-536870821) && $buffer >= 0)
                                                break c;
                                        }
                                        e: {
                                            try {
                                                if (jur_Lexer_isLetter0($cur))
                                                    break e;
                                                $cur = $cur & 65535;
                                                break e;
                                            } catch ($$e) {
                                                $$je = $rt_wrapException($$e);
                                                if ($$je instanceof jl_Exception) {
                                                    break b;
                                                } else {
                                                    throw $$e;
                                                }
                                            }
                                        }
                                        try {
                                            jur_CharClass_add0($res, $buffer, $cur);
                                        } catch ($$e) {
                                            $$je = $rt_wrapException($$e);
                                            if ($$je instanceof jl_Exception) {
                                                break b;
                                            } else {
                                                throw $$e;
                                            }
                                        }
                                        jur_Lexer_next($this.$lexemes);
                                        $buffer = (-1);
                                        break d;
                                    }
                                }
                                if ($buffer >= 0)
                                    jur_CharClass_add($res, $buffer);
                                $buffer = 45;
                                jur_Lexer_next($this.$lexemes);
                                break d;
                            case -536870821:
                                if ($buffer >= 0) {
                                    jur_CharClass_add($res, $buffer);
                                    $buffer = (-1);
                                }
                                jur_Lexer_next($this.$lexemes);
                                $negative = 0;
                                $cs = $this.$lexemes;
                                if ($cs.$ch == (-536870818)) {
                                    jur_Lexer_next($cs);
                                    $negative = 1;
                                }
                                if (!$intersection)
                                    jur_CharClass_union($res, jur_Pattern_processRangeExpression($this, $negative));
                                else
                                    jur_CharClass_intersection($res, jur_Pattern_processRangeExpression($this, $negative));
                                $intersection = 0;
                                jur_Lexer_next($this.$lexemes);
                                break d;
                            case -536870819:
                                if ($buffer >= 0)
                                    jur_CharClass_add($res, $buffer);
                                $buffer = 93;
                                jur_Lexer_next($this.$lexemes);
                                break d;
                            case -536870818:
                                if ($buffer >= 0)
                                    jur_CharClass_add($res, $buffer);
                                $buffer = 94;
                                jur_Lexer_next($this.$lexemes);
                                break d;
                            case 0:
                                if ($buffer >= 0)
                                    jur_CharClass_add($res, $buffer);
                                $cs = $this.$lexemes.$curST;
                                if ($cs === null)
                                    $buffer = 0;
                                else {
                                    jur_CharClass_add1($res, $cs);
                                    $buffer = (-1);
                                }
                                jur_Lexer_next($this.$lexemes);
                                break d;
                            default:
                        }
                        if ($buffer >= 0)
                            jur_CharClass_add($res, $buffer);
                        $buffer = jur_Lexer_next($this.$lexemes);
                    }
                    $firstInClass = 0;
                }
                $rt_throw(jur_PatternSyntaxException__init_0($rt_s(2), jur_Pattern_pattern($this), $this.$lexemes.$curToc));
            }
            $rt_throw(jur_PatternSyntaxException__init_0($rt_s(2), jur_Pattern_pattern($this), $this.$lexemes.$curToc));
        }
        if (!$notClosed) {
            if ($buffer >= 0)
                jur_CharClass_add($res, $buffer);
            return $res;
        }
        $rt_throw(jur_PatternSyntaxException__init_0($rt_s(2), jur_Pattern_pattern($this), $this.$lexemes.$curToc - 1 | 0));
    }
    function jur_Pattern_processCharSet($this, $ch) {
        var $isSupplCodePoint, var$3, var$4;
        $isSupplCodePoint = jl_Character_isSupplementaryCodePoint($ch);
        if (jur_Pattern_hasFlag($this, 2)) {
            a: {
                if (!($ch >= 97 && $ch <= 122)) {
                    if ($ch < 65)
                        break a;
                    if ($ch > 90)
                        break a;
                }
                return jur_CICharSet__init_($ch & 65535);
            }
            if (jur_Pattern_hasFlag($this, 64) && $ch > 128) {
                if ($isSupplCodePoint) {
                    var$3 = new jur_UCISupplCharSet;
                    jur_LeafSet__init_(var$3);
                    var$3.$charCount = 2;
                    var$3.$ch0 = jl_Character_toLowerCase0(jl_Character_toUpperCase($ch));
                    return var$3;
                }
                if (jur_Lexer_isLowSurrogate0($ch))
                    return jur_LowSurrogateCharSet__init_($ch & 65535);
                if (!jur_Lexer_isHighSurrogate0($ch))
                    return jur_UCICharSet__init_($ch & 65535);
                return jur_HighSurrogateCharSet__init_($ch & 65535);
            }
        }
        if (!$isSupplCodePoint) {
            if (jur_Lexer_isLowSurrogate0($ch))
                return jur_LowSurrogateCharSet__init_($ch & 65535);
            if (!jur_Lexer_isHighSurrogate0($ch))
                return jur_CharSet__init_($ch & 65535);
            return jur_HighSurrogateCharSet__init_($ch & 65535);
        }
        var$3 = new jur_SupplCharSet;
        jur_LeafSet__init_(var$3);
        var$3.$charCount = 2;
        var$3.$ch1 = $ch;
        var$4 = (jl_Character_toChars($ch)).data;
        var$3.$high = var$4[0];
        var$3.$low = var$4[1];
        return var$3;
    }
    function jur_Pattern_processRangeSet($this, $charClass) {
        var $surrogates, $lowHighSurrRangeSet, var$4;
        if (!jur_AbstractCharClass_hasLowHighSurrogates($charClass)) {
            if (!$charClass.$mayContainSupplCodepoints) {
                if ($charClass.$hasUCI())
                    return jur_UCIRangeSet__init_($charClass);
                return jur_RangeSet__init_($charClass);
            }
            if (!$charClass.$hasUCI())
                return jur_SupplRangeSet__init_($charClass);
            $surrogates = new jur_UCISupplRangeSet;
            jur_SupplRangeSet__init_0($surrogates, $charClass);
            return $surrogates;
        }
        $surrogates = jur_AbstractCharClass_getSurrogates($charClass);
        $lowHighSurrRangeSet = new jur_LowHighSurrogateRangeSet;
        jur_AbstractSet__init_($lowHighSurrRangeSet);
        $lowHighSurrRangeSet.$surrChars = $surrogates;
        $lowHighSurrRangeSet.$alt = $surrogates.$alt0;
        if (!$charClass.$mayContainSupplCodepoints) {
            if ($charClass.$hasUCI())
                return jur_CompositeRangeSet__init_(jur_UCIRangeSet__init_(jur_AbstractCharClass_getWithoutSurrogates($charClass)), $lowHighSurrRangeSet);
            return jur_CompositeRangeSet__init_(jur_RangeSet__init_(jur_AbstractCharClass_getWithoutSurrogates($charClass)), $lowHighSurrRangeSet);
        }
        if (!$charClass.$hasUCI())
            return jur_CompositeRangeSet__init_(jur_SupplRangeSet__init_(jur_AbstractCharClass_getWithoutSurrogates($charClass)), $lowHighSurrRangeSet);
        $surrogates = new jur_CompositeRangeSet;
        var$4 = new jur_UCISupplRangeSet;
        jur_SupplRangeSet__init_0(var$4, jur_AbstractCharClass_getWithoutSurrogates($charClass));
        jur_CompositeRangeSet__init_0($surrogates, var$4, $lowHighSurrRangeSet);
        return $surrogates;
    }
    function jur_Pattern_getSupplement($ch) {
        if ($ch >= 97 && $ch <= 122)
            $ch = ($ch - 32 | 0) & 65535;
        else if ($ch >= 65 && $ch <= 90)
            $ch = ($ch + 32 | 0) & 65535;
        return $ch;
    }
    function jur_Pattern_hasFlag($this, $flag) {
        return ($this.$flags1 & $flag) != $flag ? 0 : 1;
    }
    function tj_CommentStmt() {
        tj_Statements.call(this);
        this.$comment = null;
    }
    function tj_CommentStmt__init_(var_0, var_1) {
        var var_2 = new tj_CommentStmt();
        tj_CommentStmt__init_0(var_2, var_0, var_1);
        return var_2;
    }
    function tj_CommentStmt__init_0($this, $line, $comment) {
        tj_Statements__init_($this);
        $this.$line = $line;
        $this.$comment = $comment;
        tj_Statements$StmtType_$callClinit();
        $this.$type1 = tj_Statements$StmtType_COMMENT;
    }
    function tj_CommentStmt_getLine($this) {
        return $this.$line;
    }
    function tj_ImportStmt() {
        tj_Statements.call(this);
        this.$importName = null;
    }
    function tj_ImportStmt__init_(var_0, var_1) {
        var var_2 = new tj_ImportStmt();
        tj_ImportStmt__init_0(var_2, var_0, var_1);
        return var_2;
    }
    function tj_ImportStmt__init_0($this, $line, $importName) {
        tj_Statements__init_($this);
        $this.$line = $line;
        $this.$importName = $importName;
        tj_Statements$StmtType_$callClinit();
        $this.$type1 = tj_Statements$StmtType_IMPORT;
    }
    function tj_ImportStmt_getLine($this) {
        return $this.$line;
    }
    var tj_Error = $rt_classWithoutFields();
    function tj_Error_UnexpectedStmt($stmt, $lineNumber) {
        var var$3, var$4, $messageArray, var$6, var$7;
        var$3 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$3);
        var$4 = jl_StringBuilder_append0(jl_StringBuilder_append(var$3, $rt_s(565)), $lineNumber);
        jl_AbstractStringBuilder_append(var$4, 58);
        jl_StringBuilder_append(var$4, $stmt);
        var$3 = jl_AbstractStringBuilder_toString(var$3);
        $messageArray = $rt_createArray(jl_String, 2);
        var$6 = $messageArray.data;
        var$6[0] = var$3;
        var$3 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$3);
        jl_StringBuilder_append0(var$3, $lineNumber);
        var$6[1] = jl_AbstractStringBuilder_toString(var$3);
        tj_Error_errorLog$js_body$_1(otji_JS_wrap($messageArray));
        var$3 = new jl_RuntimeException;
        var$4 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$4);
        var$7 = jl_StringBuilder_append0(jl_StringBuilder_append(var$4, $rt_s(565)), $lineNumber);
        jl_AbstractStringBuilder_append(var$7, 58);
        jl_StringBuilder_append(var$7, $stmt);
        jl_Throwable__init_(var$3, jl_AbstractStringBuilder_toString(var$4));
        $rt_throw(var$3);
    }
    function tj_Error_TypeMismatch($expected, $got, $lineNumber) {
        var var$4, var$5, $messageArray, var$7;
        var$4 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$4);
        jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(var$4, $rt_s(566)), $lineNumber), $rt_s(567)), $expected), $rt_s(568)), $got);
        var$5 = jl_AbstractStringBuilder_toString(var$4);
        $messageArray = $rt_createArray(jl_String, 2);
        var$7 = $messageArray.data;
        var$7[0] = var$5;
        var$5 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$5);
        jl_StringBuilder_append0(var$5, $lineNumber);
        var$7[1] = jl_AbstractStringBuilder_toString(var$5);
        tj_Error_errorLog$js_body$_1(otji_JS_wrap($messageArray));
        var$4 = new jl_RuntimeException;
        var$5 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$5);
        jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(var$5, $rt_s(566)), $lineNumber), $rt_s(567)), $expected), $rt_s(568)), $got);
        jl_Throwable__init_(var$4, jl_AbstractStringBuilder_toString(var$5));
        $rt_throw(var$4);
    }
    function tj_Error_VariableAlreadyExists($name, $lineNumber) {
        var var$3, $messageArray, var$5, var$6;
        var$3 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$3);
        jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$3, $rt_s(569)), $name), $rt_s(570));
        var$3 = jl_AbstractStringBuilder_toString(var$3);
        $messageArray = $rt_createArray(jl_String, 2);
        var$5 = $messageArray.data;
        var$5[0] = var$3;
        var$3 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$3);
        jl_StringBuilder_append0(var$3, $lineNumber);
        var$5[1] = jl_AbstractStringBuilder_toString(var$3);
        tj_Error_errorLog$js_body$_1(otji_JS_wrap($messageArray));
        var$3 = new jl_RuntimeException;
        var$6 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$6);
        jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$6, $rt_s(571)), $name), $rt_s(183));
        jl_Throwable__init_(var$3, jl_AbstractStringBuilder_toString(var$6));
        $rt_throw(var$3);
    }
    function tj_Error_UnableToParse($value, $lineNumber, $goal) {
        var var$4, var$5, $messageArray, var$7;
        var$4 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$4);
        jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$4, $rt_s(572)), $value), $rt_s(573)), $goal), $rt_s(574)), $lineNumber);
        var$5 = jl_AbstractStringBuilder_toString(var$4);
        $messageArray = $rt_createArray(jl_String, 2);
        var$7 = $messageArray.data;
        var$7[0] = var$5;
        var$5 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$5);
        jl_StringBuilder_append0(var$5, $lineNumber);
        var$7[1] = jl_AbstractStringBuilder_toString(var$5);
        tj_Error_errorLog$js_body$_1(otji_JS_wrap($messageArray));
        var$4 = new jl_RuntimeException;
        var$5 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$5);
        jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$5, $rt_s(572)), $value), $rt_s(573)), $goal), $rt_s(574)), $lineNumber);
        jl_Throwable__init_(var$4, jl_AbstractStringBuilder_toString(var$5));
        $rt_throw(var$4);
    }
    function tj_Error_VariableNotDeclared($name, $lineNumber) {
        var var$3, $messageArray, var$5, var$6;
        var$3 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$3);
        jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$3, $rt_s(569)), $name), $rt_s(575)), $lineNumber);
        var$3 = jl_AbstractStringBuilder_toString(var$3);
        $messageArray = $rt_createArray(jl_String, 2);
        var$5 = $messageArray.data;
        var$5[0] = var$3;
        var$3 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$3);
        jl_StringBuilder_append0(var$3, $lineNumber);
        var$5[1] = jl_AbstractStringBuilder_toString(var$3);
        tj_Error_errorLog$js_body$_1(otji_JS_wrap($messageArray));
        var$3 = new jl_RuntimeException;
        var$6 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$6);
        jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$6, $rt_s(571)), $name), $rt_s(576)), $lineNumber);
        jl_Throwable__init_(var$3, jl_AbstractStringBuilder_toString(var$6));
        $rt_throw(var$3);
    }
    function tj_Error_FunctionNotDeclared($name, $lineNumber) {
        var var$3, $messageArray, var$5, var$6;
        var$3 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$3);
        jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$3, $rt_s(182)), $name), $rt_s(576)), $lineNumber);
        var$3 = jl_AbstractStringBuilder_toString(var$3);
        $messageArray = $rt_createArray(jl_String, 2);
        var$5 = $messageArray.data;
        var$5[0] = var$3;
        var$3 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$3);
        jl_StringBuilder_append0(var$3, $lineNumber);
        var$5[1] = jl_AbstractStringBuilder_toString(var$3);
        tj_Error_errorLog$js_body$_1(otji_JS_wrap($messageArray));
        var$3 = new jl_RuntimeException;
        var$6 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$6);
        jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$6, $rt_s(182)), $name), $rt_s(576)), $lineNumber);
        jl_Throwable__init_(var$3, jl_AbstractStringBuilder_toString(var$6));
        $rt_throw(var$3);
    }
    function tj_Error_InvalidVariableName($name, $lineNumber) {
        var var$3, $messageArray, var$5, var$6;
        var$3 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$3);
        jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(var$3, $rt_s(577)), $lineNumber), $rt_s(10)), $name);
        var$3 = jl_AbstractStringBuilder_toString(var$3);
        $messageArray = $rt_createArray(jl_String, 2);
        var$5 = $messageArray.data;
        var$5[0] = var$3;
        var$3 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$3);
        jl_StringBuilder_append0(var$3, $lineNumber);
        var$5[1] = jl_AbstractStringBuilder_toString(var$3);
        tj_Error_errorLog$js_body$_1(otji_JS_wrap($messageArray));
        var$3 = jl_System_err();
        var$6 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$6);
        jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(var$6, $rt_s(578)), $lineNumber), $rt_s(10)), $name);
        ji_PrintStream_println(var$3, jl_AbstractStringBuilder_toString(var$6));
    }
    function tj_Error_InvalidFunctionName($name, $lineNumber) {
        var var$3, $messageArray, var$5, var$6;
        var$3 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$3);
        jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(var$3, $rt_s(579)), $lineNumber), $rt_s(10)), $name);
        var$3 = jl_AbstractStringBuilder_toString(var$3);
        $messageArray = $rt_createArray(jl_String, 2);
        var$5 = $messageArray.data;
        var$5[0] = var$3;
        var$3 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$3);
        jl_StringBuilder_append0(var$3, $lineNumber);
        var$5[1] = jl_AbstractStringBuilder_toString(var$3);
        tj_Error_errorLog$js_body$_1(otji_JS_wrap($messageArray));
        var$3 = jl_System_err();
        var$6 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$6);
        jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(var$6, $rt_s(580)), $lineNumber), $rt_s(10)), $name);
        ji_PrintStream_println(var$3, jl_AbstractStringBuilder_toString(var$6));
    }
    function tj_Error_InvalidFunctionCall($name, $lineNumber, $expected, $got) {
        var var$5, $messageArray, var$7, var$8;
        var$5 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$5);
        jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(var$5, $rt_s(581)), $lineNumber), $rt_s(10)), $name), $rt_s(567)), $expected), $rt_s(568)), $got);
        var$5 = jl_AbstractStringBuilder_toString(var$5);
        $messageArray = $rt_createArray(jl_String, 2);
        var$7 = $messageArray.data;
        var$7[0] = var$5;
        var$5 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$5);
        jl_StringBuilder_append0(var$5, $lineNumber);
        var$7[1] = jl_AbstractStringBuilder_toString(var$5);
        tj_Error_errorLog$js_body$_1(otji_JS_wrap($messageArray));
        var$8 = new jl_RuntimeException;
        var$5 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$5);
        jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(var$5, $rt_s(581)), $lineNumber), $rt_s(10)), $name), $rt_s(567)), $expected), $rt_s(568)), $got);
        jl_Throwable__init_(var$8, jl_AbstractStringBuilder_toString(var$5));
        $rt_throw(var$8);
    }
    function tj_Error_CantPerformMutation($type, $lineNumber) {
        var var$3, $messageArray, var$5, var$6;
        var$3 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$3);
        jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$3, $rt_s(582)), $type), $rt_s(574)), $lineNumber);
        var$3 = jl_AbstractStringBuilder_toString(var$3);
        $messageArray = $rt_createArray(jl_String, 2);
        var$5 = $messageArray.data;
        var$5[0] = var$3;
        var$3 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$3);
        jl_StringBuilder_append0(var$3, $lineNumber);
        var$5[1] = jl_AbstractStringBuilder_toString(var$3);
        tj_Error_errorLog$js_body$_1(otji_JS_wrap($messageArray));
        var$3 = new jl_RuntimeException;
        var$6 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$6);
        jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$6, $rt_s(582)), $type), $rt_s(574)), $lineNumber);
        jl_Throwable__init_(var$3, jl_AbstractStringBuilder_toString(var$6));
        $rt_throw(var$3);
    }
    function tj_Error_ArgumentLengthMismatch($name, $lineNumber, $expected, $got) {
        var var$5, $messageArray, var$7, var$8;
        var$5 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$5);
        jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(var$5, $rt_s(583)), $lineNumber), $rt_s(10)), $name), $rt_s(567)), $expected), $rt_s(568)), $got);
        var$5 = jl_AbstractStringBuilder_toString(var$5);
        $messageArray = $rt_createArray(jl_String, 2);
        var$7 = $messageArray.data;
        var$7[0] = var$5;
        var$5 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$5);
        jl_StringBuilder_append0(var$5, $lineNumber);
        var$7[1] = jl_AbstractStringBuilder_toString(var$5);
        tj_Error_errorLog$js_body$_1(otji_JS_wrap($messageArray));
        var$8 = new jl_RuntimeException;
        var$5 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$5);
        jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(var$5, $rt_s(583)), $lineNumber), $rt_s(10)), $name), $rt_s(567)), $expected), $rt_s(568)), $got);
        jl_Throwable__init_(var$8, jl_AbstractStringBuilder_toString(var$5));
        $rt_throw(var$8);
    }
    function tj_Error_ArgumentTypeMismatch($name, $lineNumber, $expected, $got) {
        var var$5, $messageArray, var$7, var$8;
        var$5 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$5);
        jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(var$5, $rt_s(584)), $lineNumber), $rt_s(10)), $name), $rt_s(567)), $expected), $rt_s(568)), $got);
        var$5 = jl_AbstractStringBuilder_toString(var$5);
        $messageArray = $rt_createArray(jl_String, 2);
        var$7 = $messageArray.data;
        var$7[0] = var$5;
        var$5 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$5);
        jl_StringBuilder_append0(var$5, $lineNumber);
        var$7[1] = jl_AbstractStringBuilder_toString(var$5);
        tj_Error_errorLog$js_body$_1(otji_JS_wrap($messageArray));
        var$8 = new jl_RuntimeException;
        var$5 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$5);
        jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(var$5, $rt_s(584)), $lineNumber), $rt_s(10)), $name), $rt_s(567)), $expected), $rt_s(568)), $got);
        jl_Throwable__init_(var$8, jl_AbstractStringBuilder_toString(var$5));
        $rt_throw(var$8);
    }
    function tj_Error_FunctionNotGlobal($name, $lineNumber) {
        var var$3, $messageArray, var$5, var$6;
        var$3 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$3);
        jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$3, $rt_s(182)), $name), $rt_s(585)), $lineNumber);
        var$3 = jl_AbstractStringBuilder_toString(var$3);
        $messageArray = $rt_createArray(jl_String, 2);
        var$5 = $messageArray.data;
        var$5[0] = var$3;
        var$3 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$3);
        jl_StringBuilder_append0(var$3, $lineNumber);
        var$5[1] = jl_AbstractStringBuilder_toString(var$3);
        tj_Error_errorLog$js_body$_1(otji_JS_wrap($messageArray));
        var$3 = new jl_RuntimeException;
        var$6 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$6);
        jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$6, $rt_s(182)), $name), $rt_s(585)), $lineNumber);
        jl_Throwable__init_(var$3, jl_AbstractStringBuilder_toString(var$6));
        $rt_throw(var$3);
    }
    function tj_Error_CantPerformOperation($operation, $type, $lineNumber) {
        var var$4, $messageArray, var$6, var$7;
        var$4 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$4);
        jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$4, $rt_s(586)), $operation), $rt_s(587)), $type), $rt_s(574)), $lineNumber);
        var$4 = jl_AbstractStringBuilder_toString(var$4);
        $messageArray = $rt_createArray(jl_String, 2);
        var$6 = $messageArray.data;
        var$6[0] = var$4;
        var$4 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$4);
        jl_StringBuilder_append0(var$4, $lineNumber);
        var$6[1] = jl_AbstractStringBuilder_toString(var$4);
        tj_Error_errorLog$js_body$_1(otji_JS_wrap($messageArray));
        var$7 = new jl_RuntimeException;
        var$4 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$4);
        jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$4, $rt_s(586)), $operation), $rt_s(587)), $type), $rt_s(574)), $lineNumber);
        jl_Throwable__init_(var$7, jl_AbstractStringBuilder_toString(var$4));
        $rt_throw(var$7);
    }
    function tj_Error_IndexOutOfBounds($index, $lineNumber, $arrayLength) {
        var var$4, $messageArray, var$6, var$7, var$8;
        $arrayLength = $arrayLength - 1 | 0;
        var$4 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$4);
        jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(var$4, $rt_s(588)), $lineNumber), $rt_s(589)), $index), $rt_s(590)), $arrayLength);
        var$4 = jl_AbstractStringBuilder_toString(var$4);
        $messageArray = $rt_createArray(jl_String, 2);
        var$6 = $messageArray.data;
        var$6[0] = var$4;
        var$4 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$4);
        jl_StringBuilder_append0(var$4, $lineNumber);
        var$6[1] = jl_AbstractStringBuilder_toString(var$4);
        tj_Error_errorLog$js_body$_1(otji_JS_wrap($messageArray));
        var$7 = new jl_RuntimeException;
        var$8 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$8);
        jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(var$8, $rt_s(588)), $lineNumber), $rt_s(589)), $index), $rt_s(590)), $arrayLength);
        jl_Throwable__init_(var$7, jl_AbstractStringBuilder_toString(var$8));
        $rt_throw(var$7);
    }
    function tj_Error_UnclosedParenthesis($lineNumber, $columnNumber) {
        var var$3, $messageArray, var$5, var$6;
        var$3 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$3);
        jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(var$3, $rt_s(591)), $lineNumber), $rt_s(544)), $columnNumber);
        var$3 = jl_AbstractStringBuilder_toString(var$3);
        $messageArray = $rt_createArray(jl_String, 2);
        var$5 = $messageArray.data;
        var$5[0] = var$3;
        var$3 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$3);
        jl_StringBuilder_append0(var$3, $lineNumber);
        var$5[1] = jl_AbstractStringBuilder_toString(var$3);
        tj_Error_errorLog$js_body$_1(otji_JS_wrap($messageArray));
        var$3 = new jl_RuntimeException;
        var$6 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$6);
        jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(var$6, $rt_s(591)), $lineNumber), $rt_s(544)), $columnNumber);
        jl_Throwable__init_(var$3, jl_AbstractStringBuilder_toString(var$6));
        $rt_throw(var$3);
    }
    function tj_Error_MissingPeriod($lineNumber) {
        var var$2, $messageArray, var$4, var$5;
        var$2 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$2);
        jl_StringBuilder_append0(jl_StringBuilder_append(var$2, $rt_s(592)), $lineNumber);
        var$2 = jl_AbstractStringBuilder_toString(var$2);
        $messageArray = $rt_createArray(jl_String, 2);
        var$4 = $messageArray.data;
        var$4[0] = var$2;
        var$2 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$2);
        jl_StringBuilder_append0(var$2, $lineNumber);
        var$4[1] = jl_AbstractStringBuilder_toString(var$2);
        tj_Error_errorLog$js_body$_1(otji_JS_wrap($messageArray));
        var$2 = new jl_RuntimeException;
        var$5 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$5);
        jl_StringBuilder_append0(jl_StringBuilder_append(var$5, $rt_s(592)), $lineNumber);
        jl_Throwable__init_(var$2, jl_AbstractStringBuilder_toString(var$5));
        $rt_throw(var$2);
    }
    function tj_Error_UnclosedBracket($lineNumber, $columnNumber) {
        var var$3, $messageArray, var$5, var$6;
        var$3 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$3);
        jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(var$3, $rt_s(593)), $lineNumber), $rt_s(544)), $columnNumber);
        var$3 = jl_AbstractStringBuilder_toString(var$3);
        $messageArray = $rt_createArray(jl_String, 2);
        var$5 = $messageArray.data;
        var$5[0] = var$3;
        var$3 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$3);
        jl_StringBuilder_append0(var$3, $lineNumber);
        var$5[1] = jl_AbstractStringBuilder_toString(var$3);
        tj_Error_errorLog$js_body$_1(otji_JS_wrap($messageArray));
        var$3 = new jl_RuntimeException;
        var$6 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$6);
        jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(var$6, $rt_s(593)), $lineNumber), $rt_s(544)), $columnNumber);
        jl_Throwable__init_(var$3, jl_AbstractStringBuilder_toString(var$6));
        $rt_throw(var$3);
    }
    function tj_Error_ListEmpty($lineNumber, $listName) {
        var var$3, $messageArray, var$5, var$6;
        var$3 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$3);
        jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$3, $rt_s(594)), $listName), $rt_s(595)), $lineNumber);
        var$3 = jl_AbstractStringBuilder_toString(var$3);
        $messageArray = $rt_createArray(jl_String, 2);
        var$5 = $messageArray.data;
        var$5[0] = var$3;
        var$3 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$3);
        jl_StringBuilder_append0(var$3, $lineNumber);
        var$5[1] = jl_AbstractStringBuilder_toString(var$3);
        tj_Error_errorLog$js_body$_1(otji_JS_wrap($messageArray));
        var$3 = new jl_RuntimeException;
        var$6 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$6);
        jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$6, $rt_s(594)), $listName), $rt_s(595)), $lineNumber);
        jl_Throwable__init_(var$3, jl_AbstractStringBuilder_toString(var$6));
        $rt_throw(var$3);
    }
    function tj_Error_RobotNotImported($lineNumber) {
        var var$2, $messageArray, var$4, var$5;
        var$2 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$2);
        jl_StringBuilder_append0(jl_StringBuilder_append(var$2, $rt_s(596)), $lineNumber);
        var$2 = jl_AbstractStringBuilder_toString(var$2);
        $messageArray = $rt_createArray(jl_String, 2);
        var$4 = $messageArray.data;
        var$4[0] = var$2;
        var$2 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$2);
        jl_StringBuilder_append0(var$2, $lineNumber);
        var$4[1] = jl_AbstractStringBuilder_toString(var$2);
        tj_Error_errorLog$js_body$_1(otji_JS_wrap($messageArray));
        var$2 = new jl_RuntimeException;
        var$5 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$5);
        jl_StringBuilder_append0(jl_StringBuilder_append(var$5, $rt_s(596)), $lineNumber);
        jl_Throwable__init_(var$2, jl_AbstractStringBuilder_toString(var$5));
        $rt_throw(var$2);
    }
    function tj_Error_InvalidRobotAction($type, $lineNumber) {
        var var$3, $messageArray, var$5, var$6;
        var$3 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$3);
        jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$3, $rt_s(597)), $type), $rt_s(574)), $lineNumber);
        var$3 = jl_AbstractStringBuilder_toString(var$3);
        $messageArray = $rt_createArray(jl_String, 2);
        var$5 = $messageArray.data;
        var$5[0] = var$3;
        var$3 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$3);
        jl_StringBuilder_append0(var$3, $lineNumber);
        var$5[1] = jl_AbstractStringBuilder_toString(var$3);
        tj_Error_errorLog$js_body$_1(otji_JS_wrap($messageArray));
        var$3 = new jl_RuntimeException;
        var$6 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$6);
        jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$6, $rt_s(597)), $type), $rt_s(574)), $lineNumber);
        jl_Throwable__init_(var$3, jl_AbstractStringBuilder_toString(var$6));
        $rt_throw(var$3);
    }
    function tj_Error_FunctionHasNoReturn($name, $lineNumber) {
        var var$3, $messageArray, var$5, var$6;
        var$3 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$3);
        jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$3, $rt_s(598)), $name), $rt_s(599)), $lineNumber);
        var$3 = jl_AbstractStringBuilder_toString(var$3);
        $messageArray = $rt_createArray(jl_String, 2);
        var$5 = $messageArray.data;
        var$5[0] = var$3;
        var$3 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$3);
        jl_StringBuilder_append0(var$3, $lineNumber);
        var$5[1] = jl_AbstractStringBuilder_toString(var$3);
        tj_Error_errorLog$js_body$_1(otji_JS_wrap($messageArray));
        var$3 = new jl_RuntimeException;
        var$6 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$6);
        jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$6, $rt_s(598)), $name), $rt_s(599)), $lineNumber);
        jl_Throwable__init_(var$3, jl_AbstractStringBuilder_toString(var$6));
        $rt_throw(var$3);
    }
    function tj_Error_MessageBoxesNotSupported($lineNumber) {
        var var$2, $messageArray, var$4, var$5;
        var$2 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$2);
        jl_StringBuilder_append0(jl_StringBuilder_append(var$2, $rt_s(600)), $lineNumber);
        var$2 = jl_AbstractStringBuilder_toString(var$2);
        $messageArray = $rt_createArray(jl_String, 2);
        var$4 = $messageArray.data;
        var$4[0] = var$2;
        var$2 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$2);
        jl_StringBuilder_append0(var$2, $lineNumber);
        var$4[1] = jl_AbstractStringBuilder_toString(var$2);
        tj_Error_errorLog$js_body$_1(otji_JS_wrap($messageArray));
        var$2 = new jl_RuntimeException;
        var$5 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$5);
        jl_StringBuilder_append0(jl_StringBuilder_append(var$5, $rt_s(600)), $lineNumber);
        jl_Throwable__init_(var$2, jl_AbstractStringBuilder_toString(var$5));
        $rt_throw(var$2);
    }
    function tj_Error_ReservedName($name, $lineNumber) {
        var var$3, $messageArray, var$5, var$6;
        var$3 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$3);
        jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$3, $rt_s(601)), $name), $rt_s(574)), $lineNumber);
        var$3 = jl_AbstractStringBuilder_toString(var$3);
        $messageArray = $rt_createArray(jl_String, 2);
        var$5 = $messageArray.data;
        var$5[0] = var$3;
        var$3 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$3);
        jl_StringBuilder_append0(var$3, $lineNumber);
        var$5[1] = jl_AbstractStringBuilder_toString(var$3);
        tj_Error_errorLog$js_body$_1(otji_JS_wrap($messageArray));
        var$3 = new jl_RuntimeException;
        var$6 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$6);
        jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$6, $rt_s(601)), $name), $rt_s(574)), $lineNumber);
        jl_Throwable__init_(var$3, jl_AbstractStringBuilder_toString(var$6));
        $rt_throw(var$3);
    }
    function tj_Error_errorLog$js_body$_1(var$1) {
        $rt_globals.addConsoleError(var$1);
        ($rt_globals.document.querySelector('#root')).classList.remove('run');
    }
    function tj_RobotStmt() {
        var a = this; tj_Statements.call(a);
        a.$robotType = null;
        a.$value33 = null;
    }
    function tj_RobotStmt__init_(var_0, var_1, var_2) {
        var var_3 = new tj_RobotStmt();
        tj_RobotStmt__init_0(var_3, var_0, var_1, var_2);
        return var_3;
    }
    function tj_RobotStmt__init_0($this, $line, $robotType, $value) {
        tj_Statements__init_($this);
        $this.$line = $line;
        $this.$robotType = $robotType;
        $this.$value33 = $value;
        tj_Statements$StmtType_$callClinit();
        $this.$type1 = tj_Statements$StmtType_ROBOT;
    }
    function tj_RobotStmt_getRobotType($this) {
        return $this.$robotType;
    }
    function tj_RobotStmt_getValue($this) {
        return $this.$value33;
    }
    function tj_RobotStmt_getLine($this) {
        return $this.$line;
    }
    var tj_ReservedNames = $rt_classWithoutFields();
    var tj_ReservedNames_reservedNames = null;
    function tj_ReservedNames_$callClinit() {
        tj_ReservedNames_$callClinit = $rt_eraseClinit(tj_ReservedNames);
        tj_ReservedNames__clinit_();
    }
    function tj_ReservedNames_isReserved($name) {
        var var$2, var$3, var$4;
        tj_ReservedNames_$callClinit();
        var$2 = tj_ReservedNames_reservedNames.data;
        var$3 = var$2.length;
        var$4 = 0;
        while (var$4 < var$3) {
            if (jl_String_equals($name, var$2[var$4]))
                return 1;
            var$4 = var$4 + 1 | 0;
        }
        return 0;
    }
    function tj_ReservedNames__clinit_() {
        tj_ReservedNames_reservedNames = $rt_createArrayFromData(jl_String, [$rt_s(205), $rt_s(202), $rt_s(200), $rt_s(212), $rt_s(210), $rt_s(198), $rt_s(602), $rt_s(223), $rt_s(231), $rt_s(244), $rt_s(246), $rt_s(186), $rt_s(245), $rt_s(21), $rt_s(20), $rt_s(232), $rt_s(233), $rt_s(235), $rt_s(234), $rt_s(247), $rt_s(243), $rt_s(248), $rt_s(242), $rt_s(203), $rt_s(201), $rt_s(194), $rt_s(207), $rt_s(195), $rt_s(603), $rt_s(534), $rt_s(524), $rt_s(521), $rt_s(522), $rt_s(525), $rt_s(523), $rt_s(240), $rt_s(239),
        $rt_s(537), $rt_s(539), $rt_s(197), $rt_s(209), $rt_s(199), $rt_s(196), $rt_s(204), $rt_s(541), $rt_s(237), $rt_s(534), $rt_s(80), $rt_s(527)]);
    }
    var tj_Parser$1 = $rt_classWithoutFields();
    var tj_Parser$1_$SwitchMap$trackerjo$javaish$JavaishVal$JavaishType = null;
    function tj_Parser$1_$callClinit() {
        tj_Parser$1_$callClinit = $rt_eraseClinit(tj_Parser$1);
        tj_Parser$1__clinit_();
    }
    function tj_Parser$1__clinit_() {
        var var$1, var$2;
        var$1 = $rt_createIntArray((tj_JavaishVal$JavaishType_values()).data.length);
        var$2 = var$1.data;
        tj_Parser$1_$SwitchMap$trackerjo$javaish$JavaishVal$JavaishType = var$1;
        var$2[tj_JavaishVal$JavaishType_STRING.$ordinal0] = 1;
        var$2[tj_JavaishVal$JavaishType_INT.$ordinal0] = 2;
        var$2[tj_JavaishVal$JavaishType_FLOAT.$ordinal0] = 3;
        var$2[tj_JavaishVal$JavaishType_BOOLEAN.$ordinal0] = 4;
        var$2[tj_JavaishVal$JavaishType_INTLIST.$ordinal0] = 5;
        var$2[tj_JavaishVal$JavaishType_FLOATLIST.$ordinal0] = 6;
        var$2[tj_JavaishVal$JavaishType_STRINGLIST.$ordinal0] = 7;
        var$2[tj_JavaishVal$JavaishType_BOOLEANLIST.$ordinal0] = 8;
    }
    var oj_JSONException = $rt_classWithoutFields(jl_RuntimeException);
    function oj_JSONException__init_0(var_0, var_1) {
        var var_2 = new oj_JSONException();
        oj_JSONException__init_1(var_2, var_0, var_1);
        return var_2;
    }
    function oj_JSONException__init_(var_0) {
        var var_1 = new oj_JSONException();
        oj_JSONException__init_2(var_1, var_0);
        return var_1;
    }
    function oj_JSONException__init_1($this, $message, $cause) {
        jl_Throwable__init_2($this, $message, $cause);
    }
    function oj_JSONException__init_2($this, $cause) {
        jl_Throwable__init_2($this, $cause.$getMessage(), $cause);
    }
    var ju_Iterator = $rt_classWithoutFields(0);
    function ju_AbstractList$1() {
        var a = this; jl_Object.call(a);
        a.$index4 = 0;
        a.$modCount0 = 0;
        a.$size1 = 0;
        a.$removeIndex = 0;
        a.$this$00 = null;
    }
    function ju_AbstractList$1_hasNext($this) {
        return $this.$index4 >= $this.$size1 ? 0 : 1;
    }
    function ju_AbstractList$1_next($this) {
        var var$1, var$2;
        ju_AbstractList$1_checkConcurrentModification($this);
        var$1 = $this.$index4;
        $this.$removeIndex = var$1;
        var$2 = $this.$this$00;
        $this.$index4 = var$1 + 1 | 0;
        return var$2.$get0(var$1);
    }
    function ju_AbstractList$1_remove($this) {
        var var$1, var$2, var$3;
        if ($this.$removeIndex < 0) {
            var$1 = new jl_IllegalStateException;
            jl_Exception__init_(var$1);
            $rt_throw(var$1);
        }
        ju_AbstractList$1_checkConcurrentModification($this);
        $this.$this$00.$remove($this.$removeIndex);
        $this.$modCount0 = $this.$this$00.$modCount;
        var$2 = $this.$removeIndex;
        var$3 = $this.$index4;
        if (var$2 < var$3)
            $this.$index4 = var$3 - 1 | 0;
        $this.$size1 = $this.$size1 - 1 | 0;
        $this.$removeIndex = (-1);
    }
    function ju_AbstractList$1_checkConcurrentModification($this) {
        var var$1;
        if ($this.$modCount0 >= $this.$this$00.$modCount)
            return;
        var$1 = new ju_ConcurrentModificationException;
        jl_Exception__init_(var$1);
        $rt_throw(var$1);
    }
    function tj_StringList() {
        var a = this; jl_Object.call(a);
        a.$value12 = null;
        a.$name14 = null;
    }
    function tj_BoolList() {
        var a = this; jl_Object.call(a);
        a.$value10 = null;
        a.$name13 = null;
    }
    function tj_FloatList() {
        var a = this; jl_Object.call(a);
        a.$value8 = null;
        a.$name12 = null;
    }
    function tj_IntList() {
        var a = this; jl_Object.call(a);
        a.$value14 = null;
        a.$name15 = null;
    }
    function tj_IntVar() {
        var a = this; jl_Object.call(a);
        a.$value7 = null;
        a.$name10 = null;
    }
    function tj_FloatVar() {
        var a = this; jl_Object.call(a);
        a.$value4 = null;
        a.$name7 = null;
    }
    function tj_BoolVar() {
        var a = this; jl_Object.call(a);
        a.$value5 = null;
        a.$name8 = null;
    }
    function tj_StringVar() {
        var a = this; jl_Object.call(a);
        a.$value6 = null;
        a.$name9 = null;
    }
    var jni_XHRStreamHandler = $rt_classWithoutFields(jn_URLStreamHandler);
    function jni_XHRStreamHandler_openConnection($this, $u) {
        var var$2;
        var$2 = new jni_XHRURLConnection;
        var$2.$lastModified = Long_fromInt(-1);
        var$2.$useCaches = jn_URLConnection_defaultUseCaches;
        var$2.$doInput = 1;
        var$2.$allowUserInteraction = jn_URLConnection_defaultAllowUserInteraction;
        var$2.$requestProperties = ju_HashMap__init_();
        var$2.$url = $u;
        var$2.$methodTokens = $rt_createArrayFromData(jl_String, [$rt_s(31), $rt_s(604), $rt_s(605), $rt_s(606), $rt_s(607), $rt_s(608), $rt_s(609)]);
        var$2.$method = $rt_s(31);
        var$2.$responseCode = (-1);
        var$2.$instanceFollowRedirects = jn_HttpURLConnection_followRedirects;
        var$2.$chunkLength = (-1);
        var$2.$fixedContentLength = (-1);
        var$2.$responseHeaders = ju_HashMap__init_();
        var$2.$headerFields = ju_HashMap__init_();
        return var$2;
    }
    function jni_DummyStreamHandler() {
        jn_URLStreamHandler.call(this);
        this.$defaultPort = 0;
    }
    function jni_DummyStreamHandler__init_(var_0) {
        var var_1 = new jni_DummyStreamHandler();
        jni_DummyStreamHandler__init_0(var_1, var_0);
        return var_1;
    }
    function jni_DummyStreamHandler__init_0($this, $defaultPort) {
        $this.$defaultPort = $defaultPort;
    }
    function jni_DummyStreamHandler_openConnection($this, $u) {
        var var$2, var$3;
        var$2 = new ji_IOException;
        var$3 = $u.$protocol;
        $u = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($u);
        jl_StringBuilder_append(jl_StringBuilder_append($u, $rt_s(610)), var$3);
        jl_Throwable__init_(var$2, jl_AbstractStringBuilder_toString($u));
        $rt_throw(var$2);
    }
    function tj_FunctionCall() {
        var a = this; jl_Object.call(a);
        a.$functionName = null;
        a.$args0 = null;
    }
    function tj_FunctionCall_getFunctionName($this) {
        return $this.$functionName;
    }
    function tj_FunctionCall_getArgs($this) {
        return $this.$args0;
    }
    var tj_Statements$RobotType = $rt_classWithoutFields(jl_Enum);
    var tj_Statements$RobotType_MOVE = null;
    var tj_Statements$RobotType_SPEAK = null;
    var tj_Statements$RobotType_STAND = null;
    var tj_Statements$RobotType_SIT = null;
    var tj_Statements$RobotType_BLINK = null;
    var tj_Statements$RobotType_TWINKLE = null;
    var tj_Statements$RobotType_RANDOMEYES = null;
    var tj_Statements$RobotType_BATTERY = null;
    var tj_Statements$RobotType_VOLUME = null;
    var tj_Statements$RobotType_CROUCH = null;
    var tj_Statements$RobotType_LYINGBACK = null;
    var tj_Statements$RobotType_NAME = null;
    var tj_Statements$RobotType_PICTURE = null;
    var tj_Statements$RobotType_LYINGBELLY = null;
    var tj_Statements$RobotType_$VALUES = null;
    function tj_Statements$RobotType_$callClinit() {
        tj_Statements$RobotType_$callClinit = $rt_eraseClinit(tj_Statements$RobotType);
        tj_Statements$RobotType__clinit_();
    }
    function tj_Statements$RobotType__init_(var_0, var_1) {
        var var_2 = new tj_Statements$RobotType();
        tj_Statements$RobotType__init_0(var_2, var_0, var_1);
        return var_2;
    }
    function tj_Statements$RobotType_values() {
        tj_Statements$RobotType_$callClinit();
        return tj_Statements$RobotType_$VALUES.$clone();
    }
    function tj_Statements$RobotType_valueOf($name) {
        tj_Statements$RobotType_$callClinit();
        return jl_Enum_valueOf($rt_cls(tj_Statements$RobotType), $name);
    }
    function tj_Statements$RobotType__init_0($this, var$1, var$2) {
        tj_Statements$RobotType_$callClinit();
        jl_Enum__init_($this, var$1, var$2);
    }
    function tj_Statements$RobotType__clinit_() {
        var var$1;
        tj_Statements$RobotType_MOVE = tj_Statements$RobotType__init_($rt_s(611), 0);
        tj_Statements$RobotType_SPEAK = tj_Statements$RobotType__init_($rt_s(612), 1);
        tj_Statements$RobotType_STAND = tj_Statements$RobotType__init_($rt_s(613), 2);
        tj_Statements$RobotType_SIT = tj_Statements$RobotType__init_($rt_s(614), 3);
        tj_Statements$RobotType_BLINK = tj_Statements$RobotType__init_($rt_s(615), 4);
        tj_Statements$RobotType_TWINKLE = tj_Statements$RobotType__init_($rt_s(616), 5);
        tj_Statements$RobotType_RANDOMEYES = tj_Statements$RobotType__init_($rt_s(617), 6);
        tj_Statements$RobotType_BATTERY = tj_Statements$RobotType__init_($rt_s(618), 7);
        tj_Statements$RobotType_VOLUME = tj_Statements$RobotType__init_($rt_s(619), 8);
        tj_Statements$RobotType_CROUCH = tj_Statements$RobotType__init_($rt_s(620), 9);
        tj_Statements$RobotType_LYINGBACK = tj_Statements$RobotType__init_($rt_s(621), 10);
        tj_Statements$RobotType_NAME = tj_Statements$RobotType__init_($rt_s(622), 11);
        tj_Statements$RobotType_PICTURE = tj_Statements$RobotType__init_($rt_s(623), 12);
        var$1 = tj_Statements$RobotType__init_($rt_s(624), 13);
        tj_Statements$RobotType_LYINGBELLY = var$1;
        tj_Statements$RobotType_$VALUES = $rt_createArrayFromData(tj_Statements$RobotType, [tj_Statements$RobotType_MOVE, tj_Statements$RobotType_SPEAK, tj_Statements$RobotType_STAND, tj_Statements$RobotType_SIT, tj_Statements$RobotType_BLINK, tj_Statements$RobotType_TWINKLE, tj_Statements$RobotType_RANDOMEYES, tj_Statements$RobotType_BATTERY, tj_Statements$RobotType_VOLUME, tj_Statements$RobotType_CROUCH, tj_Statements$RobotType_LYINGBACK, tj_Statements$RobotType_NAME, tj_Statements$RobotType_PICTURE, var$1]);
    }
    var tj_Debugger$1 = $rt_classWithoutFields();
    var tj_Debugger$1_$SwitchMap$trackerjo$javaish$Statements$StmtType = null;
    var tj_Debugger$1_$SwitchMap$trackerjo$javaish$JavaishVal$JavaishType = null;
    var tj_Debugger$1_$SwitchMap$trackerjo$javaish$Element$ElementType = null;
    var tj_Debugger$1_$SwitchMap$trackerjo$javaish$Debugger$Operator = null;
    var tj_Debugger$1_$SwitchMap$trackerjo$javaish$Statements$MutationType = null;
    function tj_Debugger$1_$callClinit() {
        tj_Debugger$1_$callClinit = $rt_eraseClinit(tj_Debugger$1);
        tj_Debugger$1__clinit_();
    }
    function tj_Debugger$1__clinit_() {
        var var$1, var$2;
        var$1 = $rt_createIntArray((tj_Statements$MutationType_values()).data.length);
        var$2 = var$1.data;
        tj_Debugger$1_$SwitchMap$trackerjo$javaish$Statements$MutationType = var$1;
        var$2[jl_Enum_ordinal(tj_Statements$MutationType_ADD)] = 1;
        tj_Debugger$1_$SwitchMap$trackerjo$javaish$Statements$MutationType.data[jl_Enum_ordinal(tj_Statements$MutationType_SUBTRACT)] = 2;
        tj_Debugger$1_$SwitchMap$trackerjo$javaish$Statements$MutationType.data[jl_Enum_ordinal(tj_Statements$MutationType_MULTIPLY)] = 3;
        tj_Debugger$1_$SwitchMap$trackerjo$javaish$Statements$MutationType.data[jl_Enum_ordinal(tj_Statements$MutationType_DIVIDE)] = 4;
        var$2 = $rt_createIntArray((tj_Debugger$Operator_values()).data.length);
        var$1 = var$2.data;
        tj_Debugger$1_$SwitchMap$trackerjo$javaish$Debugger$Operator = var$2;
        var$1[jl_Enum_ordinal(tj_Debugger$Operator_EQUAL)] = 1;
        tj_Debugger$1_$SwitchMap$trackerjo$javaish$Debugger$Operator.data[jl_Enum_ordinal(tj_Debugger$Operator_NOT_EQUAL)] = 2;
        tj_Debugger$1_$SwitchMap$trackerjo$javaish$Debugger$Operator.data[jl_Enum_ordinal(tj_Debugger$Operator_LESS_THAN)] = 3;
        tj_Debugger$1_$SwitchMap$trackerjo$javaish$Debugger$Operator.data[jl_Enum_ordinal(tj_Debugger$Operator_GREATER_THAN)] = 4;
        tj_Debugger$1_$SwitchMap$trackerjo$javaish$Debugger$Operator.data[jl_Enum_ordinal(tj_Debugger$Operator_LESS_THAN_EQUAL)] = 5;
        tj_Debugger$1_$SwitchMap$trackerjo$javaish$Debugger$Operator.data[jl_Enum_ordinal(tj_Debugger$Operator_GREATER_THAN_EQUAL)] = 6;
        tj_Debugger$1_$SwitchMap$trackerjo$javaish$Debugger$Operator.data[jl_Enum_ordinal(tj_Debugger$Operator_PLUS)] = 7;
        tj_Debugger$1_$SwitchMap$trackerjo$javaish$Debugger$Operator.data[jl_Enum_ordinal(tj_Debugger$Operator_MULTIPLY)] = 8;
        tj_Debugger$1_$SwitchMap$trackerjo$javaish$Debugger$Operator.data[jl_Enum_ordinal(tj_Debugger$Operator_DIVIDE)] = 9;
        tj_Debugger$1_$SwitchMap$trackerjo$javaish$Debugger$Operator.data[jl_Enum_ordinal(tj_Debugger$Operator_MINUS)] = 10;
        tj_Debugger$1_$SwitchMap$trackerjo$javaish$Debugger$Operator.data[jl_Enum_ordinal(tj_Debugger$Operator_REMOVEAT)] = 11;
        tj_Debugger$1_$SwitchMap$trackerjo$javaish$Debugger$Operator.data[jl_Enum_ordinal(tj_Debugger$Operator_REMOVEFROM)] = 12;
        tj_Debugger$1_$SwitchMap$trackerjo$javaish$Debugger$Operator.data[jl_Enum_ordinal(tj_Debugger$Operator_REMOVEALLFROM)] = 13;
        var$2 = $rt_createIntArray((tj_Element$ElementType_values()).data.length);
        var$1 = var$2.data;
        tj_Debugger$1_$SwitchMap$trackerjo$javaish$Element$ElementType = var$2;
        var$1[jl_Enum_ordinal(tj_Element$ElementType_AND)] = 1;
        tj_Debugger$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_NOT)] = 2;
        tj_Debugger$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_BOOL)] = 3;
        tj_Debugger$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_CAST)] = 4;
        tj_Debugger$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_DIVIDE)] = 5;
        tj_Debugger$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_EQUAL)] = 6;
        tj_Debugger$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_EXPRESSION)] = 7;
        tj_Debugger$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_FLOAT)] = 8;
        tj_Debugger$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_GREATER_THAN)] = 9;
        tj_Debugger$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_GREATER_THAN_EQUAL)] = 10;
        tj_Debugger$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_INTEGER)] = 11;
        tj_Debugger$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_LESS_THAN)] = 12;
        tj_Debugger$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_LESS_THAN_EQUAL)] = 13;
        tj_Debugger$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_MINUS)] = 14;
        tj_Debugger$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_MULTIPLY)] = 15;
        tj_Debugger$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_NOT_EQUAL)] = 16;
        tj_Debugger$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_OR)] = 17;
        tj_Debugger$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_PLUS)] = 18;
        tj_Debugger$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_STRING)] = 19;
        tj_Debugger$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_VARIABLE)] = 20;
        tj_Debugger$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_FUNCTION)] = 21;
        tj_Debugger$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_SHOWINPUTBOX)] = 22;
        tj_Debugger$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_LISTVAL)] = 23;
        tj_Debugger$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_LIST)] = 24;
        tj_Debugger$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_ARRAYLENGTH)] = 25;
        var$2 = $rt_createIntArray((tj_JavaishVal$JavaishType_values()).data.length);
        var$1 = var$2.data;
        tj_Debugger$1_$SwitchMap$trackerjo$javaish$JavaishVal$JavaishType = var$2;
        var$1[jl_Enum_ordinal(tj_JavaishVal$JavaishType_FLOAT)] = 1;
        tj_Debugger$1_$SwitchMap$trackerjo$javaish$JavaishVal$JavaishType.data[jl_Enum_ordinal(tj_JavaishVal$JavaishType_INT)] = 2;
        tj_Debugger$1_$SwitchMap$trackerjo$javaish$JavaishVal$JavaishType.data[jl_Enum_ordinal(tj_JavaishVal$JavaishType_STRING)] = 3;
        tj_Debugger$1_$SwitchMap$trackerjo$javaish$JavaishVal$JavaishType.data[jl_Enum_ordinal(tj_JavaishVal$JavaishType_BOOLEAN)] = 4;
        tj_Debugger$1_$SwitchMap$trackerjo$javaish$JavaishVal$JavaishType.data[jl_Enum_ordinal(tj_JavaishVal$JavaishType_INTLIST)] = 5;
        tj_Debugger$1_$SwitchMap$trackerjo$javaish$JavaishVal$JavaishType.data[jl_Enum_ordinal(tj_JavaishVal$JavaishType_FLOATLIST)] = 6;
        tj_Debugger$1_$SwitchMap$trackerjo$javaish$JavaishVal$JavaishType.data[jl_Enum_ordinal(tj_JavaishVal$JavaishType_STRINGLIST)] = 7;
        tj_Debugger$1_$SwitchMap$trackerjo$javaish$JavaishVal$JavaishType.data[jl_Enum_ordinal(tj_JavaishVal$JavaishType_BOOLEANLIST)] = 8;
        var$2 = $rt_createIntArray((tj_Statements$StmtType_values()).data.length);
        var$1 = var$2.data;
        tj_Debugger$1_$SwitchMap$trackerjo$javaish$Statements$StmtType = var$2;
        var$1[jl_Enum_ordinal(tj_Statements$StmtType_COMMENT)] = 1;
        tj_Debugger$1_$SwitchMap$trackerjo$javaish$Statements$StmtType.data[jl_Enum_ordinal(tj_Statements$StmtType_ASSIGNMENT)] = 2;
        tj_Debugger$1_$SwitchMap$trackerjo$javaish$Statements$StmtType.data[jl_Enum_ordinal(tj_Statements$StmtType_CALL)] = 3;
        tj_Debugger$1_$SwitchMap$trackerjo$javaish$Statements$StmtType.data[jl_Enum_ordinal(tj_Statements$StmtType_DECLARATION)] = 4;
        tj_Debugger$1_$SwitchMap$trackerjo$javaish$Statements$StmtType.data[jl_Enum_ordinal(tj_Statements$StmtType_ELSE)] = 5;
        tj_Debugger$1_$SwitchMap$trackerjo$javaish$Statements$StmtType.data[jl_Enum_ordinal(tj_Statements$StmtType_ELSEIF)] = 6;
        tj_Debugger$1_$SwitchMap$trackerjo$javaish$Statements$StmtType.data[jl_Enum_ordinal(tj_Statements$StmtType_MUTATION)] = 7;
        tj_Debugger$1_$SwitchMap$trackerjo$javaish$Statements$StmtType.data[jl_Enum_ordinal(tj_Statements$StmtType_RETURN)] = 8;
        tj_Debugger$1_$SwitchMap$trackerjo$javaish$Statements$StmtType.data[jl_Enum_ordinal(tj_Statements$StmtType_FUNCTION)] = 9;
        tj_Debugger$1_$SwitchMap$trackerjo$javaish$Statements$StmtType.data[jl_Enum_ordinal(tj_Statements$StmtType_IF)] = 10;
        tj_Debugger$1_$SwitchMap$trackerjo$javaish$Statements$StmtType.data[jl_Enum_ordinal(tj_Statements$StmtType_WHILE)] = 11;
        tj_Debugger$1_$SwitchMap$trackerjo$javaish$Statements$StmtType.data[jl_Enum_ordinal(tj_Statements$StmtType_FOREACH)] = 12;
        tj_Debugger$1_$SwitchMap$trackerjo$javaish$Statements$StmtType.data[jl_Enum_ordinal(tj_Statements$StmtType_FORWHEN)] = 13;
        tj_Debugger$1_$SwitchMap$trackerjo$javaish$Statements$StmtType.data[jl_Enum_ordinal(tj_Statements$StmtType_PRINT)] = 14;
        tj_Debugger$1_$SwitchMap$trackerjo$javaish$Statements$StmtType.data[jl_Enum_ordinal(tj_Statements$StmtType_SHOWMSGBOX)] = 15;
        tj_Debugger$1_$SwitchMap$trackerjo$javaish$Statements$StmtType.data[jl_Enum_ordinal(tj_Statements$StmtType_REMOVEAT)] = 16;
        tj_Debugger$1_$SwitchMap$trackerjo$javaish$Statements$StmtType.data[jl_Enum_ordinal(tj_Statements$StmtType_REMOVEFROM)] = 17;
        tj_Debugger$1_$SwitchMap$trackerjo$javaish$Statements$StmtType.data[jl_Enum_ordinal(tj_Statements$StmtType_REMOVEALLFROM)] = 18;
    }
    function jl_Double() {
        jl_Number.call(this);
        this.$value34 = 0.0;
    }
    var jl_Double_TYPE = null;
    function jl_Double_intValue($this) {
        return $this.$value34 | 0;
    }
    function jl_Double_floatValue($this) {
        return $this.$value34;
    }
    function jl_Double_valueOf($string) {
        var var$2;
        var$2 = jl_Double_parseDouble($string);
        $string = new jl_Double;
        $string.$value34 = var$2;
        return $string;
    }
    function jl_Double_parseDouble($string) {
        var $start, $end, $negative, $c, $mantissa, $exp, $hasOneDigit, $mantissaPos, var$10, $negativeExp, $numExp;
        if (jl_String_isEmpty($string)) {
            $string = new jl_NumberFormatException;
            jl_Exception__init_($string);
            $rt_throw($string);
        }
        $start = 0;
        $end = jl_String_length($string);
        while (true) {
            if (jl_String_charAt($string, $start) > 32) {
                while (jl_String_charAt($string, $end - 1 | 0) <= 32) {
                    $end = $end + (-1) | 0;
                }
                $negative = 0;
                if (jl_String_charAt($string, $start) == 45) {
                    $start = $start + 1 | 0;
                    $negative = 1;
                } else if (jl_String_charAt($string, $start) == 43)
                    $start = $start + 1 | 0;
                if ($start == $end) {
                    $string = new jl_NumberFormatException;
                    jl_Exception__init_($string);
                    $rt_throw($string);
                }
                a: {
                    $c = jl_String_charAt($string, $start);
                    $mantissa = Long_ZERO;
                    $exp = (-1);
                    $hasOneDigit = 0;
                    $mantissaPos = Long_create(2808348672, 232830643);
                    if ($c != 46) {
                        $hasOneDigit = 1;
                        if ($c >= 48 && $c <= 57) {
                            b: {
                                while ($start < $end) {
                                    if (jl_String_charAt($string, $start) != 48)
                                        break b;
                                    $start = $start + 1 | 0;
                                }
                            }
                            while ($start < $end) {
                                var$10 = jl_String_charAt($string, $start);
                                if (var$10 < 48)
                                    break a;
                                if (var$10 > 57)
                                    break a;
                                if (Long_gt($mantissaPos, Long_ZERO)) {
                                    $mantissa = Long_add($mantissa, Long_mul($mantissaPos, Long_fromInt(var$10 - 48 | 0)));
                                    $mantissaPos = jl_Long_divideUnsigned($mantissaPos, Long_fromInt(10));
                                }
                                $exp = $exp + 1 | 0;
                                $start = $start + 1 | 0;
                            }
                        } else {
                            $string = new jl_NumberFormatException;
                            jl_Exception__init_($string);
                            $rt_throw($string);
                        }
                    }
                }
                if ($start < $end && jl_String_charAt($string, $start) == 46) {
                    $start = $start + 1 | 0;
                    c: {
                        while (true) {
                            if ($start >= $end)
                                break c;
                            $c = jl_String_charAt($string, $start);
                            var$10 = $rt_compare($c, 48);
                            if (var$10 < 0)
                                break c;
                            if ($c > 57)
                                break;
                            if (Long_eq($mantissa, Long_ZERO) && !var$10)
                                $exp = $exp + (-1) | 0;
                            else if (Long_gt($mantissaPos, Long_ZERO)) {
                                $mantissa = Long_add($mantissa, Long_mul($mantissaPos, Long_fromInt($c - 48 | 0)));
                                $mantissaPos = jl_Long_divideUnsigned($mantissaPos, Long_fromInt(10));
                            }
                            $start = $start + 1 | 0;
                            $hasOneDigit = 1;
                        }
                    }
                    if (!$hasOneDigit) {
                        $string = new jl_NumberFormatException;
                        jl_Exception__init_($string);
                        $rt_throw($string);
                    }
                }
                if ($start < $end) {
                    $c = jl_String_charAt($string, $start);
                    if ($c != 101 && $c != 69) {
                        $string = new jl_NumberFormatException;
                        jl_Exception__init_($string);
                        $rt_throw($string);
                    }
                    $c = $start + 1 | 0;
                    $negativeExp = 0;
                    if ($c == $end) {
                        $string = new jl_NumberFormatException;
                        jl_Exception__init_($string);
                        $rt_throw($string);
                    }
                    if (jl_String_charAt($string, $c) == 45) {
                        $c = $c + 1 | 0;
                        $negativeExp = 1;
                    } else if (jl_String_charAt($string, $c) == 43)
                        $c = $c + 1 | 0;
                    $numExp = 0;
                    $start = 0;
                    d: {
                        while (true) {
                            if ($c >= $end)
                                break d;
                            $hasOneDigit = jl_String_charAt($string, $c);
                            if ($hasOneDigit < 48)
                                break d;
                            if ($hasOneDigit > 57)
                                break;
                            $numExp = (10 * $numExp | 0) + ($hasOneDigit - 48 | 0) | 0;
                            $start = 1;
                            $c = $c + 1 | 0;
                        }
                    }
                    if (!$start) {
                        $string = new jl_NumberFormatException;
                        jl_Exception__init_($string);
                        $rt_throw($string);
                    }
                    if ($negativeExp)
                        $numExp =  -$numExp | 0;
                    $exp = $exp + $numExp | 0;
                }
                return otcit_DoubleSynthesizer_synthesizeDouble($mantissa, $exp, $negative);
            }
            $start = $start + 1 | 0;
            if ($start == $end)
                break;
        }
        $string = new jl_NumberFormatException;
        jl_Exception__init_($string);
        $rt_throw($string);
    }
    function jl_Double_toString($this) {
        var var$1, var$2;
        var$1 = $this.$value34;
        var$2 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$2);
        jl_AbstractStringBuilder_insert2(var$2, var$2.$length0, var$1);
        return jl_AbstractStringBuilder_toString(var$2);
    }
    function jl_Double_equals($this, $other) {
        if ($this === $other)
            return 1;
        return $other instanceof jl_Double && Long_eq(jl_Double_doubleToLongBits($other.$value34), jl_Double_doubleToLongBits($this.$value34)) ? 1 : 0;
    }
    function jl_Double_isNaN($this) {
        return $rt_globals.isNaN($this.$value34) ? 1 : 0;
    }
    function jl_Double_isInfinite($this) {
        return !$rt_globals.isFinite($this.$value34) ? 1 : 0;
    }
    function jl_Double_doubleToLongBits($value) {
        if (!($rt_globals.isNaN($value) ? 1 : 0))
            return $rt_doubleToRawLongBits($value);
        return Long_create(0, 2146959360);
    }
    function jl_Double__clinit_() {
        jl_Double_TYPE = $rt_cls($rt_doublecls());
    }
    function ji_Writer() {
        jl_Object.call(this);
        this.$lock0 = null;
    }
    function ji_StringWriter() {
        ji_Writer.call(this);
        this.$buf = null;
    }
    function ji_StringWriter__init_() {
        var var_0 = new ji_StringWriter();
        ji_StringWriter__init_0(var_0);
        return var_0;
    }
    function ji_StringWriter__init_0($this) {
        var var$1;
        $this.$lock0 = $this;
        var$1 = new jl_StringBuffer;
        jl_AbstractStringBuilder__init_2(var$1, 16);
        $this.$buf = var$1;
        $this.$lock0 = var$1;
    }
    function ji_StringWriter_toString($this) {
        return jl_AbstractStringBuilder_toString($this.$buf);
    }
    function ji_StringWriter_write($this, $oneChar) {
        jl_AbstractStringBuilder_append($this.$buf, $oneChar & 65535);
    }
    function ji_StringWriter_write0($this, $str) {
        jl_AbstractStringBuilder_append1($this.$buf, $str);
    }
    var tj_JavaTranslator$1 = $rt_classWithoutFields();
    var tj_JavaTranslator$1_$SwitchMap$trackerjo$javaish$Statements$StmtType = null;
    var tj_JavaTranslator$1_$SwitchMap$trackerjo$javaish$JavaishVal$JavaishType = null;
    var tj_JavaTranslator$1_$SwitchMap$trackerjo$javaish$Element$ElementType = null;
    var tj_JavaTranslator$1_$SwitchMap$trackerjo$javaish$JavaTranslator$Operator = null;
    var tj_JavaTranslator$1_$SwitchMap$trackerjo$javaish$Statements$MutationType = null;
    function tj_JavaTranslator$1_$callClinit() {
        tj_JavaTranslator$1_$callClinit = $rt_eraseClinit(tj_JavaTranslator$1);
        tj_JavaTranslator$1__clinit_();
    }
    function tj_JavaTranslator$1__clinit_() {
        var var$1, var$2;
        var$1 = $rt_createIntArray((tj_Statements$MutationType_values()).data.length);
        var$2 = var$1.data;
        tj_JavaTranslator$1_$SwitchMap$trackerjo$javaish$Statements$MutationType = var$1;
        var$2[jl_Enum_ordinal(tj_Statements$MutationType_ADD)] = 1;
        tj_JavaTranslator$1_$SwitchMap$trackerjo$javaish$Statements$MutationType.data[jl_Enum_ordinal(tj_Statements$MutationType_SUBTRACT)] = 2;
        tj_JavaTranslator$1_$SwitchMap$trackerjo$javaish$Statements$MutationType.data[jl_Enum_ordinal(tj_Statements$MutationType_MULTIPLY)] = 3;
        tj_JavaTranslator$1_$SwitchMap$trackerjo$javaish$Statements$MutationType.data[jl_Enum_ordinal(tj_Statements$MutationType_DIVIDE)] = 4;
        var$2 = $rt_createIntArray((tj_JavaTranslator$Operator_values()).data.length);
        var$1 = var$2.data;
        tj_JavaTranslator$1_$SwitchMap$trackerjo$javaish$JavaTranslator$Operator = var$2;
        var$1[jl_Enum_ordinal(tj_JavaTranslator$Operator_EQUAL)] = 1;
        tj_JavaTranslator$1_$SwitchMap$trackerjo$javaish$JavaTranslator$Operator.data[jl_Enum_ordinal(tj_JavaTranslator$Operator_NOT_EQUAL)] = 2;
        tj_JavaTranslator$1_$SwitchMap$trackerjo$javaish$JavaTranslator$Operator.data[jl_Enum_ordinal(tj_JavaTranslator$Operator_LESS_THAN)] = 3;
        tj_JavaTranslator$1_$SwitchMap$trackerjo$javaish$JavaTranslator$Operator.data[jl_Enum_ordinal(tj_JavaTranslator$Operator_GREATER_THAN)] = 4;
        tj_JavaTranslator$1_$SwitchMap$trackerjo$javaish$JavaTranslator$Operator.data[jl_Enum_ordinal(tj_JavaTranslator$Operator_LESS_THAN_EQUAL)] = 5;
        tj_JavaTranslator$1_$SwitchMap$trackerjo$javaish$JavaTranslator$Operator.data[jl_Enum_ordinal(tj_JavaTranslator$Operator_GREATER_THAN_EQUAL)] = 6;
        tj_JavaTranslator$1_$SwitchMap$trackerjo$javaish$JavaTranslator$Operator.data[jl_Enum_ordinal(tj_JavaTranslator$Operator_PLUS)] = 7;
        tj_JavaTranslator$1_$SwitchMap$trackerjo$javaish$JavaTranslator$Operator.data[jl_Enum_ordinal(tj_JavaTranslator$Operator_MULTIPLY)] = 8;
        tj_JavaTranslator$1_$SwitchMap$trackerjo$javaish$JavaTranslator$Operator.data[jl_Enum_ordinal(tj_JavaTranslator$Operator_DIVIDE)] = 9;
        tj_JavaTranslator$1_$SwitchMap$trackerjo$javaish$JavaTranslator$Operator.data[jl_Enum_ordinal(tj_JavaTranslator$Operator_MINUS)] = 10;
        tj_JavaTranslator$1_$SwitchMap$trackerjo$javaish$JavaTranslator$Operator.data[jl_Enum_ordinal(tj_JavaTranslator$Operator_REMOVEAT)] = 11;
        tj_JavaTranslator$1_$SwitchMap$trackerjo$javaish$JavaTranslator$Operator.data[jl_Enum_ordinal(tj_JavaTranslator$Operator_REMOVEFROM)] = 12;
        tj_JavaTranslator$1_$SwitchMap$trackerjo$javaish$JavaTranslator$Operator.data[jl_Enum_ordinal(tj_JavaTranslator$Operator_REMOVEALLFROM)] = 13;
        var$2 = $rt_createIntArray((tj_Element$ElementType_values()).data.length);
        var$1 = var$2.data;
        tj_JavaTranslator$1_$SwitchMap$trackerjo$javaish$Element$ElementType = var$2;
        var$1[jl_Enum_ordinal(tj_Element$ElementType_AND)] = 1;
        tj_JavaTranslator$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_NOT)] = 2;
        tj_JavaTranslator$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_BOOL)] = 3;
        tj_JavaTranslator$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_CAST)] = 4;
        tj_JavaTranslator$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_DIVIDE)] = 5;
        tj_JavaTranslator$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_EQUAL)] = 6;
        tj_JavaTranslator$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_EXPRESSION)] = 7;
        tj_JavaTranslator$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_FLOAT)] = 8;
        tj_JavaTranslator$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_GREATER_THAN)] = 9;
        tj_JavaTranslator$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_GREATER_THAN_EQUAL)] = 10;
        tj_JavaTranslator$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_INTEGER)] = 11;
        tj_JavaTranslator$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_LESS_THAN)] = 12;
        tj_JavaTranslator$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_LESS_THAN_EQUAL)] = 13;
        tj_JavaTranslator$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_MINUS)] = 14;
        tj_JavaTranslator$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_MULTIPLY)] = 15;
        tj_JavaTranslator$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_NOT_EQUAL)] = 16;
        tj_JavaTranslator$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_OR)] = 17;
        tj_JavaTranslator$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_PLUS)] = 18;
        tj_JavaTranslator$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_STRING)] = 19;
        tj_JavaTranslator$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_VARIABLE)] = 20;
        tj_JavaTranslator$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_FUNCTION)] = 21;
        tj_JavaTranslator$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_SHOWINPUTBOX)] = 22;
        tj_JavaTranslator$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_LISTVAL)] = 23;
        tj_JavaTranslator$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_LIST)] = 24;
        tj_JavaTranslator$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_ARRAYLENGTH)] = 25;
        var$2 = $rt_createIntArray((tj_JavaishVal$JavaishType_values()).data.length);
        var$1 = var$2.data;
        tj_JavaTranslator$1_$SwitchMap$trackerjo$javaish$JavaishVal$JavaishType = var$2;
        var$1[jl_Enum_ordinal(tj_JavaishVal$JavaishType_FLOAT)] = 1;
        tj_JavaTranslator$1_$SwitchMap$trackerjo$javaish$JavaishVal$JavaishType.data[jl_Enum_ordinal(tj_JavaishVal$JavaishType_INT)] = 2;
        tj_JavaTranslator$1_$SwitchMap$trackerjo$javaish$JavaishVal$JavaishType.data[jl_Enum_ordinal(tj_JavaishVal$JavaishType_STRING)] = 3;
        tj_JavaTranslator$1_$SwitchMap$trackerjo$javaish$JavaishVal$JavaishType.data[jl_Enum_ordinal(tj_JavaishVal$JavaishType_BOOLEAN)] = 4;
        tj_JavaTranslator$1_$SwitchMap$trackerjo$javaish$JavaishVal$JavaishType.data[jl_Enum_ordinal(tj_JavaishVal$JavaishType_INTLIST)] = 5;
        tj_JavaTranslator$1_$SwitchMap$trackerjo$javaish$JavaishVal$JavaishType.data[jl_Enum_ordinal(tj_JavaishVal$JavaishType_FLOATLIST)] = 6;
        tj_JavaTranslator$1_$SwitchMap$trackerjo$javaish$JavaishVal$JavaishType.data[jl_Enum_ordinal(tj_JavaishVal$JavaishType_STRINGLIST)] = 7;
        tj_JavaTranslator$1_$SwitchMap$trackerjo$javaish$JavaishVal$JavaishType.data[jl_Enum_ordinal(tj_JavaishVal$JavaishType_BOOLEANLIST)] = 8;
        tj_JavaTranslator$1_$SwitchMap$trackerjo$javaish$JavaishVal$JavaishType.data[jl_Enum_ordinal(tj_JavaishVal$JavaishType_LIST)] = 9;
        var$2 = $rt_createIntArray((tj_Statements$StmtType_values()).data.length);
        var$1 = var$2.data;
        tj_JavaTranslator$1_$SwitchMap$trackerjo$javaish$Statements$StmtType = var$2;
        var$1[jl_Enum_ordinal(tj_Statements$StmtType_ASSIGNMENT)] = 1;
        tj_JavaTranslator$1_$SwitchMap$trackerjo$javaish$Statements$StmtType.data[jl_Enum_ordinal(tj_Statements$StmtType_COMMENT)] = 2;
        tj_JavaTranslator$1_$SwitchMap$trackerjo$javaish$Statements$StmtType.data[jl_Enum_ordinal(tj_Statements$StmtType_CALL)] = 3;
        tj_JavaTranslator$1_$SwitchMap$trackerjo$javaish$Statements$StmtType.data[jl_Enum_ordinal(tj_Statements$StmtType_DECLARATION)] = 4;
        tj_JavaTranslator$1_$SwitchMap$trackerjo$javaish$Statements$StmtType.data[jl_Enum_ordinal(tj_Statements$StmtType_ELSE)] = 5;
        tj_JavaTranslator$1_$SwitchMap$trackerjo$javaish$Statements$StmtType.data[jl_Enum_ordinal(tj_Statements$StmtType_ELSEIF)] = 6;
        tj_JavaTranslator$1_$SwitchMap$trackerjo$javaish$Statements$StmtType.data[jl_Enum_ordinal(tj_Statements$StmtType_MUTATION)] = 7;
        tj_JavaTranslator$1_$SwitchMap$trackerjo$javaish$Statements$StmtType.data[jl_Enum_ordinal(tj_Statements$StmtType_RETURN)] = 8;
        tj_JavaTranslator$1_$SwitchMap$trackerjo$javaish$Statements$StmtType.data[jl_Enum_ordinal(tj_Statements$StmtType_FUNCTION)] = 9;
        tj_JavaTranslator$1_$SwitchMap$trackerjo$javaish$Statements$StmtType.data[jl_Enum_ordinal(tj_Statements$StmtType_IF)] = 10;
        tj_JavaTranslator$1_$SwitchMap$trackerjo$javaish$Statements$StmtType.data[jl_Enum_ordinal(tj_Statements$StmtType_WHILE)] = 11;
        tj_JavaTranslator$1_$SwitchMap$trackerjo$javaish$Statements$StmtType.data[jl_Enum_ordinal(tj_Statements$StmtType_FOREACH)] = 12;
        tj_JavaTranslator$1_$SwitchMap$trackerjo$javaish$Statements$StmtType.data[jl_Enum_ordinal(tj_Statements$StmtType_FORWHEN)] = 13;
        tj_JavaTranslator$1_$SwitchMap$trackerjo$javaish$Statements$StmtType.data[jl_Enum_ordinal(tj_Statements$StmtType_PRINT)] = 14;
        tj_JavaTranslator$1_$SwitchMap$trackerjo$javaish$Statements$StmtType.data[jl_Enum_ordinal(tj_Statements$StmtType_SHOWMSGBOX)] = 15;
        tj_JavaTranslator$1_$SwitchMap$trackerjo$javaish$Statements$StmtType.data[jl_Enum_ordinal(tj_Statements$StmtType_REMOVEAT)] = 16;
        tj_JavaTranslator$1_$SwitchMap$trackerjo$javaish$Statements$StmtType.data[jl_Enum_ordinal(tj_Statements$StmtType_REMOVEFROM)] = 17;
        tj_JavaTranslator$1_$SwitchMap$trackerjo$javaish$Statements$StmtType.data[jl_Enum_ordinal(tj_Statements$StmtType_REMOVEALLFROM)] = 18;
    }
    function jl_Long() {
        jl_Number.call(this);
        this.$value35 = Long_ZERO;
    }
    var jl_Long_TYPE = null;
    function jl_Long_parseLong($s) {
        var var$2, var$3, var$4, var$5, var$6, var$7, var$8, var$9;
        if ($s === null) {
            $s = new jl_NumberFormatException;
            jl_Throwable__init_($s, $rt_s(14));
            $rt_throw($s);
        }
        var$2 = jl_String_length($s);
        if (0 == var$2) {
            $s = new jl_NumberFormatException;
            jl_Throwable__init_($s, $rt_s(15));
            $rt_throw($s);
        }
        a: {
            var$3 = 0;
            switch (jl_String_charAt($s, 0)) {
                case 43:
                    break;
                case 45:
                    var$3 = 1;
                    var$4 = 1;
                    break a;
                default:
                    var$4 = 0;
                    break a;
            }
            var$4 = 1;
        }
        var$5 = Long_ZERO;
        b: {
            c: {
                while (var$4 < var$2) {
                    var$6 = var$4 + 1 | 0;
                    var$7 = jl_Character_getNumericValue(jl_String_charAt($s, var$4));
                    if (var$7 < 0) {
                        var$8 = new jl_NumberFormatException;
                        $s = jl_String_valueOf(jl_String_substring($s, 0, var$2));
                        var$9 = new jl_StringBuilder;
                        jl_AbstractStringBuilder__init_(var$9);
                        jl_StringBuilder_append(jl_StringBuilder_append(var$9, $rt_s(16)), $s);
                        jl_Throwable__init_(var$8, jl_AbstractStringBuilder_toString(var$9));
                        $rt_throw(var$8);
                    }
                    if (var$7 >= 10) {
                        var$8 = new jl_NumberFormatException;
                        $s = jl_String_valueOf(jl_String_substring($s, 0, var$2));
                        var$9 = new jl_StringBuilder;
                        jl_AbstractStringBuilder__init_(var$9);
                        jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(var$9, $rt_s(17)), 10), $rt_s(10)), $s);
                        jl_Throwable__init_(var$8, jl_AbstractStringBuilder_toString(var$9));
                        $rt_throw(var$8);
                    }
                    var$5 = Long_add(Long_mul(Long_fromInt(10), var$5), Long_fromInt(var$7));
                    if (Long_lt(var$5, Long_ZERO)) {
                        if (var$6 != var$2)
                            break b;
                        if (Long_ne(var$5, Long_create(0, 2147483648)))
                            break b;
                        if (!var$3)
                            break b;
                        var$5 = Long_create(0, 2147483648);
                        break c;
                    }
                    var$4 = var$6;
                }
                if (var$3)
                    var$5 = Long_neg(var$5);
            }
            return var$5;
        }
        var$8 = new jl_NumberFormatException;
        $s = jl_String_valueOf(jl_String_substring($s, 0, var$2));
        var$9 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$9);
        jl_StringBuilder_append(jl_StringBuilder_append(var$9, $rt_s(18)), $s);
        jl_Throwable__init_(var$8, jl_AbstractStringBuilder_toString(var$9));
        $rt_throw(var$8);
    }
    function jl_Long_valueOf($s) {
        var var$2;
        var$2 = jl_Long_parseLong($s);
        $s = new jl_Long;
        $s.$value35 = var$2;
        return $s;
    }
    function jl_Long_intValue($this) {
        return Long_lo($this.$value35);
    }
    function jl_Long_longValue($this) {
        return $this.$value35;
    }
    function jl_Long_floatValue($this) {
        return Long_toNumber($this.$value35);
    }
    function jl_Long_toString($this) {
        var var$1, var$2;
        var$1 = $this.$value35;
        var$2 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$2);
        return jl_AbstractStringBuilder_toString(jl_StringBuilder_append2(var$2, var$1));
    }
    function jl_Long_equals($this, $other) {
        if ($this === $other)
            return 1;
        return $other instanceof jl_Long && Long_eq($other.$value35, $this.$value35) ? 1 : 0;
    }
    function jl_Long_numberOfLeadingZeros($i) {
        var $n, var$3;
        if (Long_eq($i, Long_ZERO))
            return 64;
        $n = 0;
        var$3 = Long_shru($i, 32);
        if (Long_ne(var$3, Long_ZERO))
            $n = 32;
        else
            var$3 = $i;
        $i = Long_shru(var$3, 16);
        if (Long_eq($i, Long_ZERO))
            $i = var$3;
        else
            $n = $n | 16;
        var$3 = Long_shru($i, 8);
        if (Long_eq(var$3, Long_ZERO))
            var$3 = $i;
        else
            $n = $n | 8;
        $i = Long_shru(var$3, 4);
        if (Long_eq($i, Long_ZERO))
            $i = var$3;
        else
            $n = $n | 4;
        var$3 = Long_shru($i, 2);
        if (Long_eq(var$3, Long_ZERO))
            var$3 = $i;
        else
            $n = $n | 2;
        if (Long_ne(Long_shru(var$3, 1), Long_ZERO))
            $n = $n | 1;
        return (64 - $n | 0) - 1 | 0;
    }
    function jl_Long_divideUnsigned(var$1, var$2) {
        return Long_udiv(var$1, var$2);
    }
    function jl_Long_remainderUnsigned(var$1, var$2) {
        return Long_urem(var$1, var$2);
    }
    function jl_Long_compareUnsigned(var$1, var$2) {
        return Long_ucompare(var$1, var$2);
    }
    function jl_Long__clinit_() {
        jl_Long_TYPE = $rt_cls($rt_longcls());
    }
    var ju_Arrays = $rt_classWithoutFields();
    function ju_Arrays_copyOf0($array, $length) {
        var $result, var$4, $sz, $i;
        $array = $array.data;
        $result = $rt_createCharArray($length);
        var$4 = $result.data;
        $sz = jl_Math_min($length, $array.length);
        $i = 0;
        while ($i < $sz) {
            var$4[$i] = $array[$i];
            $i = $i + 1 | 0;
        }
        return $result;
    }
    function ju_Arrays_copyOf1($array, $length) {
        var $result, var$4, $sz, $i;
        $array = $array.data;
        $result = $rt_createByteArray($length);
        var$4 = $result.data;
        $sz = jl_Math_min($length, $array.length);
        $i = 0;
        while ($i < $sz) {
            var$4[$i] = $array[$i];
            $i = $i + 1 | 0;
        }
        return $result;
    }
    function ju_Arrays_copyOf($original, $newLength) {
        var var$3, $result, $sz, $i;
        var$3 = $original.data;
        $result = jlr_Array_newInstance(jl_Class_getComponentType(jl_Object_getClass($original)), $newLength);
        $sz = jl_Math_min($newLength, var$3.length);
        $i = 0;
        while ($i < $sz) {
            $result.data[$i] = var$3[$i];
            $i = $i + 1 | 0;
        }
        return $result;
    }
    function ju_Arrays_fill($a, $val) {
        var var$3, var$4, var$5, var$6;
        $a = $a.data;
        var$3 = 0;
        var$4 = $a.length;
        if (var$3 > var$4) {
            var$5 = new jl_IllegalArgumentException;
            jl_Exception__init_(var$5);
            $rt_throw(var$5);
        }
        while (var$3 < var$4) {
            var$6 = var$3 + 1 | 0;
            $a[var$3] = $val;
            var$3 = var$6;
        }
    }
    function ju_Arrays_hashCode($a) {
        var $hash, $i, var$4, var$5;
        if ($a === null)
            return 0;
        $hash = 1;
        $i = 0;
        while (true) {
            var$4 = $a.data;
            if ($i >= var$4.length)
                break;
            $hash = 31 * $hash | 0;
            var$5 = var$4[$i];
            $hash = $hash + (var$5 !== null ? var$5.$hashCode0() : 0) | 0;
            $i = $i + 1 | 0;
        }
        return $hash;
    }
    function jn_Buffer() {
        var a = this; jl_Object.call(a);
        a.$capacity = 0;
        a.$position = 0;
        a.$limit = 0;
        a.$mark0 = 0;
    }
    function jn_Buffer__init_($this, $capacity) {
        $this.$mark0 = (-1);
        $this.$capacity = $capacity;
        $this.$limit = $capacity;
    }
    function jn_Buffer_position($this, $newPosition) {
        var var$2, var$3, var$4;
        if ($newPosition >= 0 && $newPosition <= $this.$limit) {
            $this.$position = $newPosition;
            if ($newPosition < $this.$mark0)
                $this.$mark0 = 0;
            return $this;
        }
        var$2 = new jl_IllegalArgumentException;
        var$3 = $this.$limit;
        var$4 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$4);
        jl_AbstractStringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(var$4, $rt_s(625)), $newPosition), $rt_s(490)), var$3), 93);
        jl_Throwable__init_(var$2, jl_AbstractStringBuilder_toString(var$4));
        $rt_throw(var$2);
    }
    function jn_Buffer_remaining($this) {
        return $this.$limit - $this.$position | 0;
    }
    function jn_Buffer_hasRemaining($this) {
        return $this.$position >= $this.$limit ? 0 : 1;
    }
    var jn_CharBuffer = $rt_classWithoutFields(jn_Buffer);
    function jn_CharBuffer_wrap($array, $offset, $length) {
        var var$4, var$5, var$6;
        var$4 = $array.data;
        var$5 = new jn_CharBufferOverArray;
        var$6 = var$4.length;
        $length = $offset + $length | 0;
        jn_Buffer__init_(var$5, var$6);
        var$5.$position = $offset;
        var$5.$limit = $length;
        var$5.$start4 = 0;
        var$5.$readOnly = 0;
        var$5.$array1 = $array;
        return var$5;
    }
    function jn_ByteBuffer() {
        var a = this; jn_Buffer.call(a);
        a.$start2 = 0;
        a.$array0 = null;
        a.$order = null;
    }
    function jn_ByteBuffer_allocate($capacity) {
        var var$2, var$3;
        if ($capacity >= 0)
            return jn_ByteBufferImpl__init_(0, $capacity, $rt_createByteArray($capacity), 0, $capacity, 0, 0);
        var$2 = new jl_IllegalArgumentException;
        var$3 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$3);
        jl_StringBuilder_append0(jl_StringBuilder_append(var$3, $rt_s(626)), $capacity);
        jl_Throwable__init_(var$2, jl_AbstractStringBuilder_toString(var$3));
        $rt_throw(var$2);
    }
    function jn_ByteBuffer_wrap($array) {
        var var$2;
        var$2 = $array.data.length;
        return jn_ByteBufferImpl__init_(0, var$2, $array, 0, 0 + var$2 | 0, 0, 0);
    }
    function jn_ByteBuffer_put($this, $src, $offset, $length) {
        var var$4, var$5, var$6, var$7, var$8, var$9, $pos, $i, var$12;
        if (!$length)
            return $this;
        if ($this.$readOnly0) {
            var$4 = new jn_ReadOnlyBufferException;
            jl_Exception__init_(var$4);
            $rt_throw(var$4);
        }
        if (jn_Buffer_remaining($this) < $length) {
            var$4 = new jn_BufferOverflowException;
            jl_Exception__init_(var$4);
            $rt_throw(var$4);
        }
        if ($offset >= 0) {
            var$5 = $src.data;
            var$6 = var$5.length;
            if ($offset <= var$6) {
                var$7 = $offset + $length | 0;
                if (var$7 > var$6) {
                    var$8 = new jl_IndexOutOfBoundsException;
                    var$9 = new jl_StringBuilder;
                    jl_AbstractStringBuilder__init_(var$9);
                    jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(var$9, $rt_s(627)), var$7), $rt_s(492)), var$6);
                    jl_Throwable__init_(var$8, jl_AbstractStringBuilder_toString(var$9));
                    $rt_throw(var$8);
                }
                if ($length < 0) {
                    var$4 = new jl_IndexOutOfBoundsException;
                    var$8 = new jl_StringBuilder;
                    jl_AbstractStringBuilder__init_(var$8);
                    jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(var$8, $rt_s(493)), $length), $rt_s(494));
                    jl_Throwable__init_(var$4, jl_AbstractStringBuilder_toString(var$8));
                    $rt_throw(var$4);
                }
                var$7 = $this.$position;
                $pos = var$7 + $this.$start2 | 0;
                $i = 0;
                while ($i < $length) {
                    $src = $this.$array0.data;
                    var$12 = $pos + 1 | 0;
                    var$6 = $offset + 1 | 0;
                    $src[$pos] = var$5[$offset];
                    $i = $i + 1 | 0;
                    $pos = var$12;
                    $offset = var$6;
                }
                $this.$position = var$7 + $length | 0;
                return $this;
            }
        }
        $src = $src.data;
        var$4 = new jl_IndexOutOfBoundsException;
        $length = $src.length;
        var$8 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$8);
        jl_AbstractStringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(var$8, $rt_s(489)), $offset), $rt_s(490)), $length), 41);
        jl_Throwable__init_(var$4, jl_AbstractStringBuilder_toString(var$8));
        $rt_throw(var$4);
    }
    function jn_ByteBuffer_clear($this) {
        $this.$position = 0;
        $this.$limit = $this.$capacity;
        $this.$mark0 = (-1);
        return $this;
    }
    function jnc_CodingErrorAction() {
        jl_Object.call(this);
        this.$name20 = null;
    }
    var jnc_CodingErrorAction_IGNORE = null;
    var jnc_CodingErrorAction_REPLACE = null;
    var jnc_CodingErrorAction_REPORT = null;
    function jnc_CodingErrorAction_$callClinit() {
        jnc_CodingErrorAction_$callClinit = $rt_eraseClinit(jnc_CodingErrorAction);
        jnc_CodingErrorAction__clinit_();
    }
    function jnc_CodingErrorAction__init_(var_0) {
        var var_1 = new jnc_CodingErrorAction();
        jnc_CodingErrorAction__init_0(var_1, var_0);
        return var_1;
    }
    function jnc_CodingErrorAction__init_0($this, $name) {
        jnc_CodingErrorAction_$callClinit();
        $this.$name20 = $name;
    }
    function jnc_CodingErrorAction__clinit_() {
        jnc_CodingErrorAction_IGNORE = jnc_CodingErrorAction__init_($rt_s(628));
        jnc_CodingErrorAction_REPLACE = jnc_CodingErrorAction__init_($rt_s(629));
        jnc_CodingErrorAction_REPORT = jnc_CodingErrorAction__init_($rt_s(630));
    }
    function jur_AbstractSet() {
        var a = this; jl_Object.call(a);
        a.$next4 = null;
        a.$isSecondPassVisited = 0;
        a.$index5 = null;
        a.$type11 = 0;
    }
    var jur_AbstractSet_counter = 0;
    function jur_AbstractSet__init_($this) {
        var var$1;
        var$1 = jur_AbstractSet_counter;
        jur_AbstractSet_counter = var$1 + 1 | 0;
        $this.$index5 = jl_Integer_toString(var$1);
    }
    function jur_AbstractSet__init_0($this, $n) {
        var var$2;
        var$2 = jur_AbstractSet_counter;
        jur_AbstractSet_counter = var$2 + 1 | 0;
        $this.$index5 = jl_Integer_toString(var$2);
        $this.$next4 = $n;
    }
    function jur_AbstractSet_find($this, $stringIndex, $testString, $matchResult) {
        var $length;
        $length = $matchResult.$rightBound0;
        while (true) {
            if ($stringIndex > $length)
                return (-1);
            if ($this.$matches($stringIndex, $testString, $matchResult) >= 0)
                break;
            $stringIndex = $stringIndex + 1 | 0;
        }
        return $stringIndex;
    }
    function jur_AbstractSet_findBack($this, $stringIndex, $startSearch, $testString, $matchResult) {
        while (true) {
            if ($startSearch < $stringIndex)
                return (-1);
            if ($this.$matches($startSearch, $testString, $matchResult) >= 0)
                break;
            $startSearch = $startSearch + (-1) | 0;
        }
        return $startSearch;
    }
    function jur_AbstractSet_setType($this, $type) {
        $this.$type11 = $type;
    }
    function jur_AbstractSet_getType($this) {
        return $this.$type11;
    }
    function jur_AbstractSet_getQualifiedName($this) {
        var var$1, var$2, var$3;
        var$1 = $this.$index5;
        var$2 = $this.$getName();
        var$3 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$3);
        jl_AbstractStringBuilder_append(var$3, 60);
        var$1 = jl_StringBuilder_append(var$3, var$1);
        jl_AbstractStringBuilder_append(var$1, 58);
        jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$1, var$2), 62);
        return jl_AbstractStringBuilder_toString(var$3);
    }
    function jur_AbstractSet_toString($this) {
        return jur_AbstractSet_getQualifiedName($this);
    }
    function jur_AbstractSet_getNext($this) {
        return $this.$next4;
    }
    function jur_AbstractSet_setNext($this, $next) {
        $this.$next4 = $next;
    }
    function jur_AbstractSet_first($this, $set) {
        return 1;
    }
    function jur_AbstractSet_processBackRefReplacement($this) {
        return null;
    }
    function jur_AbstractSet_processSecondPass($this) {
        var $set;
        $this.$isSecondPassVisited = 1;
        $set = $this.$next4;
        if ($set !== null) {
            if (!$set.$isSecondPassVisited) {
                $set = $set.$processBackRefReplacement();
                if ($set !== null) {
                    $this.$next4.$isSecondPassVisited = 1;
                    $this.$next4 = $set;
                }
                $this.$next4.$processSecondPass();
            } else if ($set instanceof jur_SingleSet && $set.$fSet.$isBackReferenced)
                $this.$next4 = $set.$next4;
        }
    }
    function jur_AbstractSet__clinit_() {
        jur_AbstractSet_counter = 1;
    }
    function tj_RobotActionElmt() {
        var a = this; tj_Element.call(a);
        a.$action = null;
        a.$params1 = null;
    }
    function tj_RobotActionElmt__init_(var_0, var_1) {
        var var_2 = new tj_RobotActionElmt();
        tj_RobotActionElmt__init_0(var_2, var_0, var_1);
        return var_2;
    }
    function tj_RobotActionElmt__init_0($this, $action, $params) {
        $this.$params1 = ju_ArrayList__init_();
        $this.$action = $action;
        tj_Element$ElementType_$callClinit();
        $this.$type0 = tj_Element$ElementType_RobotActionElmt;
        $this.$params1 = $params;
    }
    function tj_RobotActionElmt_getAction($this) {
        return $this.$action;
    }
    function tj_RobotActionElmt_toString($this) {
        var var$1, var$2, var$3;
        var$1 = jl_String_valueOf($this.$action);
        var$2 = ju_ArrayList_toString($this.$params1);
        var$3 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$3);
        var$1 = jl_StringBuilder_append(var$3, var$1);
        jl_AbstractStringBuilder_append(var$1, 40);
        jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$1, var$2), 41);
        return jl_AbstractStringBuilder_toString(var$3);
    }
    var otjc_JSArray = $rt_classWithoutFields();
    function otjc_JSArray_get$exported$0(var$0, var$1) {
        return otji_JSWrapper_javaToJs(var$0.$get0(var$1));
    }
    function otjc_JSArray_getLength$exported$1(var$0) {
        return var$0.$getLength();
    }
    var otjc_JSString = $rt_classWithoutFields();
    var otcic_StderrOutputStream = $rt_classWithoutFields(otcic_ConsoleOutputStream);
    var otcic_StderrOutputStream_INSTANCE = null;
    function otcic_StderrOutputStream_write($this, $b, $off, $len) {
        var var$4;
        var$4 = 0;
        while (var$4 < $len) {
            $rt_putStderr($b.data[var$4 + $off | 0] & 255);
            var$4 = var$4 + 1 | 0;
        }
    }
    function otcic_StderrOutputStream__clinit_() {
        var var$1;
        var$1 = new otcic_StderrOutputStream;
        otcic_ConsoleOutputStream__init_(var$1);
        otcic_StderrOutputStream_INSTANCE = var$1;
    }
    var tj_Debugger$Operator = $rt_classWithoutFields(jl_Enum);
    var tj_Debugger$Operator_PLUS = null;
    var tj_Debugger$Operator_MINUS = null;
    var tj_Debugger$Operator_DIVIDE = null;
    var tj_Debugger$Operator_MULTIPLY = null;
    var tj_Debugger$Operator_EQUAL = null;
    var tj_Debugger$Operator_NOT_EQUAL = null;
    var tj_Debugger$Operator_LESS_THAN = null;
    var tj_Debugger$Operator_GREATER_THAN = null;
    var tj_Debugger$Operator_LESS_THAN_EQUAL = null;
    var tj_Debugger$Operator_GREATER_THAN_EQUAL = null;
    var tj_Debugger$Operator_REMOVEALLFROM = null;
    var tj_Debugger$Operator_REMOVEAT = null;
    var tj_Debugger$Operator_REMOVEFROM = null;
    var tj_Debugger$Operator_$VALUES = null;
    function tj_Debugger$Operator_$callClinit() {
        tj_Debugger$Operator_$callClinit = $rt_eraseClinit(tj_Debugger$Operator);
        tj_Debugger$Operator__clinit_();
    }
    function tj_Debugger$Operator__init_(var_0, var_1) {
        var var_2 = new tj_Debugger$Operator();
        tj_Debugger$Operator__init_0(var_2, var_0, var_1);
        return var_2;
    }
    function tj_Debugger$Operator_values() {
        tj_Debugger$Operator_$callClinit();
        return tj_Debugger$Operator_$VALUES.$clone();
    }
    function tj_Debugger$Operator__init_0($this, var$1, var$2) {
        tj_Debugger$Operator_$callClinit();
        jl_Enum__init_($this, var$1, var$2);
    }
    function tj_Debugger$Operator__clinit_() {
        var var$1;
        tj_Debugger$Operator_PLUS = tj_Debugger$Operator__init_($rt_s(283), 0);
        tj_Debugger$Operator_MINUS = tj_Debugger$Operator__init_($rt_s(285), 1);
        tj_Debugger$Operator_DIVIDE = tj_Debugger$Operator__init_($rt_s(292), 2);
        tj_Debugger$Operator_MULTIPLY = tj_Debugger$Operator__init_($rt_s(290), 3);
        tj_Debugger$Operator_EQUAL = tj_Debugger$Operator__init_($rt_s(284), 4);
        tj_Debugger$Operator_NOT_EQUAL = tj_Debugger$Operator__init_($rt_s(289), 5);
        tj_Debugger$Operator_LESS_THAN = tj_Debugger$Operator__init_($rt_s(274), 6);
        tj_Debugger$Operator_GREATER_THAN = tj_Debugger$Operator__init_($rt_s(288), 7);
        tj_Debugger$Operator_LESS_THAN_EQUAL = tj_Debugger$Operator__init_($rt_s(272), 8);
        tj_Debugger$Operator_GREATER_THAN_EQUAL = tj_Debugger$Operator__init_($rt_s(286), 9);
        tj_Debugger$Operator_REMOVEALLFROM = tj_Debugger$Operator__init_($rt_s(266), 10);
        tj_Debugger$Operator_REMOVEAT = tj_Debugger$Operator__init_($rt_s(261), 11);
        var$1 = tj_Debugger$Operator__init_($rt_s(263), 12);
        tj_Debugger$Operator_REMOVEFROM = var$1;
        tj_Debugger$Operator_$VALUES = $rt_createArrayFromData(tj_Debugger$Operator, [tj_Debugger$Operator_PLUS, tj_Debugger$Operator_MINUS, tj_Debugger$Operator_DIVIDE, tj_Debugger$Operator_MULTIPLY, tj_Debugger$Operator_EQUAL, tj_Debugger$Operator_NOT_EQUAL, tj_Debugger$Operator_LESS_THAN, tj_Debugger$Operator_GREATER_THAN, tj_Debugger$Operator_LESS_THAN_EQUAL, tj_Debugger$Operator_GREATER_THAN_EQUAL, tj_Debugger$Operator_REMOVEALLFROM, tj_Debugger$Operator_REMOVEAT, var$1]);
    }
    function juc_TimeUnit() {
        jl_Enum.call(this);
        this.$nanoseconds = Long_ZERO;
    }
    var juc_TimeUnit_NANOSECONDS = null;
    var juc_TimeUnit_MICROSECONDS = null;
    var juc_TimeUnit_MILLISECONDS = null;
    var juc_TimeUnit_SECONDS = null;
    var juc_TimeUnit_MINUTES = null;
    var juc_TimeUnit_HOURS = null;
    var juc_TimeUnit_DAYS = null;
    var juc_TimeUnit_$VALUES = null;
    function juc_TimeUnit_$callClinit() {
        juc_TimeUnit_$callClinit = $rt_eraseClinit(juc_TimeUnit);
        juc_TimeUnit__clinit_();
    }
    function juc_TimeUnit__init_(var_0, var_1, var_2) {
        var var_3 = new juc_TimeUnit();
        juc_TimeUnit__init_0(var_3, var_0, var_1, var_2);
        return var_3;
    }
    function juc_TimeUnit_values() {
        juc_TimeUnit_$callClinit();
        return juc_TimeUnit_$VALUES.$clone();
    }
    function juc_TimeUnit__init_0($this, var$1, var$2, $nanoseconds) {
        juc_TimeUnit_$callClinit();
        jl_Enum__init_($this, var$1, var$2);
        $this.$nanoseconds = $nanoseconds;
    }
    function juc_TimeUnit_sleep($this, $timeout) {
        var var$2, var$3, var$4, $ptr, $tmp;
        $ptr = 0;
        if ($rt_resuming()) {
            var $thread = $rt_nativeThread();
            $ptr = $thread.pop();var$4 = $thread.pop();var$3 = $thread.pop();var$2 = $thread.pop();$timeout = $thread.pop();$this = $thread.pop();
        }
        main: while (true) { switch ($ptr) {
        case 0:
            juc_TimeUnit_$callClinit();
            var$2 = juc_TimeUnit_MILLISECONDS;
            var$3 = $this.$nanoseconds;
            var$4 = var$2.$nanoseconds;
            $timeout = Long_ge(var$3, var$4) ? Long_mul($timeout, Long_div(var$3, var$4)) : Long_div($timeout, Long_div(var$4, var$3));
            $ptr = 1;
        case 1:
            jl_Thread_sleep($timeout);
            if ($rt_suspending()) {
                break main;
            }
            return;
        default: $rt_invalidPointer();
        }}
        $rt_nativeThread().push($this, $timeout, var$2, var$3, var$4, $ptr);
    }
    function juc_TimeUnit__clinit_() {
        var var$1;
        juc_TimeUnit_NANOSECONDS = juc_TimeUnit__init_($rt_s(631), 0, Long_fromInt(1));
        juc_TimeUnit_MICROSECONDS = juc_TimeUnit__init_($rt_s(632), 1, Long_fromInt(1000));
        juc_TimeUnit_MILLISECONDS = juc_TimeUnit__init_($rt_s(633), 2, Long_fromInt(1000000));
        juc_TimeUnit_SECONDS = juc_TimeUnit__init_($rt_s(634), 3, Long_fromInt(1000000000));
        juc_TimeUnit_MINUTES = juc_TimeUnit__init_($rt_s(635), 4, Long_create(4165425152, 13));
        juc_TimeUnit_HOURS = juc_TimeUnit__init_($rt_s(636), 5, Long_create(817405952, 838));
        var$1 = juc_TimeUnit__init_($rt_s(637), 6, Long_create(2437873664, 20116));
        juc_TimeUnit_DAYS = var$1;
        juc_TimeUnit_$VALUES = $rt_createArrayFromData(juc_TimeUnit, [juc_TimeUnit_NANOSECONDS, juc_TimeUnit_MICROSECONDS, juc_TimeUnit_MILLISECONDS, juc_TimeUnit_SECONDS, juc_TimeUnit_MINUTES, juc_TimeUnit_HOURS, var$1]);
    }
    var jl_InterruptedException = $rt_classWithoutFields(jl_Exception);
    var oj_JSONString = $rt_classWithoutFields(0);
    var jl_Byte = $rt_classWithoutFields(jl_Number);
    var jl_Short = $rt_classWithoutFields(jl_Number);
    function jm_BigInteger() {
        var a = this; jl_Number.call(a);
        a.$digits = null;
        a.$numberLength = 0;
        a.$sign2 = 0;
        a.$firstNonzeroDigit = 0;
    }
    var jm_BigInteger_ZERO = null;
    var jm_BigInteger_ONE = null;
    var jm_BigInteger_TEN = null;
    var jm_BigInteger_MINUS_ONE = null;
    var jm_BigInteger_SMALL_VALUES = null;
    var jm_BigInteger_TWO_POWS = null;
    function jm_BigInteger_$callClinit() {
        jm_BigInteger_$callClinit = $rt_eraseClinit(jm_BigInteger);
        jm_BigInteger__clinit_();
    }
    function jm_BigInteger__init_(var_0, var_1) {
        var var_2 = new jm_BigInteger();
        jm_BigInteger__init_0(var_2, var_0, var_1);
        return var_2;
    }
    function jm_BigInteger__init_1(var_0, var_1, var_2) {
        var var_3 = new jm_BigInteger();
        jm_BigInteger__init_2(var_3, var_0, var_1, var_2);
        return var_3;
    }
    function jm_BigInteger__init_3(var_0, var_1) {
        var var_2 = new jm_BigInteger();
        jm_BigInteger__init_4(var_2, var_0, var_1);
        return var_2;
    }
    function jm_BigInteger__init_0($this, $sign, $value) {
        var var$3;
        jm_BigInteger_$callClinit();
        $this.$firstNonzeroDigit = (-2);
        $this.$sign2 = $sign;
        $this.$numberLength = 1;
        var$3 = $rt_createIntArray(1);
        var$3.data[0] = $value;
        $this.$digits = var$3;
    }
    function jm_BigInteger__init_2($this, $sign, $numberLength, $digits) {
        jm_BigInteger_$callClinit();
        $this.$firstNonzeroDigit = (-2);
        $this.$sign2 = $sign;
        $this.$numberLength = $numberLength;
        $this.$digits = $digits;
    }
    function jm_BigInteger__init_4($this, $sign, $val) {
        var var$3;
        jm_BigInteger_$callClinit();
        $this.$firstNonzeroDigit = (-2);
        $this.$sign2 = $sign;
        if (Long_eq(Long_and($val, Long_create(0, 4294967295)), Long_ZERO)) {
            $this.$numberLength = 1;
            var$3 = $rt_createIntArray(1);
            var$3.data[0] = Long_lo($val);
            $this.$digits = var$3;
        } else {
            $this.$numberLength = 2;
            $this.$digits = $rt_createIntArrayFromData([Long_lo($val), Long_hi($val)]);
        }
    }
    function jm_BigInteger_valueOf($val) {
        jm_BigInteger_$callClinit();
        if (Long_lt($val, Long_ZERO)) {
            if (Long_eq($val, Long_fromInt(-1)))
                return jm_BigInteger_MINUS_ONE;
            return jm_BigInteger__init_3((-1), Long_neg($val));
        }
        if (Long_gt($val, Long_fromInt(10)))
            return jm_BigInteger__init_3(1, $val);
        return jm_BigInteger_SMALL_VALUES.data[Long_lo($val)];
    }
    function jm_BigInteger_setFromString($bi, $val, $radix) {
        var $stringLength, $sign, $substrStart, $newDigit, $charsPerInt, $bigRadixDigitsLength, $topChars, $digits, $bigRadix, $digitIndex, var$14, $substrStart_0, $bigRadixDigit, var$17, var$18;
        jm_BigInteger_$callClinit();
        $stringLength = jl_String_length($val);
        if (jl_String_charAt($val, 0) != 45) {
            $sign = 1;
            $substrStart = 0;
            $newDigit = $stringLength;
        } else {
            $sign = (-1);
            $substrStart = 1;
            $newDigit = $stringLength + (-1) | 0;
        }
        $charsPerInt = jm_Conversion_digitFitInInt.data[$radix];
        $bigRadixDigitsLength = $newDigit / $charsPerInt | 0;
        $topChars = $newDigit % $charsPerInt | 0;
        if ($topChars)
            $bigRadixDigitsLength = $bigRadixDigitsLength + 1 | 0;
        $digits = $rt_createIntArray($bigRadixDigitsLength);
        $bigRadix = jm_Conversion_bigRadices.data[$radix - 2 | 0];
        $digitIndex = 0;
        if (!$topChars)
            $topChars = $charsPerInt;
        var$14 = $digits.data;
        $substrStart_0 = $substrStart + $topChars | 0;
        while ($substrStart < $stringLength) {
            $bigRadixDigit = jl_Integer_parseInt(jl_String_substring($val, $substrStart, $substrStart_0), $radix);
            jm_Multiplication_$callClinit();
            $newDigit = jm_Multiplication_multiplyByInt($digits, $digits, $digitIndex, $bigRadix);
            var$17 = Long_and(Long_fromInt($bigRadixDigit), Long_create(4294967295, 0));
            $bigRadixDigitsLength = 0;
            while (Long_ne(var$17, Long_ZERO) && $bigRadixDigitsLength < $digitIndex) {
                var$18 = Long_add(var$17, Long_and(Long_fromInt(var$14[$bigRadixDigitsLength]), Long_create(4294967295, 0)));
                var$14[$bigRadixDigitsLength] = Long_lo(var$18);
                var$17 = Long_shr(var$18, 32);
                $bigRadixDigitsLength = $bigRadixDigitsLength + 1 | 0;
            }
            $substrStart = $newDigit + Long_lo(var$17) | 0;
            $newDigit = $digitIndex + 1 | 0;
            var$14[$digitIndex] = $substrStart;
            $bigRadixDigitsLength = $substrStart_0 + $charsPerInt | 0;
            $digitIndex = $newDigit;
            $substrStart = $substrStart_0;
            $substrStart_0 = $bigRadixDigitsLength;
        }
        $bi.$sign2 = $sign;
        $bi.$numberLength = $digitIndex;
        $bi.$digits = $digits;
        jm_BigInteger_cutOffLeadingZeroes($bi);
    }
    function jm_BigInteger_add($this, $val) {
        var var$2, var$3, var$4, var$5, var$6, var$7, var$8, var$9, var$10;
        a: {
            var$2 = $this.$sign2;
            var$3 = $val.$sign2;
            if (var$2) {
                if (!var$3)
                    $val = $this;
                else {
                    var$4 = $this.$numberLength;
                    var$5 = $val.$numberLength;
                    if ((var$4 + var$5 | 0) == 2) {
                        var$6 = Long_and(Long_fromInt($this.$digits.data[0]), Long_create(4294967295, 0));
                        var$7 = Long_and(Long_fromInt($val.$digits.data[0]), Long_create(4294967295, 0));
                        if (var$2 != var$3)
                            $val = jm_BigInteger_valueOf(var$2 >= 0 ? Long_sub(var$6, var$7) : Long_sub(var$7, var$6));
                        else {
                            var$6 = Long_add(var$6, var$7);
                            var$8 = Long_lo(var$6);
                            var$4 = Long_hi(var$6);
                            $val = !var$4 ? jm_BigInteger__init_(var$2, var$8) : jm_BigInteger__init_1(var$2, 2, $rt_createIntArrayFromData([var$8, var$4]));
                        }
                    } else {
                        if (var$2 == var$3)
                            var$9 = var$4 < var$5 ? jm_Elementary_add($val.$digits, var$5, $this.$digits, var$4) : jm_Elementary_add($this.$digits, var$4, $val.$digits, var$5);
                        else {
                            var$8 = $rt_compare(var$4, var$5);
                            var$8 = !var$8 ? jm_Elementary_compareArrays($this.$digits, $val.$digits, var$4) : var$8 <= 0 ? (-1) : 1;
                            if (!var$8) {
                                jm_BigInteger_$callClinit();
                                $val = jm_BigInteger_ZERO;
                                break a;
                            }
                            if (var$8 != 1) {
                                var$9 = jm_Elementary_subtract($val.$digits, var$5, $this.$digits, var$4);
                                var$2 = var$3;
                            } else
                                var$9 = jm_Elementary_subtract($this.$digits, var$4, $val.$digits, var$5);
                        }
                        var$10 = var$9.data;
                        $val = jm_BigInteger__init_1(var$2, var$10.length, var$9);
                        jm_BigInteger_cutOffLeadingZeroes($val);
                    }
                }
            }
        }
        return $val;
    }
    function jm_BigInteger_subtract($this, $val) {
        var var$2, var$3, var$4, var$5, var$6, var$7, var$8, var$9, var$10;
        a: {
            var$2 = $this.$sign2;
            var$3 = $val.$sign2;
            if (var$3) {
                if (!var$2)
                    $this = !var$3 ? $val : jm_BigInteger__init_1( -var$3 | 0, $val.$numberLength, $val.$digits);
                else {
                    var$4 = $this.$numberLength;
                    var$5 = $val.$numberLength;
                    if ((var$4 + var$5 | 0) == 2) {
                        var$6 = Long_and(Long_fromInt($this.$digits.data[0]), Long_create(4294967295, 0));
                        var$7 = Long_and(Long_fromInt($val.$digits.data[0]), Long_create(4294967295, 0));
                        if (var$2 < 0)
                            var$6 = Long_neg(var$6);
                        if (var$3 < 0)
                            var$7 = Long_neg(var$7);
                        $this = jm_BigInteger_valueOf(Long_sub(var$6, var$7));
                    } else {
                        var$8 = $rt_compare(var$4, var$5);
                        var$8 = !var$8 ? jm_Elementary_compareArrays($this.$digits, $val.$digits, var$4) : var$8 <= 0 ? (-1) : 1;
                        if (var$8 == (-1)) {
                            var$8 =  -var$3 | 0;
                            var$9 = var$2 != var$3 ? jm_Elementary_add($val.$digits, var$5, $this.$digits, var$4) : jm_Elementary_subtract($val.$digits, var$5, $this.$digits, var$4);
                        } else if (var$2 != var$3) {
                            var$9 = jm_Elementary_add($this.$digits, var$4, $val.$digits, var$5);
                            var$8 = var$2;
                        } else {
                            if (!var$8) {
                                jm_BigInteger_$callClinit();
                                $this = jm_BigInteger_ZERO;
                                break a;
                            }
                            var$9 = jm_Elementary_subtract($this.$digits, var$4, $val.$digits, var$5);
                            var$8 = var$2;
                        }
                        var$10 = var$9.data;
                        $this = jm_BigInteger__init_1(var$8, var$10.length, var$9);
                        jm_BigInteger_cutOffLeadingZeroes($this);
                    }
                }
            }
        }
        return $this;
    }
    function jm_BigInteger_shiftRight($this, $n) {
        if ($n && $this.$sign2)
            return $n > 0 ? jm_BitLevel_shiftRight($this, $n) : jm_BitLevel_shiftLeft($this,  -$n | 0);
        return $this;
    }
    function jm_BigInteger_shiftLeft($this, $n) {
        if ($n && $this.$sign2)
            return $n > 0 ? jm_BitLevel_shiftLeft($this, $n) : jm_BitLevel_shiftRight($this,  -$n | 0);
        return $this;
    }
    function jm_BigInteger_longValue($this) {
        var $value, var$2;
        if ($this.$numberLength <= 1)
            $value = Long_and(Long_fromInt($this.$digits.data[0]), Long_create(4294967295, 0));
        else {
            var$2 = $this.$digits.data;
            $value = Long_or(Long_shl(Long_fromInt(var$2[1]), 32), Long_and(Long_fromInt(var$2[0]), Long_create(4294967295, 0)));
        }
        return Long_mul(Long_fromInt($this.$sign2), $value);
    }
    function jm_BigInteger_multiply($this, $val) {
        if (!$val.$sign2) {
            jm_BigInteger_$callClinit();
            return jm_BigInteger_ZERO;
        }
        if (!$this.$sign2) {
            jm_BigInteger_$callClinit();
            return jm_BigInteger_ZERO;
        }
        jm_Multiplication_$callClinit();
        return jm_Multiplication_karatsuba($this, $val);
    }
    function jm_BigInteger_cutOffLeadingZeroes($this) {
        var var$1, var$2, var$3;
        while (true) {
            var$1 = $this.$numberLength;
            if (var$1 <= 0)
                break;
            var$2 = $this.$digits.data;
            var$1 = var$1 - 1 | 0;
            $this.$numberLength = var$1;
            if (var$2[var$1])
                break;
        }
        var$2 = $this.$digits.data;
        var$3 = $this.$numberLength;
        $this.$numberLength = var$3 + 1 | 0;
        if (!var$2[var$3])
            $this.$sign2 = 0;
    }
    function jm_BigInteger_getFirstNonzeroDigit($this) {
        var $i;
        if ($this.$firstNonzeroDigit == (-2)) {
            if (!$this.$sign2)
                $i = (-1);
            else {
                $i = 0;
                while (!$this.$digits.data[$i]) {
                    $i = $i + 1 | 0;
                }
            }
            $this.$firstNonzeroDigit = $i;
        }
        return $this.$firstNonzeroDigit;
    }
    function jm_BigInteger__clinit_() {
        var $i, var$2;
        jm_BigInteger_ZERO = jm_BigInteger__init_(0, 0);
        jm_BigInteger_ONE = jm_BigInteger__init_(1, 1);
        jm_BigInteger_TEN = jm_BigInteger__init_(1, 10);
        jm_BigInteger_MINUS_ONE = jm_BigInteger__init_((-1), 1);
        jm_BigInteger_SMALL_VALUES = $rt_createArrayFromData(jm_BigInteger, [jm_BigInteger_ZERO, jm_BigInteger_ONE, jm_BigInteger__init_(1, 2), jm_BigInteger__init_(1, 3), jm_BigInteger__init_(1, 4), jm_BigInteger__init_(1, 5), jm_BigInteger__init_(1, 6), jm_BigInteger__init_(1, 7), jm_BigInteger__init_(1, 8), jm_BigInteger__init_(1, 9), jm_BigInteger_TEN]);
        jm_BigInteger_TWO_POWS = $rt_createArray(jm_BigInteger, 32);
        $i = 0;
        while (true) {
            var$2 = jm_BigInteger_TWO_POWS.data;
            if ($i >= var$2.length)
                break;
            var$2[$i] = jm_BigInteger_valueOf(Long_shl(Long_fromInt(1), $i));
            $i = $i + 1 | 0;
        }
    }
    function jm_BigDecimal() {
        var a = this; jl_Number.call(a);
        a.$intVal = null;
        a.$bitLength = 0;
        a.$smallValue = Long_ZERO;
        a.$scale = 0;
        a.$precision = 0;
    }
    var jm_BigDecimal_ZERO = null;
    var jm_BigDecimal_ONE = null;
    var jm_BigDecimal_TEN = null;
    var jm_BigDecimal_FIVE_POW = null;
    var jm_BigDecimal_TEN_POW = null;
    var jm_BigDecimal_LONG_TEN_POW = null;
    var jm_BigDecimal_LONG_FIVE_POW = null;
    var jm_BigDecimal_LONG_FIVE_POW_BIT_LENGTH = null;
    var jm_BigDecimal_LONG_TEN_POW_BIT_LENGTH = null;
    var jm_BigDecimal_BI_SCALED_BY_ZERO = null;
    var jm_BigDecimal_ZERO_SCALED_BY = null;
    var jm_BigDecimal_CH_ZEROS = null;
    function jm_BigDecimal_$callClinit() {
        jm_BigDecimal_$callClinit = $rt_eraseClinit(jm_BigDecimal);
        jm_BigDecimal__clinit_();
    }
    function jm_BigDecimal__init_0(var_0, var_1) {
        var var_2 = new jm_BigDecimal();
        jm_BigDecimal__init_1(var_2, var_0, var_1);
        return var_2;
    }
    function jm_BigDecimal__init_2(var_0, var_1, var_2) {
        var var_3 = new jm_BigDecimal();
        jm_BigDecimal__init_3(var_3, var_0, var_1, var_2);
        return var_3;
    }
    function jm_BigDecimal__init_4(var_0) {
        var var_1 = new jm_BigDecimal();
        jm_BigDecimal__init_(var_1, var_0);
        return var_1;
    }
    function jm_BigDecimal__init_1($this, $smallValue, $scale) {
        jm_BigDecimal_$callClinit();
        $this.$smallValue = Long_fromInt($smallValue);
        $this.$scale = $scale;
        if ($smallValue < 0)
            $smallValue = $smallValue ^ (-1);
        $this.$bitLength = 32 - jl_Integer_numberOfLeadingZeros($smallValue) | 0;
    }
    function jm_BigDecimal__init_3($this, $in, $offset, $len) {
        var $last, $unscaledBuffer, var$6, var$7, $counter, $wasNonZero, var$10, $bufLength, var$12, var$13, $newScale, var$15;
        jm_BigDecimal_$callClinit();
        $last = $offset + ($len - 1 | 0) | 0;
        if ($in === null) {
            $unscaledBuffer = new jl_NullPointerException;
            jl_Exception__init_($unscaledBuffer);
            $rt_throw($unscaledBuffer);
        }
        var$6 = $in.data;
        if ($last < var$6.length && $offset >= 0 && $len > 0 && $last >= 0) {
            $unscaledBuffer = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_2($unscaledBuffer, $len);
            if ($offset > $last)
                var$7 = $offset;
            else if (var$6[$offset] != 43)
                var$7 = $offset;
            else {
                $offset = $offset + 1 | 0;
                var$7 = $offset;
            }
            $counter = 0;
            $wasNonZero = 0;
            while (true) {
                var$10 = $rt_compare(var$7, $last);
                if (var$10 > 0)
                    break;
                if (var$6[var$7] == 46)
                    break;
                if (var$6[var$7] == 101)
                    break;
                if (var$6[var$7] == 69)
                    break;
                if (!$wasNonZero) {
                    if (var$6[var$7] != 48)
                        $wasNonZero = 1;
                    else
                        $counter = $counter + 1 | 0;
                }
                var$7 = var$7 + 1 | 0;
            }
            $len = var$7 - $offset | 0;
            jl_AbstractStringBuilder_append2($unscaledBuffer, $in, $offset, $len);
            $bufLength = 0 + $len | 0;
            if (var$10 <= 0 && var$6[var$7] == 46) {
                var$12 = var$7 + 1 | 0;
                var$7 = var$12;
                while (var$7 <= $last && var$6[var$7] != 101 && var$6[var$7] != 69) {
                    if (!$wasNonZero) {
                        if (var$6[var$7] != 48)
                            $wasNonZero = 1;
                        else
                            $counter = $counter + 1 | 0;
                    }
                    var$7 = var$7 + 1 | 0;
                }
                $offset = var$7 - var$12 | 0;
                $this.$scale = $offset;
                $bufLength = $bufLength + $offset | 0;
                jl_AbstractStringBuilder_append2($unscaledBuffer, $in, var$12, $offset);
            } else
                $this.$scale = 0;
            if (var$7 <= $last && !(var$6[var$7] != 101 && var$6[var$7] != 69)) {
                $offset = var$7 + 1 | 0;
                if ($offset > $last)
                    $len = $offset;
                else if (var$6[$offset] != 43)
                    $len = $offset;
                else {
                    $len = $offset + 1 | 0;
                    if ($len > $last)
                        $len = $offset;
                    else if (var$6[$len] == 45)
                        $len = $offset;
                }
                $offset = ($last + 1 | 0) - $len | 0;
                jl_String_$callClinit();
                var$13 = jl_String__init_1($in, $len, $offset);
                $newScale = Long_sub(Long_fromInt($this.$scale), Long_fromInt(jl_Integer_parseInt0(var$13)));
                $offset = Long_lo($newScale);
                $this.$scale = $offset;
                if (Long_ne($newScale, Long_fromInt($offset))) {
                    $unscaledBuffer = new jl_NumberFormatException;
                    jl_Throwable__init_($unscaledBuffer, $rt_s(638));
                    $rt_throw($unscaledBuffer);
                }
            }
            if ($bufLength < 19) {
                $newScale = jl_Long_parseLong(jl_AbstractStringBuilder_toString($unscaledBuffer));
                $this.$smallValue = $newScale;
                $this.$bitLength = jm_BigDecimal_bitLength($newScale);
            } else {
                var$13 = new jm_BigInteger;
                var$15 = jl_AbstractStringBuilder_toString($unscaledBuffer);
                jm_BigInteger_$callClinit();
                var$13.$firstNonzeroDigit = (-2);
                if (var$15 === null) {
                    $unscaledBuffer = new jl_NullPointerException;
                    jl_Exception__init_($unscaledBuffer);
                    $rt_throw($unscaledBuffer);
                }
                if (!jl_String_length(var$15)) {
                    $unscaledBuffer = new jl_NumberFormatException;
                    jl_Throwable__init_($unscaledBuffer, $rt_s(639));
                    $rt_throw($unscaledBuffer);
                }
                jm_BigInteger_setFromString(var$13, var$15, 10);
                $this.$intVal = var$13;
                $len = var$13.$sign2;
                if (!$len)
                    $len = 0;
                else {
                    $last = var$13.$numberLength;
                    var$12 = $last << 5;
                    $offset = var$13.$digits.data[$last - 1 | 0];
                    if ($len < 0 && jm_BigInteger_getFirstNonzeroDigit(var$13) == (var$13.$numberLength - 1 | 0))
                        $offset = $offset + (-1) | 0;
                    $len = var$12 - jl_Integer_numberOfLeadingZeros($offset) | 0;
                }
                $this.$bitLength = $len;
                if ($len < 64)
                    $this.$smallValue = jm_BigInteger_longValue(var$13);
            }
            $this.$precision = jl_AbstractStringBuilder_length($unscaledBuffer) - $counter | 0;
            if (jl_StringBuilder_charAt($unscaledBuffer, 0) == 45)
                $this.$precision = $this.$precision - 1 | 0;
            return;
        }
        $unscaledBuffer = new jl_NumberFormatException;
        jl_Exception__init_($unscaledBuffer);
        $rt_throw($unscaledBuffer);
    }
    function jm_BigDecimal__init_($this, $val) {
        jm_BigDecimal_$callClinit();
        jm_BigDecimal__init_3($this, jl_String_toCharArray($val), 0, jl_String_length($val));
    }
    function jm_BigDecimal_bitLength($smallValue) {
        jm_BigDecimal_$callClinit();
        if (Long_lt($smallValue, Long_ZERO))
            $smallValue = Long_xor($smallValue, Long_fromInt(-1));
        return 64 - jl_Long_numberOfLeadingZeros($smallValue) | 0;
    }
    function jm_BigDecimal__clinit_() {
        var var$1, var$2, var$3, $i, $j;
        jm_BigDecimal_ZERO = jm_BigDecimal__init_0(0, 0);
        jm_BigDecimal_ONE = jm_BigDecimal__init_0(1, 0);
        jm_BigDecimal_TEN = jm_BigDecimal__init_0(10, 0);
        var$1 = $rt_createLongArray(19);
        var$2 = var$1.data;
        var$2[0] = Long_fromInt(1);
        var$2[1] = Long_fromInt(10);
        var$2[2] = Long_fromInt(100);
        var$2[3] = Long_fromInt(1000);
        var$2[4] = Long_fromInt(10000);
        var$2[5] = Long_fromInt(100000);
        var$2[6] = Long_fromInt(1000000);
        var$2[7] = Long_fromInt(10000000);
        var$2[8] = Long_fromInt(100000000);
        var$2[9] = Long_fromInt(1000000000);
        var$2[10] = Long_create(1410065408, 2);
        var$2[11] = Long_create(1215752192, 23);
        var$2[12] = Long_create(3567587328, 232);
        var$2[13] = Long_create(1316134912, 2328);
        var$2[14] = Long_create(276447232, 23283);
        var$2[15] = Long_create(2764472320, 232830);
        var$2[16] = Long_create(1874919424, 2328306);
        var$2[17] = Long_create(1569325056, 23283064);
        var$2[18] = Long_create(2808348672, 232830643);
        jm_BigDecimal_LONG_TEN_POW = var$1;
        var$1 = $rt_createLongArray(28);
        var$3 = var$1.data;
        var$3[0] = Long_fromInt(1);
        var$3[1] = Long_fromInt(5);
        var$3[2] = Long_fromInt(25);
        var$3[3] = Long_fromInt(125);
        var$3[4] = Long_fromInt(625);
        var$3[5] = Long_fromInt(3125);
        var$3[6] = Long_fromInt(15625);
        var$3[7] = Long_fromInt(78125);
        var$3[8] = Long_fromInt(390625);
        var$3[9] = Long_fromInt(1953125);
        var$3[10] = Long_fromInt(9765625);
        var$3[11] = Long_fromInt(48828125);
        var$3[12] = Long_fromInt(244140625);
        var$3[13] = Long_fromInt(1220703125);
        var$3[14] = Long_create(1808548329, 1);
        var$3[15] = Long_create(452807053, 7);
        var$3[16] = Long_create(2264035265, 35);
        var$3[17] = Long_create(2730241733, 177);
        var$3[18] = Long_create(766306777, 888);
        var$3[19] = Long_create(3831533885, 4440);
        var$3[20] = Long_create(1977800241, 22204);
        var$3[21] = Long_create(1299066613, 111022);
        var$3[22] = Long_create(2200365769, 555111);
        var$3[23] = Long_create(2411894253, 2775557);
        var$3[24] = Long_create(3469536673, 13877787);
        var$3[25] = Long_create(167814181, 69388939);
        var$3[26] = Long_create(839070905, 346944695);
        var$3[27] = Long_create(4195354525, 1734723475);
        jm_BigDecimal_LONG_FIVE_POW = var$1;
        jm_BigDecimal_LONG_FIVE_POW_BIT_LENGTH = $rt_createIntArray(var$3.length);
        jm_BigDecimal_LONG_TEN_POW_BIT_LENGTH = $rt_createIntArray(var$2.length);
        jm_BigDecimal_BI_SCALED_BY_ZERO = $rt_createArray(jm_BigDecimal, 11);
        jm_BigDecimal_ZERO_SCALED_BY = $rt_createArray(jm_BigDecimal, 11);
        jm_BigDecimal_CH_ZEROS = $rt_createCharArray(100);
        $i = 0;
        while ($i < jm_BigDecimal_ZERO_SCALED_BY.data.length) {
            jm_BigDecimal_BI_SCALED_BY_ZERO.data[$i] = jm_BigDecimal__init_0($i, 0);
            jm_BigDecimal_ZERO_SCALED_BY.data[$i] = jm_BigDecimal__init_0(0, $i);
            jm_BigDecimal_CH_ZEROS.data[$i] = 48;
            $i = $i + 1 | 0;
        }
        while (true) {
            var$1 = jm_BigDecimal_CH_ZEROS.data;
            if ($i >= var$1.length)
                break;
            var$1[$i] = 48;
            $i = $i + 1 | 0;
        }
        $j = 0;
        while (true) {
            var$1 = jm_BigDecimal_LONG_FIVE_POW_BIT_LENGTH.data;
            if ($j >= var$1.length)
                break;
            var$1[$j] = jm_BigDecimal_bitLength(jm_BigDecimal_LONG_FIVE_POW.data[$j]);
            $j = $j + 1 | 0;
        }
        $j = 0;
        while (true) {
            var$1 = jm_BigDecimal_LONG_TEN_POW_BIT_LENGTH.data;
            if ($j >= var$1.length)
                break;
            var$1[$j] = jm_BigDecimal_bitLength(jm_BigDecimal_LONG_TEN_POW.data[$j]);
            $j = $j + 1 | 0;
        }
        jm_Multiplication_$callClinit();
        jm_BigDecimal_TEN_POW = jm_Multiplication_bigTenPows;
        jm_BigDecimal_FIVE_POW = jm_Multiplication_bigFivePows;
    }
    function jl_Object$Monitor() {
        var a = this; jl_Object.call(a);
        a.$enteringThreads = null;
        a.$notifyListeners = null;
        a.$owner = null;
        a.$count = 0;
    }
    var jl_Runnable = $rt_classWithoutFields(0);
    function jl_Thread() {
        var a = this; jl_Object.call(a);
        a.$id = Long_ZERO;
        a.$timeSliceStart = Long_ZERO;
        a.$finishedLock = null;
        a.$interruptHandler = null;
        a.$name21 = null;
        a.$alive = 0;
        a.$target = null;
    }
    var jl_Thread_mainThread = null;
    var jl_Thread_currentThread0 = null;
    var jl_Thread_nextId = 0;
    var jl_Thread_activeCount = 0;
    var jl_Thread_defaultUncaughtExceptionHandler = null;
    function jl_Thread_$callClinit() {
        jl_Thread_$callClinit = $rt_eraseClinit(jl_Thread);
        jl_Thread__clinit_();
    }
    function jl_Thread_setCurrentThread($thread_0) {
        jl_Thread_$callClinit();
        if (jl_Thread_currentThread0 !== $thread_0)
            jl_Thread_currentThread0 = $thread_0;
        jl_Thread_currentThread0.$timeSliceStart = jl_System_currentTimeMillis();
    }
    function jl_Thread_currentThread() {
        jl_Thread_$callClinit();
        return jl_Thread_currentThread0;
    }
    function jl_Thread_sleep(var$1) {
        var thread = $rt_nativeThread();
        var javaThread = $rt_getThread();
        if (thread.isResuming()) {
            thread.status = 0;
            var result = thread.attribute;
            if (result instanceof Error) {
                throw result;
            }
            return result;
        }
        var callback = function() {};
        callback.$complete = function(val) {
            thread.attribute = val;
            $rt_setThread(javaThread);
            thread.resume();
        };
        callback.$error = function(e) {
            thread.attribute = $rt_exception(e);
            $rt_setThread(javaThread);
            thread.resume();
        };
        callback = otpp_AsyncCallbackWrapper_create(callback);
        return thread.suspend(function() {
            try {
                jl_Thread_sleep0(var$1, callback);
            } catch($e) {
                callback.$error($rt_exception($e));
            }
        });
    }
    function jl_Thread_sleep0($millis, $callback) {
        var $current, $handler;
        jl_Thread_$callClinit();
        $current = jl_Thread_currentThread();
        $handler = new jl_Thread$SleepHandler;
        $handler.$thread = $current;
        $handler.$callback = $callback;
        $handler.$scheduleId = otp_Platform_schedule($handler, Long_ge($millis, Long_fromInt(2147483647)) ? 2147483647 : Long_lo($millis));
        $current.$interruptHandler = $handler;
    }
    function jl_Thread__clinit_() {
        var var$1, var$2, var$3;
        var$1 = new jl_Thread;
        jl_Thread_$callClinit();
        var$2 = null;
        var$1.$finishedLock = new jl_Object;
        var$1.$alive = 1;
        var$1.$name21 = $rt_s(640);
        var$1.$target = var$2;
        var$3 = jl_Thread_nextId;
        jl_Thread_nextId = var$3 + 1 | 0;
        var$1.$id = Long_fromInt(var$3);
        jl_Thread_mainThread = var$1;
        jl_Thread_currentThread0 = var$1;
        jl_Thread_nextId = 1;
        jl_Thread_activeCount = 1;
        jl_Thread_defaultUncaughtExceptionHandler = new jl_DefaultUncaughtExceptionHandler;
    }
    var jl_IllegalStateException = $rt_classWithoutFields(jl_RuntimeException);
    var jl_IllegalMonitorStateException = $rt_classWithoutFields(jl_RuntimeException);
    var tj_PythonTranslator$1 = $rt_classWithoutFields();
    var tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$Statements$StmtType = null;
    var tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$Statements$RobotType = null;
    var tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$JavaishVal$JavaishType = null;
    var tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$Element$ElementType = null;
    var tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$PythonTranslator$Operator = null;
    var tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$Statements$MutationType = null;
    function tj_PythonTranslator$1_$callClinit() {
        tj_PythonTranslator$1_$callClinit = $rt_eraseClinit(tj_PythonTranslator$1);
        tj_PythonTranslator$1__clinit_();
    }
    function tj_PythonTranslator$1__clinit_() {
        var var$1, var$2;
        var$1 = $rt_createIntArray((tj_Statements$MutationType_values()).data.length);
        var$2 = var$1.data;
        tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$Statements$MutationType = var$1;
        var$2[jl_Enum_ordinal(tj_Statements$MutationType_ADD)] = 1;
        tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$Statements$MutationType.data[jl_Enum_ordinal(tj_Statements$MutationType_SUBTRACT)] = 2;
        tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$Statements$MutationType.data[jl_Enum_ordinal(tj_Statements$MutationType_MULTIPLY)] = 3;
        tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$Statements$MutationType.data[jl_Enum_ordinal(tj_Statements$MutationType_DIVIDE)] = 4;
        var$2 = $rt_createIntArray((tj_PythonTranslator$Operator_values()).data.length);
        var$1 = var$2.data;
        tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$PythonTranslator$Operator = var$2;
        var$1[jl_Enum_ordinal(tj_PythonTranslator$Operator_EQUAL)] = 1;
        tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$PythonTranslator$Operator.data[jl_Enum_ordinal(tj_PythonTranslator$Operator_NOT_EQUAL)] = 2;
        tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$PythonTranslator$Operator.data[jl_Enum_ordinal(tj_PythonTranslator$Operator_LESS_THAN)] = 3;
        tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$PythonTranslator$Operator.data[jl_Enum_ordinal(tj_PythonTranslator$Operator_GREATER_THAN)] = 4;
        tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$PythonTranslator$Operator.data[jl_Enum_ordinal(tj_PythonTranslator$Operator_LESS_THAN_EQUAL)] = 5;
        tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$PythonTranslator$Operator.data[jl_Enum_ordinal(tj_PythonTranslator$Operator_GREATER_THAN_EQUAL)] = 6;
        tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$PythonTranslator$Operator.data[jl_Enum_ordinal(tj_PythonTranslator$Operator_PLUS)] = 7;
        tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$PythonTranslator$Operator.data[jl_Enum_ordinal(tj_PythonTranslator$Operator_MULTIPLY)] = 8;
        tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$PythonTranslator$Operator.data[jl_Enum_ordinal(tj_PythonTranslator$Operator_DIVIDE)] = 9;
        tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$PythonTranslator$Operator.data[jl_Enum_ordinal(tj_PythonTranslator$Operator_MINUS)] = 10;
        tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$PythonTranslator$Operator.data[jl_Enum_ordinal(tj_PythonTranslator$Operator_REMOVEAT)] = 11;
        tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$PythonTranslator$Operator.data[jl_Enum_ordinal(tj_PythonTranslator$Operator_REMOVEFROM)] = 12;
        tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$PythonTranslator$Operator.data[jl_Enum_ordinal(tj_PythonTranslator$Operator_REMOVEALLFROM)] = 13;
        var$2 = $rt_createIntArray((tj_Element$ElementType_values()).data.length);
        var$1 = var$2.data;
        tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$Element$ElementType = var$2;
        var$1[jl_Enum_ordinal(tj_Element$ElementType_AND)] = 1;
        tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_NOT)] = 2;
        tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_BOOL)] = 3;
        tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_CAST)] = 4;
        tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_DIVIDE)] = 5;
        tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_EQUAL)] = 6;
        tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_EXPRESSION)] = 7;
        tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_FLOAT)] = 8;
        tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_GREATER_THAN)] = 9;
        tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_GREATER_THAN_EQUAL)] = 10;
        tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_INTEGER)] = 11;
        tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_LESS_THAN)] = 12;
        tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_LESS_THAN_EQUAL)] = 13;
        tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_MINUS)] = 14;
        tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_MULTIPLY)] = 15;
        tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_NOT_EQUAL)] = 16;
        tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_OR)] = 17;
        tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_PLUS)] = 18;
        tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_STRING)] = 19;
        tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_VARIABLE)] = 20;
        tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_FUNCTION)] = 21;
        tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_SHOWINPUTBOX)] = 22;
        tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_LISTVAL)] = 23;
        tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_LIST)] = 24;
        tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_ARRAYLENGTH)] = 25;
        tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_RobotActionElmt)] = 26;
        var$2 = $rt_createIntArray((tj_JavaishVal$JavaishType_values()).data.length);
        var$1 = var$2.data;
        tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$JavaishVal$JavaishType = var$2;
        var$1[jl_Enum_ordinal(tj_JavaishVal$JavaishType_FLOAT)] = 1;
        tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$JavaishVal$JavaishType.data[jl_Enum_ordinal(tj_JavaishVal$JavaishType_INT)] = 2;
        tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$JavaishVal$JavaishType.data[jl_Enum_ordinal(tj_JavaishVal$JavaishType_STRING)] = 3;
        tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$JavaishVal$JavaishType.data[jl_Enum_ordinal(tj_JavaishVal$JavaishType_BOOLEAN)] = 4;
        tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$JavaishVal$JavaishType.data[jl_Enum_ordinal(tj_JavaishVal$JavaishType_INTLIST)] = 5;
        tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$JavaishVal$JavaishType.data[jl_Enum_ordinal(tj_JavaishVal$JavaishType_FLOATLIST)] = 6;
        tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$JavaishVal$JavaishType.data[jl_Enum_ordinal(tj_JavaishVal$JavaishType_STRINGLIST)] = 7;
        tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$JavaishVal$JavaishType.data[jl_Enum_ordinal(tj_JavaishVal$JavaishType_BOOLEANLIST)] = 8;
        tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$JavaishVal$JavaishType.data[jl_Enum_ordinal(tj_JavaishVal$JavaishType_LIST)] = 9;
        var$2 = $rt_createIntArray((tj_Statements$RobotType_values()).data.length);
        var$1 = var$2.data;
        tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$Statements$RobotType = var$2;
        var$1[jl_Enum_ordinal(tj_Statements$RobotType_MOVE)] = 1;
        tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$Statements$RobotType.data[jl_Enum_ordinal(tj_Statements$RobotType_SPEAK)] = 2;
        tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$Statements$RobotType.data[jl_Enum_ordinal(tj_Statements$RobotType_SIT)] = 3;
        tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$Statements$RobotType.data[jl_Enum_ordinal(tj_Statements$RobotType_STAND)] = 4;
        tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$Statements$RobotType.data[jl_Enum_ordinal(tj_Statements$RobotType_BLINK)] = 5;
        tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$Statements$RobotType.data[jl_Enum_ordinal(tj_Statements$RobotType_TWINKLE)] = 6;
        tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$Statements$RobotType.data[jl_Enum_ordinal(tj_Statements$RobotType_RANDOMEYES)] = 7;
        tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$Statements$RobotType.data[jl_Enum_ordinal(tj_Statements$RobotType_CROUCH)] = 8;
        tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$Statements$RobotType.data[jl_Enum_ordinal(tj_Statements$RobotType_LYINGBACK)] = 9;
        tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$Statements$RobotType.data[jl_Enum_ordinal(tj_Statements$RobotType_LYINGBELLY)] = 10;
        tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$Statements$RobotType.data[jl_Enum_ordinal(tj_Statements$RobotType_PICTURE)] = 11;
        tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$Statements$RobotType.data[jl_Enum_ordinal(tj_Statements$RobotType_BATTERY)] = 12;
        tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$Statements$RobotType.data[jl_Enum_ordinal(tj_Statements$RobotType_VOLUME)] = 13;
        tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$Statements$RobotType.data[jl_Enum_ordinal(tj_Statements$RobotType_NAME)] = 14;
        var$2 = $rt_createIntArray((tj_Statements$StmtType_values()).data.length);
        var$1 = var$2.data;
        tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$Statements$StmtType = var$2;
        var$1[jl_Enum_ordinal(tj_Statements$StmtType_ASSIGNMENT)] = 1;
        tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$Statements$StmtType.data[jl_Enum_ordinal(tj_Statements$StmtType_COMMENT)] = 2;
        tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$Statements$StmtType.data[jl_Enum_ordinal(tj_Statements$StmtType_CALL)] = 3;
        tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$Statements$StmtType.data[jl_Enum_ordinal(tj_Statements$StmtType_DECLARATION)] = 4;
        tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$Statements$StmtType.data[jl_Enum_ordinal(tj_Statements$StmtType_ELSE)] = 5;
        tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$Statements$StmtType.data[jl_Enum_ordinal(tj_Statements$StmtType_ELSEIF)] = 6;
        tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$Statements$StmtType.data[jl_Enum_ordinal(tj_Statements$StmtType_MUTATION)] = 7;
        tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$Statements$StmtType.data[jl_Enum_ordinal(tj_Statements$StmtType_RETURN)] = 8;
        tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$Statements$StmtType.data[jl_Enum_ordinal(tj_Statements$StmtType_FUNCTION)] = 9;
        tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$Statements$StmtType.data[jl_Enum_ordinal(tj_Statements$StmtType_IF)] = 10;
        tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$Statements$StmtType.data[jl_Enum_ordinal(tj_Statements$StmtType_WHILE)] = 11;
        tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$Statements$StmtType.data[jl_Enum_ordinal(tj_Statements$StmtType_FOREACH)] = 12;
        tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$Statements$StmtType.data[jl_Enum_ordinal(tj_Statements$StmtType_FORWHEN)] = 13;
        tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$Statements$StmtType.data[jl_Enum_ordinal(tj_Statements$StmtType_PRINT)] = 14;
        tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$Statements$StmtType.data[jl_Enum_ordinal(tj_Statements$StmtType_SHOWMSGBOX)] = 15;
        tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$Statements$StmtType.data[jl_Enum_ordinal(tj_Statements$StmtType_REMOVEAT)] = 16;
        tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$Statements$StmtType.data[jl_Enum_ordinal(tj_Statements$StmtType_REMOVEFROM)] = 17;
        tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$Statements$StmtType.data[jl_Enum_ordinal(tj_Statements$StmtType_REMOVEALLFROM)] = 18;
        tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$Statements$StmtType.data[jl_Enum_ordinal(tj_Statements$StmtType_IMPORT)] = 19;
        tj_PythonTranslator$1_$SwitchMap$trackerjo$javaish$Statements$StmtType.data[jl_Enum_ordinal(tj_Statements$StmtType_ROBOT)] = 20;
    }
    var jn_CharBufferImpl = $rt_classWithoutFields(jn_CharBuffer);
    function jn_CharBufferOverArray() {
        var a = this; jn_CharBufferImpl.call(a);
        a.$readOnly = 0;
        a.$start4 = 0;
        a.$array1 = null;
    }
    function jnc_CharsetEncoder() {
        var a = this; jl_Object.call(a);
        a.$charset0 = null;
        a.$replacement = null;
        a.$averageBytesPerChar = 0.0;
        a.$maxBytesPerChar = 0.0;
        a.$malformedAction = null;
        a.$unmappableAction = null;
        a.$status = 0;
    }
    function jnc_CharsetEncoder_onMalformedInput($this, $newAction) {
        var var$2;
        if ($newAction !== null) {
            $this.$malformedAction = $newAction;
            return $this;
        }
        var$2 = new jl_IllegalArgumentException;
        jl_Throwable__init_(var$2, $rt_s(641));
        $rt_throw(var$2);
    }
    function jnc_CharsetEncoder_implOnMalformedInput($this, $newAction) {}
    function jnc_CharsetEncoder_onUnmappableCharacter($this, $newAction) {
        var var$2;
        if ($newAction !== null) {
            $this.$unmappableAction = $newAction;
            return $this;
        }
        var$2 = new jl_IllegalArgumentException;
        jl_Throwable__init_(var$2, $rt_s(641));
        $rt_throw(var$2);
    }
    function jnc_CharsetEncoder_implOnUnmappableCharacter($this, $newAction) {}
    function jnc_CharsetEncoder_encode($this, $in, $out, $endOfInput) {
        var var$4, $result, $e, $remaining, $action, var$9, $$je;
        a: {
            var$4 = $this.$status;
            if (var$4 != 3) {
                if ($endOfInput)
                    break a;
                if (var$4 != 2)
                    break a;
            }
            $in = new jl_IllegalStateException;
            jl_Exception__init_($in);
            $rt_throw($in);
        }
        $this.$status = !$endOfInput ? 1 : 2;
        while (true) {
            try {
                $result = jnci_BufferedEncoder_encodeLoop($this, $in, $out);
            } catch ($$e) {
                $$je = $rt_wrapException($$e);
                if ($$je instanceof jl_RuntimeException) {
                    $e = $$je;
                    $in = new jnc_CoderMalfunctionError;
                    $in.$suppressionEnabled = 1;
                    $in.$writableStackTrace = 1;
                    $in.$cause = $e;
                    $rt_throw($in);
                } else {
                    throw $$e;
                }
            }
            if (jnc_CoderResult_isUnderflow($result)) {
                if (!$endOfInput)
                    return $result;
                $remaining = jn_Buffer_remaining($in);
                if ($remaining <= 0)
                    return $result;
                $result = jnc_CoderResult_malformedForLength($remaining);
            } else if (jnc_CoderResult_isOverflow($result))
                break;
            $action = !jnc_CoderResult_isUnmappable($result) ? $this.$malformedAction : $this.$unmappableAction;
            b: {
                jnc_CodingErrorAction_$callClinit();
                if ($action !== jnc_CodingErrorAction_REPLACE) {
                    if ($action === jnc_CodingErrorAction_IGNORE)
                        break b;
                    else
                        return $result;
                }
                $remaining = jn_Buffer_remaining($out);
                var$9 = $this.$replacement;
                var$4 = var$9.data.length;
                if ($remaining < var$4)
                    return jnc_CoderResult_OVERFLOW;
                jn_ByteBuffer_put($out, var$9, 0, var$4);
            }
            var$4 = $in.$position;
            if (!jnc_CoderResult_isError($result)) {
                $in = new jl_UnsupportedOperationException;
                jl_Exception__init_($in);
                $rt_throw($in);
            }
            jn_Buffer_position($in, var$4 + $result.$length1 | 0);
        }
        return $result;
    }
    function jnc_CharsetEncoder_encode0($this, $in) {
        var $output, $result;
        if (!jn_Buffer_remaining($in))
            return jn_ByteBuffer_allocate(0);
        jnc_CharsetEncoder_reset($this);
        $output = jn_ByteBuffer_allocate(jn_Buffer_remaining($in) * $this.$averageBytesPerChar | 0);
        while (true) {
            $result = jnc_CharsetEncoder_encode($this, $in, $output, 0);
            if ($result === jnc_CoderResult_UNDERFLOW)
                break;
            if ($result === jnc_CoderResult_OVERFLOW) {
                $output = jnc_CharsetEncoder_allocateMore($this, $output);
                continue;
            }
            if (!jnc_CoderResult_isError($result))
                continue;
            jnc_CoderResult_throwException($result);
        }
        $in = jnc_CharsetEncoder_encode($this, $in, $output, 1);
        if (jnc_CoderResult_isError($in))
            jnc_CoderResult_throwException($in);
        while (true) {
            $in = jnc_CharsetEncoder_flush($this, $output);
            if (jnc_CoderResult_isUnderflow($in))
                break;
            if (!jnc_CoderResult_isOverflow($in))
                continue;
            $output = jnc_CharsetEncoder_allocateMore($this, $output);
        }
        $output.$limit = $output.$position;
        $output.$position = 0;
        $output.$mark0 = (-1);
        return $output;
    }
    function jnc_CharsetEncoder_allocateMore($this, $buffer) {
        var $array, $result;
        $array = $buffer.$array0;
        $result = jn_ByteBuffer_wrap(ju_Arrays_copyOf1($array, $array.data.length * 2 | 0));
        jn_Buffer_position($result, $buffer.$position);
        return $result;
    }
    function jnc_CharsetEncoder_flush($this, $out) {
        var var$2, $result;
        var$2 = $this.$status;
        if (var$2 != 2 && var$2 != 4) {
            $out = new jl_IllegalStateException;
            jl_Exception__init_($out);
            $rt_throw($out);
        }
        $result = jnc_CoderResult_UNDERFLOW;
        if ($result === $result)
            $this.$status = 3;
        return $result;
    }
    function jnc_CharsetEncoder_implFlush($this, $out) {
        return jnc_CoderResult_UNDERFLOW;
    }
    function jnc_CharsetEncoder_reset($this) {
        $this.$status = 0;
        return $this;
    }
    function jnc_CharsetEncoder_implReset($this) {}
    function jnc_CoderResult() {
        var a = this; jl_Object.call(a);
        a.$kind = 0;
        a.$length1 = 0;
    }
    var jnc_CoderResult_UNDERFLOW = null;
    var jnc_CoderResult_OVERFLOW = null;
    function jnc_CoderResult__init_(var_0, var_1) {
        var var_2 = new jnc_CoderResult();
        jnc_CoderResult__init_0(var_2, var_0, var_1);
        return var_2;
    }
    function jnc_CoderResult__init_0($this, $kind, $length) {
        $this.$kind = $kind;
        $this.$length1 = $length;
    }
    function jnc_CoderResult_isUnderflow($this) {
        return $this.$kind ? 0 : 1;
    }
    function jnc_CoderResult_isOverflow($this) {
        return $this.$kind != 1 ? 0 : 1;
    }
    function jnc_CoderResult_isError($this) {
        var var$1;
        var$1 = $this.$kind != 2 ? 0 : 1;
        return !var$1 && !jnc_CoderResult_isUnmappable($this) ? 0 : 1;
    }
    function jnc_CoderResult_isUnmappable($this) {
        return $this.$kind != 3 ? 0 : 1;
    }
    function jnc_CoderResult_malformedForLength($length) {
        return jnc_CoderResult__init_(2, $length);
    }
    function jnc_CoderResult_unmappableForLength($length) {
        return jnc_CoderResult__init_(3, $length);
    }
    function jnc_CoderResult_throwException($this) {
        var var$1, var$2;
        switch ($this.$kind) {
            case 0:
                var$1 = new jnc_BufferUnderflowException;
                jl_Exception__init_(var$1);
                $rt_throw(var$1);
            case 1:
                var$1 = new jnc_BufferOverflowException;
                jl_Exception__init_(var$1);
                $rt_throw(var$1);
            case 2:
                var$1 = new jnc_MalformedInputException;
                var$2 = $this.$length1;
                jl_Exception__init_(var$1);
                var$1.$length2 = var$2;
                $rt_throw(var$1);
            case 3:
                var$1 = new jnc_UnmappableCharacterException;
                var$2 = $this.$length1;
                jl_Exception__init_(var$1);
                var$1.$length3 = var$2;
                $rt_throw(var$1);
            default:
        }
    }
    function jnc_CoderResult__clinit_() {
        jnc_CoderResult_UNDERFLOW = jnc_CoderResult__init_(0, 0);
        jnc_CoderResult_OVERFLOW = jnc_CoderResult__init_(1, 0);
    }
    function jur_FSet() {
        var a = this; jur_AbstractSet.call(a);
        a.$isBackReferenced = 0;
        a.$groupIndex = 0;
    }
    var jur_FSet_posFSet = null;
    function jur_FSet_$callClinit() {
        jur_FSet_$callClinit = $rt_eraseClinit(jur_FSet);
        jur_FSet__clinit_();
    }
    function jur_FSet__init_0(var_0) {
        var var_1 = new jur_FSet();
        jur_FSet__init_(var_1, var_0);
        return var_1;
    }
    function jur_FSet__init_($this, $groupIndex) {
        jur_FSet_$callClinit();
        jur_AbstractSet__init_($this);
        $this.$groupIndex = $groupIndex;
    }
    function jur_FSet_matches($this, $stringIndex, $testString, $matchResult) {
        var $end, $shift;
        $end = jur_MatchResultImpl_getEnd($matchResult, $this.$groupIndex);
        jur_MatchResultImpl_setEnd($matchResult, $this.$groupIndex, $stringIndex);
        $shift = $this.$next4.$matches($stringIndex, $testString, $matchResult);
        if ($shift < 0)
            jur_MatchResultImpl_setEnd($matchResult, $this.$groupIndex, $end);
        return $shift;
    }
    function jur_FSet_getGroupIndex($this) {
        return $this.$groupIndex;
    }
    function jur_FSet_getName($this) {
        return $rt_s(642);
    }
    function jur_FSet_hasConsumed($this, $mr) {
        return 0;
    }
    function jur_FSet__clinit_() {
        var var$1;
        var$1 = new jur_FSet$PossessiveFSet;
        jur_AbstractSet__init_(var$1);
        jur_FSet_posFSet = var$1;
    }
    function jur_Lexer() {
        var a = this; jl_Object.call(a);
        a.$pattern = null;
        a.$flags0 = 0;
        a.$mode = 0;
        a.$savedMode = 0;
        a.$lookBack = 0;
        a.$ch = 0;
        a.$lookAhead = 0;
        a.$patternFullLength = 0;
        a.$curST = null;
        a.$lookAheadST = null;
        a.$index3 = 0;
        a.$prevNW = 0;
        a.$curToc = 0;
        a.$lookAheadToc = 0;
        a.$orig = null;
    }
    var jur_Lexer_decompTable = null;
    var jur_Lexer_singleDecompTable = null;
    var jur_Lexer_singleDecompTableSize = 0;
    function jur_Lexer_setMode($this, $mode) {
        if ($mode > 0 && $mode < 3)
            $this.$mode = $mode;
        if ($mode == 1) {
            $this.$lookAhead = $this.$ch;
            $this.$lookAheadST = $this.$curST;
            $this.$index3 = $this.$lookAheadToc;
            $this.$lookAheadToc = $this.$curToc;
            jur_Lexer_movePointer($this);
        }
    }
    function jur_Lexer_isSpecial($this) {
        return $this.$curST === null ? 0 : 1;
    }
    function jur_Lexer_isNextSpecial($this) {
        return $this.$lookAheadST === null ? 0 : 1;
    }
    function jur_Lexer_next($this) {
        jur_Lexer_movePointer($this);
        return $this.$lookBack;
    }
    function jur_Lexer_nextSpecial($this) {
        var $res;
        $res = $this.$curST;
        jur_Lexer_movePointer($this);
        return $res;
    }
    function jur_Lexer_movePointer($this) {
        var $reread, $nonCap, var$3, $behind, $mod, $cs, $negative, $$je;
        $this.$lookBack = $this.$ch;
        $this.$ch = $this.$lookAhead;
        $this.$curST = $this.$lookAheadST;
        $this.$curToc = $this.$lookAheadToc;
        $this.$lookAheadToc = $this.$index3;
        while (true) {
            $reread = 0;
            $nonCap = $this.$index3 >= $this.$pattern.data.length ? 0 : jur_Lexer_nextCodePoint($this);
            $this.$lookAhead = $nonCap;
            $this.$lookAheadST = null;
            if ($this.$mode == 4) {
                if ($nonCap != 92)
                    return;
                $nonCap = $this.$index3;
                var$3 = $this.$pattern.data;
                $nonCap = $nonCap >= var$3.length ? 0 : var$3[jur_Lexer_nextIndex($this)];
                $this.$lookAhead = $nonCap;
                switch ($nonCap) {
                    case 69:
                        break;
                    default:
                        $this.$lookAhead = 92;
                        $this.$index3 = $this.$prevNW;
                        return;
                }
                $this.$mode = $this.$savedMode;
                $this.$lookAhead = $this.$index3 > ($this.$pattern.data.length - 2 | 0) ? 0 : jur_Lexer_nextCodePoint($this);
            }
            a: {
                $nonCap = $this.$lookAhead;
                if ($nonCap != 92) {
                    $behind = $this.$mode;
                    if ($behind == 1)
                        switch ($nonCap) {
                            case 36:
                                $this.$lookAhead = (-536870876);
                                break a;
                            case 40:
                                if ($this.$pattern.data[$this.$index3] != 63) {
                                    $this.$lookAhead = (-2147483608);
                                    break a;
                                }
                                jur_Lexer_nextIndex($this);
                                $nonCap = $this.$pattern.data[$this.$index3];
                                $behind = 0;
                                while (true) {
                                    b: {
                                        if ($behind) {
                                            $behind = 0;
                                            switch ($nonCap) {
                                                case 33:
                                                    break;
                                                case 61:
                                                    $this.$lookAhead = (-134217688);
                                                    jur_Lexer_nextIndex($this);
                                                    break b;
                                                default:
                                                    $rt_throw(jur_PatternSyntaxException__init_0($rt_s(2), jur_Lexer_toString($this), $this.$index3));
                                            }
                                            $this.$lookAhead = (-67108824);
                                            jur_Lexer_nextIndex($this);
                                        } else {
                                            switch ($nonCap) {
                                                case 33:
                                                    break;
                                                case 60:
                                                    jur_Lexer_nextIndex($this);
                                                    $nonCap = $this.$pattern.data[$this.$index3];
                                                    $behind = 1;
                                                    break b;
                                                case 61:
                                                    $this.$lookAhead = (-536870872);
                                                    jur_Lexer_nextIndex($this);
                                                    break b;
                                                case 62:
                                                    $this.$lookAhead = (-33554392);
                                                    jur_Lexer_nextIndex($this);
                                                    break b;
                                                default:
                                                    $mod = jur_Lexer_readFlags($this);
                                                    $this.$lookAhead = $mod;
                                                    if ($mod < 256) {
                                                        $this.$flags0 = $mod;
                                                        $mod = $mod << 16;
                                                        $this.$lookAhead = $mod;
                                                        $this.$lookAhead = (-1073741784) | $mod;
                                                        break b;
                                                    }
                                                    $mod = $mod & 255;
                                                    $this.$lookAhead = $mod;
                                                    $this.$flags0 = $mod;
                                                    $mod = $mod << 16;
                                                    $this.$lookAhead = $mod;
                                                    $this.$lookAhead = (-16777176) | $mod;
                                                    break b;
                                            }
                                            $this.$lookAhead = (-268435416);
                                            jur_Lexer_nextIndex($this);
                                        }
                                    }
                                    if (!$behind)
                                        break;
                                }
                                break a;
                            case 41:
                                $this.$lookAhead = (-536870871);
                                break a;
                            case 42:
                            case 43:
                            case 63:
                                $behind = $this.$index3;
                                var$3 = $this.$pattern.data;
                                switch ($behind >= var$3.length ? 42 : var$3[$behind]) {
                                    case 43:
                                        $this.$lookAhead = $nonCap | (-2147483648);
                                        jur_Lexer_nextIndex($this);
                                        break a;
                                    case 63:
                                        $this.$lookAhead = $nonCap | (-1073741824);
                                        jur_Lexer_nextIndex($this);
                                        break a;
                                    default:
                                }
                                $this.$lookAhead = $nonCap | (-536870912);
                                break a;
                            case 46:
                                $this.$lookAhead = (-536870866);
                                break a;
                            case 91:
                                $this.$lookAhead = (-536870821);
                                jur_Lexer_setMode($this, 2);
                                break a;
                            case 93:
                                if ($behind != 2)
                                    break a;
                                $this.$lookAhead = (-536870819);
                                break a;
                            case 94:
                                $this.$lookAhead = (-536870818);
                                break a;
                            case 123:
                                $this.$lookAheadST = jur_Lexer_processQuantifier($this, $nonCap);
                                break a;
                            case 124:
                                $this.$lookAhead = (-536870788);
                                break a;
                            default:
                        }
                    else if ($behind == 2)
                        switch ($nonCap) {
                            case 38:
                                $this.$lookAhead = (-536870874);
                                break a;
                            case 45:
                                $this.$lookAhead = (-536870867);
                                break a;
                            case 91:
                                $this.$lookAhead = (-536870821);
                                break a;
                            case 93:
                                $this.$lookAhead = (-536870819);
                                break a;
                            case 94:
                                $this.$lookAhead = (-536870818);
                                break a;
                            default:
                        }
                } else {
                    $nonCap = $this.$index3 >= ($this.$pattern.data.length - 2 | 0) ? (-1) : jur_Lexer_nextCodePoint($this);
                    c: {
                        $this.$lookAhead = $nonCap;
                        switch ($nonCap) {
                            case -1:
                                $rt_throw(jur_PatternSyntaxException__init_0($rt_s(2), jur_Lexer_toString($this), $this.$index3));
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                            case 4:
                            case 5:
                            case 6:
                            case 7:
                            case 8:
                            case 9:
                            case 10:
                            case 11:
                            case 12:
                            case 13:
                            case 14:
                            case 15:
                            case 16:
                            case 17:
                            case 18:
                            case 19:
                            case 20:
                            case 21:
                            case 22:
                            case 23:
                            case 24:
                            case 25:
                            case 26:
                            case 27:
                            case 28:
                            case 29:
                            case 30:
                            case 31:
                            case 32:
                            case 33:
                            case 34:
                            case 35:
                            case 36:
                            case 37:
                            case 38:
                            case 39:
                            case 40:
                            case 41:
                            case 42:
                            case 43:
                            case 44:
                            case 45:
                            case 46:
                            case 47:
                            case 58:
                            case 59:
                            case 60:
                            case 61:
                            case 62:
                            case 63:
                            case 64:
                            case 91:
                            case 92:
                            case 93:
                            case 94:
                            case 95:
                            case 96:
                            case 118:
                                break;
                            case 48:
                                $this.$lookAhead = jur_Lexer_readOctals($this);
                                break a;
                            case 49:
                            case 50:
                            case 51:
                            case 52:
                            case 53:
                            case 54:
                            case 55:
                            case 56:
                            case 57:
                                if ($this.$mode != 1)
                                    break a;
                                $this.$lookAhead = (-2147483648) | $nonCap;
                                break a;
                            case 65:
                                $this.$lookAhead = (-2147483583);
                                break a;
                            case 66:
                                $this.$lookAhead = (-2147483582);
                                break a;
                            case 67:
                            case 69:
                            case 70:
                            case 72:
                            case 73:
                            case 74:
                            case 75:
                            case 76:
                            case 77:
                            case 78:
                            case 79:
                            case 82:
                            case 84:
                            case 85:
                            case 86:
                            case 88:
                            case 89:
                            case 103:
                            case 104:
                            case 105:
                            case 106:
                            case 107:
                            case 108:
                            case 109:
                            case 111:
                            case 113:
                            case 121:
                                $rt_throw(jur_PatternSyntaxException__init_0($rt_s(2), jur_Lexer_toString($this), $this.$index3));
                            case 68:
                            case 83:
                            case 87:
                            case 100:
                            case 115:
                            case 119:
                                $this.$lookAheadST = jur_AbstractCharClass_getPredefinedClass(jl_String__init_1($this.$pattern, $this.$prevNW, 1), 0);
                                $this.$lookAhead = 0;
                                break a;
                            case 71:
                                $this.$lookAhead = (-2147483577);
                                break a;
                            case 80:
                            case 112:
                                break c;
                            case 81:
                                $this.$savedMode = $this.$mode;
                                $this.$mode = 4;
                                $reread = 1;
                                break a;
                            case 90:
                                $this.$lookAhead = (-2147483558);
                                break a;
                            case 97:
                                $this.$lookAhead = 7;
                                break a;
                            case 98:
                                $this.$lookAhead = (-2147483550);
                                break a;
                            case 99:
                                $nonCap = $this.$index3;
                                var$3 = $this.$pattern.data;
                                if ($nonCap >= (var$3.length - 2 | 0))
                                    $rt_throw(jur_PatternSyntaxException__init_0($rt_s(2), jur_Lexer_toString($this), $this.$index3));
                                $this.$lookAhead = var$3[jur_Lexer_nextIndex($this)] & 31;
                                break a;
                            case 101:
                                $this.$lookAhead = 27;
                                break a;
                            case 102:
                                $this.$lookAhead = 12;
                                break a;
                            case 110:
                                $this.$lookAhead = 10;
                                break a;
                            case 114:
                                $this.$lookAhead = 13;
                                break a;
                            case 116:
                                $this.$lookAhead = 9;
                                break a;
                            case 117:
                                $this.$lookAhead = jur_Lexer_readHex($this, 4);
                                break a;
                            case 120:
                                $this.$lookAhead = jur_Lexer_readHex($this, 2);
                                break a;
                            case 122:
                                $this.$lookAhead = (-2147483526);
                                break a;
                            default:
                        }
                        break a;
                    }
                    $cs = jur_Lexer_parseCharClassName($this);
                    $negative = 0;
                    if ($this.$lookAhead == 80)
                        $negative = 1;
                    try {
                        $this.$lookAheadST = jur_AbstractCharClass_getPredefinedClass($cs, $negative);
                    } catch ($$e) {
                        $$je = $rt_wrapException($$e);
                        if ($$je instanceof ju_MissingResourceException) {
                            $rt_throw(jur_PatternSyntaxException__init_0($rt_s(2), jur_Lexer_toString($this), $this.$index3));
                        } else {
                            throw $$e;
                        }
                    }
                    $this.$lookAhead = 0;
                }
            }
            if ($reread)
                continue;
            else
                break;
        }
    }
    function jur_Lexer_parseCharClassName($this) {
        var $sb, $ch, var$3, var$4, $res, var$6;
        $sb = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_2($sb, 10);
        $ch = $this.$index3;
        var$3 = $this.$pattern;
        var$4 = var$3.data;
        if ($ch < (var$4.length - 2 | 0)) {
            if (var$4[$ch] != 123) {
                $sb = jl_String__init_1(var$3, jur_Lexer_nextIndex($this), 1);
                $res = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_($res);
                jl_StringBuilder_append(jl_StringBuilder_append($res, $rt_s(643)), $sb);
                return jl_AbstractStringBuilder_toString($res);
            }
            jur_Lexer_nextIndex($this);
            $ch = 0;
            a: {
                while (true) {
                    var$6 = $this.$index3;
                    var$3 = $this.$pattern.data;
                    if (var$6 >= (var$3.length - 2 | 0))
                        break;
                    $ch = var$3[jur_Lexer_nextIndex($this)];
                    if ($ch == 125)
                        break a;
                    jl_AbstractStringBuilder_append($sb, $ch);
                }
            }
            if ($ch != 125)
                $rt_throw(jur_PatternSyntaxException__init_0($rt_s(2), $this.$orig, $this.$index3));
        }
        if (!$sb.$length0)
            $rt_throw(jur_PatternSyntaxException__init_0($rt_s(2), $this.$orig, $this.$index3));
        $res = jl_AbstractStringBuilder_toString($sb);
        if (jl_String_length($res) == 1) {
            $sb = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($sb);
            jl_StringBuilder_append(jl_StringBuilder_append($sb, $rt_s(643)), $res);
            return jl_AbstractStringBuilder_toString($sb);
        }
        b: {
            c: {
                if (jl_String_length($res) > 3) {
                    if (jl_String_startsWith0($res, $rt_s(643)))
                        break c;
                    if (jl_String_startsWith0($res, $rt_s(644)))
                        break c;
                }
                break b;
            }
            $res = jl_String_substring0($res, 2);
        }
        return $res;
    }
    function jur_Lexer_processQuantifier($this, $ch) {
        var $sb, $min, $max, $mod, var$6, $$je;
        $sb = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_2($sb, 4);
        $min = (-1);
        $max = 2147483647;
        a: {
            while (true) {
                $mod = $this.$index3;
                var$6 = $this.$pattern.data;
                if ($mod >= var$6.length)
                    break a;
                $ch = var$6[jur_Lexer_nextIndex($this)];
                if ($ch == 125)
                    break a;
                if ($ch == 44 && $min < 0)
                    try {
                        $min = jl_Integer_parseInt(jl_StringBuilder_toString($sb), 10);
                        jl_StringBuilder_delete($sb, 0, jl_StringBuilder_length($sb));
                        continue;
                    } catch ($$e) {
                        $$je = $rt_wrapException($$e);
                        if ($$je instanceof jl_NumberFormatException) {
                            break;
                        } else {
                            throw $$e;
                        }
                    }
                jl_AbstractStringBuilder_append($sb, $ch & 65535);
            }
            $rt_throw(jur_PatternSyntaxException__init_0($rt_s(2), $this.$orig, $this.$index3));
        }
        if ($ch != 125)
            $rt_throw(jur_PatternSyntaxException__init_0($rt_s(2), $this.$orig, $this.$index3));
        if ($sb.$length0 > 0)
            b: {
                try {
                    $max = jl_Integer_parseInt(jl_StringBuilder_toString($sb), 10);
                    if ($min >= 0)
                        break b;
                    $min = $max;
                    break b;
                } catch ($$e) {
                    $$je = $rt_wrapException($$e);
                    if ($$je instanceof jl_NumberFormatException) {
                    } else {
                        throw $$e;
                    }
                }
                $rt_throw(jur_PatternSyntaxException__init_0($rt_s(2), $this.$orig, $this.$index3));
            }
        else if ($min < 0)
            $rt_throw(jur_PatternSyntaxException__init_0($rt_s(2), $this.$orig, $this.$index3));
        if (($min | $max | ($max - $min | 0)) < 0)
            $rt_throw(jur_PatternSyntaxException__init_0($rt_s(2), $this.$orig, $this.$index3));
        $ch = $this.$index3;
        var$6 = $this.$pattern.data;
        $mod = $ch >= var$6.length ? 42 : var$6[$ch];
        c: {
            switch ($mod) {
                case 43:
                    $this.$lookAhead = (-2147483525);
                    jur_Lexer_nextIndex($this);
                    break c;
                case 63:
                    $this.$lookAhead = (-1073741701);
                    jur_Lexer_nextIndex($this);
                    break c;
                default:
            }
            $this.$lookAhead = (-536870789);
        }
        $sb = new jur_Quantifier;
        $sb.$min0 = $min;
        $sb.$max0 = $max;
        return $sb;
    }
    function jur_Lexer_toString($this) {
        return $this.$orig;
    }
    function jur_Lexer_isEmpty($this) {
        return !$this.$ch && !$this.$lookAhead && $this.$index3 == $this.$patternFullLength && !jur_Lexer_isSpecial($this) ? 1 : 0;
    }
    function jur_Lexer_isLetter0($ch) {
        return $ch < 0 ? 0 : 1;
    }
    function jur_Lexer_isLetter($this) {
        return !jur_Lexer_isEmpty($this) && !jur_Lexer_isSpecial($this) && jur_Lexer_isLetter0($this.$ch) ? 1 : 0;
    }
    function jur_Lexer_isHighSurrogate($this) {
        var var$1;
        var$1 = $this.$ch;
        return var$1 <= 56319 && var$1 >= 55296 ? 1 : 0;
    }
    function jur_Lexer_isLowSurrogate($this) {
        var var$1;
        var$1 = $this.$ch;
        return var$1 <= 57343 && var$1 >= 56320 ? 1 : 0;
    }
    function jur_Lexer_isHighSurrogate0($ch) {
        return $ch <= 56319 && $ch >= 55296 ? 1 : 0;
    }
    function jur_Lexer_isLowSurrogate0($ch) {
        return $ch <= 57343 && $ch >= 56320 ? 1 : 0;
    }
    function jur_Lexer_readHex($this, $max) {
        var $st, $length, $i, var$5, $$je;
        $st = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_2($st, $max);
        $length = $this.$pattern.data.length - 2 | 0;
        $i = 0;
        while (true) {
            var$5 = $rt_compare($i, $max);
            if (var$5 >= 0)
                break;
            if ($this.$index3 >= $length)
                break;
            jl_AbstractStringBuilder_append($st, $this.$pattern.data[jur_Lexer_nextIndex($this)]);
            $i = $i + 1 | 0;
        }
        if (!var$5)
            a: {
                try {
                    $max = jl_Integer_parseInt(jl_StringBuilder_toString($st), 16);
                } catch ($$e) {
                    $$je = $rt_wrapException($$e);
                    if ($$je instanceof jl_NumberFormatException) {
                        break a;
                    } else {
                        throw $$e;
                    }
                }
                return $max;
            }
        $rt_throw(jur_PatternSyntaxException__init_0($rt_s(2), $this.$orig, $this.$index3));
    }
    function jur_Lexer_readOctals($this) {
        var $max, $i, var$3, $length, $res, var$6;
        $max = 3;
        $i = 1;
        var$3 = $this.$pattern.data;
        $length = var$3.length - 2 | 0;
        $res = jl_Character_digit(var$3[$this.$index3], 8);
        switch ($res) {
            case -1:
                break;
            default:
                if ($res > 3)
                    $max = 2;
                jur_Lexer_nextIndex($this);
                a: {
                    while (true) {
                        if ($i >= $max)
                            break a;
                        var$6 = $this.$index3;
                        if (var$6 >= $length)
                            break a;
                        var$6 = jl_Character_digit($this.$pattern.data[var$6], 8);
                        if (var$6 < 0)
                            break;
                        $res = ($res * 8 | 0) + var$6 | 0;
                        jur_Lexer_nextIndex($this);
                        $i = $i + 1 | 0;
                    }
                }
                return $res;
        }
        $rt_throw(jur_PatternSyntaxException__init_0($rt_s(2), $this.$orig, $this.$index3));
    }
    function jur_Lexer_readFlags($this) {
        var $pos, $res, var$3, var$4;
        $pos = 1;
        $res = $this.$flags0;
        a: while (true) {
            var$3 = $this.$index3;
            var$4 = $this.$pattern.data;
            if (var$3 >= var$4.length)
                $rt_throw(jur_PatternSyntaxException__init_0($rt_s(2), $this.$orig, var$3));
            b: {
                c: {
                    switch (var$4[var$3]) {
                        case 41:
                            jur_Lexer_nextIndex($this);
                            return $res | 256;
                        case 45:
                            if (!$pos)
                                $rt_throw(jur_PatternSyntaxException__init_0($rt_s(2), $this.$orig, var$3));
                            $pos = 0;
                            break b;
                        case 58:
                            break a;
                        case 100:
                            break c;
                        case 105:
                            $res = $pos ? $res | 2 : ($res ^ 2) & $res;
                            break b;
                        case 109:
                            $res = $pos ? $res | 8 : ($res ^ 8) & $res;
                            break b;
                        case 115:
                            $res = $pos ? $res | 32 : ($res ^ 32) & $res;
                            break b;
                        case 117:
                            $res = $pos ? $res | 64 : ($res ^ 64) & $res;
                            break b;
                        case 120:
                            $res = $pos ? $res | 4 : ($res ^ 4) & $res;
                            break b;
                        default:
                    }
                    break b;
                }
                $res = $pos ? $res | 1 : ($res ^ 1) & $res;
            }
            jur_Lexer_nextIndex($this);
        }
        jur_Lexer_nextIndex($this);
        return $res;
    }
    function jur_Lexer_nextIndex($this) {
        var var$1, var$2, var$3, var$4, var$5;
        var$1 = $this.$index3;
        $this.$prevNW = var$1;
        if (!($this.$flags0 & 4))
            $this.$index3 = var$1 + 1 | 0;
        else {
            var$2 = $this.$pattern.data.length - 2 | 0;
            $this.$index3 = var$1 + 1 | 0;
            a: while (true) {
                var$3 = $this.$index3;
                if (var$3 < var$2 && jl_Character_isWhitespace($this.$pattern.data[var$3])) {
                    $this.$index3 = $this.$index3 + 1 | 0;
                    continue;
                }
                var$3 = $this.$index3;
                if (var$3 >= var$2)
                    break;
                var$4 = $this.$pattern.data;
                if (var$4[var$3] != 35)
                    break;
                $this.$index3 = var$3 + 1 | 0;
                while (true) {
                    var$5 = $this.$index3;
                    if (var$5 >= var$2)
                        continue a;
                    var$1 = var$4[var$5];
                    if (var$1 != 10 && var$1 != 13 && var$1 != 133 && (var$1 | 1) != 8233 ? 0 : 1)
                        continue a;
                    $this.$index3 = var$5 + 1 | 0;
                }
            }
        }
        return $this.$prevNW;
    }
    function jur_Lexer_getDecomposition($ch) {
        return jur_Lexer_decompTable.$get3($ch);
    }
    function jur_Lexer_nextCodePoint($this) {
        var $high, $lowExpectedIndex, var$3, $low;
        $high = $this.$pattern.data[jur_Lexer_nextIndex($this)];
        if (jl_Character_isHighSurrogate($high)) {
            $lowExpectedIndex = $this.$prevNW + 1 | 0;
            var$3 = $this.$pattern.data;
            if ($lowExpectedIndex < var$3.length) {
                $low = var$3[$lowExpectedIndex];
                if (jl_Character_isLowSurrogate($low)) {
                    jur_Lexer_nextIndex($this);
                    return jl_Character_toCodePoint($high, $low);
                }
            }
        }
        return $high;
    }
    function jur_Lexer_getIndex($this) {
        return $this.$curToc;
    }
    function jur_PatternSyntaxException() {
        var a = this; jl_IllegalArgumentException.call(a);
        a.$desc = null;
        a.$pattern1 = null;
        a.$index6 = 0;
    }
    function jur_PatternSyntaxException__init_0(var_0, var_1, var_2) {
        var var_3 = new jur_PatternSyntaxException();
        jur_PatternSyntaxException__init_(var_3, var_0, var_1, var_2);
        return var_3;
    }
    function jur_PatternSyntaxException__init_($this, $description, $pattern, $index) {
        jl_Exception__init_($this);
        $this.$index6 = (-1);
        $this.$desc = $description;
        $this.$pattern1 = $pattern;
        $this.$index6 = $index;
    }
    function jur_PatternSyntaxException_getMessage($this) {
        var $filler, var$2, $temp, var$4, var$5, var$6, var$7, var$8, var$9, var$10;
        $filler = $rt_s(2);
        var$2 = $this.$index6;
        if (var$2 >= 1) {
            $temp = $rt_createCharArray(var$2);
            var$4 = $temp.data;
            var$2 = 0;
            var$5 = var$4.length;
            if (var$2 > var$5) {
                $filler = new jl_IllegalArgumentException;
                jl_Exception__init_($filler);
                $rt_throw($filler);
            }
            while (var$2 < var$5) {
                var$6 = var$2 + 1 | 0;
                var$4[var$2] = 32;
                var$2 = var$6;
            }
            $filler = jl_String__init_($temp);
        }
        var$7 = $this.$desc;
        var$8 = $this.$pattern1;
        if (var$8 !== null && jl_String_length(var$8)) {
            var$9 = $this.$index6;
            var$8 = $this.$pattern1;
            var$10 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_(var$10);
            jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append0(var$10, var$9), $rt_s(56)), var$8), $rt_s(56)), $filler);
            $filler = jl_AbstractStringBuilder_toString(var$10);
        } else
            $filler = $rt_s(2);
        var$8 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$8);
        jl_StringBuilder_append(jl_StringBuilder_append(var$8, var$7), $filler);
        return jl_AbstractStringBuilder_toString(var$8);
    }
    var tj_Expression$1 = $rt_classWithoutFields();
    var tj_Expression$1_$SwitchMap$trackerjo$javaish$Expression$ExpressionReturnType = null;
    function tj_Expression$1_$callClinit() {
        tj_Expression$1_$callClinit = $rt_eraseClinit(tj_Expression$1);
        tj_Expression$1__clinit_();
    }
    function tj_Expression$1__clinit_() {
        var var$1, var$2;
        var$1 = $rt_createIntArray((tj_Expression$ExpressionReturnType_values()).data.length);
        var$2 = var$1.data;
        tj_Expression$1_$SwitchMap$trackerjo$javaish$Expression$ExpressionReturnType = var$1;
        var$2[tj_Expression$ExpressionReturnType_INT.$ordinal0] = 1;
        var$2[tj_Expression$ExpressionReturnType_FLOAT.$ordinal0] = 2;
        var$2[tj_Expression$ExpressionReturnType_STRING.$ordinal0] = 3;
        var$2[tj_Expression$ExpressionReturnType_BOOL.$ordinal0] = 4;
        var$2[tj_Expression$ExpressionReturnType_INTLIST.$ordinal0] = 5;
        var$2[tj_Expression$ExpressionReturnType_FLOATLIST.$ordinal0] = 6;
        var$2[tj_Expression$ExpressionReturnType_STRINGLIST.$ordinal0] = 7;
        var$2[tj_Expression$ExpressionReturnType_BOOLEANLIST.$ordinal0] = 8;
    }
    var tj_Interpreter$Operator = $rt_classWithoutFields(jl_Enum);
    var tj_Interpreter$Operator_PLUS = null;
    var tj_Interpreter$Operator_MINUS = null;
    var tj_Interpreter$Operator_DIVIDE = null;
    var tj_Interpreter$Operator_MULTIPLY = null;
    var tj_Interpreter$Operator_EQUAL = null;
    var tj_Interpreter$Operator_NOT_EQUAL = null;
    var tj_Interpreter$Operator_LESS_THAN = null;
    var tj_Interpreter$Operator_GREATER_THAN = null;
    var tj_Interpreter$Operator_LESS_THAN_EQUAL = null;
    var tj_Interpreter$Operator_GREATER_THAN_EQUAL = null;
    var tj_Interpreter$Operator_REMOVEALLFROM = null;
    var tj_Interpreter$Operator_REMOVEAT = null;
    var tj_Interpreter$Operator_REMOVEFROM = null;
    var tj_Interpreter$Operator_$VALUES = null;
    function tj_Interpreter$Operator_$callClinit() {
        tj_Interpreter$Operator_$callClinit = $rt_eraseClinit(tj_Interpreter$Operator);
        tj_Interpreter$Operator__clinit_();
    }
    function tj_Interpreter$Operator__init_(var_0, var_1) {
        var var_2 = new tj_Interpreter$Operator();
        tj_Interpreter$Operator__init_0(var_2, var_0, var_1);
        return var_2;
    }
    function tj_Interpreter$Operator_values() {
        tj_Interpreter$Operator_$callClinit();
        return tj_Interpreter$Operator_$VALUES.$clone();
    }
    function tj_Interpreter$Operator__init_0($this, var$1, var$2) {
        tj_Interpreter$Operator_$callClinit();
        jl_Enum__init_($this, var$1, var$2);
    }
    function tj_Interpreter$Operator__clinit_() {
        var var$1;
        tj_Interpreter$Operator_PLUS = tj_Interpreter$Operator__init_($rt_s(283), 0);
        tj_Interpreter$Operator_MINUS = tj_Interpreter$Operator__init_($rt_s(285), 1);
        tj_Interpreter$Operator_DIVIDE = tj_Interpreter$Operator__init_($rt_s(292), 2);
        tj_Interpreter$Operator_MULTIPLY = tj_Interpreter$Operator__init_($rt_s(290), 3);
        tj_Interpreter$Operator_EQUAL = tj_Interpreter$Operator__init_($rt_s(284), 4);
        tj_Interpreter$Operator_NOT_EQUAL = tj_Interpreter$Operator__init_($rt_s(289), 5);
        tj_Interpreter$Operator_LESS_THAN = tj_Interpreter$Operator__init_($rt_s(274), 6);
        tj_Interpreter$Operator_GREATER_THAN = tj_Interpreter$Operator__init_($rt_s(288), 7);
        tj_Interpreter$Operator_LESS_THAN_EQUAL = tj_Interpreter$Operator__init_($rt_s(272), 8);
        tj_Interpreter$Operator_GREATER_THAN_EQUAL = tj_Interpreter$Operator__init_($rt_s(286), 9);
        tj_Interpreter$Operator_REMOVEALLFROM = tj_Interpreter$Operator__init_($rt_s(266), 10);
        tj_Interpreter$Operator_REMOVEAT = tj_Interpreter$Operator__init_($rt_s(261), 11);
        var$1 = tj_Interpreter$Operator__init_($rt_s(263), 12);
        tj_Interpreter$Operator_REMOVEFROM = var$1;
        tj_Interpreter$Operator_$VALUES = $rt_createArrayFromData(tj_Interpreter$Operator, [tj_Interpreter$Operator_PLUS, tj_Interpreter$Operator_MINUS, tj_Interpreter$Operator_DIVIDE, tj_Interpreter$Operator_MULTIPLY, tj_Interpreter$Operator_EQUAL, tj_Interpreter$Operator_NOT_EQUAL, tj_Interpreter$Operator_LESS_THAN, tj_Interpreter$Operator_GREATER_THAN, tj_Interpreter$Operator_LESS_THAN_EQUAL, tj_Interpreter$Operator_GREATER_THAN_EQUAL, tj_Interpreter$Operator_REMOVEALLFROM, tj_Interpreter$Operator_REMOVEAT,
        var$1]);
    }
    function jl_Package() {
        jl_Object.call(this);
        this.$name2 = null;
    }
    var jl_Package_packages = null;
    function jl_Package_getName($this) {
        return $this.$name2;
    }
    function jl_Package__clinit_() {
        jl_Package_packages = ju_HashMap__init_();
    }
    var otp_PlatformQueue = $rt_classWithoutFields();
    function otp_PlatformQueue_isEmpty$static($this) {
        return $this.length ? 0 : 1;
    }
    var otp_PlatformRunnable = $rt_classWithoutFields(0);
    function jl_Object$monitorExit$lambda$_8_0() {
        jl_Object.call(this);
        this.$_00 = null;
    }
    function jl_Object$monitorExit$lambda$_8_0_run(var$0) {
        var var$1, var$2, var$3, var$4;
        var$1 = var$0.$_00;
        if (!jl_Object_isEmptyMonitor(var$1)) {
            var$2 = var$1.$monitor;
            if (var$2.$owner === null) {
                var$1 = var$2.$enteringThreads;
                if (var$1 !== null && !otp_PlatformQueue_isEmpty$static(var$1)) {
                    var$1 = var$2.$enteringThreads.shift();
                    otji_JSWrapper_$callClinit();
                    if (var$1 !== null && !(var$1 instanceof $rt_objcls()))
                        var$1 = otji_JSWrapper_wrap(var$1);
                    var$3 = var$1;
                    var$2.$enteringThreads = null;
                    var$1 = var$3.$_0;
                    var$2 = var$3.$_1;
                    var$4 = var$3.$_2;
                    var$3 = var$3.$_3;
                    jl_Thread_setCurrentThread(var$1);
                    var$2 = var$2.$monitor;
                    var$2.$owner = var$1;
                    var$2.$count = var$2.$count + var$4 | 0;
                    otpp_AsyncCallbackWrapper_complete(var$3, null);
                }
            }
        }
    }
    var tj_JavaTranslator$Operator = $rt_classWithoutFields(jl_Enum);
    var tj_JavaTranslator$Operator_PLUS = null;
    var tj_JavaTranslator$Operator_MINUS = null;
    var tj_JavaTranslator$Operator_DIVIDE = null;
    var tj_JavaTranslator$Operator_MULTIPLY = null;
    var tj_JavaTranslator$Operator_EQUAL = null;
    var tj_JavaTranslator$Operator_NOT_EQUAL = null;
    var tj_JavaTranslator$Operator_LESS_THAN = null;
    var tj_JavaTranslator$Operator_GREATER_THAN = null;
    var tj_JavaTranslator$Operator_LESS_THAN_EQUAL = null;
    var tj_JavaTranslator$Operator_GREATER_THAN_EQUAL = null;
    var tj_JavaTranslator$Operator_REMOVEALLFROM = null;
    var tj_JavaTranslator$Operator_REMOVEAT = null;
    var tj_JavaTranslator$Operator_REMOVEFROM = null;
    var tj_JavaTranslator$Operator_$VALUES = null;
    function tj_JavaTranslator$Operator_$callClinit() {
        tj_JavaTranslator$Operator_$callClinit = $rt_eraseClinit(tj_JavaTranslator$Operator);
        tj_JavaTranslator$Operator__clinit_();
    }
    function tj_JavaTranslator$Operator__init_(var_0, var_1) {
        var var_2 = new tj_JavaTranslator$Operator();
        tj_JavaTranslator$Operator__init_0(var_2, var_0, var_1);
        return var_2;
    }
    function tj_JavaTranslator$Operator_values() {
        tj_JavaTranslator$Operator_$callClinit();
        return tj_JavaTranslator$Operator_$VALUES.$clone();
    }
    function tj_JavaTranslator$Operator__init_0($this, var$1, var$2) {
        tj_JavaTranslator$Operator_$callClinit();
        jl_Enum__init_($this, var$1, var$2);
    }
    function tj_JavaTranslator$Operator__clinit_() {
        var var$1;
        tj_JavaTranslator$Operator_PLUS = tj_JavaTranslator$Operator__init_($rt_s(283), 0);
        tj_JavaTranslator$Operator_MINUS = tj_JavaTranslator$Operator__init_($rt_s(285), 1);
        tj_JavaTranslator$Operator_DIVIDE = tj_JavaTranslator$Operator__init_($rt_s(292), 2);
        tj_JavaTranslator$Operator_MULTIPLY = tj_JavaTranslator$Operator__init_($rt_s(290), 3);
        tj_JavaTranslator$Operator_EQUAL = tj_JavaTranslator$Operator__init_($rt_s(284), 4);
        tj_JavaTranslator$Operator_NOT_EQUAL = tj_JavaTranslator$Operator__init_($rt_s(289), 5);
        tj_JavaTranslator$Operator_LESS_THAN = tj_JavaTranslator$Operator__init_($rt_s(274), 6);
        tj_JavaTranslator$Operator_GREATER_THAN = tj_JavaTranslator$Operator__init_($rt_s(288), 7);
        tj_JavaTranslator$Operator_LESS_THAN_EQUAL = tj_JavaTranslator$Operator__init_($rt_s(272), 8);
        tj_JavaTranslator$Operator_GREATER_THAN_EQUAL = tj_JavaTranslator$Operator__init_($rt_s(286), 9);
        tj_JavaTranslator$Operator_REMOVEALLFROM = tj_JavaTranslator$Operator__init_($rt_s(266), 10);
        tj_JavaTranslator$Operator_REMOVEAT = tj_JavaTranslator$Operator__init_($rt_s(261), 11);
        var$1 = tj_JavaTranslator$Operator__init_($rt_s(263), 12);
        tj_JavaTranslator$Operator_REMOVEFROM = var$1;
        tj_JavaTranslator$Operator_$VALUES = $rt_createArrayFromData(tj_JavaTranslator$Operator, [tj_JavaTranslator$Operator_PLUS, tj_JavaTranslator$Operator_MINUS, tj_JavaTranslator$Operator_DIVIDE, tj_JavaTranslator$Operator_MULTIPLY, tj_JavaTranslator$Operator_EQUAL, tj_JavaTranslator$Operator_NOT_EQUAL, tj_JavaTranslator$Operator_LESS_THAN, tj_JavaTranslator$Operator_GREATER_THAN, tj_JavaTranslator$Operator_LESS_THAN_EQUAL, tj_JavaTranslator$Operator_GREATER_THAN_EQUAL, tj_JavaTranslator$Operator_REMOVEALLFROM,
        tj_JavaTranslator$Operator_REMOVEAT, var$1]);
    }
    var tj_PythonTranslator$Operator = $rt_classWithoutFields(jl_Enum);
    var tj_PythonTranslator$Operator_PLUS = null;
    var tj_PythonTranslator$Operator_MINUS = null;
    var tj_PythonTranslator$Operator_DIVIDE = null;
    var tj_PythonTranslator$Operator_MULTIPLY = null;
    var tj_PythonTranslator$Operator_EQUAL = null;
    var tj_PythonTranslator$Operator_NOT_EQUAL = null;
    var tj_PythonTranslator$Operator_LESS_THAN = null;
    var tj_PythonTranslator$Operator_GREATER_THAN = null;
    var tj_PythonTranslator$Operator_LESS_THAN_EQUAL = null;
    var tj_PythonTranslator$Operator_GREATER_THAN_EQUAL = null;
    var tj_PythonTranslator$Operator_REMOVEALLFROM = null;
    var tj_PythonTranslator$Operator_REMOVEAT = null;
    var tj_PythonTranslator$Operator_REMOVEFROM = null;
    var tj_PythonTranslator$Operator_$VALUES = null;
    function tj_PythonTranslator$Operator_$callClinit() {
        tj_PythonTranslator$Operator_$callClinit = $rt_eraseClinit(tj_PythonTranslator$Operator);
        tj_PythonTranslator$Operator__clinit_();
    }
    function tj_PythonTranslator$Operator__init_(var_0, var_1) {
        var var_2 = new tj_PythonTranslator$Operator();
        tj_PythonTranslator$Operator__init_0(var_2, var_0, var_1);
        return var_2;
    }
    function tj_PythonTranslator$Operator_values() {
        tj_PythonTranslator$Operator_$callClinit();
        return tj_PythonTranslator$Operator_$VALUES.$clone();
    }
    function tj_PythonTranslator$Operator__init_0($this, var$1, var$2) {
        tj_PythonTranslator$Operator_$callClinit();
        jl_Enum__init_($this, var$1, var$2);
    }
    function tj_PythonTranslator$Operator__clinit_() {
        var var$1;
        tj_PythonTranslator$Operator_PLUS = tj_PythonTranslator$Operator__init_($rt_s(283), 0);
        tj_PythonTranslator$Operator_MINUS = tj_PythonTranslator$Operator__init_($rt_s(285), 1);
        tj_PythonTranslator$Operator_DIVIDE = tj_PythonTranslator$Operator__init_($rt_s(292), 2);
        tj_PythonTranslator$Operator_MULTIPLY = tj_PythonTranslator$Operator__init_($rt_s(290), 3);
        tj_PythonTranslator$Operator_EQUAL = tj_PythonTranslator$Operator__init_($rt_s(284), 4);
        tj_PythonTranslator$Operator_NOT_EQUAL = tj_PythonTranslator$Operator__init_($rt_s(289), 5);
        tj_PythonTranslator$Operator_LESS_THAN = tj_PythonTranslator$Operator__init_($rt_s(274), 6);
        tj_PythonTranslator$Operator_GREATER_THAN = tj_PythonTranslator$Operator__init_($rt_s(288), 7);
        tj_PythonTranslator$Operator_LESS_THAN_EQUAL = tj_PythonTranslator$Operator__init_($rt_s(272), 8);
        tj_PythonTranslator$Operator_GREATER_THAN_EQUAL = tj_PythonTranslator$Operator__init_($rt_s(286), 9);
        tj_PythonTranslator$Operator_REMOVEALLFROM = tj_PythonTranslator$Operator__init_($rt_s(266), 10);
        tj_PythonTranslator$Operator_REMOVEAT = tj_PythonTranslator$Operator__init_($rt_s(261), 11);
        var$1 = tj_PythonTranslator$Operator__init_($rt_s(263), 12);
        tj_PythonTranslator$Operator_REMOVEFROM = var$1;
        tj_PythonTranslator$Operator_$VALUES = $rt_createArrayFromData(tj_PythonTranslator$Operator, [tj_PythonTranslator$Operator_PLUS, tj_PythonTranslator$Operator_MINUS, tj_PythonTranslator$Operator_DIVIDE, tj_PythonTranslator$Operator_MULTIPLY, tj_PythonTranslator$Operator_EQUAL, tj_PythonTranslator$Operator_NOT_EQUAL, tj_PythonTranslator$Operator_LESS_THAN, tj_PythonTranslator$Operator_GREATER_THAN, tj_PythonTranslator$Operator_LESS_THAN_EQUAL, tj_PythonTranslator$Operator_GREATER_THAN_EQUAL, tj_PythonTranslator$Operator_REMOVEALLFROM,
        tj_PythonTranslator$Operator_REMOVEAT, var$1]);
    }
    var otcit_DoubleSynthesizer = $rt_classWithoutFields();
    var otcit_DoubleSynthesizer_mantissa10Table = null;
    var otcit_DoubleSynthesizer_exp10Table = null;
    function otcit_DoubleSynthesizer_synthesizeDouble($mantissa, $exp, $negative) {
        var $indexInTable, var$5, $binMantissa, $binExp, $binMantissaShift, $error, $correction, $binMantissaWithoutError, $cmp, $iee754;
        $indexInTable = 330 + $exp | 0;
        if (Long_ne($mantissa, Long_ZERO)) {
            var$5 = otcit_DoubleSynthesizer_mantissa10Table.data;
            if ($indexInTable <= var$5.length && $indexInTable >= 0) {
                $binMantissa = otcit_DoubleAnalyzer_mulAndShiftRight($mantissa, var$5[$indexInTable], 0);
                $binExp = otcit_DoubleSynthesizer_exp10Table.data[$indexInTable];
                $binMantissaShift = (64 - jl_Long_numberOfLeadingZeros($binMantissa) | 0) - 58 | 0;
                $binMantissa = $binMantissaShift >= 0 ? Long_shru($binMantissa, $binMantissaShift) : Long_shl($binMantissa,  -$binMantissaShift | 0);
                $exp = $binExp + $binMantissaShift | 0;
                if ($exp >= 2047)
                    return !$negative ? Infinity : (-Infinity);
                $error = Long_lo(Long_and($binMantissa, Long_fromInt(31)));
                $correction = 16;
                $binMantissaShift = $error - 16 | 0;
                if ($binMantissaShift < 0)
                    $binMantissaShift =  -$binMantissaShift | 0;
                if ($binMantissaShift <= 1) {
                    $binMantissaWithoutError = Long_and($binMantissa, Long_fromInt(-32));
                    $cmp = jl_Long_compareUnsigned(Long_sub($mantissa, otcit_DoubleSynthesizer_calcDecMantissa($binMantissaWithoutError, 32, $indexInTable, $exp)), Long_sub(otcit_DoubleSynthesizer_calcDecMantissa(Long_add($binMantissaWithoutError, Long_fromInt(32)), 32, $indexInTable, $exp), $mantissa));
                    if ($cmp < 0)
                        $correction =  -$error | 0;
                    else if ($cmp > 0)
                        $correction = 32 - $error | 0;
                }
                $mantissa = Long_add($binMantissa, Long_fromInt($correction));
                if (Long_ne(Long_and($mantissa, Long_create(0, 4227858432)), Long_ZERO)) {
                    $mantissa = Long_shru($mantissa, 1);
                    $exp = $exp + 1 | 0;
                }
                if ($exp <= 0) {
                    $mantissa = Long_shr($mantissa, jl_Math_min(( -$exp | 0) + 1 | 0, 64));
                    $exp = 0;
                }
                $iee754 = Long_or(Long_and(Long_shru($mantissa, 5), Long_create(4294967295, 1048575)), Long_shl(Long_fromInt($exp), 52));
                if ($negative)
                    $iee754 = Long_xor($iee754, Long_create(0, 2147483648));
                return $rt_longBitsToDouble($iee754);
            }
        }
        return $rt_longBitsToDouble((!$negative ? Long_ZERO : Long_create(0, 2147483648)));
    }
    function otcit_DoubleSynthesizer_calcDecMantissa($mantissa, $lowerBit, $indexInTable, $binExp) {
        var $half, $shift, $decMantissa, $lowerPos, $decMantissaHi, $upperPos, $posCmp;
        $half = $lowerBit >>> 1 | 0;
        $shift = 7 - (otcit_DoubleAnalyzer_exp10Table.data[$indexInTable] - $binExp | 0) | 0;
        $decMantissa = otcit_DoubleAnalyzer_mulAndShiftRight($mantissa, otcit_DoubleAnalyzer_mantissa10Table.data[$indexInTable], $shift);
        $lowerPos = Long_fromInt($half);
        $decMantissaHi = otcit_DoubleAnalyzer_mulAndShiftRight(Long_add($mantissa, $lowerPos), otcit_DoubleAnalyzer_mantissa10Table.data[$indexInTable], $shift);
        $lowerPos = otcit_DoubleAnalyzer_findLowerDistance($decMantissa, otcit_DoubleAnalyzer_mulAndShiftRight(Long_sub($mantissa, $lowerPos), otcit_DoubleAnalyzer_mantissa10Table.data[$indexInTable], $shift));
        $upperPos = otcit_DoubleAnalyzer_findUpperDistance($decMantissa, $decMantissaHi);
        $posCmp = jl_Long_compareUnsigned($lowerPos, $upperPos);
        return $posCmp > 0 ? Long_mul(jl_Long_divideUnsigned($decMantissa, $lowerPos), $lowerPos) : $posCmp < 0 ? Long_add(Long_mul(jl_Long_divideUnsigned($decMantissa, $upperPos), $upperPos), $upperPos) : Long_mul(jl_Long_divideUnsigned(Long_add($decMantissa, Long_div($upperPos, Long_fromInt(2))), $upperPos), $upperPos);
    }
    function otcit_DoubleSynthesizer__clinit_() {
        otcit_DoubleSynthesizer_mantissa10Table = $rt_createLongArrayFromData([Long_create(136053384, 4203730336), Long_create(85033365, 2627331460), Long_create(106291706, 3284164325), Long_create(1206606457, 4105205406), Long_create(3975354508, 2565753378), Long_create(2821709486, 3207191723), Long_create(2453395034, 4008989654), Long_create(459630072, 2505618534), Long_create(2722021238, 3132023167), Long_create(2328784724, 3915028959), Long_create(3066103188, 2446893099), Long_create(2758887162, 3058616374),
        Long_create(1301125304, 3823270468), Long_create(2960686963, 2389544042), Long_create(1553375056, 2986930053), Long_create(3015460644, 3733662566), Long_create(810921078, 2333539104), Long_create(1013651348, 2916923880), Long_create(1267064185, 3646154850), Long_create(1865656940, 2278846781), Long_create(3405812998, 2848558476), Long_create(4257266248, 3560698095), Long_create(4271404141, 2225436309), Long_create(2118029704, 2781795387), Long_create(1573795306, 3477244234), Long_create(2057363890, 2173277646),
        Long_create(424221215, 2716597058), Long_create(2677760167, 3395746322), Long_create(1199716561, 4244682903), Long_create(2360435586, 2652926814), Long_create(803060835, 3316158518), Long_create(3151309692, 4145198147), Long_create(1432697645, 2590748842), Long_create(3938355705, 3238436052), Long_create(627977335, 4048045066), Long_create(1466227658, 2530028166), Long_create(3980268221, 3162535207), Long_create(3901593452, 3953169009), Long_create(827883171, 2470730631), Long_create(4256079436, 3088413288),
        Long_create(1025131999, 3860516611), Long_create(103836588, 2412822882), Long_create(2277279383, 3016028602), Long_create(699115580, 3770035753), Long_create(3121301798, 2356272345), Long_create(680401775, 2945340432), Long_create(850502219, 3681675540), Long_create(2679047535, 2301047212), Long_create(3348809418, 2876309015), Long_create(3112269949, 3595386269), Long_create(2482039630, 2247116418), Long_create(955065890, 2808895523), Long_create(120090538, 3511119404), Long_create(2222540234, 2194449627),
        Long_create(1704433469, 2743062034), Long_create(4278025484, 3428827542), Long_create(3200048207, 4286034428), Long_create(4147513777, 2678771517), Long_create(1963166750, 3348464397), Long_create(3527700261, 4185580496), Long_create(2204812663, 2615987810), Long_create(608532181, 3269984763), Long_create(3981890698, 4087480953), Long_create(878068951, 2554675596), Long_create(1097586188, 3193344495), Long_create(298240911, 3991680619), Long_create(3944496953, 2494800386), Long_create(2783137544, 3118500483),
        Long_create(2405180106, 3898125604), Long_create(3650721214, 2436328502), Long_create(2415917870, 3045410628), Long_create(3019897337, 3806763285), Long_create(2424306748, 2379227053), Long_create(4104125259, 2974033816), Long_create(835189277, 3717542271), Long_create(2132606034, 2323463919), Long_create(1592015719, 2904329899), Long_create(916277825, 3630412374), Long_create(3793899112, 2269007733), Long_create(1521148418, 2836259667), Long_create(827693699, 3545324584), Long_create(517308562, 2215827865),
        Long_create(1720377526, 2769784831), Long_create(1076730084, 3462231039), Long_create(2283569038, 2163894399), Long_create(1780719474, 2704867999), Long_create(1152157519, 3381084999), Long_create(366455074, 4226356249), Long_create(2913388981, 2641472655), Long_create(2567994403, 3301840819), Long_create(2136251179, 4127301024), Long_create(1335156987, 2579563140), Long_create(1668946234, 3224453925), Long_create(3159924616, 4030567406), Long_create(901211061, 2519104629), Long_create(2200255651, 3148880786),
        Long_create(602835915, 3936100983), Long_create(1987385183, 2460063114), Long_create(336747831, 3075078893), Long_create(1494676613, 3843848616), Long_create(934172883, 2402405385), Long_create(2241457928, 3003006731), Long_create(1728080585, 3753758414), Long_create(6308542, 2346099009), Long_create(1081627501, 2932623761), Long_create(2425776201, 3665779701), Long_create(2052981037, 2291112313), Long_create(3639968121, 2863890391), Long_create(3476218327, 3579862989), Long_create(2709507366, 2237414368),
        Long_create(3386884208, 2796767960), Long_create(4233605260, 3495959950), Long_create(1572261463, 2184974969), Long_create(3039068653, 2731218711), Long_create(2725093993, 3414023389), Long_create(185142019, 4267529237), Long_create(652584674, 2667205773), Long_create(1889472666, 3334007216), Long_create(2361840833, 4167509020), Long_create(3623634168, 2604693137), Long_create(1308317239, 3255866422), Long_create(3782880196, 4069833027), Long_create(1827429211, 2543645642), Long_create(136802865, 3179557053),
        Long_create(1244745406, 3974446316), Long_create(2925449527, 2484028947), Long_create(2583070084, 3105036184), Long_create(3228837605, 3881295230), Long_create(944281679, 2425809519), Long_create(106610275, 3032261899), Long_create(3354488316, 3790327373), Long_create(2633426109, 2368954608), Long_create(3291782637, 2961193260), Long_create(4114728296, 3701491575), Long_create(4182317921, 2313432234), Long_create(3080413753, 2891790293), Long_create(629291719, 3614737867), Long_create(4151403709, 2259211166),
        Long_create(3041770988, 2824013958), Long_create(1654730087, 3530017448), Long_create(1034206304, 2206260905), Long_create(2366499704, 2757826131), Long_create(1884382806, 3447282664), Long_create(1177739254, 2154551665), Long_create(2545915892, 2693189581), Long_create(4256136688, 3366486976), Long_create(1025203564, 4208108721), Long_create(3325106788, 2630067950), Long_create(2008899837, 3287584938), Long_create(363641148, 4109481173), Long_create(764146629, 2568425733), Long_create(2028925111, 3210532166),
        Long_create(388672741, 4013165208), Long_create(242920463, 2508228255), Long_create(3524876051, 3135285318), Long_create(2258611415, 3919106648), Long_create(1411632134, 2449441655), Long_create(690798344, 3061802069), Long_create(1937239754, 3827252586), Long_create(2284516670, 2392032866), Long_create(708162190, 2990041083), Long_create(4106428209, 3737551353), Long_create(955904895, 2335969596), Long_create(1194881119, 2919961995), Long_create(419859574, 3649952494), Long_create(3483637706, 2281220308),
        Long_create(59579836, 2851525386), Long_create(2221958443, 3564406732), Long_create(3536207675, 2227754207), Long_create(3346517770, 2784692759), Long_create(3109405388, 3480865949), Long_create(2480249280, 2175541218), Long_create(952827952, 2719426523), Long_create(117293116, 3399283154), Long_create(2294100043, 4249103942), Long_create(360070703, 2655689964), Long_create(450088378, 3319612455), Long_create(3783835945, 4149515568), Long_create(2364897466, 2593447230), Long_create(808638184, 3241809038),
        Long_create(3158281378, 4052261297), Long_create(363313125, 2532663311), Long_create(3675366878, 3165829138), Long_create(2446724950, 3957286423), Long_create(3139815830, 2473304014), Long_create(1777286139, 3091630018), Long_create(74124026, 3864537523), Long_create(3804423900, 2415335951), Long_create(3681788051, 3019169939), Long_create(3528493240, 3773962424), Long_create(2205308275, 2358726515), Long_create(1682893520, 2948408144), Long_create(2103616900, 3685510180), Long_create(3462244210, 2303443862),
        Long_create(2180321615, 2879304828), Long_create(2725402019, 3599131035), Long_create(1166505350, 2249456897), Long_create(2531873511, 2811821121), Long_create(4238583713, 3514776401), Long_create(1038502085, 2196735251), Long_create(224385782, 2745919064), Long_create(280482227, 3432398830), Long_create(2498086432, 4290498537), Long_create(4245658580, 2681561585), Long_create(2085847753, 3351951982), Long_create(459826043, 4189939978), Long_create(1361133101, 2618712486), Long_create(3848900024, 3273390607),
        Long_create(3737383206, 4091738259), Long_create(1798993592, 2557336412), Long_create(2248741990, 3196670515), Long_create(1737185663, 3995838144), Long_create(1085741040, 2497398840), Long_create(1357176300, 3121748550), Long_create(3843954022, 3902185687), Long_create(4013084000, 2438866054), Long_create(2868871352, 3048582568), Long_create(3586089190, 3810728210), Long_create(3315047568, 2381705131), Long_create(3070067636, 2977131414), Long_create(1690100897, 3721414268), Long_create(3203796708, 2325883917),
        Long_create(783520414, 2907354897), Long_create(2053142341, 3634193621), Long_create(1820084875, 2271371013), Long_create(3348847918, 2839213766), Long_create(2038576249, 3549017208), Long_create(1274110156, 2218135755), Long_create(518895871, 2772669694), Long_create(2796103486, 3465837117), Long_create(2284435591, 2166148198), Long_create(708060841, 2707685248), Long_create(885076051, 3384606560), Long_create(1106345064, 4230758200), Long_create(691465665, 2644223875), Long_create(4085557553, 3305279843),
        Long_create(4033205117, 4131599804), Long_create(373269550, 2582249878), Long_create(2614070586, 3227812347), Long_create(2193846408, 4034765434), Long_create(2444895829, 2521728396), Long_create(3056119787, 3152160495), Long_create(2746407909, 3940200619), Long_create(1179634031, 2462625387), Long_create(400800715, 3078281734), Long_create(2648484542, 3847852167), Long_create(3265915575, 2404907604), Long_create(4082394468, 3006134505), Long_create(1881767613, 3757668132), Long_create(3323588406, 2348542582),
        Long_create(2007001860, 2935678228), Long_create(2508752325, 3669597785), Long_create(4252324763, 2293498615), Long_create(4241664130, 2866873269), Long_create(2080854690, 3583591587), Long_create(763663269, 2239744742), Long_create(3102062735, 2799680927), Long_create(2803836594, 3499601159), Long_create(3363010608, 2187250724), Long_create(4203763259, 2734063405), Long_create(2033478602, 3417579257), Long_create(3615590077, 4271974071), Long_create(3870356534, 2669983794), Long_create(2690462020, 3337479743),
        Long_create(2289335700, 4171849679), Long_create(3041447549, 2607406049), Long_create(580583964, 3259257562), Long_create(2873213603, 4074071952), Long_create(1795758502, 2546294970), Long_create(97214479, 3182868713), Long_create(1195259923, 3978585891), Long_create(210166540, 2486616182), Long_create(2410191823, 3108270227), Long_create(1938997955, 3885337784), Long_create(1211873722, 2428336115), Long_create(441100328, 3035420144), Long_create(551375410, 3794275180), Long_create(2492093279, 2371421987),
        Long_create(2041374775, 2964277484), Long_create(2551718469, 3705346855), Long_create(3205436779, 2315841784), Long_create(4006795974, 2894802230), Long_create(2861011319, 3618502788), Long_create(3935615723, 2261564242), Long_create(2772036005, 2826955303), Long_create(2391303183, 3533694129), Long_create(4178919049, 2208558830), Long_create(3076165163, 2760698538), Long_create(1697722806, 3450873173), Long_create(1597947666, 2156795733), Long_create(3071176406, 2695994666), Long_create(1691486860, 3369993333),
        Long_create(3188100399, 4212491666), Long_create(3066304573, 2632807291), Long_create(2759138893, 3291009114), Long_create(1301439968, 4113761393), Long_create(3497754540, 2571100870), Long_create(2224709527, 3213876088), Long_create(2780886909, 4017345110), Long_create(664312494, 2510840694), Long_create(2977874265, 3138550867), Long_create(2648601008, 3923188584), Long_create(1655375630, 2451992865), Long_create(3142961361, 3064991081), Long_create(707476230, 3831238852), Long_create(2589656291, 2394524282),
        Long_create(1089586716, 2993155353), Long_create(2435725219, 3741444191), Long_create(3132940998, 2338402619), Long_create(2842434424, 2923003274), Long_create(1405559382, 3653754093), Long_create(1415345525, 2283596308), Long_create(1769181907, 2854495385), Long_create(3285219208, 3568119231), Long_create(3663874741, 2230074519), Long_create(3506101602, 2787593149), Long_create(1161401530, 3484491437), Long_create(1262746869, 2177807148), Long_create(1578433586, 2722258935), Long_create(899300158, 3402823669),
        Long_create(2197867022, 4253529586), Long_create(2447408712, 2658455991), Long_create(1985519067, 3323069989), Long_create(3555640657, 4153837486), Long_create(1148533587, 2596148429), Long_create(2509408807, 3245185536), Long_create(3136761009, 4056481920), Long_create(1960475631, 2535301200), Long_create(2450594539, 3169126500), Long_create(3063243173, 3961408125), Long_create(2451397895, 2475880078), Long_create(916763721, 3094850098), Long_create(3293438299, 3868562622), Long_create(984657113, 2417851639),
        Long_create(157079567, 3022314549), Long_create(1270091283, 3777893186), Long_create(1867548876, 2361183241), Long_create(3408177919, 2951479051), Long_create(3186480575, 3689348814), Long_create(917808535, 2305843009), Long_create(2221002493, 2882303761), Long_create(3849994940, 3602879701), Long_create(2943117750, 2251799813), Long_create(457671715, 2814749767), Long_create(3793315116, 3518437208), Long_create(2370821947, 2199023255), Long_create(1889785610, 2748779069), Long_create(3435973837, 3435973836),
        Long_create(0, 2147483648), Long_create(0, 2684354560), Long_create(0, 3355443200), Long_create(0, 4194304000), Long_create(0, 2621440000), Long_create(0, 3276800000), Long_create(0, 4096000000), Long_create(0, 2560000000), Long_create(0, 3200000000), Long_create(0, 4000000000), Long_create(0, 2500000000), Long_create(0, 3125000000), Long_create(0, 3906250000), Long_create(0, 2441406250), Long_create(2147483648, 3051757812), Long_create(2684354560, 3814697265), Long_create(67108864, 2384185791), Long_create(3305111552, 2980232238),
        Long_create(1983905792, 3725290298), Long_create(2313682944, 2328306436), Long_create(2892103680, 2910383045), Long_create(393904128, 3637978807), Long_create(1856802816, 2273736754), Long_create(173519872, 2842170943), Long_create(3438125312, 3552713678), Long_create(1075086496, 2220446049), Long_create(2417599944, 2775557561), Long_create(4095741754, 3469446951), Long_create(4170451332, 2168404344), Long_create(918096869, 2710505431), Long_create(73879263, 3388131789), Long_create(1166090902, 4235164736),
        Long_create(728806814, 2646977960), Long_create(911008517, 3308722450), Long_create(3286244295, 4135903062), Long_create(980160860, 2584939414), Long_create(3372684723, 3231174267), Long_create(3142114080, 4038967834), Long_create(3037563124, 2524354896), Long_create(3796953905, 3155443620), Long_create(451225085, 3944304526), Long_create(3503241150, 2465190328), Long_create(84084142, 3081487911), Long_create(3326330649, 3851859888), Long_create(2078956656, 2407412430), Long_create(451212172, 3009265538),
        Long_create(2711498863, 3761581922), Long_create(2768428613, 2350988701), Long_create(239310295, 2938735877), Long_create(1372879692, 3673419846), Long_create(4079275280, 2295887403), Long_create(4025352276, 2869859254), Long_create(2884206696, 3587324068), Long_create(3950112833, 2242077542), Long_create(2790157394, 2802596928), Long_create(3487696742, 3503246160), Long_create(2179810464, 2189528850), Long_create(577279432, 2736911063), Long_create(3942824762, 3421138828), Long_create(633563656, 4276423536),
        Long_create(395977285, 2672764710), Long_create(2642455254, 3340955887), Long_create(2229327244, 4176194859), Long_create(856458615, 2610121787), Long_create(4291798741, 3262652233), Long_create(2143522955, 4078315292), Long_create(3487185495, 2548947057), Long_create(1137756396, 3186183822), Long_create(3569679143, 3982729777), Long_create(620436729, 2489206111), Long_create(3996771383, 3111507638), Long_create(2848480580, 3889384548), Long_create(3927784011, 2430865342), Long_create(2762246365, 3038581678),
        Long_create(1305324309, 3798227098), Long_create(1889569517, 2373891936), Long_create(2361961896, 2967364920), Long_create(2952452370, 3709206150), Long_create(771540907, 2318253844), Long_create(964426134, 2897817305), Long_create(2279274492, 3622271631), Long_create(3035159293, 2263919769), Long_create(572723645, 2829899712), Long_create(715904556, 3537374640), Long_create(447440347, 2210859150), Long_create(2706784082, 2763573937), Long_create(162254631, 3454467422), Long_create(3322634616, 2159042138),
        Long_create(2005809622, 2698802673), Long_create(3581003852, 3373503341), Long_create(1255029343, 4216879177), Long_create(3468747899, 2635549485), Long_create(1114709402, 3294436857), Long_create(2467128577, 4118046071), Long_create(3152568096, 2573778794), Long_create(1793226473, 3217223493), Long_create(3315274915, 4021529366), Long_create(998304998, 2513455854), Long_create(3395364895, 3141819817), Long_create(1022980647, 3927274772), Long_create(2786846552, 2454546732), Long_create(3483558190, 3068183415),
        Long_create(3280705914, 3835229269), Long_create(2587312108, 2397018293), Long_create(12914663, 2996272867), Long_create(3237368801, 3745341083), Long_create(1486484589, 2340838177), Long_create(2931847560, 2926047721), Long_create(443583978, 3657559652), Long_create(2424723634, 2285974782), Long_create(883420895, 2857468478), Long_create(3251759766, 3571835597), Long_create(2569220766, 2232397248), Long_create(3211525958, 2790496560), Long_create(4014407447, 3488120700), Long_create(361521006, 2180075438),
        Long_create(2599384906, 2725094297), Long_create(28005660, 3406367872), Long_create(35007075, 4257959840), Long_create(21879422, 2661224900), Long_create(27349278, 3326531125), Long_create(1107928421, 4158163906), Long_create(1766197087, 2598852441), Long_create(3281488183, 3248565551), Long_create(3028118405, 4060706939), Long_create(1355703091, 2537941837), Long_create(2768370688, 3172427296), Long_create(3460463360, 3965534120), Long_create(2162789600, 2478458825), Long_create(3777228824, 3098073531),
        Long_create(3647794206, 3872591914), Long_create(3353613203, 2420369946), Long_create(2044532855, 3025462433), Long_create(3629407893, 3781828041), Long_create(657767197, 2363642526), Long_create(2969692644, 2954553157), Long_create(490890333, 3693191447), Long_create(1917419194, 2308244654), Long_create(249290345, 2885305818), Long_create(2459096579, 3606632272), Long_create(1536935362, 2254145170), Long_create(4068652851, 2817681462), Long_create(2938332415, 3522101828), Long_create(3983941407, 2201313642),
        Long_create(2832443111, 2751642053), Long_create(319328417, 3439552567), Long_create(1810192997, 2149720354), Long_create(115257598, 2687150443), Long_create(3365297469, 3358938053), Long_create(985396365, 4198672567), Long_create(2226485464, 2624170354), Long_create(635623182, 3280212943), Long_create(4015754449, 4100266178), Long_create(3583588355, 2562666361), Long_create(1258259972, 3203332952), Long_create(1572824965, 4004166190), Long_create(4204241075, 2502603868), Long_create(960334048, 3128254836),
        Long_create(1200417559, 3910318545), Long_create(3434615535, 2443949090), Long_create(2145785770, 3054936363), Long_create(1608490389, 3818670454), Long_create(4226531965, 2386669033), Long_create(2061939484, 2983336292), Long_create(2577424355, 3729170365), Long_create(2147761134, 2330731478), Long_create(537217770, 2913414348), Long_create(671522212, 3641767935), Long_create(2030314119, 2276104959), Long_create(1464150824, 2845131199), Long_create(756446706, 3556413999), Long_create(2083391927, 2222758749),
        Long_create(3677981733, 2778448436), Long_create(302509871, 3473060546), Long_create(1262810493, 2170662841), Long_create(2652254940, 2713328551), Long_create(2241576851, 3391660689), Long_create(3875712888, 4239575861), Long_create(2959191467, 2649734913), Long_create(477763862, 3312168642), Long_create(2744688476, 4140210802), Long_create(2789172121, 2587631751), Long_create(2412723328, 3234539689), Long_create(4089645983, 4043174611), Long_create(2019157828, 2526984132), Long_create(2523947285, 3158730165),
        Long_create(4228675930, 3948412706), Long_create(3716664280, 2467757941), Long_create(1424604878, 3084697427), Long_create(707014274, 3855871784), Long_create(441883921, 2409919865), Long_create(1626096725, 3012399831), Long_create(958879083, 3765499789), Long_create(1136170339, 2353437368), Long_create(1420212923, 2941796710), Long_create(3922749802, 3677245887), Long_create(4062331362, 2298278679), Long_create(4004172379, 2872848349), Long_create(1783990002, 3591060437), Long_create(1651864663, 2244412773),
        Long_create(3138572653, 2805515966), Long_create(1775732168, 3506894958), Long_create(36090781, 2191809349), Long_create(1118855300, 2739761686), Long_create(3546052773, 3424702107), Long_create(3358824142, 4280877634), Long_create(3173006913, 2675548521), Long_create(745033169, 3344435652), Long_create(931291462, 4180544565), Long_create(1118928076, 2612840353), Long_create(2472401918, 3266050441), Long_create(4164244222, 4082563051), Long_create(2065781727, 2551601907), Long_create(1508485334, 3189502384),
        Long_create(1885606668, 3986877980), Long_create(3325987816, 2491798737), Long_create(936259297, 3114748422), Long_create(3317807770, 3893435527), Long_create(3684242592, 2433397204), Long_create(310335944, 3041746506), Long_create(2535403578, 3802183132), Long_create(3732110884, 2376364457), Long_create(1443913133, 2970455572), Long_create(1804891417, 3713069465), Long_create(3812411696, 2320668415), Long_create(3691772795, 2900835519), Long_create(3540974170, 3626044399), Long_create(3823721592, 2266277749),
        Long_create(1558426518, 2832847187), Long_create(874291324, 3541058984), Long_create(546432078, 2213161865), Long_create(1756781921, 2766452331), Long_create(1122235577, 3458065414), Long_create(3922622708, 2161290883), Long_create(3829536561, 2701613604), Long_create(491953405, 3377017006), Long_create(2762425404, 4221271257), Long_create(115903142, 2638294536), Long_create(144878927, 3297868170), Long_create(2328582307, 4122335212), Long_create(3602847590, 2576459507), Long_create(3429817663, 3220574384),
        Long_create(4287272079, 4025717980), Long_create(532061401, 2516073738), Long_create(2812560400, 3145092172), Long_create(3515700500, 3931365215), Long_create(3807925548, 2457103259), Long_create(3686165111, 3071379074), Long_create(2460222741, 3839223843), Long_create(1000768301, 2399514902), Long_create(3398444024, 2999393627), Long_create(3174313207, 3749242034), Long_create(3057687578, 2343276271), Long_create(2748367649, 2929095339), Long_create(2361717737, 3661369174), Long_create(402331761, 2288355734),
        Long_create(2650398350, 2860444667), Long_create(2239256113, 3575555834), Long_create(2473276895, 2234722396), Long_create(3091596119, 2793402995), Long_create(2790753324, 3491753744), Long_create(1744220828, 2182346090), Long_create(32792387, 2727932613), Long_create(1114732307, 3409915766), Long_create(3540899032, 4262394707), Long_create(1676190983, 2663996692), Long_create(2095238729, 3329995865), Long_create(3692790235, 4162494831), Long_create(3918606633, 2601559269), Long_create(1677032819, 3251949087),
        Long_create(1022549200, 4064936359), Long_create(2249705986, 2540585224), Long_create(2812132482, 3175731530), Long_create(1367681955, 3969664413), Long_create(1391672134, 2481040258), Long_create(3887073815, 3101300322), Long_create(2711358621, 3876625403), Long_create(1157728226, 2422890877), Long_create(2520902107, 3028613596), Long_create(3151127633, 3785766995), Long_create(1432583859, 2366104372), Long_create(1790729824, 2957630465), Long_create(3312154103, 3697038081), Long_create(459483579, 2310648801),
        Long_create(1648096297, 2888311001), Long_create(3133862196, 3610388751), Long_create(3569276608, 2256492969), Long_create(1240370288, 2820616212), Long_create(1550462860, 3525770265), Long_create(3653393848, 2203606415), Long_create(3493000486, 2754508019), Long_create(3292508783, 3443135024), Long_create(2057817989, 2151959390), Long_create(424788839, 2689949238), Long_create(2678469697, 3362436547), Long_create(2274345297, 4203045684), Long_create(3568949458, 2626903552), Long_create(166219527, 3283629441),
        Long_create(1281516233, 4104536801), Long_create(3485302206, 2565335500), Long_create(61660461, 3206669376), Long_create(77075576, 4008336720), Long_create(48172235, 2505210450), Long_create(2207698942, 3131513062), Long_create(612140029, 3914391328), Long_create(382587518, 2446494580), Long_create(478234398, 3058118225), Long_create(1671534821, 3822647781), Long_create(1581580175, 2389154863), Long_create(903233395, 2986443579), Long_create(55299920, 3733054474), Long_create(1108304274, 2333159046)]);
        otcit_DoubleSynthesizer_exp10Table = $rt_createShortArrayFromData([(-76), (-72), (-69), (-66), (-62), (-59), (-56), (-52), (-49), (-46), (-42), (-39), (-36), (-32), (-29), (-26), (-22), (-19), (-16), (-12), (-9), (-6), (-2), 1, 4, 8, 11, 14, 17, 21, 24, 27, 31, 34, 37, 41, 44, 47, 51, 54, 57, 61, 64, 67, 71, 74, 77, 81, 84, 87, 91, 94, 97, 101, 104, 107, 110, 114, 117, 120, 124, 127, 130, 134, 137, 140, 144, 147, 150, 154, 157, 160, 164, 167, 170, 174, 177, 180, 184, 187, 190, 194, 197, 200, 204, 207,
        210, 213, 217, 220, 223, 227, 230, 233, 237, 240, 243, 247, 250, 253, 257, 260, 263, 267, 270, 273, 277, 280, 283, 287, 290, 293, 297, 300, 303, 306, 310, 313, 316, 320, 323, 326, 330, 333, 336, 340, 343, 346, 350, 353, 356, 360, 363, 366, 370, 373, 376, 380, 383, 386, 390, 393, 396, 400, 403, 406, 409, 413, 416, 419, 423, 426, 429, 433, 436, 439, 443, 446, 449, 453, 456, 459, 463, 466, 469, 473, 476, 479, 483, 486, 489, 493, 496, 499, 502, 506, 509, 512, 516, 519, 522, 526, 529, 532, 536, 539, 542,
        546, 549, 552, 556, 559, 562, 566, 569, 572, 576, 579, 582, 586, 589, 592, 595, 599, 602, 605, 609, 612, 615, 619, 622, 625, 629, 632, 635, 639, 642, 645, 649, 652, 655, 659, 662, 665, 669, 672, 675, 679, 682, 685, 689, 692, 695, 698, 702, 705, 708, 712, 715, 718, 722, 725, 728, 732, 735, 738, 742, 745, 748, 752, 755, 758, 762, 765, 768, 772, 775, 778, 782, 785, 788, 791, 795, 798, 801, 805, 808, 811, 815, 818, 821, 825, 828, 831, 835, 838, 841, 845, 848, 851, 855, 858, 861, 865, 868, 871, 875, 878,
        881, 885, 888, 891, 894, 898, 901, 904, 908, 911, 914, 918, 921, 924, 928, 931, 934, 938, 941, 944, 948, 951, 954, 958, 961, 964, 968, 971, 974, 978, 981, 984, 987, 991, 994, 997, 1001, 1004, 1007, 1011, 1014, 1017, 1021, 1024, 1027, 1031, 1034, 1037, 1041, 1044, 1047, 1051, 1054, 1057, 1061, 1064, 1067, 1071, 1074, 1077, 1081, 1084, 1087, 1090, 1094, 1097, 1100, 1104, 1107, 1110, 1114, 1117, 1120, 1124, 1127, 1130, 1134, 1137, 1140, 1144, 1147, 1150, 1154, 1157, 1160, 1164, 1167, 1170, 1174, 1177, 1180,
        1183, 1187, 1190, 1193, 1197, 1200, 1203, 1207, 1210, 1213, 1217, 1220, 1223, 1227, 1230, 1233, 1237, 1240, 1243, 1247, 1250, 1253, 1257, 1260, 1263, 1267, 1270, 1273, 1276, 1280, 1283, 1286, 1290, 1293, 1296, 1300, 1303, 1306, 1310, 1313, 1316, 1320, 1323, 1326, 1330, 1333, 1336, 1340, 1343, 1346, 1350, 1353, 1356, 1360, 1363, 1366, 1370, 1373, 1376, 1379, 1383, 1386, 1389, 1393, 1396, 1399, 1403, 1406, 1409, 1413, 1416, 1419, 1423, 1426, 1429, 1433, 1436, 1439, 1443, 1446, 1449, 1453, 1456, 1459, 1463,
        1466, 1469, 1472, 1476, 1479, 1482, 1486, 1489, 1492, 1496, 1499, 1502, 1506, 1509, 1512, 1516, 1519, 1522, 1526, 1529, 1532, 1536, 1539, 1542, 1546, 1549, 1552, 1556, 1559, 1562, 1566, 1569, 1572, 1575, 1579, 1582, 1585, 1589, 1592, 1595, 1599, 1602, 1605, 1609, 1612, 1615, 1619, 1622, 1625, 1629, 1632, 1635, 1639, 1642, 1645, 1649, 1652, 1655, 1659, 1662, 1665, 1668, 1672, 1675, 1678, 1682, 1685, 1688, 1692, 1695, 1698, 1702, 1705, 1708, 1712, 1715, 1718, 1722, 1725, 1728, 1732, 1735, 1738, 1742, 1745,
        1748, 1752, 1755, 1758, 1761, 1765, 1768, 1771, 1775, 1778, 1781, 1785, 1788, 1791, 1795, 1798, 1801, 1805, 1808, 1811, 1815, 1818, 1821, 1825, 1828, 1831, 1835, 1838, 1841, 1845, 1848, 1851, 1855, 1858, 1861, 1864, 1868, 1871, 1874, 1878, 1881, 1884, 1888, 1891, 1894, 1898, 1901, 1904, 1908, 1911, 1914, 1918, 1921, 1924, 1928, 1931, 1934, 1938, 1941, 1944, 1948, 1951, 1954, 1957, 1961, 1964, 1967, 1971, 1974, 1977, 1981, 1984, 1987, 1991, 1994, 1997, 2001, 2004, 2007, 2011, 2014, 2017, 2021, 2024, 2027,
        2031, 2034, 2037, 2041, 2044, 2047, 2051, 2054, 2057, 2060, 2064, 2067, 2070, 2074, 2077, 2080, 2084, 2087, 2090, 2094, 2097, 2100, 2104, 2107, 2110, 2114]);
    }
    function jn_ByteBufferImpl() {
        var a = this; jn_ByteBuffer.call(a);
        a.$direct = 0;
        a.$readOnly0 = 0;
    }
    function jn_ByteBufferImpl__init_(var_0, var_1, var_2, var_3, var_4, var_5, var_6) {
        var var_7 = new jn_ByteBufferImpl();
        jn_ByteBufferImpl__init_0(var_7, var_0, var_1, var_2, var_3, var_4, var_5, var_6);
        return var_7;
    }
    function jn_ByteBufferImpl__init_0($this, $start, $capacity, $array, $position, $limit, $direct, $readOnly) {
        jn_Buffer__init_($this, $capacity);
        jn_ByteOrder_$callClinit();
        $this.$order = jn_ByteOrder_BIG_ENDIAN;
        $this.$start2 = $start;
        $this.$array0 = $array;
        $this.$position = $position;
        $this.$limit = $limit;
        $this.$direct = $direct;
        $this.$readOnly0 = $readOnly;
    }
    var jur_NonCapFSet = $rt_classWithoutFields(jur_FSet);
    function jur_NonCapFSet_matches($this, $stringIndex, $testString, $matchResult) {
        var $gr;
        $gr = $this.$groupIndex;
        jur_MatchResultImpl_setConsumed($matchResult, $gr, $stringIndex - jur_MatchResultImpl_getConsumed($matchResult, $gr) | 0);
        return $this.$next4.$matches($stringIndex, $testString, $matchResult);
    }
    function jur_NonCapFSet_getName($this) {
        return $rt_s(645);
    }
    function jur_NonCapFSet_hasConsumed($this, $mr) {
        return 0;
    }
    var jur_AheadFSet = $rt_classWithoutFields(jur_FSet);
    function jur_AheadFSet_matches($this, $stringIndex, $testString, $matchResult) {
        return $stringIndex;
    }
    function jur_AheadFSet_getName($this) {
        return $rt_s(646);
    }
    var jur_BehindFSet = $rt_classWithoutFields(jur_FSet);
    function jur_BehindFSet_matches($this, $stringIndex, $testString, $matchResult) {
        if (jur_MatchResultImpl_getConsumed($matchResult, $this.$groupIndex) != $stringIndex)
            $stringIndex = (-1);
        return $stringIndex;
    }
    function jur_BehindFSet_getName($this) {
        return $rt_s(647);
    }
    function jur_AtomicFSet() {
        jur_FSet.call(this);
        this.$index7 = 0;
    }
    function jur_AtomicFSet_matches($this, $stringIndex, $testString, $matchResult) {
        var $gr;
        $gr = $this.$groupIndex;
        jur_MatchResultImpl_setConsumed($matchResult, $gr, $stringIndex - jur_MatchResultImpl_getConsumed($matchResult, $gr) | 0);
        $this.$index7 = $stringIndex;
        return $stringIndex;
    }
    function jur_AtomicFSet_getName($this) {
        return $rt_s(648);
    }
    function jur_AtomicFSet_hasConsumed($this, $mr) {
        return 0;
    }
    var jur_FinalSet = $rt_classWithoutFields(jur_FSet);
    function jur_FinalSet_matches($this, $stringIndex, $testString, $matchResult) {
        if ($matchResult.$mode0 != 1 && $stringIndex != $matchResult.$rightBound0)
            return (-1);
        $matchResult.$valid = 1;
        jur_MatchResultImpl_setEnd($matchResult, 0, $stringIndex);
        return $stringIndex;
    }
    function jur_FinalSet_getName($this) {
        return $rt_s(649);
    }
    function jur_LeafSet() {
        jur_AbstractSet.call(this);
        this.$charCount = 0;
    }
    function jur_LeafSet__init_($this) {
        jur_AbstractSet__init_($this);
        $this.$charCount = 1;
    }
    function jur_LeafSet_matches($this, $stringIndex, $testString, $matchResult) {
        var $shift;
        if (($stringIndex + $this.$charCount0() | 0) > $matchResult.$rightBound0) {
            $matchResult.$hitEnd = 1;
            return (-1);
        }
        $shift = $this.$accepts($stringIndex, $testString);
        if ($shift < 0)
            return (-1);
        return $this.$next4.$matches($stringIndex + $shift | 0, $testString, $matchResult);
    }
    function jur_LeafSet_charCount($this) {
        return $this.$charCount;
    }
    function jur_LeafSet_hasConsumed($this, $mr) {
        return 1;
    }
    var jur_EmptySet = $rt_classWithoutFields(jur_LeafSet);
    function jur_EmptySet__init_(var_0) {
        var var_1 = new jur_EmptySet();
        jur_EmptySet__init_0(var_1, var_0);
        return var_1;
    }
    function jur_EmptySet__init_0($this, $next) {
        jur_AbstractSet__init_0($this, $next);
        $this.$charCount = 1;
        $this.$type11 = 1;
        $this.$charCount = 0;
    }
    function jur_EmptySet_accepts($this, $stringIndex, $testString) {
        return 0;
    }
    function jur_EmptySet_find($this, $stringIndex, $testString, $matchResult) {
        var $strLength, $startStr, $high;
        $strLength = $matchResult.$rightBound0;
        $startStr = $matchResult.$leftBound0;
        while (true) {
            $high = $rt_compare($stringIndex, $strLength);
            if ($high > 0)
                return (-1);
            if ($high < 0 && jl_Character_isLowSurrogate(jl_String_charAt($testString, $stringIndex)) && $stringIndex > $startStr && jl_Character_isHighSurrogate(jl_String_charAt($testString, $stringIndex - 1 | 0))) {
                $stringIndex = $stringIndex + 1 | 0;
                continue;
            }
            if ($this.$next4.$matches($stringIndex, $testString, $matchResult) >= 0)
                break;
            $stringIndex = $stringIndex + 1 | 0;
        }
        return $stringIndex;
    }
    function jur_EmptySet_findBack($this, $stringIndex, $startSearch, $testString, $matchResult) {
        var $strLength, $startStr;
        $strLength = $matchResult.$rightBound0;
        $startStr = $matchResult.$leftBound0;
        while (true) {
            if ($startSearch < $stringIndex)
                return (-1);
            if ($startSearch < $strLength && jl_Character_isLowSurrogate(jl_String_charAt($testString, $startSearch)) && $startSearch > $startStr && jl_Character_isHighSurrogate(jl_String_charAt($testString, $startSearch - 1 | 0))) {
                $startSearch = $startSearch + (-1) | 0;
                continue;
            }
            if ($this.$next4.$matches($startSearch, $testString, $matchResult) >= 0)
                break;
            $startSearch = $startSearch + (-1) | 0;
        }
        return $startSearch;
    }
    function jur_EmptySet_getName($this) {
        return $rt_s(650);
    }
    function jur_EmptySet_hasConsumed($this, $mr) {
        return 0;
    }
    function jur_JointSet() {
        var a = this; jur_AbstractSet.call(a);
        a.$children = null;
        a.$fSet = null;
        a.$groupIndex0 = 0;
    }
    function jur_JointSet__init_0(var_0, var_1) {
        var var_2 = new jur_JointSet();
        jur_JointSet__init_(var_2, var_0, var_1);
        return var_2;
    }
    function jur_JointSet__init_($this, $children, $fSet) {
        jur_AbstractSet__init_($this);
        $this.$children = $children;
        $this.$fSet = $fSet;
        $this.$groupIndex0 = $fSet.$groupIndex;
    }
    function jur_JointSet_matches($this, $stringIndex, $testString, $matchResult) {
        var $start, $size, $i, $shift;
        if ($this.$children === null)
            return (-1);
        $start = jur_MatchResultImpl_getStart($matchResult, $this.$groupIndex0);
        jur_MatchResultImpl_setStart($matchResult, $this.$groupIndex0, $stringIndex);
        $size = $this.$children.$size0;
        $i = 0;
        while (true) {
            if ($i >= $size) {
                jur_MatchResultImpl_setStart($matchResult, $this.$groupIndex0, $start);
                return (-1);
            }
            $shift = (ju_ArrayList_get($this.$children, $i)).$matches($stringIndex, $testString, $matchResult);
            if ($shift >= 0)
                break;
            $i = $i + 1 | 0;
        }
        return $shift;
    }
    function jur_JointSet_setNext($this, $next) {
        $this.$fSet.$next4 = $next;
    }
    function jur_JointSet_getName($this) {
        return $rt_s(651);
    }
    function jur_JointSet_first($this, $set) {
        var $i;
        a: {
            $i = $this.$children;
            if ($i !== null) {
                $i = ju_AbstractList_iterator($i);
                while (true) {
                    if (!ju_AbstractList$1_hasNext($i))
                        break a;
                    if (!(ju_AbstractList$1_next($i)).$first($set))
                        continue;
                    else
                        return 1;
                }
            }
        }
        return 0;
    }
    function jur_JointSet_hasConsumed($this, $matchResult) {
        return jur_MatchResultImpl_getEnd($matchResult, $this.$groupIndex0) >= 0 && jur_MatchResultImpl_getStart($matchResult, $this.$groupIndex0) == jur_MatchResultImpl_getEnd($matchResult, $this.$groupIndex0) ? 0 : 1;
    }
    function jur_JointSet_processSecondPass($this) {
        var $child, $childrenSize, $i, $set;
        $this.$isSecondPassVisited = 1;
        $child = $this.$fSet;
        if ($child !== null && !$child.$isSecondPassVisited)
            jur_AbstractSet_processSecondPass($child);
        a: {
            $child = $this.$children;
            if ($child !== null) {
                $childrenSize = $child.$size0;
                $i = 0;
                while (true) {
                    if ($i >= $childrenSize)
                        break a;
                    $child = ju_ArrayList_get($this.$children, $i);
                    $set = $child.$processBackRefReplacement();
                    if ($set === null)
                        $set = $child;
                    else {
                        $child.$isSecondPassVisited = 1;
                        ju_ArrayList_remove($this.$children, $i);
                        ju_ArrayList_add0($this.$children, $i, $set);
                    }
                    if (!$set.$isSecondPassVisited)
                        $set.$processSecondPass();
                    $i = $i + 1 | 0;
                }
            }
        }
        if ($this.$next4 !== null)
            jur_AbstractSet_processSecondPass($this);
    }
    var jur_NonCapJointSet = $rt_classWithoutFields(jur_JointSet);
    function jur_NonCapJointSet_matches($this, $stringIndex, $testString, $matchResult) {
        var $start, $size, $i, $shift;
        $start = jur_MatchResultImpl_getConsumed($matchResult, $this.$groupIndex0);
        jur_MatchResultImpl_setConsumed($matchResult, $this.$groupIndex0, $stringIndex);
        $size = $this.$children.$size0;
        $i = 0;
        while (true) {
            if ($i >= $size) {
                jur_MatchResultImpl_setConsumed($matchResult, $this.$groupIndex0, $start);
                return (-1);
            }
            $shift = (ju_ArrayList_get($this.$children, $i)).$matches($stringIndex, $testString, $matchResult);
            if ($shift >= 0)
                break;
            $i = $i + 1 | 0;
        }
        return $shift;
    }
    function jur_NonCapJointSet_getName($this) {
        return $rt_s(652);
    }
    function jur_NonCapJointSet_hasConsumed($this, $matchResult) {
        return !jur_MatchResultImpl_getConsumed($matchResult, $this.$groupIndex0) ? 0 : 1;
    }
    var jur_AtomicJointSet = $rt_classWithoutFields(jur_NonCapJointSet);
    function jur_AtomicJointSet_matches($this, $stringIndex, $testString, $matchResult) {
        var $start, $size, $i;
        $start = jur_MatchResultImpl_getConsumed($matchResult, $this.$groupIndex0);
        jur_MatchResultImpl_setConsumed($matchResult, $this.$groupIndex0, $stringIndex);
        $size = $this.$children.$size0;
        $i = 0;
        while ($i < $size) {
            if ((ju_ArrayList_get($this.$children, $i)).$matches($stringIndex, $testString, $matchResult) >= 0)
                return $this.$next4.$matches($this.$fSet.$index7, $testString, $matchResult);
            $i = $i + 1 | 0;
        }
        jur_MatchResultImpl_setConsumed($matchResult, $this.$groupIndex0, $start);
        return (-1);
    }
    function jur_AtomicJointSet_setNext($this, $next) {
        $this.$next4 = $next;
    }
    function jur_AtomicJointSet_getName($this) {
        return $rt_s(652);
    }
    var jur_PositiveLookAhead = $rt_classWithoutFields(jur_AtomicJointSet);
    function jur_PositiveLookAhead_matches($this, $stringIndex, $testString, $matchResult) {
        var $size, $i;
        $size = $this.$children.$size0;
        $i = 0;
        while ($i < $size) {
            if ((ju_ArrayList_get($this.$children, $i)).$matches($stringIndex, $testString, $matchResult) >= 0)
                return $this.$next4.$matches($stringIndex, $testString, $matchResult);
            $i = $i + 1 | 0;
        }
        return (-1);
    }
    function jur_PositiveLookAhead_hasConsumed($this, $matchResult) {
        return 0;
    }
    function jur_PositiveLookAhead_getName($this) {
        return $rt_s(653);
    }
    var jur_NegativeLookAhead = $rt_classWithoutFields(jur_AtomicJointSet);
    function jur_NegativeLookAhead_matches($this, $stringIndex, $testString, $matchResult) {
        var $size, $i;
        $size = $this.$children.$size0;
        $i = 0;
        while (true) {
            if ($i >= $size)
                return $this.$next4.$matches($stringIndex, $testString, $matchResult);
            if ((ju_ArrayList_get($this.$children, $i)).$matches($stringIndex, $testString, $matchResult) >= 0)
                break;
            $i = $i + 1 | 0;
        }
        return (-1);
    }
    function jur_NegativeLookAhead_hasConsumed($this, $matchResult) {
        return 0;
    }
    function jur_NegativeLookAhead_getName($this) {
        return $rt_s(654);
    }
    var jur_PositiveLookBehind = $rt_classWithoutFields(jur_AtomicJointSet);
    function jur_PositiveLookBehind_matches($this, $stringIndex, $testString, $matchResult) {
        var $size, $leftBound, $shift, $i;
        $size = $this.$children.$size0;
        $leftBound = $matchResult.$transparentBounds ? 0 : $matchResult.$leftBound0;
        a: {
            $shift = $this.$next4.$matches($stringIndex, $testString, $matchResult);
            if ($shift >= 0) {
                jur_MatchResultImpl_setConsumed($matchResult, $this.$groupIndex0, $stringIndex);
                $i = 0;
                while (true) {
                    if ($i >= $size)
                        break a;
                    if ((ju_ArrayList_get($this.$children, $i)).$findBack($leftBound, $stringIndex, $testString, $matchResult) >= 0) {
                        jur_MatchResultImpl_setConsumed($matchResult, $this.$groupIndex0, (-1));
                        return $shift;
                    }
                    $i = $i + 1 | 0;
                }
            }
        }
        return (-1);
    }
    function jur_PositiveLookBehind_hasConsumed($this, $matchResult) {
        return 0;
    }
    function jur_PositiveLookBehind_getName($this) {
        return $rt_s(655);
    }
    var jur_NegativeLookBehind = $rt_classWithoutFields(jur_AtomicJointSet);
    function jur_NegativeLookBehind_matches($this, $stringIndex, $testString, $matchResult) {
        var $size, $i;
        $size = $this.$children.$size0;
        jur_MatchResultImpl_setConsumed($matchResult, $this.$groupIndex0, $stringIndex);
        $i = 0;
        while (true) {
            if ($i >= $size)
                return $this.$next4.$matches($stringIndex, $testString, $matchResult);
            if ((ju_ArrayList_get($this.$children, $i)).$findBack(0, $stringIndex, $testString, $matchResult) >= 0)
                break;
            $i = $i + 1 | 0;
        }
        return (-1);
    }
    function jur_NegativeLookBehind_hasConsumed($this, $matchResult) {
        return 0;
    }
    function jur_NegativeLookBehind_getName($this) {
        return $rt_s(656);
    }
    function jur_SingleSet() {
        jur_JointSet.call(this);
        this.$kid = null;
    }
    function jur_SingleSet__init_(var_0, var_1) {
        var var_2 = new jur_SingleSet();
        jur_SingleSet__init_0(var_2, var_0, var_1);
        return var_2;
    }
    function jur_SingleSet__init_0($this, $child, $fSet) {
        jur_AbstractSet__init_($this);
        $this.$kid = $child;
        $this.$fSet = $fSet;
        $this.$groupIndex0 = $fSet.$groupIndex;
    }
    function jur_SingleSet_matches($this, $stringIndex, $testString, $matchResult) {
        var $start, $shift;
        $start = jur_MatchResultImpl_getStart($matchResult, $this.$groupIndex0);
        jur_MatchResultImpl_setStart($matchResult, $this.$groupIndex0, $stringIndex);
        $shift = $this.$kid.$matches($stringIndex, $testString, $matchResult);
        if ($shift >= 0)
            return $shift;
        jur_MatchResultImpl_setStart($matchResult, $this.$groupIndex0, $start);
        return (-1);
    }
    function jur_SingleSet_find($this, $stringIndex, $testString, $matchResult) {
        var $res;
        $res = $this.$kid.$find0($stringIndex, $testString, $matchResult);
        if ($res >= 0)
            jur_MatchResultImpl_setStart($matchResult, $this.$groupIndex0, $res);
        return $res;
    }
    function jur_SingleSet_findBack($this, $stringIndex, $lastIndex, $testString, $matchResult) {
        var $res;
        $res = $this.$kid.$findBack($stringIndex, $lastIndex, $testString, $matchResult);
        if ($res >= 0)
            jur_MatchResultImpl_setStart($matchResult, $this.$groupIndex0, $res);
        return $res;
    }
    function jur_SingleSet_first($this, $set) {
        return $this.$kid.$first($set);
    }
    function jur_SingleSet_processBackRefReplacement($this) {
        var $set;
        $set = new jur_BackReferencedSingleSet;
        jur_SingleSet__init_0($set, $this.$kid, $this.$fSet);
        $this.$next4 = $set;
        return $set;
    }
    function jur_SingleSet_processSecondPass($this) {
        var $set;
        $this.$isSecondPassVisited = 1;
        $set = $this.$fSet;
        if ($set !== null && !$set.$isSecondPassVisited)
            jur_AbstractSet_processSecondPass($set);
        $set = $this.$kid;
        if ($set !== null && !$set.$isSecondPassVisited) {
            $set = $set.$processBackRefReplacement();
            if ($set !== null) {
                $this.$kid.$isSecondPassVisited = 1;
                $this.$kid = $set;
            }
            $this.$kid.$processSecondPass();
        }
    }
    function otciu_UnicodeHelper$Range() {
        var a = this; jl_Object.call(a);
        a.$start3 = 0;
        a.$end0 = 0;
        a.$data = null;
    }
    function otciu_UnicodeHelper$Range__init_(var_0, var_1, var_2) {
        var var_3 = new otciu_UnicodeHelper$Range();
        otciu_UnicodeHelper$Range__init_0(var_3, var_0, var_1, var_2);
        return var_3;
    }
    function otciu_UnicodeHelper$Range__init_0($this, $start, $end, $data) {
        $this.$start3 = $start;
        $this.$end0 = $end;
        $this.$data = $data;
    }
    var jl_ArrayIndexOutOfBoundsException = $rt_classWithoutFields(jl_IndexOutOfBoundsException);
    var jlr_Modifier = $rt_classWithoutFields();
    var jlr_Modifier_modifierNames = null;
    var jlr_Modifier_canonicalOrder = null;
    function jlr_Modifier_isPublic($mod) {
        return !($mod & 1) ? 0 : 1;
    }
    function jlr_Modifier__clinit_() {
        jlr_Modifier_canonicalOrder = $rt_createIntArrayFromData([1, 4, 2, 1024, 8, 16, 128, 64, 32, 256, 2048, 512]);
    }
    function ju_Locale() {
        var a = this; jl_Object.call(a);
        a.$countryCode = null;
        a.$languageCode = null;
        a.$variantCode = null;
    }
    var ju_Locale_defaultLocale = null;
    var ju_Locale_CANADA = null;
    var ju_Locale_CANADA_FRENCH = null;
    var ju_Locale_CHINA = null;
    var ju_Locale_CHINESE = null;
    var ju_Locale_ENGLISH = null;
    var ju_Locale_FRANCE = null;
    var ju_Locale_FRENCH = null;
    var ju_Locale_GERMAN = null;
    var ju_Locale_GERMANY = null;
    var ju_Locale_ITALIAN = null;
    var ju_Locale_ITALY = null;
    var ju_Locale_JAPAN = null;
    var ju_Locale_JAPANESE = null;
    var ju_Locale_KOREA = null;
    var ju_Locale_KOREAN = null;
    var ju_Locale_PRC = null;
    var ju_Locale_SIMPLIFIED_CHINESE = null;
    var ju_Locale_TAIWAN = null;
    var ju_Locale_TRADITIONAL_CHINESE = null;
    var ju_Locale_UK = null;
    var ju_Locale_US = null;
    var ju_Locale_ROOT = null;
    function ju_Locale_$callClinit() {
        ju_Locale_$callClinit = $rt_eraseClinit(ju_Locale);
        ju_Locale__clinit_();
    }
    function ju_Locale__init_(var_0, var_1) {
        var var_2 = new ju_Locale();
        ju_Locale__init_0(var_2, var_0, var_1);
        return var_2;
    }
    function ju_Locale__init_1(var_0, var_1, var_2) {
        var var_3 = new ju_Locale();
        ju_Locale__init_2(var_3, var_0, var_1, var_2);
        return var_3;
    }
    function ju_Locale__init_0($this, $language, $country) {
        ju_Locale_$callClinit();
        ju_Locale__init_2($this, $language, $country, $rt_s(2));
    }
    function ju_Locale__init_2($this, $language, $country, $variant) {
        ju_Locale_$callClinit();
        if ($language !== null && $country !== null && $variant !== null) {
            if (!jl_String_length($language) && !jl_String_length($country)) {
                $this.$languageCode = $rt_s(2);
                $this.$countryCode = $rt_s(2);
                $this.$variantCode = $variant;
                return;
            }
            $this.$languageCode = $language;
            $this.$countryCode = $country;
            $this.$variantCode = $variant;
            return;
        }
        $language = new jl_NullPointerException;
        jl_Exception__init_($language);
        $rt_throw($language);
    }
    function ju_Locale__clinit_() {
        var $localeName, $countryIndex;
        ju_Locale_CANADA = ju_Locale__init_($rt_s(657), $rt_s(658));
        ju_Locale_CANADA_FRENCH = ju_Locale__init_($rt_s(659), $rt_s(658));
        ju_Locale_CHINA = ju_Locale__init_($rt_s(660), $rt_s(661));
        ju_Locale_CHINESE = ju_Locale__init_($rt_s(660), $rt_s(2));
        ju_Locale_ENGLISH = ju_Locale__init_($rt_s(657), $rt_s(2));
        ju_Locale_FRANCE = ju_Locale__init_($rt_s(659), $rt_s(662));
        ju_Locale_FRENCH = ju_Locale__init_($rt_s(659), $rt_s(2));
        ju_Locale_GERMAN = ju_Locale__init_($rt_s(663), $rt_s(2));
        ju_Locale_GERMANY = ju_Locale__init_($rt_s(663), $rt_s(664));
        ju_Locale_ITALIAN = ju_Locale__init_($rt_s(665), $rt_s(2));
        ju_Locale_ITALY = ju_Locale__init_($rt_s(665), $rt_s(666));
        ju_Locale_JAPAN = ju_Locale__init_($rt_s(667), $rt_s(668));
        ju_Locale_JAPANESE = ju_Locale__init_($rt_s(667), $rt_s(2));
        ju_Locale_KOREA = ju_Locale__init_($rt_s(669), $rt_s(670));
        ju_Locale_KOREAN = ju_Locale__init_($rt_s(669), $rt_s(2));
        ju_Locale_PRC = ju_Locale__init_($rt_s(660), $rt_s(661));
        ju_Locale_SIMPLIFIED_CHINESE = ju_Locale__init_($rt_s(660), $rt_s(661));
        ju_Locale_TAIWAN = ju_Locale__init_($rt_s(660), $rt_s(671));
        ju_Locale_TRADITIONAL_CHINESE = ju_Locale__init_($rt_s(660), $rt_s(671));
        ju_Locale_UK = ju_Locale__init_($rt_s(657), $rt_s(672));
        ju_Locale_US = ju_Locale__init_($rt_s(657), $rt_s(673));
        ju_Locale_ROOT = ju_Locale__init_($rt_s(2), $rt_s(2));
        if (otciu_CLDRHelper_$$metadata$$10 === null)
            otciu_CLDRHelper_$$metadata$$10 = otciu_CLDRHelper_getDefaultLocale$$create();
        $localeName = (otciu_CLDRHelper_$$metadata$$10.value !== null ? $rt_str(otciu_CLDRHelper_$$metadata$$10.value) : null);
        $countryIndex = jl_String_indexOf0($localeName, 95);
        ju_Locale_defaultLocale = ju_Locale__init_1(jl_String_substring($localeName, 0, $countryIndex), jl_String_substring0($localeName, $countryIndex + 1 | 0), $rt_s(2));
    }
    var jl_ReflectiveOperationException = $rt_classWithoutFields(jl_Exception);
    var jl_IllegalAccessException = $rt_classWithoutFields(jl_ReflectiveOperationException);
    var jlr_InvocationTargetException = $rt_classWithoutFields(jl_ReflectiveOperationException);
    var oti_AsyncCallback = $rt_classWithoutFields(0);
    function otpp_AsyncCallbackWrapper() {
        jl_Object.call(this);
        this.$realAsyncCallback = null;
    }
    function otpp_AsyncCallbackWrapper_create($realAsyncCallback) {
        var var$2;
        var$2 = new otpp_AsyncCallbackWrapper;
        var$2.$realAsyncCallback = $realAsyncCallback;
        return var$2;
    }
    function otpp_AsyncCallbackWrapper_complete($this, $result) {
        $this.$realAsyncCallback.$complete($result);
    }
    function otpp_AsyncCallbackWrapper_error($this, $e) {
        $this.$realAsyncCallback.$error($e);
    }
    function jl_Object$monitorEnterWait$lambda$_6_0() {
        var a = this; jl_Object.call(a);
        a.$_0 = null;
        a.$_1 = null;
        a.$_2 = 0;
        a.$_3 = null;
    }
    var jl_Thread$UncaughtExceptionHandler = $rt_classWithoutFields(0);
    var jl_DefaultUncaughtExceptionHandler = $rt_classWithoutFields();
    var otcit_DoubleAnalyzer = $rt_classWithoutFields();
    var otcit_DoubleAnalyzer_MAX_MANTISSA = Long_ZERO;
    var otcit_DoubleAnalyzer_mantissa10Table = null;
    var otcit_DoubleAnalyzer_exp10Table = null;
    function otcit_DoubleAnalyzer_analyze($d, $result) {
        var $bits, $mantissa, $exponent, var$6, $posCmp, $mantissaShift, $binExponentCorrection, $decExponent, var$11, $decMantissa, $decMantissaHi, $lowerPos, $upperPos;
        $bits = jl_Double_doubleToLongBits($d);
        $result.$sign0 = Long_eq(Long_and($bits, Long_create(0, 2147483648)), Long_ZERO) ? 0 : 1;
        $mantissa = Long_and($bits, Long_create(4294967295, 1048575));
        $exponent = Long_lo(Long_shr($bits, 52)) & 2047;
        if (Long_eq($mantissa, Long_ZERO) && !$exponent) {
            $result.$mantissa0 = Long_ZERO;
            $result.$exponent0 = 0;
            return;
        }
        if ($exponent)
            $mantissa = Long_or($mantissa, Long_create(0, 1048576));
        else {
            $mantissa = Long_shl($mantissa, 1);
            while (Long_eq(Long_and($mantissa, Long_create(0, 1048576)), Long_ZERO)) {
                $mantissa = Long_shl($mantissa, 1);
                $exponent = $exponent + (-1) | 0;
            }
        }
        var$6 = otcit_DoubleAnalyzer_exp10Table.data;
        $posCmp = $exponent << 16 >> 16;
        $mantissaShift = 0;
        $binExponentCorrection = var$6.length;
        $decExponent = $rt_compare($mantissaShift, $binExponentCorrection);
        if ($decExponent > 0) {
            $result = new jl_IllegalArgumentException;
            jl_Exception__init_($result);
            $rt_throw($result);
        }
        a: {
            if (!$decExponent)
                $decExponent = (-1);
            else {
                var$11 = $binExponentCorrection - 1 | 0;
                while (true) {
                    $decExponent = ($mantissaShift + var$11 | 0) / 2 | 0;
                    $binExponentCorrection = $rt_compare(var$6[$decExponent], $posCmp);
                    if (!$binExponentCorrection)
                        break;
                    if ($binExponentCorrection <= 0) {
                        $mantissaShift = $decExponent + 1 | 0;
                        if ($mantissaShift > var$11) {
                            $decExponent = ( -$decExponent | 0) - 2 | 0;
                            break a;
                        }
                    } else {
                        var$11 = $decExponent - 1 | 0;
                        if (var$11 < $mantissaShift) {
                            $decExponent = ( -$decExponent | 0) - 1 | 0;
                            break a;
                        }
                    }
                }
            }
        }
        if ($decExponent < 0)
            $decExponent =  -$decExponent | 0;
        $posCmp = $decExponent + 1 | 0;
        $mantissaShift = 12 + ($exponent - var$6[$posCmp] | 0) | 0;
        $decMantissa = otcit_DoubleAnalyzer_mulAndShiftRight($mantissa, otcit_DoubleAnalyzer_mantissa10Table.data[$posCmp], $mantissaShift);
        if (Long_le($decMantissa, otcit_DoubleAnalyzer_MAX_MANTISSA)) {
            while (jl_Long_compareUnsigned($decMantissa, otcit_DoubleAnalyzer_MAX_MANTISSA) <= 0) {
                $decExponent = $decExponent + (-1) | 0;
                $decMantissa = Long_add(Long_mul($decMantissa, Long_fromInt(10)), Long_fromInt(9));
            }
            var$6 = otcit_DoubleAnalyzer_exp10Table.data;
            $posCmp = $decExponent + 1 | 0;
            $mantissaShift = 12 + ($exponent - var$6[$posCmp] | 0) | 0;
            $decMantissa = otcit_DoubleAnalyzer_mulAndShiftRight($mantissa, otcit_DoubleAnalyzer_mantissa10Table.data[$posCmp], $mantissaShift);
        }
        $mantissa = Long_shl($mantissa, 1);
        $bits = Long_add($mantissa, Long_fromInt(1));
        var$6 = otcit_DoubleAnalyzer_mantissa10Table.data;
        $posCmp = $decExponent + 1 | 0;
        $decMantissaHi = var$6[$posCmp];
        $exponent = $mantissaShift - 1 | 0;
        $decMantissaHi = otcit_DoubleAnalyzer_mulAndShiftRight($bits, $decMantissaHi, $exponent);
        $lowerPos = otcit_DoubleAnalyzer_findLowerDistance($decMantissa, otcit_DoubleAnalyzer_mulAndShiftRight(Long_sub($mantissa, Long_fromInt(1)), otcit_DoubleAnalyzer_mantissa10Table.data[$posCmp], $exponent));
        $upperPos = otcit_DoubleAnalyzer_findUpperDistance($decMantissa, $decMantissaHi);
        $posCmp = jl_Long_compareUnsigned($lowerPos, $upperPos);
        $mantissa = $posCmp > 0 ? Long_mul(jl_Long_divideUnsigned($decMantissa, $lowerPos), $lowerPos) : $posCmp < 0 ? Long_add(Long_mul(jl_Long_divideUnsigned($decMantissa, $upperPos), $upperPos), $upperPos) : Long_mul(jl_Long_divideUnsigned(Long_add($decMantissa, Long_div($upperPos, Long_fromInt(2))), $upperPos), $upperPos);
        if (jl_Long_compareUnsigned($mantissa, Long_create(2808348672, 232830643)) >= 0)
            while (true) {
                $decExponent = $decExponent + 1 | 0;
                $mantissa = jl_Long_divideUnsigned($mantissa, Long_fromInt(10));
                if (jl_Long_compareUnsigned($mantissa, Long_create(2808348672, 232830643)) < 0)
                    break;
            }
        else if (jl_Long_compareUnsigned($mantissa, Long_create(1569325056, 23283064)) < 0) {
            $decExponent = $decExponent + (-1) | 0;
            $mantissa = Long_mul($mantissa, Long_fromInt(10));
        }
        $result.$mantissa0 = $mantissa;
        $result.$exponent0 = $decExponent - 330 | 0;
    }
    function otcit_DoubleAnalyzer_findLowerDistance($mantissa, $lower) {
        var $pos, $pos_0;
        $pos = Long_fromInt(1);
        while (true) {
            $pos_0 = Long_mul($pos, Long_fromInt(10));
            if (jl_Long_compareUnsigned(jl_Long_divideUnsigned($mantissa, $pos_0), jl_Long_divideUnsigned($lower, $pos_0)) <= 0)
                break;
            $pos = $pos_0;
        }
        return $pos;
    }
    function otcit_DoubleAnalyzer_findUpperDistance($mantissa, $upper) {
        var $pos, $pos_0;
        $pos = Long_fromInt(1);
        while (true) {
            $pos_0 = Long_mul($pos, Long_fromInt(10));
            if (jl_Long_compareUnsigned(jl_Long_divideUnsigned($mantissa, $pos_0), jl_Long_divideUnsigned($upper, $pos_0)) >= 0)
                break;
            $pos = $pos_0;
        }
        return $pos;
    }
    function otcit_DoubleAnalyzer_mulAndShiftRight($a, $b, $shift) {
        var $a1, $a2, $a3, $a4, $b1, $b2, $b3, $b4;
        $a1 = Long_and($a, Long_fromInt(65535));
        $a2 = Long_and(Long_shru($a, 16), Long_fromInt(65535));
        $a3 = Long_and(Long_shru($a, 32), Long_fromInt(65535));
        $a4 = Long_and(Long_shru($a, 48), Long_fromInt(65535));
        $b1 = Long_and($b, Long_fromInt(65535));
        $b2 = Long_and(Long_shru($b, 16), Long_fromInt(65535));
        $b3 = Long_and(Long_shru($b, 32), Long_fromInt(65535));
        $b4 = Long_and(Long_shru($b, 48), Long_fromInt(65535));
        return Long_add(Long_add(Long_add(Long_shl(Long_mul($b4, $a4), 32 + $shift | 0), Long_shl(Long_add(Long_mul($b4, $a3), Long_mul($b3, $a4)), 16 + $shift | 0)), Long_shl(Long_add(Long_add(Long_mul($b4, $a2), Long_mul($b3, $a3)), Long_mul($b2, $a4)), $shift)), Long_shru(Long_add(Long_add(Long_add(Long_mul($b3, $a1), Long_mul($b2, $a2)), Long_mul($b1, $a3)), Long_shl(Long_add(Long_add(Long_add(Long_mul($b4, $a1), Long_mul($b3, $a2)), Long_mul($b2, $a3)), Long_mul($b1, $a4)), 16)), 32 - $shift | 0));
    }
    function otcit_DoubleAnalyzer__clinit_() {
        otcit_DoubleAnalyzer_MAX_MANTISSA = jl_Long_divideUnsigned(Long_fromInt(-1), Long_fromInt(10));
        otcit_DoubleAnalyzer_mantissa10Table = $rt_createLongArrayFromData([Long_create(3251292512, 2194092222), Long_create(1766094183, 3510547556), Long_create(553881887, 2808438045), Long_create(443105509, 2246750436), Long_create(3285949193, 3594800697), Long_create(910772436, 2875840558), Long_create(2446604867, 2300672446), Long_create(2196580869, 3681075914), Long_create(2616258154, 2944860731), Long_create(1234013064, 2355888585), Long_create(1974420903, 3769421736), Long_create(720543263, 3015537389),
        Long_create(1435428070, 2412429911), Long_create(578697993, 3859887858), Long_create(2180945313, 3087910286), Long_create(885762791, 2470328229), Long_create(3135207384, 3952525166), Long_create(1649172448, 3162020133), Long_create(3037324877, 2529616106), Long_create(3141732885, 4047385770), Long_create(2513386308, 3237908616), Long_create(1151715587, 2590326893), Long_create(983751480, 4144523029), Long_create(1645994643, 3315618423), Long_create(3034782633, 2652494738), Long_create(3996658754, 4243991581),
        Long_create(2338333544, 3395193265), Long_create(1870666835, 2716154612), Long_create(4073513845, 2172923689), Long_create(3940641775, 3476677903), Long_create(575533043, 2781342323), Long_create(2178413352, 2225073858), Long_create(2626467905, 3560118173), Long_create(3819161242, 2848094538), Long_create(478348616, 2278475631), Long_create(3342338164, 3645561009), Long_create(3532863990, 2916448807), Long_create(1108304273, 2333159046), Long_create(55299919, 3733054474), Long_create(903233395, 2986443579),
        Long_create(1581580175, 2389154863), Long_create(1671534821, 3822647781), Long_create(478234397, 3058118225), Long_create(382587518, 2446494580), Long_create(612140029, 3914391328), Long_create(2207698941, 3131513062), Long_create(48172235, 2505210450), Long_create(77075576, 4008336720), Long_create(61660460, 3206669376), Long_create(3485302205, 2565335500), Long_create(1281516232, 4104536801), Long_create(166219527, 3283629441), Long_create(3568949458, 2626903552), Long_create(2274345296, 4203045684),
        Long_create(2678469696, 3362436547), Long_create(424788838, 2689949238), Long_create(2057817989, 2151959390), Long_create(3292508783, 3443135024), Long_create(3493000485, 2754508019), Long_create(3653393847, 2203606415), Long_create(1550462860, 3525770265), Long_create(1240370288, 2820616212), Long_create(3569276608, 2256492969), Long_create(3133862195, 3610388751), Long_create(1648096297, 2888311001), Long_create(459483578, 2310648801), Long_create(3312154103, 3697038081), Long_create(1790729823, 2957630465),
        Long_create(1432583858, 2366104372), Long_create(3151127633, 3785766995), Long_create(2520902106, 3028613596), Long_create(1157728226, 2422890877), Long_create(2711358621, 3876625403), Long_create(3887073815, 3101300322), Long_create(1391672133, 2481040258), Long_create(1367681954, 3969664413), Long_create(2812132482, 3175731530), Long_create(2249705985, 2540585224), Long_create(1022549199, 4064936359), Long_create(1677032818, 3251949087), Long_create(3918606632, 2601559269), Long_create(3692790234, 4162494831),
        Long_create(2095238728, 3329995865), Long_create(1676190982, 2663996692), Long_create(3540899031, 4262394707), Long_create(1114732307, 3409915766), Long_create(32792386, 2727932613), Long_create(1744220827, 2182346090), Long_create(2790753324, 3491753744), Long_create(3091596118, 2793402995), Long_create(2473276894, 2234722396), Long_create(2239256113, 3575555834), Long_create(2650398349, 2860444667), Long_create(402331761, 2288355734), Long_create(2361717736, 3661369174), Long_create(2748367648, 2929095339),
        Long_create(3057687578, 2343276271), Long_create(3174313206, 3749242034), Long_create(3398444024, 2999393627), Long_create(1000768301, 2399514902), Long_create(2460222741, 3839223843), Long_create(3686165111, 3071379074), Long_create(3807925548, 2457103259), Long_create(3515700499, 3931365215), Long_create(2812560399, 3145092172), Long_create(532061401, 2516073738), Long_create(4287272078, 4025717980), Long_create(3429817663, 3220574384), Long_create(3602847589, 2576459507), Long_create(2328582306, 4122335212),
        Long_create(144878926, 3297868170), Long_create(115903141, 2638294536), Long_create(2762425404, 4221271257), Long_create(491953404, 3377017006), Long_create(3829536560, 2701613604), Long_create(3922622707, 2161290883), Long_create(1122235577, 3458065414), Long_create(1756781920, 2766452331), Long_create(546432077, 2213161865), Long_create(874291324, 3541058984), Long_create(1558426518, 2832847187), Long_create(3823721592, 2266277749), Long_create(3540974170, 3626044399), Long_create(3691772795, 2900835519),
        Long_create(3812411695, 2320668415), Long_create(1804891416, 3713069465), Long_create(1443913133, 2970455572), Long_create(3732110884, 2376364457), Long_create(2535403578, 3802183132), Long_create(310335944, 3041746506), Long_create(3684242592, 2433397204), Long_create(3317807769, 3893435527), Long_create(936259297, 3114748422), Long_create(3325987815, 2491798737), Long_create(1885606668, 3986877980), Long_create(1508485334, 3189502384), Long_create(2065781726, 2551601907), Long_create(4164244222, 4082563051),
        Long_create(2472401918, 3266050441), Long_create(1118928075, 2612840353), Long_create(931291461, 4180544565), Long_create(745033169, 3344435652), Long_create(3173006913, 2675548521), Long_create(3358824142, 4280877634), Long_create(3546052773, 3424702107), Long_create(1118855300, 2739761686), Long_create(36090780, 2191809349), Long_create(1775732167, 3506894958), Long_create(3138572652, 2805515966), Long_create(1651864662, 2244412773), Long_create(1783990001, 3591060437), Long_create(4004172378, 2872848349),
        Long_create(4062331362, 2298278679), Long_create(3922749802, 3677245887), Long_create(1420212923, 2941796710), Long_create(1136170338, 2353437368), Long_create(958879082, 3765499789), Long_create(1626096725, 3012399831), Long_create(441883920, 2409919865), Long_create(707014273, 3855871784), Long_create(1424604878, 3084697427), Long_create(3716664280, 2467757941), Long_create(4228675929, 3948412706), Long_create(2523947284, 3158730165), Long_create(2019157827, 2526984132), Long_create(4089645983, 4043174611),
        Long_create(2412723327, 3234539689), Long_create(2789172121, 2587631751), Long_create(2744688475, 4140210802), Long_create(477763862, 3312168642), Long_create(2959191467, 2649734913), Long_create(3875712888, 4239575861), Long_create(2241576851, 3391660689), Long_create(2652254940, 2713328551), Long_create(1262810493, 2170662841), Long_create(302509870, 3473060546), Long_create(3677981733, 2778448436), Long_create(2083391927, 2222758749), Long_create(756446706, 3556413999), Long_create(1464150824, 2845131199),
        Long_create(2030314118, 2276104959), Long_create(671522212, 3641767935), Long_create(537217769, 2913414348), Long_create(2147761134, 2330731478), Long_create(2577424355, 3729170365), Long_create(2061939484, 2983336292), Long_create(4226531965, 2386669033), Long_create(1608490388, 3818670454), Long_create(2145785770, 3054936363), Long_create(3434615534, 2443949090), Long_create(1200417559, 3910318545), Long_create(960334047, 3128254836), Long_create(4204241074, 2502603868), Long_create(1572824964, 4004166190),
        Long_create(1258259971, 3203332952), Long_create(3583588354, 2562666361), Long_create(4015754449, 4100266178), Long_create(635623181, 3280212943), Long_create(2226485463, 2624170354), Long_create(985396364, 4198672567), Long_create(3365297469, 3358938053), Long_create(115257597, 2687150443), Long_create(1810192996, 2149720354), Long_create(319328417, 3439552567), Long_create(2832443111, 2751642053), Long_create(3983941407, 2201313642), Long_create(2938332415, 3522101828), Long_create(4068652850, 2817681462),
        Long_create(1536935362, 2254145170), Long_create(2459096579, 3606632272), Long_create(249290345, 2885305818), Long_create(1917419194, 2308244654), Long_create(490890333, 3693191447), Long_create(2969692644, 2954553157), Long_create(657767197, 2363642526), Long_create(3629407892, 3781828041), Long_create(2044532855, 3025462433), Long_create(3353613202, 2420369946), Long_create(3647794205, 3872591914), Long_create(3777228823, 3098073531), Long_create(2162789599, 2478458825), Long_create(3460463359, 3965534120),
        Long_create(2768370687, 3172427296), Long_create(1355703090, 2537941837), Long_create(3028118404, 4060706939), Long_create(3281488183, 3248565551), Long_create(1766197087, 2598852441), Long_create(1107928421, 4158163906), Long_create(27349277, 3326531125), Long_create(21879422, 2661224900), Long_create(35007075, 4257959840), Long_create(28005660, 3406367872), Long_create(2599384905, 2725094297), Long_create(361521006, 2180075438), Long_create(4014407446, 3488120700), Long_create(3211525957, 2790496560),
        Long_create(2569220766, 2232397248), Long_create(3251759766, 3571835597), Long_create(883420894, 2857468478), Long_create(2424723634, 2285974782), Long_create(443583977, 3657559652), Long_create(2931847559, 2926047721), Long_create(1486484588, 2340838177), Long_create(3237368801, 3745341083), Long_create(12914663, 2996272867), Long_create(2587312108, 2397018293), Long_create(3280705914, 3835229269), Long_create(3483558190, 3068183415), Long_create(2786846552, 2454546732), Long_create(1022980646, 3927274772),
        Long_create(3395364895, 3141819817), Long_create(998304997, 2513455854), Long_create(3315274914, 4021529366), Long_create(1793226472, 3217223493), Long_create(3152568096, 2573778794), Long_create(2467128576, 4118046071), Long_create(1114709402, 3294436857), Long_create(3468747899, 2635549485), Long_create(1255029343, 4216879177), Long_create(3581003852, 3373503341), Long_create(2005809622, 2698802673), Long_create(3322634616, 2159042138), Long_create(162254630, 3454467422), Long_create(2706784082, 2763573937),
        Long_create(447440347, 2210859150), Long_create(715904555, 3537374640), Long_create(572723644, 2829899712), Long_create(3035159293, 2263919769), Long_create(2279274491, 3622271631), Long_create(964426134, 2897817305), Long_create(771540907, 2318253844), Long_create(2952452370, 3709206150), Long_create(2361961896, 2967364920), Long_create(1889569516, 2373891936), Long_create(1305324308, 3798227098), Long_create(2762246365, 3038581678), Long_create(3927784010, 2430865342), Long_create(2848480580, 3889384548),
        Long_create(3996771382, 3111507638), Long_create(620436728, 2489206111), Long_create(3569679143, 3982729777), Long_create(1137756396, 3186183822), Long_create(3487185494, 2548947057), Long_create(2143522954, 4078315292), Long_create(4291798741, 3262652233), Long_create(856458615, 2610121787), Long_create(2229327243, 4176194859), Long_create(2642455254, 3340955887), Long_create(395977285, 2672764710), Long_create(633563656, 4276423536), Long_create(3942824761, 3421138828), Long_create(577279431, 2736911063),
        Long_create(2179810463, 2189528850), Long_create(3487696741, 3503246160), Long_create(2790157393, 2802596928), Long_create(3950112833, 2242077542), Long_create(2884206696, 3587324068), Long_create(4025352275, 2869859254), Long_create(4079275279, 2295887403), Long_create(1372879692, 3673419846), Long_create(239310294, 2938735877), Long_create(2768428613, 2350988701), Long_create(2711498862, 3761581922), Long_create(451212171, 3009265538), Long_create(2078956655, 2407412430), Long_create(3326330649, 3851859888),
        Long_create(84084141, 3081487911), Long_create(3503241150, 2465190328), Long_create(451225085, 3944304526), Long_create(3796953905, 3155443620), Long_create(3037563124, 2524354896), Long_create(3142114080, 4038967834), Long_create(3372684723, 3231174267), Long_create(980160860, 2584939414), Long_create(3286244294, 4135903062), Long_create(911008517, 3308722450), Long_create(728806813, 2646977960), Long_create(1166090902, 4235164736), Long_create(73879262, 3388131789), Long_create(918096869, 2710505431),
        Long_create(4170451332, 2168404344), Long_create(4095741754, 3469446951), Long_create(2417599944, 2775557561), Long_create(1075086496, 2220446049), Long_create(3438125312, 3552713678), Long_create(173519872, 2842170943), Long_create(1856802816, 2273736754), Long_create(393904128, 3637978807), Long_create(2892103680, 2910383045), Long_create(2313682944, 2328306436), Long_create(1983905792, 3725290298), Long_create(3305111552, 2980232238), Long_create(67108864, 2384185791), Long_create(2684354560, 3814697265),
        Long_create(2147483648, 3051757812), Long_create(0, 2441406250), Long_create(0, 3906250000), Long_create(0, 3125000000), Long_create(0, 2500000000), Long_create(0, 4000000000), Long_create(0, 3200000000), Long_create(0, 2560000000), Long_create(0, 4096000000), Long_create(0, 3276800000), Long_create(0, 2621440000), Long_create(0, 4194304000), Long_create(0, 3355443200), Long_create(0, 2684354560), Long_create(0, 2147483648), Long_create(3435973836, 3435973836), Long_create(1889785610, 2748779069), Long_create(2370821947, 2199023255),
        Long_create(3793315115, 3518437208), Long_create(457671715, 2814749767), Long_create(2943117749, 2251799813), Long_create(3849994940, 3602879701), Long_create(2221002492, 2882303761), Long_create(917808535, 2305843009), Long_create(3186480574, 3689348814), Long_create(3408177918, 2951479051), Long_create(1867548875, 2361183241), Long_create(1270091283, 3777893186), Long_create(157079567, 3022314549), Long_create(984657113, 2417851639), Long_create(3293438299, 3868562622), Long_create(916763721, 3094850098),
        Long_create(2451397895, 2475880078), Long_create(3063243173, 3961408125), Long_create(2450594538, 3169126500), Long_create(1960475630, 2535301200), Long_create(3136761009, 4056481920), Long_create(2509408807, 3245185536), Long_create(1148533586, 2596148429), Long_create(3555640657, 4153837486), Long_create(1985519066, 3323069989), Long_create(2447408712, 2658455991), Long_create(2197867021, 4253529586), Long_create(899300158, 3402823669), Long_create(1578433585, 2722258935), Long_create(1262746868, 2177807148),
        Long_create(1161401530, 3484491437), Long_create(3506101601, 2787593149), Long_create(3663874740, 2230074519), Long_create(3285219207, 3568119231), Long_create(1769181906, 2854495385), Long_create(1415345525, 2283596308), Long_create(1405559381, 3653754093), Long_create(2842434423, 2923003274), Long_create(3132940998, 2338402619), Long_create(2435725219, 3741444191), Long_create(1089586716, 2993155353), Long_create(2589656291, 2394524282), Long_create(707476229, 3831238852), Long_create(3142961361, 3064991081),
        Long_create(1655375629, 2451992865), Long_create(2648601007, 3923188584), Long_create(2977874265, 3138550867), Long_create(664312493, 2510840694), Long_create(2780886908, 4017345110), Long_create(2224709526, 3213876088), Long_create(3497754539, 2571100870), Long_create(1301439967, 4113761393), Long_create(2759138892, 3291009114), Long_create(3066304573, 2632807291), Long_create(3188100398, 4212491666), Long_create(1691486859, 3369993333), Long_create(3071176406, 2695994666), Long_create(1597947665, 2156795733),
        Long_create(1697722806, 3450873173), Long_create(3076165163, 2760698538), Long_create(4178919049, 2208558830), Long_create(2391303182, 3533694129), Long_create(2772036005, 2826955303), Long_create(3935615722, 2261564242), Long_create(2861011319, 3618502788), Long_create(4006795973, 2894802230), Long_create(3205436779, 2315841784), Long_create(2551718468, 3705346855), Long_create(2041374775, 2964277484), Long_create(2492093279, 2371421987), Long_create(551375410, 3794275180), Long_create(441100328, 3035420144),
        Long_create(1211873721, 2428336115), Long_create(1938997954, 3885337784), Long_create(2410191822, 3108270227), Long_create(210166539, 2486616182), Long_create(1195259923, 3978585891), Long_create(97214479, 3182868713), Long_create(1795758501, 2546294970), Long_create(2873213602, 4074071952), Long_create(580583963, 3259257562), Long_create(3041447548, 2607406049), Long_create(2289335700, 4171849679), Long_create(2690462019, 3337479743), Long_create(3870356534, 2669983794), Long_create(3615590076, 4271974071),
        Long_create(2033478602, 3417579257), Long_create(4203763259, 2734063405), Long_create(3363010607, 2187250724), Long_create(2803836594, 3499601159), Long_create(3102062734, 2799680927), Long_create(763663269, 2239744742), Long_create(2080854690, 3583591587), Long_create(4241664129, 2866873269), Long_create(4252324763, 2293498615), Long_create(2508752324, 3669597785), Long_create(2007001859, 2935678228), Long_create(3323588406, 2348542582), Long_create(1881767613, 3757668132), Long_create(4082394468, 3006134505),
        Long_create(3265915574, 2404907604), Long_create(2648484541, 3847852167), Long_create(400800715, 3078281734), Long_create(1179634031, 2462625387), Long_create(2746407909, 3940200619), Long_create(3056119786, 3152160495), Long_create(2444895829, 2521728396), Long_create(2193846408, 4034765434), Long_create(2614070585, 3227812347), Long_create(373269550, 2582249878), Long_create(4033205117, 4131599804), Long_create(4085557553, 3305279843), Long_create(691465664, 2644223875), Long_create(1106345063, 4230758200),
        Long_create(885076050, 3384606560), Long_create(708060840, 2707685248), Long_create(2284435591, 2166148198), Long_create(2796103486, 3465837117), Long_create(518895870, 2772669694), Long_create(1274110155, 2218135755), Long_create(2038576249, 3549017208), Long_create(3348847917, 2839213766), Long_create(1820084875, 2271371013), Long_create(2053142340, 3634193621), Long_create(783520413, 2907354897), Long_create(3203796708, 2325883917), Long_create(1690100896, 3721414268), Long_create(3070067635, 2977131414),
        Long_create(3315047567, 2381705131), Long_create(3586089190, 3810728210), Long_create(2868871352, 3048582568), Long_create(4013084000, 2438866054), Long_create(3843954022, 3902185687), Long_create(1357176299, 3121748550), Long_create(1085741039, 2497398840), Long_create(1737185663, 3995838144), Long_create(2248741989, 3196670515), Long_create(1798993591, 2557336412), Long_create(3737383206, 4091738259), Long_create(3848900024, 3273390607), Long_create(1361133101, 2618712486), Long_create(459826043, 4189939978),
        Long_create(2085847752, 3351951982), Long_create(4245658579, 2681561585), Long_create(2498086431, 4290498537), Long_create(280482227, 3432398830), Long_create(224385781, 2745919064), Long_create(1038502084, 2196735251), Long_create(4238583712, 3514776401), Long_create(2531873511, 2811821121), Long_create(1166505349, 2249456897), Long_create(2725402018, 3599131035), Long_create(2180321615, 2879304828), Long_create(3462244210, 2303443862), Long_create(2103616899, 3685510180), Long_create(1682893519, 2948408144),
        Long_create(2205308275, 2358726515), Long_create(3528493240, 3773962424), Long_create(3681788051, 3019169939), Long_create(3804423900, 2415335951), Long_create(74124026, 3864537523), Long_create(1777286139, 3091630018), Long_create(3139815829, 2473304014), Long_create(2446724950, 3957286423), Long_create(3675366878, 3165829138), Long_create(363313125, 2532663311), Long_create(3158281377, 4052261297), Long_create(808638183, 3241809038), Long_create(2364897465, 2593447230), Long_create(3783835944, 4149515568),
        Long_create(450088378, 3319612455), Long_create(360070702, 2655689964), Long_create(2294100042, 4249103942), Long_create(117293115, 3399283154), Long_create(952827951, 2719426523), Long_create(2480249279, 2175541218), Long_create(3109405388, 3480865949), Long_create(3346517769, 2784692759), Long_create(3536207675, 2227754207), Long_create(2221958443, 3564406732), Long_create(59579836, 2851525386), Long_create(3483637705, 2281220308), Long_create(419859574, 3649952494), Long_create(1194881118, 2919961995),
        Long_create(955904894, 2335969596), Long_create(4106428209, 3737551353), Long_create(708162189, 2990041083), Long_create(2284516670, 2392032866), Long_create(1937239754, 3827252586), Long_create(690798344, 3061802069), Long_create(1411632134, 2449441655), Long_create(2258611415, 3919106648), Long_create(3524876050, 3135285318), Long_create(242920462, 2508228255), Long_create(388672740, 4013165208), Long_create(2028925110, 3210532166), Long_create(764146629, 2568425733), Long_create(363641147, 4109481173),
        Long_create(2008899836, 3287584938), Long_create(3325106787, 2630067950), Long_create(1025203564, 4208108721), Long_create(4256136688, 3366486976), Long_create(2545915891, 2693189581), Long_create(1177739254, 2154551665), Long_create(1884382806, 3447282664), Long_create(2366499704, 2757826131), Long_create(1034206304, 2206260905), Long_create(1654730086, 3530017448), Long_create(3041770987, 2824013958), Long_create(4151403708, 2259211166), Long_create(629291719, 3614737867), Long_create(3080413753, 2891790293),
        Long_create(4182317920, 2313432234), Long_create(4114728295, 3701491575), Long_create(3291782636, 2961193260), Long_create(2633426109, 2368954608), Long_create(3354488315, 3790327373), Long_create(106610275, 3032261899), Long_create(944281679, 2425809519), Long_create(3228837605, 3881295230), Long_create(2583070084, 3105036184), Long_create(2925449526, 2484028947), Long_create(1244745405, 3974446316), Long_create(136802865, 3179557053), Long_create(1827429210, 2543645642), Long_create(3782880196, 4069833027),
        Long_create(1308317238, 3255866422), Long_create(3623634168, 2604693137), Long_create(2361840832, 4167509020), Long_create(1889472666, 3334007216), Long_create(652584673, 2667205773), Long_create(185142018, 4267529237), Long_create(2725093992, 3414023389), Long_create(3039068653, 2731218711), Long_create(1572261463, 2184974969), Long_create(4233605259, 3495959950), Long_create(3386884207, 2796767960), Long_create(2709507366, 2237414368), Long_create(3476218326, 3579862989), Long_create(3639968120, 2863890391),
        Long_create(2052981037, 2291112313), Long_create(2425776200, 3665779701), Long_create(1081627501, 2932623761), Long_create(6308541, 2346099009), Long_create(1728080585, 3753758414), Long_create(2241457927, 3003006731), Long_create(934172882, 2402405385), Long_create(1494676612, 3843848616), Long_create(336747830, 3075078893), Long_create(1987385183, 2460063114), Long_create(602835915, 3936100983), Long_create(2200255650, 3148880786), Long_create(901211061, 2519104629), Long_create(3159924616, 4030567406),
        Long_create(1668946233, 3224453925), Long_create(1335156987, 2579563140), Long_create(2136251179, 4127301024), Long_create(2567994402, 3301840819), Long_create(2913388981, 2641472655), Long_create(366455074, 4226356249), Long_create(1152157518, 3381084999), Long_create(1780719474, 2704867999), Long_create(2283569038, 2163894399), Long_create(1076730083, 3462231039), Long_create(1720377526, 2769784831), Long_create(517308561, 2215827865), Long_create(827693699, 3545324584), Long_create(1521148418, 2836259667),
        Long_create(3793899112, 2269007733), Long_create(916277824, 3630412374), Long_create(1592015718, 2904329899), Long_create(2132606034, 2323463919), Long_create(835189277, 3717542271), Long_create(4104125258, 2974033816), Long_create(2424306747, 2379227053), Long_create(3019897337, 3806763285), Long_create(2415917869, 3045410628), Long_create(3650721214, 2436328502), Long_create(2405180105, 3898125604), Long_create(2783137543, 3118500483), Long_create(3944496953, 2494800386), Long_create(298240911, 3991680619),
        Long_create(1097586188, 3193344495), Long_create(878068950, 2554675596), Long_create(3981890698, 4087480953), Long_create(608532181, 3269984763), Long_create(2204812663, 2615987810), Long_create(3527700261, 4185580496), Long_create(1963166749, 3348464397), Long_create(4147513777, 2678771517), Long_create(3200048207, 4286034428), Long_create(4278025484, 3428827542), Long_create(1704433468, 2743062034), Long_create(2222540234, 2194449627), Long_create(120090538, 3511119404), Long_create(955065889, 2808895523),
        Long_create(2482039630, 2247116418), Long_create(3112269949, 3595386269), Long_create(3348809418, 2876309015), Long_create(2679047534, 2301047212), Long_create(850502218, 3681675540), Long_create(680401775, 2945340432), Long_create(3121301797, 2356272345), Long_create(699115580, 3770035753), Long_create(2277279382, 3016028602), Long_create(103836587, 2412822882), Long_create(1025131999, 3860516611), Long_create(4256079436, 3088413288), Long_create(827883168, 2470730631), Long_create(3901593088, 3953169009)]);
        otcit_DoubleAnalyzer_exp10Table = $rt_createShortArrayFromData([(-70), (-66), (-63), (-60), (-56), (-53), (-50), (-46), (-43), (-40), (-36), (-33), (-30), (-26), (-23), (-20), (-16), (-13), (-10), (-6), (-3), 0, 4, 7, 10, 14, 17, 20, 23, 27, 30, 33, 37, 40, 43, 47, 50, 53, 57, 60, 63, 67, 70, 73, 77, 80, 83, 87, 90, 93, 97, 100, 103, 107, 110, 113, 116, 120, 123, 126, 130, 133, 136, 140, 143, 146, 150, 153, 156, 160, 163, 166, 170, 173, 176, 180, 183, 186, 190, 193, 196, 200, 203, 206, 210, 213, 216,
        219, 223, 226, 229, 233, 236, 239, 243, 246, 249, 253, 256, 259, 263, 266, 269, 273, 276, 279, 283, 286, 289, 293, 296, 299, 303, 306, 309, 312, 316, 319, 322, 326, 329, 332, 336, 339, 342, 346, 349, 352, 356, 359, 362, 366, 369, 372, 376, 379, 382, 386, 389, 392, 396, 399, 402, 406, 409, 412, 415, 419, 422, 425, 429, 432, 435, 439, 442, 445, 449, 452, 455, 459, 462, 465, 469, 472, 475, 479, 482, 485, 489, 492, 495, 499, 502, 505, 508, 512, 515, 518, 522, 525, 528, 532, 535, 538, 542, 545, 548, 552,
        555, 558, 562, 565, 568, 572, 575, 578, 582, 585, 588, 592, 595, 598, 601, 605, 608, 611, 615, 618, 621, 625, 628, 631, 635, 638, 641, 645, 648, 651, 655, 658, 661, 665, 668, 671, 675, 678, 681, 685, 688, 691, 695, 698, 701, 704, 708, 711, 714, 718, 721, 724, 728, 731, 734, 738, 741, 744, 748, 751, 754, 758, 761, 764, 768, 771, 774, 778, 781, 784, 788, 791, 794, 797, 801, 804, 807, 811, 814, 817, 821, 824, 827, 831, 834, 837, 841, 844, 847, 851, 854, 857, 861, 864, 867, 871, 874, 877, 881, 884, 887,
        891, 894, 897, 900, 904, 907, 910, 914, 917, 920, 924, 927, 930, 934, 937, 940, 944, 947, 950, 954, 957, 960, 964, 967, 970, 974, 977, 980, 984, 987, 990, 993, 997, 1000, 1003, 1007, 1010, 1013, 1017, 1020, 1023, 1027, 1030, 1033, 1037, 1040, 1043, 1047, 1050, 1053, 1057, 1060, 1063, 1067, 1070, 1073, 1077, 1080, 1083, 1086, 1090, 1093, 1096, 1100, 1103, 1106, 1110, 1113, 1116, 1120, 1123, 1126, 1130, 1133, 1136, 1140, 1143, 1146, 1150, 1153, 1156, 1160, 1163, 1166, 1170, 1173, 1176, 1180, 1183, 1186,
        1189, 1193, 1196, 1199, 1203, 1206, 1209, 1213, 1216, 1219, 1223, 1226, 1229, 1233, 1236, 1239, 1243, 1246, 1249, 1253, 1256, 1259, 1263, 1266, 1269, 1273, 1276, 1279, 1282, 1286, 1289, 1292, 1296, 1299, 1302, 1306, 1309, 1312, 1316, 1319, 1322, 1326, 1329, 1332, 1336, 1339, 1342, 1346, 1349, 1352, 1356, 1359, 1362, 1366, 1369, 1372, 1376, 1379, 1382, 1385, 1389, 1392, 1395, 1399, 1402, 1405, 1409, 1412, 1415, 1419, 1422, 1425, 1429, 1432, 1435, 1439, 1442, 1445, 1449, 1452, 1455, 1459, 1462, 1465, 1469,
        1472, 1475, 1478, 1482, 1485, 1488, 1492, 1495, 1498, 1502, 1505, 1508, 1512, 1515, 1518, 1522, 1525, 1528, 1532, 1535, 1538, 1542, 1545, 1548, 1552, 1555, 1558, 1562, 1565, 1568, 1572, 1575, 1578, 1581, 1585, 1588, 1591, 1595, 1598, 1601, 1605, 1608, 1611, 1615, 1618, 1621, 1625, 1628, 1631, 1635, 1638, 1641, 1645, 1648, 1651, 1655, 1658, 1661, 1665, 1668, 1671, 1674, 1678, 1681, 1684, 1688, 1691, 1694, 1698, 1701, 1704, 1708, 1711, 1714, 1718, 1721, 1724, 1728, 1731, 1734, 1738, 1741, 1744, 1748, 1751,
        1754, 1758, 1761, 1764, 1767, 1771, 1774, 1777, 1781, 1784, 1787, 1791, 1794, 1797, 1801, 1804, 1807, 1811, 1814, 1817, 1821, 1824, 1827, 1831, 1834, 1837, 1841, 1844, 1847, 1851, 1854, 1857, 1861, 1864, 1867, 1870, 1874, 1877, 1880, 1884, 1887, 1890, 1894, 1897, 1900, 1904, 1907, 1910, 1914, 1917, 1920, 1924, 1927, 1930, 1934, 1937, 1940, 1944, 1947, 1950, 1954, 1957, 1960, 1963, 1967, 1970, 1973, 1977, 1980, 1983, 1987, 1990, 1993, 1997, 2000, 2003, 2007, 2010, 2013, 2017, 2020, 2023, 2027, 2030, 2033,
        2037, 2040, 2043, 2047, 2050, 2053, 2057, 2060, 2063, 2066, 2070, 2073, 2076, 2080, 2083, 2086, 2090, 2093, 2096, 2100, 2103, 2106, 2110, 2113, 2116, 2120]);
    }
    var jur_SpecialToken = $rt_classWithoutFields();
    function jur_AbstractCharClass() {
        var a = this; jur_SpecialToken.call(a);
        a.$alt0 = 0;
        a.$altSurrogates = 0;
        a.$lowHighSurrogates = null;
        a.$charClassWithoutSurrogates = null;
        a.$charClassWithSurrogates = null;
        a.$mayContainSupplCodepoints = 0;
    }
    var jur_AbstractCharClass_charClasses = null;
    function jur_AbstractCharClass_$callClinit() {
        jur_AbstractCharClass_$callClinit = $rt_eraseClinit(jur_AbstractCharClass);
        jur_AbstractCharClass__clinit_();
    }
    function jur_AbstractCharClass__init_($this) {
        var var$1;
        jur_AbstractCharClass_$callClinit();
        var$1 = new ju_BitSet;
        var$1.$data0 = $rt_createIntArray(64);
        $this.$lowHighSurrogates = var$1;
    }
    function jur_AbstractCharClass_getBits($this) {
        return null;
    }
    function jur_AbstractCharClass_getLowHighSurrogates($this) {
        return $this.$lowHighSurrogates;
    }
    function jur_AbstractCharClass_hasLowHighSurrogates($this) {
        var var$1, var$2, var$3, var$4, var$5;
        if (!$this.$altSurrogates)
            var$1 = ju_BitSet_nextSetBit($this.$lowHighSurrogates, 0) >= 2048 ? 0 : 1;
        else {
            a: {
                var$2 = $this.$lowHighSurrogates;
                var$1 = 0;
                var$3 = var$2.$length4;
                if (var$1 < var$3) {
                    var$4 = var$2.$data0.data;
                    var$5 = (var$4[0] ^ (-1)) >>> 0 | 0;
                    if (var$5)
                        var$1 = jl_Integer_numberOfTrailingZeros(var$5) + var$1 | 0;
                    else {
                        var$1 = (var$3 + 31 | 0) / 32 | 0;
                        var$5 = 1;
                        while (var$5 < var$1) {
                            if (var$4[var$5] != (-1)) {
                                var$1 = (var$5 * 32 | 0) + jl_Integer_numberOfTrailingZeros(var$4[var$5] ^ (-1)) | 0;
                                break a;
                            }
                            var$5 = var$5 + 1 | 0;
                        }
                        var$1 = var$3;
                    }
                }
            }
            var$1 = var$1 >= 2048 ? 0 : 1;
        }
        return var$1;
    }
    function jur_AbstractCharClass_mayContainSupplCodepoints($this) {
        return $this.$mayContainSupplCodepoints;
    }
    function jur_AbstractCharClass_getInstance($this) {
        return $this;
    }
    function jur_AbstractCharClass_getSurrogates($this) {
        var $lHS, var$2;
        if ($this.$charClassWithSurrogates === null) {
            $lHS = $this.$getLowHighSurrogates();
            var$2 = new jur_AbstractCharClass$1;
            var$2.$this$02 = $this;
            var$2.$val$lHS = $lHS;
            jur_AbstractCharClass__init_(var$2);
            $this.$charClassWithSurrogates = var$2;
            jur_AbstractCharClass_setNegative(var$2, $this.$altSurrogates);
        }
        return $this.$charClassWithSurrogates;
    }
    function jur_AbstractCharClass_getWithoutSurrogates($this) {
        var $lHS, var$2;
        if ($this.$charClassWithoutSurrogates === null) {
            $lHS = $this.$getLowHighSurrogates();
            var$2 = new jur_AbstractCharClass$2;
            var$2.$this$03 = $this;
            var$2.$val$lHS0 = $lHS;
            var$2.$val$thisClass = $this;
            jur_AbstractCharClass__init_(var$2);
            $this.$charClassWithoutSurrogates = var$2;
            jur_AbstractCharClass_setNegative(var$2, $this.$alt0);
            $this.$charClassWithoutSurrogates.$mayContainSupplCodepoints = $this.$mayContainSupplCodepoints;
        }
        return $this.$charClassWithoutSurrogates;
    }
    function jur_AbstractCharClass_hasUCI($this) {
        return 0;
    }
    function jur_AbstractCharClass_setNegative($this, $value) {
        var var$2;
        var$2 = $this.$alt0;
        if (var$2 ^ $value) {
            $this.$alt0 = var$2 ? 0 : 1;
            $this.$altSurrogates = $this.$altSurrogates ? 0 : 1;
        }
        if (!$this.$mayContainSupplCodepoints)
            $this.$mayContainSupplCodepoints = 1;
        return $this;
    }
    function jur_AbstractCharClass_isNegative($this) {
        return $this.$alt0;
    }
    function jur_AbstractCharClass_intersects($cc, $ch) {
        jur_AbstractCharClass_$callClinit();
        return $cc.$contains0($ch);
    }
    function jur_AbstractCharClass_intersects0($cc1, $cc2) {
        var var$3, var$4;
        jur_AbstractCharClass_$callClinit();
        if ($cc1.$getBits() !== null && $cc2.$getBits() !== null) {
            $cc1 = $cc1.$getBits();
            $cc2 = $cc2.$getBits();
            var$3 = jl_Math_min($cc1.$data0.data.length, $cc2.$data0.data.length);
            var$4 = 0;
            a: {
                while (var$4 < var$3) {
                    if ($cc1.$data0.data[var$4] & $cc2.$data0.data[var$4]) {
                        var$3 = 1;
                        break a;
                    }
                    var$4 = var$4 + 1 | 0;
                }
                var$3 = 0;
            }
            return var$3;
        }
        return 1;
    }
    function jur_AbstractCharClass_getPredefinedClass($name, $negative) {
        var var$3, var$4, var$5;
        jur_AbstractCharClass_$callClinit();
        var$3 = 0;
        while (true) {
            jur_AbstractCharClass$PredefinedCharacterClasses_$callClinit();
            var$4 = jur_AbstractCharClass$PredefinedCharacterClasses_contents.data;
            if (var$3 >= var$4.length) {
                var$5 = new ju_MissingResourceException;
                jl_Throwable__init_(var$5, $rt_s(2));
                var$5.$className = $rt_s(2);
                var$5.$key0 = $name;
                $rt_throw(var$5);
            }
            var$4 = var$4[var$3].data;
            if (jl_String_equals($name, var$4[0]))
                break;
            var$3 = var$3 + 1 | 0;
        }
        return jur_AbstractCharClass$LazyCharClass_getValue(var$4[1], $negative);
    }
    function jur_AbstractCharClass__clinit_() {
        var var$1;
        var$1 = new jur_AbstractCharClass$PredefinedCharacterClasses;
        jur_AbstractCharClass$PredefinedCharacterClasses_$callClinit();
        jur_AbstractCharClass_charClasses = var$1;
    }
    function jur_CharClass() {
        var a = this; jur_AbstractCharClass.call(a);
        a.$ci = 0;
        a.$uci = 0;
        a.$hasUCI0 = 0;
        a.$invertedSurrogates = 0;
        a.$inverted = 0;
        a.$hideBits = 0;
        a.$bits = null;
        a.$nonBitSet = null;
    }
    function jur_CharClass__init_0() {
        var var_0 = new jur_CharClass();
        jur_CharClass__init_1(var_0);
        return var_0;
    }
    function jur_CharClass__init_(var_0, var_1) {
        var var_2 = new jur_CharClass();
        jur_CharClass__init_2(var_2, var_0, var_1);
        return var_2;
    }
    function jur_CharClass__init_1($this) {
        jur_AbstractCharClass__init_($this);
        $this.$bits = ju_BitSet__init_();
    }
    function jur_CharClass__init_2($this, $ci, $uci) {
        jur_AbstractCharClass__init_($this);
        $this.$bits = ju_BitSet__init_();
        $this.$ci = $ci;
        $this.$uci = $uci;
    }
    function jur_CharClass_add($this, $ch) {
        a: {
            if ($this.$ci) {
                b: {
                    if (!($ch >= 97 && $ch <= 122)) {
                        if ($ch < 65)
                            break b;
                        if ($ch > 90)
                            break b;
                    }
                    if ($this.$inverted) {
                        ju_BitSet_clear($this.$bits, jur_Pattern_getSupplement($ch & 65535));
                        break a;
                    }
                    ju_BitSet_set($this.$bits, jur_Pattern_getSupplement($ch & 65535));
                    break a;
                }
                if ($this.$uci && $ch > 128) {
                    $this.$hasUCI0 = 1;
                    $ch = jl_Character_toLowerCase0(jl_Character_toUpperCase($ch));
                }
            }
        }
        if (!(!jur_Lexer_isHighSurrogate0($ch) && !jur_Lexer_isLowSurrogate0($ch))) {
            if ($this.$invertedSurrogates)
                ju_BitSet_clear($this.$lowHighSurrogates, $ch - 55296 | 0);
            else
                ju_BitSet_set($this.$lowHighSurrogates, $ch - 55296 | 0);
        }
        if ($this.$inverted)
            ju_BitSet_clear($this.$bits, $ch);
        else
            ju_BitSet_set($this.$bits, $ch);
        if (!$this.$mayContainSupplCodepoints && jl_Character_isSupplementaryCodePoint($ch))
            $this.$mayContainSupplCodepoints = 1;
        return $this;
    }
    function jur_CharClass_add1($this, $cc) {
        var $curAlt, $nb, var$4;
        if (!$this.$mayContainSupplCodepoints && $cc.$mayContainSupplCodepoints)
            $this.$mayContainSupplCodepoints = 1;
        if ($this.$invertedSurrogates) {
            if (!$cc.$altSurrogates)
                ju_BitSet_andNot($this.$lowHighSurrogates, $cc.$getLowHighSurrogates());
            else
                ju_BitSet_and($this.$lowHighSurrogates, $cc.$getLowHighSurrogates());
        } else if (!$cc.$altSurrogates)
            ju_BitSet_or($this.$lowHighSurrogates, $cc.$getLowHighSurrogates());
        else {
            ju_BitSet_xor($this.$lowHighSurrogates, $cc.$getLowHighSurrogates());
            ju_BitSet_and($this.$lowHighSurrogates, $cc.$getLowHighSurrogates());
            $this.$altSurrogates = $this.$altSurrogates ? 0 : 1;
            $this.$invertedSurrogates = 1;
        }
        if (!$this.$hideBits && $cc.$getBits() !== null) {
            if ($this.$inverted) {
                if (!$cc.$alt0)
                    ju_BitSet_andNot($this.$bits, $cc.$getBits());
                else
                    ju_BitSet_and($this.$bits, $cc.$getBits());
            } else if (!$cc.$alt0)
                ju_BitSet_or($this.$bits, $cc.$getBits());
            else {
                ju_BitSet_xor($this.$bits, $cc.$getBits());
                ju_BitSet_and($this.$bits, $cc.$getBits());
                $this.$alt0 = $this.$alt0 ? 0 : 1;
                $this.$inverted = 1;
            }
        } else {
            $curAlt = $this.$alt0;
            $nb = $this.$nonBitSet;
            if ($nb !== null) {
                if (!$curAlt) {
                    var$4 = new jur_CharClass$5;
                    var$4.$this$04 = $this;
                    var$4.$val$curAlt = $curAlt;
                    var$4.$val$nb = $nb;
                    var$4.$val$cc = $cc;
                    jur_AbstractCharClass__init_(var$4);
                    $this.$nonBitSet = var$4;
                } else {
                    var$4 = new jur_CharClass$4;
                    var$4.$this$05 = $this;
                    var$4.$val$curAlt0 = $curAlt;
                    var$4.$val$nb0 = $nb;
                    var$4.$val$cc0 = $cc;
                    jur_AbstractCharClass__init_(var$4);
                    $this.$nonBitSet = var$4;
                }
            } else {
                if ($curAlt && !$this.$inverted && ju_BitSet_isEmpty($this.$bits)) {
                    $nb = new jur_CharClass$1;
                    $nb.$this$06 = $this;
                    $nb.$val$cc1 = $cc;
                    jur_AbstractCharClass__init_($nb);
                    $this.$nonBitSet = $nb;
                } else if (!$curAlt) {
                    $nb = new jur_CharClass$3;
                    $nb.$this$07 = $this;
                    $nb.$val$curAlt1 = $curAlt;
                    $nb.$val$cc2 = $cc;
                    jur_AbstractCharClass__init_($nb);
                    $this.$nonBitSet = $nb;
                } else {
                    $nb = new jur_CharClass$2;
                    $nb.$this$08 = $this;
                    $nb.$val$curAlt2 = $curAlt;
                    $nb.$val$cc3 = $cc;
                    jur_AbstractCharClass__init_($nb);
                    $this.$nonBitSet = $nb;
                }
                $this.$hideBits = 1;
            }
        }
        return $this;
    }
    function jur_CharClass_add0($this, $i, $end) {
        var var$3, var$4, var$5, var$6, var$7;
        if ($i > $end) {
            var$3 = new jl_IllegalArgumentException;
            jl_Exception__init_(var$3);
            $rt_throw(var$3);
        }
        a: {
            b: {
                if (!$this.$ci) {
                    if ($end < 55296)
                        break b;
                    if ($i > 57343)
                        break b;
                }
                $end = $end + 1 | 0;
                while (true) {
                    if ($i >= $end)
                        break a;
                    jur_CharClass_add($this, $i);
                    $i = $i + 1 | 0;
                }
            }
            if (!$this.$inverted)
                ju_BitSet_set0($this.$bits, $i, $end + 1 | 0);
            else {
                var$3 = $this.$bits;
                $end = $end + 1 | 0;
                if ($i > $end) {
                    var$3 = new jl_IndexOutOfBoundsException;
                    jl_Exception__init_(var$3);
                    $rt_throw(var$3);
                }
                var$4 = var$3.$length4;
                if ($i < var$4) {
                    var$5 = jl_Math_min(var$4, $end);
                    if ($i != var$5) {
                        var$6 = $i / 32 | 0;
                        $end = var$5 / 32 | 0;
                        if (var$6 == $end) {
                            var$7 = var$3.$data0.data;
                            var$7[var$6] = var$7[var$6] & (ju_BitSet_trailingOneBits(var$3, $i) | ju_BitSet_trailingZeroBits(var$3, var$5));
                        } else {
                            var$7 = var$3.$data0.data;
                            var$7[var$6] = var$7[var$6] & ju_BitSet_trailingOneBits(var$3, $i);
                            var$4 = var$6 + 1 | 0;
                            while (var$4 < $end) {
                                var$3.$data0.data[var$4] = 0;
                                var$4 = var$4 + 1 | 0;
                            }
                            if (var$5 & 31) {
                                var$7 = var$3.$data0.data;
                                var$7[$end] = var$7[$end] & ju_BitSet_trailingZeroBits(var$3, var$5);
                            }
                        }
                        ju_BitSet_recalculateLength(var$3);
                    }
                }
            }
        }
        return $this;
    }
    function jur_CharClass_union($this, $clazz) {
        var $curAlt, $nb, var$4;
        if (!$this.$mayContainSupplCodepoints && $clazz.$mayContainSupplCodepoints)
            $this.$mayContainSupplCodepoints = 1;
        if ($clazz.$hasUCI0)
            $this.$hasUCI0 = 1;
        $curAlt = $this.$altSurrogates;
        if (!($curAlt ^ $clazz.$altSurrogates)) {
            if (!$curAlt)
                ju_BitSet_or($this.$lowHighSurrogates, $clazz.$lowHighSurrogates);
            else
                ju_BitSet_and($this.$lowHighSurrogates, $clazz.$lowHighSurrogates);
        } else if ($curAlt)
            ju_BitSet_andNot($this.$lowHighSurrogates, $clazz.$lowHighSurrogates);
        else {
            ju_BitSet_xor($this.$lowHighSurrogates, $clazz.$lowHighSurrogates);
            ju_BitSet_and($this.$lowHighSurrogates, $clazz.$lowHighSurrogates);
            $this.$altSurrogates = 1;
        }
        if (!$this.$hideBits && jur_CharClass_getBits($clazz) !== null) {
            $curAlt = $this.$alt0;
            if (!($curAlt ^ $clazz.$alt0)) {
                if (!$curAlt)
                    ju_BitSet_or($this.$bits, jur_CharClass_getBits($clazz));
                else
                    ju_BitSet_and($this.$bits, jur_CharClass_getBits($clazz));
            } else if ($curAlt)
                ju_BitSet_andNot($this.$bits, jur_CharClass_getBits($clazz));
            else {
                ju_BitSet_xor($this.$bits, jur_CharClass_getBits($clazz));
                ju_BitSet_and($this.$bits, jur_CharClass_getBits($clazz));
                $this.$alt0 = 1;
            }
        } else {
            $curAlt = $this.$alt0;
            $nb = $this.$nonBitSet;
            if ($nb !== null) {
                if (!$curAlt) {
                    var$4 = new jur_CharClass$11;
                    var$4.$this$09 = $this;
                    var$4.$val$curAlt3 = $curAlt;
                    var$4.$val$nb1 = $nb;
                    var$4.$val$clazz = $clazz;
                    jur_AbstractCharClass__init_(var$4);
                    $this.$nonBitSet = var$4;
                } else {
                    var$4 = new jur_CharClass$10;
                    var$4.$this$010 = $this;
                    var$4.$val$curAlt4 = $curAlt;
                    var$4.$val$nb2 = $nb;
                    var$4.$val$clazz0 = $clazz;
                    jur_AbstractCharClass__init_(var$4);
                    $this.$nonBitSet = var$4;
                }
            } else {
                if (!$this.$inverted && ju_BitSet_isEmpty($this.$bits)) {
                    if (!$curAlt) {
                        $nb = new jur_CharClass$7;
                        $nb.$this$011 = $this;
                        $nb.$val$clazz1 = $clazz;
                        jur_AbstractCharClass__init_($nb);
                        $this.$nonBitSet = $nb;
                    } else {
                        $nb = new jur_CharClass$6;
                        $nb.$this$012 = $this;
                        $nb.$val$clazz2 = $clazz;
                        jur_AbstractCharClass__init_($nb);
                        $this.$nonBitSet = $nb;
                    }
                } else if (!$curAlt) {
                    $nb = new jur_CharClass$9;
                    $nb.$this$013 = $this;
                    $nb.$val$clazz3 = $clazz;
                    $nb.$val$curAlt5 = $curAlt;
                    jur_AbstractCharClass__init_($nb);
                    $this.$nonBitSet = $nb;
                } else {
                    $nb = new jur_CharClass$8;
                    $nb.$this$014 = $this;
                    $nb.$val$clazz4 = $clazz;
                    $nb.$val$curAlt6 = $curAlt;
                    jur_AbstractCharClass__init_($nb);
                    $this.$nonBitSet = $nb;
                }
                $this.$hideBits = 1;
            }
        }
    }
    function jur_CharClass_intersection($this, $clazz) {
        var $curAlt, $nb, var$4;
        if (!$this.$mayContainSupplCodepoints && $clazz.$mayContainSupplCodepoints)
            $this.$mayContainSupplCodepoints = 1;
        if ($clazz.$hasUCI0)
            $this.$hasUCI0 = 1;
        $curAlt = $this.$altSurrogates;
        if (!($curAlt ^ $clazz.$altSurrogates)) {
            if (!$curAlt)
                ju_BitSet_and($this.$lowHighSurrogates, $clazz.$lowHighSurrogates);
            else
                ju_BitSet_or($this.$lowHighSurrogates, $clazz.$lowHighSurrogates);
        } else if (!$curAlt)
            ju_BitSet_andNot($this.$lowHighSurrogates, $clazz.$lowHighSurrogates);
        else {
            ju_BitSet_xor($this.$lowHighSurrogates, $clazz.$lowHighSurrogates);
            ju_BitSet_and($this.$lowHighSurrogates, $clazz.$lowHighSurrogates);
            $this.$altSurrogates = 0;
        }
        if (!$this.$hideBits && jur_CharClass_getBits($clazz) !== null) {
            $curAlt = $this.$alt0;
            if (!($curAlt ^ $clazz.$alt0)) {
                if (!$curAlt)
                    ju_BitSet_and($this.$bits, jur_CharClass_getBits($clazz));
                else
                    ju_BitSet_or($this.$bits, jur_CharClass_getBits($clazz));
            } else if (!$curAlt)
                ju_BitSet_andNot($this.$bits, jur_CharClass_getBits($clazz));
            else {
                ju_BitSet_xor($this.$bits, jur_CharClass_getBits($clazz));
                ju_BitSet_and($this.$bits, jur_CharClass_getBits($clazz));
                $this.$alt0 = 0;
            }
        } else {
            $curAlt = $this.$alt0;
            $nb = $this.$nonBitSet;
            if ($nb !== null) {
                if (!$curAlt) {
                    var$4 = new jur_CharClass$17;
                    var$4.$this$015 = $this;
                    var$4.$val$curAlt7 = $curAlt;
                    var$4.$val$nb3 = $nb;
                    var$4.$val$clazz5 = $clazz;
                    jur_AbstractCharClass__init_(var$4);
                    $this.$nonBitSet = var$4;
                } else {
                    var$4 = new jur_CharClass$16;
                    var$4.$this$016 = $this;
                    var$4.$val$curAlt8 = $curAlt;
                    var$4.$val$nb4 = $nb;
                    var$4.$val$clazz6 = $clazz;
                    jur_AbstractCharClass__init_(var$4);
                    $this.$nonBitSet = var$4;
                }
            } else {
                if (!$this.$inverted && ju_BitSet_isEmpty($this.$bits)) {
                    if (!$curAlt) {
                        $nb = new jur_CharClass$13;
                        $nb.$this$017 = $this;
                        $nb.$val$clazz7 = $clazz;
                        jur_AbstractCharClass__init_($nb);
                        $this.$nonBitSet = $nb;
                    } else {
                        $nb = new jur_CharClass$12;
                        $nb.$this$018 = $this;
                        $nb.$val$clazz8 = $clazz;
                        jur_AbstractCharClass__init_($nb);
                        $this.$nonBitSet = $nb;
                    }
                } else if (!$curAlt) {
                    $nb = new jur_CharClass$15;
                    $nb.$this$019 = $this;
                    $nb.$val$clazz9 = $clazz;
                    $nb.$val$curAlt9 = $curAlt;
                    jur_AbstractCharClass__init_($nb);
                    $this.$nonBitSet = $nb;
                } else {
                    $nb = new jur_CharClass$14;
                    $nb.$this$020 = $this;
                    $nb.$val$clazz10 = $clazz;
                    $nb.$val$curAlt10 = $curAlt;
                    jur_AbstractCharClass__init_($nb);
                    $this.$nonBitSet = $nb;
                }
                $this.$hideBits = 1;
            }
        }
    }
    function jur_CharClass_contains($this, $ch) {
        var var$2;
        var$2 = $this.$nonBitSet;
        if (var$2 !== null)
            return $this.$alt0 ^ var$2.$contains0($ch);
        return $this.$alt0 ^ ju_BitSet_get($this.$bits, $ch);
    }
    function jur_CharClass_getBits($this) {
        if (!$this.$hideBits)
            return $this.$bits;
        return null;
    }
    function jur_CharClass_getLowHighSurrogates($this) {
        return $this.$lowHighSurrogates;
    }
    function jur_CharClass_getInstance($this) {
        var $bs, $res;
        if ($this.$nonBitSet !== null)
            return $this;
        $bs = jur_CharClass_getBits($this);
        $res = new jur_CharClass$18;
        $res.$this$021 = $this;
        $res.$val$bs = $bs;
        jur_AbstractCharClass__init_($res);
        return jur_AbstractCharClass_setNegative($res, $this.$alt0);
    }
    function jur_CharClass_toString($this) {
        var $temp, $i, var$3;
        $temp = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($temp);
        $i = ju_BitSet_nextSetBit($this.$bits, 0);
        while ($i >= 0) {
            jl_AbstractStringBuilder_append3($temp, jl_Character_toChars($i));
            jl_AbstractStringBuilder_append($temp, 124);
            $i = ju_BitSet_nextSetBit($this.$bits, $i + 1 | 0);
        }
        var$3 = $temp.$length0;
        if (var$3 > 0)
            jl_StringBuilder_deleteCharAt($temp, var$3 - 1 | 0);
        return jl_AbstractStringBuilder_toString($temp);
    }
    function jur_CharClass_hasUCI($this) {
        return $this.$hasUCI0;
    }
    function ju_MissingResourceException() {
        var a = this; jl_RuntimeException.call(a);
        a.$className = null;
        a.$key0 = null;
    }
    function jur_QuantifierSet() {
        jur_AbstractSet.call(this);
        this.$innerSet = null;
    }
    function jur_QuantifierSet__init_($this, $innerSet, $next, $type) {
        jur_AbstractSet__init_0($this, $next);
        $this.$innerSet = $innerSet;
        $this.$type11 = $type;
    }
    function jur_QuantifierSet_getInnerSet($this) {
        return $this.$innerSet;
    }
    function jur_QuantifierSet_first($this, $set) {
        return !$this.$innerSet.$first($set) && !$this.$next4.$first($set) ? 0 : 1;
    }
    function jur_QuantifierSet_hasConsumed($this, $mr) {
        return 1;
    }
    function jur_QuantifierSet_processSecondPass($this) {
        var $set;
        $this.$isSecondPassVisited = 1;
        $set = $this.$next4;
        if ($set !== null && !$set.$isSecondPassVisited) {
            $set = $set.$processBackRefReplacement();
            if ($set !== null) {
                $this.$next4.$isSecondPassVisited = 1;
                $this.$next4 = $set;
            }
            $this.$next4.$processSecondPass();
        }
        $set = $this.$innerSet;
        if ($set !== null) {
            if (!$set.$isSecondPassVisited) {
                $set = $set.$processBackRefReplacement();
                if ($set !== null) {
                    $this.$innerSet.$isSecondPassVisited = 1;
                    $this.$innerSet = $set;
                }
                $this.$innerSet.$processSecondPass();
            } else if ($set instanceof jur_SingleSet && $set.$fSet.$isBackReferenced)
                $this.$innerSet = $set.$next4;
        }
    }
    function jur_LeafQuantifierSet() {
        jur_QuantifierSet.call(this);
        this.$leaf = null;
    }
    function jur_LeafQuantifierSet__init_0(var_0, var_1, var_2) {
        var var_3 = new jur_LeafQuantifierSet();
        jur_LeafQuantifierSet__init_(var_3, var_0, var_1, var_2);
        return var_3;
    }
    function jur_LeafQuantifierSet__init_($this, $innerSet, $next, $type) {
        jur_QuantifierSet__init_($this, $innerSet, $next, $type);
        $this.$leaf = $innerSet;
    }
    function jur_LeafQuantifierSet_matches($this, $stringIndex, $testString, $matchResult) {
        var $i, var$5;
        $i = 0;
        a: {
            while (($stringIndex + $this.$leaf.$charCount0() | 0) <= $matchResult.$rightBound0) {
                var$5 = $this.$leaf.$accepts($stringIndex, $testString);
                if (var$5 <= 0)
                    break a;
                $stringIndex = $stringIndex + var$5 | 0;
                $i = $i + 1 | 0;
            }
        }
        while (true) {
            if ($i < 0)
                return (-1);
            var$5 = $this.$next4.$matches($stringIndex, $testString, $matchResult);
            if (var$5 >= 0)
                break;
            $stringIndex = $stringIndex - $this.$leaf.$charCount0() | 0;
            $i = $i + (-1) | 0;
        }
        return var$5;
    }
    function jur_LeafQuantifierSet_getName($this) {
        return $rt_s(674);
    }
    function jur_CompositeQuantifierSet() {
        jur_LeafQuantifierSet.call(this);
        this.$quantifier = null;
    }
    function jur_CompositeQuantifierSet__init_0(var_0, var_1, var_2, var_3) {
        var var_4 = new jur_CompositeQuantifierSet();
        jur_CompositeQuantifierSet__init_(var_4, var_0, var_1, var_2, var_3);
        return var_4;
    }
    function jur_CompositeQuantifierSet__init_($this, $quant, $innerSet, $next, $type) {
        jur_LeafQuantifierSet__init_($this, $innerSet, $next, $type);
        $this.$quantifier = $quant;
    }
    function jur_CompositeQuantifierSet_matches($this, $stringIndex, $testString, $matchResult) {
        var var$4, $min, $max, $i, $shift;
        var$4 = $this.$quantifier;
        $min = var$4.$min0;
        $max = var$4.$max0;
        $i = 0;
        while (true) {
            if ($i >= $min) {
                a: {
                    while ($i < $max) {
                        if (($stringIndex + $this.$leaf.$charCount0() | 0) > $matchResult.$rightBound0)
                            break a;
                        $shift = $this.$leaf.$accepts($stringIndex, $testString);
                        if ($shift < 1)
                            break a;
                        $stringIndex = $stringIndex + $shift | 0;
                        $i = $i + 1 | 0;
                    }
                }
                while (true) {
                    if ($i < $min)
                        return (-1);
                    $shift = $this.$next4.$matches($stringIndex, $testString, $matchResult);
                    if ($shift >= 0)
                        break;
                    $stringIndex = $stringIndex - $this.$leaf.$charCount0() | 0;
                    $i = $i + (-1) | 0;
                }
                return $shift;
            }
            if (($stringIndex + $this.$leaf.$charCount0() | 0) > $matchResult.$rightBound0) {
                $matchResult.$hitEnd = 1;
                return (-1);
            }
            $shift = $this.$leaf.$accepts($stringIndex, $testString);
            if ($shift < 1)
                break;
            $stringIndex = $stringIndex + $shift | 0;
            $i = $i + 1 | 0;
        }
        return (-1);
    }
    function jur_CompositeQuantifierSet_getName($this) {
        return jur_Quantifier_toString($this.$quantifier);
    }
    var jur_GroupQuantifierSet = $rt_classWithoutFields(jur_QuantifierSet);
    function jur_GroupQuantifierSet_matches($this, $stringIndex, $testString, $matchResult) {
        var $nextIndex;
        if (!$this.$innerSet.$hasConsumed($matchResult))
            return $this.$next4.$matches($stringIndex, $testString, $matchResult);
        $nextIndex = $this.$innerSet.$matches($stringIndex, $testString, $matchResult);
        if ($nextIndex >= 0)
            return $nextIndex;
        return $this.$next4.$matches($stringIndex, $testString, $matchResult);
    }
    function jur_GroupQuantifierSet_getName($this) {
        return $rt_s(675);
    }
    var jur_AltQuantifierSet = $rt_classWithoutFields(jur_LeafQuantifierSet);
    function jur_AltQuantifierSet_matches($this, $stringIndex, $testString, $matchResult) {
        var $shift;
        $shift = $this.$innerSet.$matches($stringIndex, $testString, $matchResult);
        if ($shift < 0)
            $shift = $this.$next4.$matches($stringIndex, $testString, $matchResult);
        return $shift;
    }
    function jur_AltQuantifierSet_setNext($this, $next) {
        $this.$next4 = $next;
        $this.$innerSet.$setNext($next);
    }
    var jur_UnifiedQuantifierSet = $rt_classWithoutFields(jur_LeafQuantifierSet);
    function jur_UnifiedQuantifierSet_matches($this, $stringIndex, $testString, $matchResult) {
        while (($stringIndex + $this.$leaf.$charCount0() | 0) <= $matchResult.$rightBound0 && $this.$leaf.$accepts($stringIndex, $testString) > 0) {
            $stringIndex = $stringIndex + $this.$leaf.$charCount0() | 0;
        }
        return $this.$next4.$matches($stringIndex, $testString, $matchResult);
    }
    function jur_UnifiedQuantifierSet_find($this, $stringIndex, $testString, $matchResult) {
        var $startSearch, $newSearch, $newSearch_0;
        $startSearch = $this.$next4.$find0($stringIndex, $testString, $matchResult);
        if ($startSearch < 0)
            return (-1);
        $newSearch = $startSearch - $this.$leaf.$charCount0() | 0;
        while ($newSearch >= $stringIndex && $this.$leaf.$accepts($newSearch, $testString) > 0) {
            $newSearch_0 = $newSearch - $this.$leaf.$charCount0() | 0;
            $startSearch = $newSearch;
            $newSearch = $newSearch_0;
        }
        return $startSearch;
    }
    var jlr_AccessibleObject = $rt_classWithoutFields();
    var jlr_Member = $rt_classWithoutFields(0);
    function jlr_Method() {
        var a = this; jlr_AccessibleObject.call(a);
        a.$declaringClass = null;
        a.$name0 = null;
        a.$flags = 0;
        a.$accessLevel = 0;
        a.$returnType = null;
        a.$parameterTypes = null;
        a.$callable = null;
    }
    function jlr_Method_getModifiers($this) {
        var var$1, var$2, var$3;
        a: {
            var$1 = $this.$flags;
            var$2 = $this.$accessLevel;
            var$3 = 0;
            switch (var$2) {
                case 1:
                    var$3 = 2;
                    break a;
                case 2:
                    var$3 = 4;
                    break a;
                case 3:
                    var$3 = 1;
                    break a;
                default:
            }
        }
        var$2 = var$1 >>> 6 | 0;
        return var$3 | var$2 & 8 | var$1 << 2 & 16 | var$2 & 32 | (var$1 >>> 8 | 0) & 64 | (var$1 >>> 5 | 0) & 128 | var$1 & 256 | var$1 << 8 & 512 | var$1 << 10 & 1024 | var$1 << 1 & 2048;
    }
    function jlr_Method_getParameterTypes($this) {
        return $this.$parameterTypes.$clone();
    }
    function jlr_Method_toString($this) {
        var $sb, $i, var$3, var$4, var$5, $parameterTypes, var$7, var$8;
        $sb = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($sb);
        $i = jlr_Method_getModifiers($this);
        var$3 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$3);
        if (jlr_Modifier_modifierNames === null)
            jlr_Modifier_modifierNames = $rt_createArrayFromData(jl_String, [$rt_s(676), $rt_s(677), $rt_s(678), $rt_s(679), $rt_s(680), $rt_s(681), $rt_s(682), $rt_s(683), $rt_s(684), $rt_s(685), $rt_s(686), $rt_s(687)]);
        var$4 = jlr_Modifier_modifierNames;
        var$5 = 0;
        $parameterTypes = jlr_Modifier_canonicalOrder.data;
        var$7 = $parameterTypes.length;
        var$8 = 0;
        while (var$8 < var$7) {
            if ($i & $parameterTypes[var$8]) {
                if (var$3.$length0 > 0)
                    jl_AbstractStringBuilder_append(var$3, 32);
                jl_AbstractStringBuilder_append1(var$3, var$4.data[var$5]);
            }
            var$5 = var$5 + 1 | 0;
            var$8 = var$8 + 1 | 0;
        }
        jl_AbstractStringBuilder_append1($sb, jl_AbstractStringBuilder_toString(var$3));
        if ($sb.$length0 > 0)
            jl_AbstractStringBuilder_append($sb, 32);
        a: {
            jl_AbstractStringBuilder_append1($sb, jl_Class_getName($this.$returnType));
            jl_AbstractStringBuilder_append($sb, 32);
            jl_AbstractStringBuilder_append1($sb, jl_Class_getName($this.$declaringClass));
            jl_AbstractStringBuilder_append($sb, 46);
            jl_AbstractStringBuilder_append1($sb, $this.$name0);
            jl_AbstractStringBuilder_append($sb, 40);
            $parameterTypes = (jlr_Method_getParameterTypes($this)).data;
            var$5 = $parameterTypes.length;
            if (var$5 > 0) {
                jl_AbstractStringBuilder_append1($sb, jl_Class_getName($parameterTypes[0]));
                $i = 1;
                while (true) {
                    if ($i >= var$5)
                        break a;
                    jl_AbstractStringBuilder_append($sb, 44);
                    jl_AbstractStringBuilder_append1($sb, jl_Class_getName($parameterTypes[$i]));
                    $i = $i + 1 | 0;
                }
            }
        }
        jl_AbstractStringBuilder_append($sb, 41);
        return jl_AbstractStringBuilder_toString($sb);
    }
    function jlr_Method_invoke($this, $obj, $args) {
        var var$3, var$4, $i, $jsArgs, $result;
        if ($this.$callable === null) {
            $obj = new jl_IllegalAccessException;
            jl_Exception__init_($obj);
            $rt_throw($obj);
        }
        var$3 = $args.data;
        var$4 = var$3.length;
        if (var$4 != $this.$parameterTypes.data.length) {
            $obj = new jl_IllegalArgumentException;
            jl_Exception__init_($obj);
            $rt_throw($obj);
        }
        if ($this.$flags & 512)
            $this.$declaringClass.$platformClass.$clinit();
        else if (!jl_Class_isInstance($this.$declaringClass, $obj)) {
            $obj = new jl_IllegalArgumentException;
            jl_Exception__init_($obj);
            $rt_throw($obj);
        }
        $i = 0;
        while (true) {
            if ($i >= var$4) {
                $jsArgs = $args.data;
                $result = $this.$callable;
                $obj = $obj;
                return $result.call($obj, $jsArgs);
            }
            if (!jl_Class_isPrimitive($this.$parameterTypes.data[$i]) && var$3[$i] !== null && !jl_Class_isInstance($this.$parameterTypes.data[$i], var$3[$i])) {
                $obj = new jl_IllegalArgumentException;
                jl_Exception__init_($obj);
                $rt_throw($obj);
            }
            if (jl_Class_isPrimitive($this.$parameterTypes.data[$i]) && var$3[$i] === null)
                break;
            $i = $i + 1 | 0;
        }
        $obj = new jl_IllegalArgumentException;
        jl_Exception__init_($obj);
        $rt_throw($obj);
    }
    var jl_NegativeArraySizeException = $rt_classWithoutFields(jl_RuntimeException);
    function jn_ByteOrder() {
        jl_Object.call(this);
        this.$name22 = null;
    }
    var jn_ByteOrder_BIG_ENDIAN = null;
    var jn_ByteOrder_LITTLE_ENDIAN = null;
    function jn_ByteOrder_$callClinit() {
        jn_ByteOrder_$callClinit = $rt_eraseClinit(jn_ByteOrder);
        jn_ByteOrder__clinit_();
    }
    function jn_ByteOrder__init_(var_0) {
        var var_1 = new jn_ByteOrder();
        jn_ByteOrder__init_0(var_1, var_0);
        return var_1;
    }
    function jn_ByteOrder__init_0($this, $name) {
        jn_ByteOrder_$callClinit();
        $this.$name22 = $name;
    }
    function jn_ByteOrder__clinit_() {
        jn_ByteOrder_BIG_ENDIAN = jn_ByteOrder__init_($rt_s(688));
        jn_ByteOrder_LITTLE_ENDIAN = jn_ByteOrder__init_($rt_s(689));
    }
    function jur_AbstractCharClass$LazyCharClass() {
        var a = this; jl_Object.call(a);
        a.$posValue = null;
        a.$negValue = null;
    }
    function jur_AbstractCharClass$LazyCharClass_getValue($this, $negative) {
        if (!$negative && $this.$posValue === null)
            $this.$posValue = $this.$computeValue();
        else if ($negative && $this.$negValue === null)
            $this.$negValue = jur_AbstractCharClass_setNegative($this.$computeValue(), 1);
        if ($negative)
            return $this.$negValue;
        return $this.$posValue;
    }
    function jur_Quantifier() {
        var a = this; jur_SpecialToken.call(a);
        a.$min0 = 0;
        a.$max0 = 0;
    }
    function jur_Quantifier_toString($this) {
        var var$1, var$2, var$3, var$4, var$5;
        var$1 = $this.$min0;
        var$2 = $this.$max0;
        var$3 = var$2 != 2147483647 ? jl_Integer_toString(var$2) : $rt_s(2);
        var$4 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$4);
        jl_AbstractStringBuilder_append(var$4, 123);
        var$5 = jl_StringBuilder_append0(var$4, var$1);
        jl_AbstractStringBuilder_append(var$5, 44);
        jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$5, var$3), 125);
        return jl_AbstractStringBuilder_toString(var$4);
    }
    var jur_FSet$PossessiveFSet = $rt_classWithoutFields(jur_AbstractSet);
    function jur_FSet$PossessiveFSet_matches($this, $stringIndex, $testString, $matchResult) {
        return $stringIndex;
    }
    function jur_FSet$PossessiveFSet_getName($this) {
        return $rt_s(690);
    }
    function jur_FSet$PossessiveFSet_hasConsumed($this, $mr) {
        return 0;
    }
    function ju_BitSet() {
        var a = this; jl_Object.call(a);
        a.$data0 = null;
        a.$length4 = 0;
    }
    function ju_BitSet__init_() {
        var var_0 = new ju_BitSet();
        ju_BitSet__init_0(var_0);
        return var_0;
    }
    function ju_BitSet__init_0($this) {
        $this.$data0 = $rt_createIntArray(0);
    }
    function ju_BitSet_set($this, $bitIndex) {
        var $index, var$3;
        $index = $bitIndex / 32 | 0;
        if ($bitIndex >= $this.$length4) {
            ju_BitSet_ensureCapacity($this, $index + 1 | 0);
            $this.$length4 = $bitIndex + 1 | 0;
        }
        var$3 = $this.$data0.data;
        var$3[$index] = var$3[$index] | 1 << ($bitIndex % 32 | 0);
    }
    function ju_BitSet_set0($this, $fromIndex, $toIndex) {
        var $fromDataIndex, var$4, $toDataIndex, var$6, $i;
        $fromDataIndex = $rt_compare($fromIndex, $toIndex);
        if ($fromDataIndex > 0) {
            var$4 = new jl_IndexOutOfBoundsException;
            jl_Exception__init_(var$4);
            $rt_throw(var$4);
        }
        if (!$fromDataIndex)
            return;
        $fromDataIndex = $fromIndex / 32 | 0;
        $toDataIndex = $toIndex / 32 | 0;
        if ($toIndex > $this.$length4) {
            ju_BitSet_ensureCapacity($this, $toDataIndex + 1 | 0);
            $this.$length4 = $toIndex;
        }
        if ($fromDataIndex == $toDataIndex) {
            var$6 = $this.$data0.data;
            var$6[$fromDataIndex] = var$6[$fromDataIndex] | ju_BitSet_trailingZeroBits($this, $fromIndex) & ju_BitSet_trailingOneBits($this, $toIndex);
        } else {
            var$6 = $this.$data0.data;
            var$6[$fromDataIndex] = var$6[$fromDataIndex] | ju_BitSet_trailingZeroBits($this, $fromIndex);
            $i = $fromDataIndex + 1 | 0;
            while ($i < $toDataIndex) {
                $this.$data0.data[$i] = (-1);
                $i = $i + 1 | 0;
            }
            if ($toIndex & 31) {
                var$6 = $this.$data0.data;
                var$6[$toDataIndex] = var$6[$toDataIndex] | ju_BitSet_trailingOneBits($this, $toIndex);
            }
        }
    }
    function ju_BitSet_trailingZeroBits($this, $num) {
        return (-1) << ($num % 32 | 0);
    }
    function ju_BitSet_trailingOneBits($this, $num) {
        $num = $num % 32 | 0;
        return !$num ? 0 : (-1) >>> (32 - $num | 0) | 0;
    }
    function ju_BitSet_clear($this, $bitIndex) {
        var $index, var$3, var$4, var$5;
        $index = $bitIndex / 32 | 0;
        var$3 = $this.$data0.data;
        if ($index < var$3.length) {
            var$4 = var$3[$index];
            var$5 = ($bitIndex % 32 | 0) & 31;
            var$3[$index] = var$4 & ((-2) << var$5 | ((-2) >>> (32 - var$5 | 0) | 0));
            if ($bitIndex == ($this.$length4 - 1 | 0))
                ju_BitSet_recalculateLength($this);
        }
    }
    function ju_BitSet_get($this, $bitIndex) {
        var $index, var$3;
        $index = $bitIndex / 32 | 0;
        var$3 = $this.$data0.data;
        return $index < var$3.length && var$3[$index] & 1 << ($bitIndex % 32 | 0) ? 1 : 0;
    }
    function ju_BitSet_nextSetBit($this, $fromIndex) {
        var $top, $index, var$4, $i;
        $top = $this.$length4;
        if ($fromIndex >= $top)
            return (-1);
        $index = $fromIndex / 32 | 0;
        var$4 = $this.$data0.data;
        $i = var$4[$index] >>> ($fromIndex % 32 | 0) | 0;
        if ($i)
            return jl_Integer_numberOfTrailingZeros($i) + $fromIndex | 0;
        $top = ($top + 31 | 0) / 32 | 0;
        $i = $index + 1 | 0;
        while ($i < $top) {
            if (var$4[$i])
                return ($i * 32 | 0) + jl_Integer_numberOfTrailingZeros(var$4[$i]) | 0;
            $i = $i + 1 | 0;
        }
        return (-1);
    }
    function ju_BitSet_ensureCapacity($this, $capacity) {
        var $newArrayLength, var$3, var$4, var$5;
        $newArrayLength = $this.$data0.data.length;
        if ($newArrayLength >= $capacity)
            return;
        $newArrayLength = jl_Math_max(($capacity * 3 | 0) / 2 | 0, ($newArrayLength * 2 | 0) + 1 | 0);
        var$3 = $this.$data0.data;
        var$4 = $rt_createIntArray($newArrayLength);
        var$5 = var$4.data;
        $capacity = jl_Math_min($newArrayLength, var$3.length);
        $newArrayLength = 0;
        while ($newArrayLength < $capacity) {
            var$5[$newArrayLength] = var$3[$newArrayLength];
            $newArrayLength = $newArrayLength + 1 | 0;
        }
        $this.$data0 = var$4;
    }
    function ju_BitSet_recalculateLength($this) {
        var $top, $i, $sz;
        $top = ($this.$length4 + 31 | 0) / 32 | 0;
        $this.$length4 = $top * 32 | 0;
        $i = $top - 1 | 0;
        a: {
            while (true) {
                if ($i < 0)
                    break a;
                $sz = jl_Integer_numberOfLeadingZeros($this.$data0.data[$i]);
                if ($sz < 32)
                    break;
                $i = $i + (-1) | 0;
                $this.$length4 = $this.$length4 - 32 | 0;
            }
            $this.$length4 = $this.$length4 - $sz | 0;
        }
    }
    function ju_BitSet_and($this, $set) {
        var $i, $i_0, var$4, var$5;
        $i = jl_Math_min($this.$data0.data.length, $set.$data0.data.length);
        $i_0 = 0;
        while ($i_0 < $i) {
            var$4 = $this.$data0.data;
            var$4[$i_0] = var$4[$i_0] & $set.$data0.data[$i_0];
            $i_0 = $i_0 + 1 | 0;
        }
        while (true) {
            var$5 = $this.$data0.data;
            if ($i >= var$5.length)
                break;
            var$5[$i] = 0;
            $i = $i + 1 | 0;
        }
        $this.$length4 = jl_Math_min($this.$length4, $set.$length4);
        ju_BitSet_recalculateLength($this);
    }
    function ju_BitSet_andNot($this, $set) {
        var $sz, $i, var$4;
        $sz = jl_Math_min($this.$data0.data.length, $set.$data0.data.length);
        $i = 0;
        while ($i < $sz) {
            var$4 = $this.$data0.data;
            var$4[$i] = var$4[$i] & ($set.$data0.data[$i] ^ (-1));
            $i = $i + 1 | 0;
        }
        ju_BitSet_recalculateLength($this);
    }
    function ju_BitSet_or($this, $set) {
        var $sz, $i, var$4;
        $sz = jl_Math_max($this.$length4, $set.$length4);
        $this.$length4 = $sz;
        ju_BitSet_ensureCapacity($this, ($sz + 31 | 0) / 32 | 0);
        $sz = jl_Math_min($this.$data0.data.length, $set.$data0.data.length);
        $i = 0;
        while ($i < $sz) {
            var$4 = $this.$data0.data;
            var$4[$i] = var$4[$i] | $set.$data0.data[$i];
            $i = $i + 1 | 0;
        }
    }
    function ju_BitSet_xor($this, $set) {
        var $sz, $i, var$4;
        $sz = jl_Math_max($this.$length4, $set.$length4);
        $this.$length4 = $sz;
        ju_BitSet_ensureCapacity($this, ($sz + 31 | 0) / 32 | 0);
        $sz = jl_Math_min($this.$data0.data.length, $set.$data0.data.length);
        $i = 0;
        while ($i < $sz) {
            var$4 = $this.$data0.data;
            var$4[$i] = var$4[$i] ^ $set.$data0.data[$i];
            $i = $i + 1 | 0;
        }
        ju_BitSet_recalculateLength($this);
    }
    function ju_BitSet_isEmpty($this) {
        return $this.$length4 ? 0 : 1;
    }
    function jur_LowHighSurrogateRangeSet() {
        var a = this; jur_JointSet.call(a);
        a.$surrChars = null;
        a.$alt = 0;
    }
    function jur_LowHighSurrogateRangeSet_getName($this) {
        var var$1, var$2, var$3;
        var$1 = !$this.$alt ? $rt_s(138) : $rt_s(691);
        var$2 = $this.$surrChars.$toString();
        var$3 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$3);
        jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$3, $rt_s(692)), var$1), var$2);
        return jl_AbstractStringBuilder_toString(var$3);
    }
    function jur_CompositeRangeSet() {
        var a = this; jur_JointSet.call(a);
        a.$withoutSurrogates = null;
        a.$withSurrogates = null;
    }
    function jur_CompositeRangeSet__init_(var_0, var_1) {
        var var_2 = new jur_CompositeRangeSet();
        jur_CompositeRangeSet__init_0(var_2, var_0, var_1);
        return var_2;
    }
    function jur_CompositeRangeSet__init_0($this, $withoutSurrogates, $withSurrogates) {
        jur_AbstractSet__init_($this);
        $this.$withoutSurrogates = $withoutSurrogates;
        $this.$withSurrogates = $withSurrogates;
    }
    function jur_CompositeRangeSet_matches($this, $stringIndex, $testString, $matchResult) {
        var $shift, var$5, var$6, var$7, var$8;
        $shift = $this.$withoutSurrogates.$matches($stringIndex, $testString, $matchResult);
        if ($shift < 0)
            a: {
                var$5 = $this.$withSurrogates;
                var$6 = $matchResult.$leftBound0;
                $shift = $matchResult.$rightBound0;
                var$7 = $stringIndex + 1 | 0;
                $shift = $rt_compare(var$7, $shift);
                if ($shift > 0) {
                    $matchResult.$hitEnd = 1;
                    $shift = (-1);
                } else {
                    var$8 = jl_String_charAt($testString, $stringIndex);
                    if (!var$5.$surrChars.$contains0(var$8))
                        $shift = (-1);
                    else {
                        if (jl_Character_isHighSurrogate(var$8)) {
                            if ($shift < 0 && jl_Character_isLowSurrogate(jl_String_charAt($testString, var$7))) {
                                $shift = (-1);
                                break a;
                            }
                        } else if (jl_Character_isLowSurrogate(var$8) && $stringIndex > var$6 && jl_Character_isHighSurrogate(jl_String_charAt($testString, $stringIndex - 1 | 0))) {
                            $shift = (-1);
                            break a;
                        }
                        $shift = var$5.$next4.$matches(var$7, $testString, $matchResult);
                    }
                }
            }
        if ($shift >= 0)
            return $shift;
        return (-1);
    }
    function jur_CompositeRangeSet_setNext($this, $next) {
        $this.$next4 = $next;
        $this.$withSurrogates.$next4 = $next;
        $this.$withoutSurrogates.$setNext($next);
    }
    function jur_CompositeRangeSet_getName($this) {
        var var$1, var$2, var$3;
        var$1 = jl_String_valueOf($this.$withoutSurrogates);
        var$2 = jl_String_valueOf($this.$withSurrogates);
        var$3 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$3);
        jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$3, $rt_s(693)), var$1), $rt_s(694)), var$2);
        return jl_AbstractStringBuilder_toString(var$3);
    }
    function jur_CompositeRangeSet_hasConsumed($this, $matchResult) {
        return 1;
    }
    function jur_CompositeRangeSet_first($this, $set) {
        return 1;
    }
    function jur_SupplRangeSet() {
        var a = this; jur_JointSet.call(a);
        a.$chars = null;
        a.$alt1 = 0;
    }
    function jur_SupplRangeSet__init_(var_0) {
        var var_1 = new jur_SupplRangeSet();
        jur_SupplRangeSet__init_0(var_1, var_0);
        return var_1;
    }
    function jur_SupplRangeSet__init_0($this, $cc) {
        jur_AbstractSet__init_($this);
        $this.$chars = $cc.$getInstance0();
        $this.$alt1 = $cc.$alt0;
    }
    function jur_SupplRangeSet_matches($this, $stringIndex, $testString, $matchResult) {
        var $strLength, $low, $high, $offset;
        $strLength = $matchResult.$rightBound0;
        if ($stringIndex < $strLength) {
            $low = $stringIndex + 1 | 0;
            $high = jl_String_charAt($testString, $stringIndex);
            if ($this.$contains0($high)) {
                $offset = $this.$next4.$matches($low, $testString, $matchResult);
                if ($offset > 0)
                    return $offset;
            }
            if ($low < $strLength) {
                $stringIndex = $low + 1 | 0;
                $low = jl_String_charAt($testString, $low);
                if (jl_Character_isSurrogatePair($high, $low) && $this.$contains0(jl_Character_toCodePoint($high, $low)))
                    return $this.$next4.$matches($stringIndex, $testString, $matchResult);
            }
        }
        return (-1);
    }
    function jur_SupplRangeSet_getName($this) {
        var var$1, var$2, var$3;
        var$1 = !$this.$alt1 ? $rt_s(138) : $rt_s(691);
        var$2 = $this.$chars.$toString();
        var$3 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$3);
        jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$3, $rt_s(692)), var$1), var$2);
        return jl_AbstractStringBuilder_toString(var$3);
    }
    function jur_SupplRangeSet_contains($this, $ch) {
        return $this.$chars.$contains0($ch);
    }
    function jur_SupplRangeSet_first($this, $set) {
        if ($set instanceof jur_SupplCharSet)
            return jur_AbstractCharClass_intersects($this.$chars, $set.$ch1);
        if ($set instanceof jur_CharSet)
            return jur_AbstractCharClass_intersects($this.$chars, $set.$ch2);
        if ($set instanceof jur_SupplRangeSet)
            return jur_AbstractCharClass_intersects0($this.$chars, $set.$chars);
        if (!($set instanceof jur_RangeSet))
            return 1;
        return jur_AbstractCharClass_intersects0($this.$chars, $set.$chars0);
    }
    function jur_SupplRangeSet_getChars($this) {
        return $this.$chars;
    }
    function jur_SupplRangeSet_setNext($this, $next) {
        $this.$next4 = $next;
    }
    function jur_SupplRangeSet_hasConsumed($this, $mr) {
        return 1;
    }
    var jur_UCISupplRangeSet = $rt_classWithoutFields(jur_SupplRangeSet);
    function jur_UCISupplRangeSet_contains($this, $ch) {
        return $this.$chars.$contains0(jl_Character_toLowerCase0(jl_Character_toUpperCase($ch)));
    }
    function jur_UCISupplRangeSet_getName($this) {
        var var$1, var$2, var$3;
        var$1 = !$this.$alt1 ? $rt_s(138) : $rt_s(691);
        var$2 = $this.$chars.$toString();
        var$3 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$3);
        jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$3, $rt_s(695)), var$1), var$2);
        return jl_AbstractStringBuilder_toString(var$3);
    }
    function jur_UCIRangeSet() {
        var a = this; jur_LeafSet.call(a);
        a.$chars1 = null;
        a.$alt2 = 0;
    }
    function jur_UCIRangeSet__init_(var_0) {
        var var_1 = new jur_UCIRangeSet();
        jur_UCIRangeSet__init_0(var_1, var_0);
        return var_1;
    }
    function jur_UCIRangeSet__init_0($this, $cc) {
        jur_LeafSet__init_($this);
        $this.$chars1 = $cc.$getInstance0();
        $this.$alt2 = $cc.$alt0;
    }
    function jur_UCIRangeSet_accepts($this, $strIndex, $testString) {
        return !$this.$chars1.$contains0(jl_Character_toLowerCase(jl_Character_toUpperCase0(jl_String_charAt($testString, $strIndex)))) ? (-1) : 1;
    }
    function jur_UCIRangeSet_getName($this) {
        var var$1, var$2, var$3;
        var$1 = !$this.$alt2 ? $rt_s(138) : $rt_s(691);
        var$2 = $this.$chars1.$toString();
        var$3 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$3);
        jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$3, $rt_s(695)), var$1), var$2);
        return jl_AbstractStringBuilder_toString(var$3);
    }
    function jur_RangeSet() {
        var a = this; jur_LeafSet.call(a);
        a.$chars0 = null;
        a.$alt3 = 0;
    }
    function jur_RangeSet__init_(var_0) {
        var var_1 = new jur_RangeSet();
        jur_RangeSet__init_0(var_1, var_0);
        return var_1;
    }
    function jur_RangeSet__init_0($this, $cc) {
        jur_LeafSet__init_($this);
        $this.$chars0 = $cc.$getInstance0();
        $this.$alt3 = $cc.$alt0;
    }
    function jur_RangeSet_accepts($this, $strIndex, $testString) {
        return !$this.$chars0.$contains0(jl_String_charAt($testString, $strIndex)) ? (-1) : 1;
    }
    function jur_RangeSet_getName($this) {
        var var$1, var$2, var$3;
        var$1 = !$this.$alt3 ? $rt_s(138) : $rt_s(691);
        var$2 = $this.$chars0.$toString();
        var$3 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$3);
        jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$3, $rt_s(692)), var$1), var$2);
        return jl_AbstractStringBuilder_toString(var$3);
    }
    function jur_RangeSet_first($this, $set) {
        if ($set instanceof jur_CharSet)
            return jur_AbstractCharClass_intersects($this.$chars0, $set.$ch2);
        if ($set instanceof jur_RangeSet)
            return jur_AbstractCharClass_intersects0($this.$chars0, $set.$chars0);
        if (!($set instanceof jur_SupplRangeSet)) {
            if (!($set instanceof jur_SupplCharSet))
                return 1;
            return 0;
        }
        return jur_AbstractCharClass_intersects0($this.$chars0, $set.$chars);
    }
    function jur_HangulDecomposedCharSet() {
        var a = this; jur_JointSet.call(a);
        a.$decomposedChar = null;
        a.$decomposedCharUTF16 = null;
        a.$decomposedCharLength = 0;
    }
    function jur_HangulDecomposedCharSet__init_(var_0, var_1) {
        var var_2 = new jur_HangulDecomposedCharSet();
        jur_HangulDecomposedCharSet__init_0(var_2, var_0, var_1);
        return var_2;
    }
    function jur_HangulDecomposedCharSet__init_0($this, $decomposedChar, $decomposedCharLength) {
        jur_AbstractSet__init_($this);
        $this.$decomposedChar = $decomposedChar;
        $this.$decomposedCharLength = $decomposedCharLength;
    }
    function jur_HangulDecomposedCharSet_setNext($this, $next) {
        $this.$next4 = $next;
    }
    function jur_HangulDecomposedCharSet_getDecomposedChar($this) {
        if ($this.$decomposedCharUTF16 === null)
            $this.$decomposedCharUTF16 = jl_String__init_($this.$decomposedChar);
        return $this.$decomposedCharUTF16;
    }
    function jur_HangulDecomposedCharSet_getName($this) {
        var var$1, var$2;
        var$1 = jur_HangulDecomposedCharSet_getDecomposedChar($this);
        var$2 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$2);
        jl_StringBuilder_append(jl_StringBuilder_append(var$2, $rt_s(696)), var$1);
        return jl_AbstractStringBuilder_toString(var$2);
    }
    function jur_HangulDecomposedCharSet_matches($this, $strIndex, $testString, $matchResult) {
        var $rightBound, $decompSyllable, $vIndex, $tIndex, var$8, $curSymb, $lIndex, $i, $decompCurSymb, $syllIndex;
        $rightBound = $matchResult.$rightBound0;
        $decompSyllable = $rt_createIntArray(3);
        $vIndex = (-1);
        $tIndex = (-1);
        if ($strIndex >= $rightBound)
            return (-1);
        var$8 = $strIndex + 1 | 0;
        $curSymb = jl_String_charAt($testString, $strIndex);
        $strIndex = $curSymb - 44032 | 0;
        if ($strIndex >= 0 && $strIndex < 11172) {
            $lIndex = 4352 + ($strIndex / 588 | 0) | 0;
            $i = 4449 + (($strIndex % 588 | 0) / 28 | 0) | 0;
            $strIndex = $strIndex % 28 | 0;
            $decompCurSymb = !$strIndex ? $rt_createIntArrayFromData([$lIndex, $i]) : $rt_createIntArrayFromData([$lIndex, $i, 4519 + $strIndex | 0]);
        } else
            $decompCurSymb = null;
        if ($decompCurSymb !== null) {
            $decompCurSymb = $decompCurSymb.data;
            $i = 0;
            $strIndex = $decompCurSymb.length;
            $syllIndex = $this.$decomposedCharLength;
            if ($strIndex != $syllIndex)
                return (-1);
            while (true) {
                if ($i >= $syllIndex)
                    return $this.$next4.$matches(var$8, $testString, $matchResult);
                if ($decompCurSymb[$i] != $this.$decomposedChar.data[$i])
                    break;
                $i = $i + 1 | 0;
            }
            return (-1);
        }
        $decompSyllable = $decompSyllable.data;
        $decompSyllable[0] = $curSymb;
        $lIndex = $curSymb - 4352 | 0;
        if ($lIndex >= 0 && $lIndex < 19) {
            if (var$8 < $rightBound) {
                $curSymb = jl_String_charAt($testString, var$8);
                $vIndex = $curSymb - 4449 | 0;
            }
            if ($vIndex >= 0 && $vIndex < 21) {
                $lIndex = var$8 + 1 | 0;
                $decompSyllable[1] = $curSymb;
                if ($lIndex < $rightBound) {
                    $curSymb = jl_String_charAt($testString, $lIndex);
                    $tIndex = $curSymb - 4519 | 0;
                }
                if ($tIndex >= 0 && $tIndex < 28) {
                    a: {
                        $strIndex = $lIndex + 1 | 0;
                        $decompSyllable[2] = $curSymb;
                        if ($this.$decomposedCharLength == 3) {
                            $lIndex = $decompSyllable[0];
                            $decompCurSymb = $this.$decomposedChar.data;
                            if ($lIndex == $decompCurSymb[0] && $decompSyllable[1] == $decompCurSymb[1] && $decompSyllable[2] == $decompCurSymb[2]) {
                                $strIndex = $this.$next4.$matches($strIndex, $testString, $matchResult);
                                break a;
                            }
                        }
                        $strIndex = (-1);
                    }
                    return $strIndex;
                }
                b: {
                    if ($this.$decomposedCharLength == 2) {
                        $strIndex = $decompSyllable[0];
                        $decompCurSymb = $this.$decomposedChar.data;
                        if ($strIndex == $decompCurSymb[0] && $decompSyllable[1] == $decompCurSymb[1]) {
                            $strIndex = $this.$next4.$matches($lIndex, $testString, $matchResult);
                            break b;
                        }
                    }
                    $strIndex = (-1);
                }
                return $strIndex;
            }
            return (-1);
        }
        return (-1);
    }
    function jur_HangulDecomposedCharSet_first($this, $set) {
        return $set instanceof jur_HangulDecomposedCharSet && !jl_String_equals(jur_HangulDecomposedCharSet_getDecomposedChar($set), jur_HangulDecomposedCharSet_getDecomposedChar($this)) ? 0 : 1;
    }
    function jur_HangulDecomposedCharSet_hasConsumed($this, $matchResult) {
        return 1;
    }
    function jur_CharSet() {
        jur_LeafSet.call(this);
        this.$ch2 = 0;
    }
    function jur_CharSet__init_(var_0) {
        var var_1 = new jur_CharSet();
        jur_CharSet__init_0(var_1, var_0);
        return var_1;
    }
    function jur_CharSet__init_0($this, $ch) {
        jur_LeafSet__init_($this);
        $this.$ch2 = $ch;
    }
    function jur_CharSet_charCount($this) {
        return 1;
    }
    function jur_CharSet_accepts($this, $strIndex, $testString) {
        return $this.$ch2 != jl_String_charAt($testString, $strIndex) ? (-1) : 1;
    }
    function jur_CharSet_find($this, $strIndex, $testStr, $matchResult) {
        var $strLength, var$5, var$6;
        if (!($testStr instanceof jl_String))
            return jur_AbstractSet_find($this, $strIndex, $testStr, $matchResult);
        $strLength = $matchResult.$rightBound0;
        while (true) {
            if ($strIndex >= $strLength)
                return (-1);
            var$5 = jl_String_indexOf($testStr, $this.$ch2, $strIndex);
            if (var$5 < 0)
                return (-1);
            var$6 = $this.$next4;
            $strIndex = var$5 + 1 | 0;
            if (var$6.$matches($strIndex, $testStr, $matchResult) >= 0)
                break;
        }
        return var$5;
    }
    function jur_CharSet_findBack($this, $strIndex, $lastIndex, $testStr, $matchResult) {
        var var$5;
        if (!($testStr instanceof jl_String))
            return jur_AbstractSet_findBack($this, $strIndex, $lastIndex, $testStr, $matchResult);
        a: {
            while (true) {
                if ($lastIndex < $strIndex)
                    return (-1);
                var$5 = jl_String_lastIndexOf0($testStr, $this.$ch2, $lastIndex);
                if (var$5 < 0)
                    break a;
                if (var$5 < $strIndex)
                    break a;
                if ($this.$next4.$matches(var$5 + 1 | 0, $testStr, $matchResult) >= 0)
                    break;
                $lastIndex = var$5 + (-1) | 0;
            }
            return var$5;
        }
        return (-1);
    }
    function jur_CharSet_getName($this) {
        var var$1, var$2;
        var$1 = $this.$ch2;
        var$2 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$2);
        jl_AbstractStringBuilder_append(var$2, var$1);
        return jl_AbstractStringBuilder_toString(var$2);
    }
    function jur_CharSet_first($this, $set) {
        if ($set instanceof jur_CharSet)
            return $set.$ch2 != $this.$ch2 ? 0 : 1;
        if (!($set instanceof jur_RangeSet)) {
            if ($set instanceof jur_SupplRangeSet)
                return $set.$contains0($this.$ch2);
            if (!($set instanceof jur_SupplCharSet))
                return 1;
            return 0;
        }
        return jur_RangeSet_accepts($set, 0, jl_Character_toString($this.$ch2)) <= 0 ? 0 : 1;
    }
    function jur_UCICharSet() {
        jur_LeafSet.call(this);
        this.$ch3 = 0;
    }
    function jur_UCICharSet__init_(var_0) {
        var var_1 = new jur_UCICharSet();
        jur_UCICharSet__init_0(var_1, var_0);
        return var_1;
    }
    function jur_UCICharSet__init_0($this, $ch) {
        jur_LeafSet__init_($this);
        $this.$ch3 = jl_Character_toLowerCase(jl_Character_toUpperCase0($ch));
    }
    function jur_UCICharSet_accepts($this, $strIndex, $testString) {
        return $this.$ch3 != jl_Character_toLowerCase(jl_Character_toUpperCase0(jl_String_charAt($testString, $strIndex))) ? (-1) : 1;
    }
    function jur_UCICharSet_getName($this) {
        var var$1, var$2;
        var$1 = $this.$ch3;
        var$2 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$2);
        jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$2, $rt_s(697)), var$1);
        return jl_AbstractStringBuilder_toString(var$2);
    }
    function jur_CICharSet() {
        var a = this; jur_LeafSet.call(a);
        a.$ch4 = 0;
        a.$supplement = 0;
    }
    function jur_CICharSet__init_(var_0) {
        var var_1 = new jur_CICharSet();
        jur_CICharSet__init_0(var_1, var_0);
        return var_1;
    }
    function jur_CICharSet__init_0($this, $ch) {
        jur_LeafSet__init_($this);
        $this.$ch4 = $ch;
        $this.$supplement = jur_Pattern_getSupplement($ch);
    }
    function jur_CICharSet_accepts($this, $strIndex, $testString) {
        return $this.$ch4 != jl_String_charAt($testString, $strIndex) && $this.$supplement != jl_String_charAt($testString, $strIndex) ? (-1) : 1;
    }
    function jur_CICharSet_getName($this) {
        var var$1, var$2;
        var$1 = $this.$ch4;
        var$2 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$2);
        jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$2, $rt_s(698)), var$1);
        return jl_AbstractStringBuilder_toString(var$2);
    }
    function jur_DecomposedCharSet() {
        var a = this; jur_JointSet.call(a);
        a.$readCharsForCodePoint = 0;
        a.$decomposedCharUTF160 = null;
        a.$decomposedChar0 = null;
        a.$decomposedCharLength0 = 0;
    }
    function jur_DecomposedCharSet__init_(var_0, var_1) {
        var var_2 = new jur_DecomposedCharSet();
        jur_DecomposedCharSet__init_0(var_2, var_0, var_1);
        return var_2;
    }
    function jur_DecomposedCharSet__init_0($this, $decomposedChar, $decomposedCharLength) {
        jur_AbstractSet__init_($this);
        $this.$readCharsForCodePoint = 1;
        $this.$decomposedChar0 = $decomposedChar;
        $this.$decomposedCharLength0 = $decomposedCharLength;
    }
    function jur_DecomposedCharSet_setNext($this, $next) {
        $this.$next4 = $next;
    }
    function jur_DecomposedCharSet_matches($this, $strIndex, $testString, $matchResult) {
        var $decCodePoint, $rightBound, $curChar, var$7, $decCurCodePoint, var$9, var$10, $readCodePoints;
        $decCodePoint = $rt_createIntArray(4);
        $rightBound = $matchResult.$rightBound0;
        if ($strIndex >= $rightBound)
            return (-1);
        $curChar = jur_DecomposedCharSet_codePointAt($this, $strIndex, $testString, $rightBound);
        var$7 = $strIndex + $this.$readCharsForCodePoint | 0;
        $decCurCodePoint = jur_Lexer_getDecomposition($curChar);
        if ($decCurCodePoint === null) {
            $decCurCodePoint = $decCodePoint.data;
            $strIndex = 1;
            $decCurCodePoint[0] = $curChar;
        } else {
            $strIndex = $decCurCodePoint.data.length;
            jl_System_fastArraycopy($decCurCodePoint, 0, $decCodePoint, 0, $strIndex);
            $strIndex = 0 + $strIndex | 0;
        }
        a: {
            if (var$7 < $rightBound) {
                var$9 = $decCodePoint.data;
                $curChar = jur_DecomposedCharSet_codePointAt($this, var$7, $testString, $rightBound);
                while ($strIndex < 4) {
                    if (!(($curChar != 832 ? 0 : 1) | ($curChar != 833 ? 0 : 1) | ($curChar != 835 ? 0 : 1) | ($curChar != 836 ? 0 : 1))) {
                        var$10 = $strIndex + 1 | 0;
                        var$9[$strIndex] = $curChar;
                    } else {
                        $decCurCodePoint = (jur_Lexer_getDecomposition($curChar)).data;
                        if ($decCurCodePoint.length != 2) {
                            var$10 = $strIndex + 1 | 0;
                            var$9[$strIndex] = $decCurCodePoint[0];
                        } else {
                            $readCodePoints = $strIndex + 1 | 0;
                            var$9[$strIndex] = $decCurCodePoint[0];
                            var$10 = $readCodePoints + 1 | 0;
                            var$9[$readCodePoints] = $decCurCodePoint[1];
                        }
                    }
                    var$7 = var$7 + $this.$readCharsForCodePoint | 0;
                    if (var$7 >= $rightBound) {
                        $strIndex = var$10;
                        break a;
                    }
                    $curChar = jur_DecomposedCharSet_codePointAt($this, var$7, $testString, $rightBound);
                    $strIndex = var$10;
                }
            }
        }
        if ($strIndex != $this.$decomposedCharLength0)
            return (-1);
        $decCurCodePoint = $decCodePoint.data;
        $curChar = 0;
        while (true) {
            if ($curChar >= $strIndex)
                return $this.$next4.$matches(var$7, $testString, $matchResult);
            if ($decCurCodePoint[$curChar] != $this.$decomposedChar0.data[$curChar])
                break;
            $curChar = $curChar + 1 | 0;
        }
        return (-1);
    }
    function jur_DecomposedCharSet_getDecomposedChar($this) {
        var $strBuff, $i;
        if ($this.$decomposedCharUTF160 === null) {
            $strBuff = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($strBuff);
            $i = 0;
            while ($i < $this.$decomposedCharLength0) {
                jl_AbstractStringBuilder_append3($strBuff, jl_Character_toChars($this.$decomposedChar0.data[$i]));
                $i = $i + 1 | 0;
            }
            $this.$decomposedCharUTF160 = jl_AbstractStringBuilder_toString($strBuff);
        }
        return $this.$decomposedCharUTF160;
    }
    function jur_DecomposedCharSet_getName($this) {
        var var$1, var$2;
        var$1 = jur_DecomposedCharSet_getDecomposedChar($this);
        var$2 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$2);
        jl_StringBuilder_append(jl_StringBuilder_append(var$2, $rt_s(699)), var$1);
        return jl_AbstractStringBuilder_toString(var$2);
    }
    function jur_DecomposedCharSet_codePointAt($this, $strIndex, $testString, $rightBound) {
        var $curChar, $low, $curCodePointUTF16;
        $this.$readCharsForCodePoint = 1;
        if ($strIndex >= ($rightBound - 1 | 0))
            $curChar = jl_String_charAt($testString, $strIndex);
        else {
            $rightBound = $strIndex + 1 | 0;
            $curChar = jl_String_charAt($testString, $strIndex);
            $low = jl_String_charAt($testString, $rightBound);
            if (jl_Character_isSurrogatePair($curChar, $low)) {
                $curCodePointUTF16 = $rt_createCharArray(2).data;
                $curCodePointUTF16[0] = $curChar;
                $curCodePointUTF16[1] = $low;
                $curChar = 0 < ($curCodePointUTF16.length - 1 | 0) && jl_Character_isHighSurrogate($curCodePointUTF16[0]) && jl_Character_isLowSurrogate($curCodePointUTF16[1]) ? jl_Character_toCodePoint($curCodePointUTF16[0], $curCodePointUTF16[1]) : $curCodePointUTF16[0];
                $this.$readCharsForCodePoint = 2;
            }
        }
        return $curChar;
    }
    function jur_DecomposedCharSet_first($this, $set) {
        return $set instanceof jur_DecomposedCharSet && !jl_String_equals(jur_DecomposedCharSet_getDecomposedChar($set), jur_DecomposedCharSet_getDecomposedChar($this)) ? 0 : 1;
    }
    function jur_DecomposedCharSet_hasConsumed($this, $matchResult) {
        return 1;
    }
    var jur_UCIDecomposedCharSet = $rt_classWithoutFields(jur_DecomposedCharSet);
    var jur_CIDecomposedCharSet = $rt_classWithoutFields(jur_DecomposedCharSet);
    var jur_PossessiveGroupQuantifierSet = $rt_classWithoutFields(jur_GroupQuantifierSet);
    function jur_PossessiveGroupQuantifierSet_matches($this, $stringIndex, $testString, $matchResult) {
        var $stringIndex_0;
        while (true) {
            $stringIndex_0 = $this.$innerSet.$matches($stringIndex, $testString, $matchResult);
            if ($stringIndex_0 <= 0)
                break;
            $stringIndex = $stringIndex_0;
        }
        return $this.$next4.$matches($stringIndex, $testString, $matchResult);
    }
    var jur_PosPlusGroupQuantifierSet = $rt_classWithoutFields(jur_GroupQuantifierSet);
    function jur_PosPlusGroupQuantifierSet_matches($this, $stringIndex, $testString, $matchResult) {
        var $nextIndex;
        $nextIndex = $this.$innerSet.$matches($stringIndex, $testString, $matchResult);
        if ($nextIndex < 0)
            return (-1);
        if ($nextIndex > $stringIndex) {
            while (true) {
                $stringIndex = $this.$innerSet.$matches($nextIndex, $testString, $matchResult);
                if ($stringIndex <= $nextIndex)
                    break;
                $nextIndex = $stringIndex;
            }
            $stringIndex = $nextIndex;
        }
        return $this.$next4.$matches($stringIndex, $testString, $matchResult);
    }
    var jur_AltGroupQuantifierSet = $rt_classWithoutFields(jur_GroupQuantifierSet);
    function jur_AltGroupQuantifierSet_matches($this, $stringIndex, $testString, $matchResult) {
        var $nextIndex;
        if (!$this.$innerSet.$hasConsumed($matchResult))
            return $this.$next4.$matches($stringIndex, $testString, $matchResult);
        $nextIndex = $this.$innerSet.$matches($stringIndex, $testString, $matchResult);
        if ($nextIndex >= 0)
            return $nextIndex;
        return $this.$next4.$matches($stringIndex, $testString, $matchResult);
    }
    function jur_AltGroupQuantifierSet_setNext($this, $next) {
        $this.$next4 = $next;
        $this.$innerSet.$setNext($next);
    }
    var jur_PosAltGroupQuantifierSet = $rt_classWithoutFields(jur_AltGroupQuantifierSet);
    function jur_PosAltGroupQuantifierSet_matches($this, $stringIndex, $testString, $matchResult) {
        var $nextIndex;
        $nextIndex = $this.$innerSet.$matches($stringIndex, $testString, $matchResult);
        if ($nextIndex <= 0)
            $nextIndex = $stringIndex;
        return $this.$next4.$matches($nextIndex, $testString, $matchResult);
    }
    function jur_PosAltGroupQuantifierSet_setNext($this, $next) {
        $this.$next4 = $next;
    }
    function jur_CompositeGroupQuantifierSet() {
        var a = this; jur_GroupQuantifierSet.call(a);
        a.$quantifier0 = null;
        a.$setCounter = 0;
    }
    function jur_CompositeGroupQuantifierSet__init_0(var_0, var_1, var_2, var_3, var_4) {
        var var_5 = new jur_CompositeGroupQuantifierSet();
        jur_CompositeGroupQuantifierSet__init_(var_5, var_0, var_1, var_2, var_3, var_4);
        return var_5;
    }
    function jur_CompositeGroupQuantifierSet__init_($this, $quant, $innerSet, $next, $type, $setCounter) {
        jur_QuantifierSet__init_($this, $innerSet, $next, $type);
        $this.$quantifier0 = $quant;
        $this.$setCounter = $setCounter;
    }
    function jur_CompositeGroupQuantifierSet_matches($this, $stringIndex, $testString, $matchResult) {
        var $enterCounter, $nextIndex;
        $enterCounter = jur_MatchResultImpl_getEnterCounter($matchResult, $this.$setCounter);
        if (!$this.$innerSet.$hasConsumed($matchResult))
            return $this.$next4.$matches($stringIndex, $testString, $matchResult);
        if ($enterCounter >= $this.$quantifier0.$max0)
            return $this.$next4.$matches($stringIndex, $testString, $matchResult);
        $nextIndex = $this.$setCounter;
        $enterCounter = $enterCounter + 1 | 0;
        jur_MatchResultImpl_setEnterCounter($matchResult, $nextIndex, $enterCounter);
        $nextIndex = $this.$innerSet.$matches($stringIndex, $testString, $matchResult);
        if ($nextIndex >= 0) {
            jur_MatchResultImpl_setEnterCounter($matchResult, $this.$setCounter, 0);
            return $nextIndex;
        }
        $nextIndex = $this.$setCounter;
        $enterCounter = $enterCounter + (-1) | 0;
        jur_MatchResultImpl_setEnterCounter($matchResult, $nextIndex, $enterCounter);
        if ($enterCounter >= $this.$quantifier0.$min0)
            return $this.$next4.$matches($stringIndex, $testString, $matchResult);
        jur_MatchResultImpl_setEnterCounter($matchResult, $this.$setCounter, 0);
        return (-1);
    }
    function jur_CompositeGroupQuantifierSet_getName($this) {
        return jur_Quantifier_toString($this.$quantifier0);
    }
    var jur_PosCompositeGroupQuantifierSet = $rt_classWithoutFields(jur_CompositeGroupQuantifierSet);
    function jur_PosCompositeGroupQuantifierSet_matches($this, $stringIndex, $testString, $matchResult) {
        var $counter, $max, $nextIndex;
        $counter = 0;
        $max = $this.$quantifier0.$max0;
        a: {
            while (true) {
                $nextIndex = $this.$innerSet.$matches($stringIndex, $testString, $matchResult);
                if ($nextIndex <= $stringIndex)
                    break a;
                if ($counter >= $max)
                    break;
                $counter = $counter + 1 | 0;
                $stringIndex = $nextIndex;
            }
        }
        if ($nextIndex < 0 && $counter < $this.$quantifier0.$min0)
            return (-1);
        return $this.$next4.$matches($stringIndex, $testString, $matchResult);
    }
    var jur_ReluctantGroupQuantifierSet = $rt_classWithoutFields(jur_GroupQuantifierSet);
    function jur_ReluctantGroupQuantifierSet_matches($this, $stringIndex, $testString, $matchResult) {
        var $res;
        if (!$this.$innerSet.$hasConsumed($matchResult))
            return $this.$next4.$matches($stringIndex, $testString, $matchResult);
        $res = $this.$next4.$matches($stringIndex, $testString, $matchResult);
        if ($res >= 0)
            return $res;
        return $this.$innerSet.$matches($stringIndex, $testString, $matchResult);
    }
    var jur_RelAltGroupQuantifierSet = $rt_classWithoutFields(jur_AltGroupQuantifierSet);
    function jur_RelAltGroupQuantifierSet_matches($this, $stringIndex, $testString, $matchResult) {
        var $nextIndex;
        if (!$this.$innerSet.$hasConsumed($matchResult))
            return $this.$next4.$matches($stringIndex, $testString, $matchResult);
        $nextIndex = $this.$next4.$matches($stringIndex, $testString, $matchResult);
        if ($nextIndex < 0)
            $nextIndex = $this.$innerSet.$matches($stringIndex, $testString, $matchResult);
        return $nextIndex;
    }
    var jur_RelCompositeGroupQuantifierSet = $rt_classWithoutFields(jur_CompositeGroupQuantifierSet);
    function jur_RelCompositeGroupQuantifierSet_matches($this, $stringIndex, $testString, $matchResult) {
        var $enterCounter, var$5, $nextIndex;
        $enterCounter = jur_MatchResultImpl_getEnterCounter($matchResult, $this.$setCounter);
        if (!$this.$innerSet.$hasConsumed($matchResult))
            return $this.$next4.$matches($stringIndex, $testString, $matchResult);
        var$5 = $this.$quantifier0;
        if ($enterCounter >= var$5.$max0) {
            jur_MatchResultImpl_setEnterCounter($matchResult, $this.$setCounter, 0);
            return $this.$next4.$matches($stringIndex, $testString, $matchResult);
        }
        if ($enterCounter < var$5.$min0) {
            jur_MatchResultImpl_setEnterCounter($matchResult, $this.$setCounter, $enterCounter + 1 | 0);
            $nextIndex = $this.$innerSet.$matches($stringIndex, $testString, $matchResult);
        } else {
            $nextIndex = $this.$next4.$matches($stringIndex, $testString, $matchResult);
            if ($nextIndex >= 0) {
                jur_MatchResultImpl_setEnterCounter($matchResult, $this.$setCounter, 0);
                return $nextIndex;
            }
            jur_MatchResultImpl_setEnterCounter($matchResult, $this.$setCounter, $enterCounter + 1 | 0);
            $nextIndex = $this.$innerSet.$matches($stringIndex, $testString, $matchResult);
        }
        return $nextIndex;
    }
    var jur_DotAllQuantifierSet = $rt_classWithoutFields(jur_QuantifierSet);
    function jur_DotAllQuantifierSet_matches($this, $stringIndex, $testString, $matchResult) {
        var $strLength;
        $strLength = $matchResult.$rightBound0;
        if ($strLength > $stringIndex)
            return $this.$next4.$findBack($stringIndex, $strLength, $testString, $matchResult);
        return $this.$next4.$matches($stringIndex, $testString, $matchResult);
    }
    function jur_DotAllQuantifierSet_find($this, $stringIndex, $testString, $matchResult) {
        var $strLength;
        $strLength = $matchResult.$rightBound0;
        if ($this.$next4.$findBack($stringIndex, $strLength, $testString, $matchResult) >= 0)
            return $stringIndex;
        return (-1);
    }
    function jur_DotAllQuantifierSet_getName($this) {
        return $rt_s(700);
    }
    function jur_DotQuantifierSet() {
        jur_QuantifierSet.call(this);
        this.$lt = null;
    }
    function jur_DotQuantifierSet_matches($this, $stringIndex, $testString, $matchResult) {
        var $strLength, $startSearch;
        $strLength = $matchResult.$rightBound0;
        $startSearch = jur_DotQuantifierSet_findLineTerminator($this, $stringIndex, $strLength, $testString);
        if ($startSearch >= 0)
            $strLength = $startSearch;
        if ($strLength > $stringIndex)
            return $this.$next4.$findBack($stringIndex, $strLength, $testString, $matchResult);
        return $this.$next4.$matches($stringIndex, $testString, $matchResult);
    }
    function jur_DotQuantifierSet_find($this, $stringIndex, $testString, $matchResult) {
        var $strLength, $res, $nextSearch, $leftBound;
        $strLength = $matchResult.$rightBound0;
        $res = $this.$next4.$find0($stringIndex, $testString, $matchResult);
        if ($res < 0)
            return (-1);
        $nextSearch = jur_DotQuantifierSet_findLineTerminator($this, $res, $strLength, $testString);
        if ($nextSearch >= 0)
            $strLength = $nextSearch;
        $nextSearch = jl_Math_max($res, $this.$next4.$findBack($res, $strLength, $testString, $matchResult));
        if ($nextSearch <= 0)
            $leftBound = $nextSearch ? (-1) : 0;
        else {
            $leftBound = $nextSearch - 1 | 0;
            a: {
                while (true) {
                    if ($leftBound < $stringIndex) {
                        $leftBound = (-1);
                        break a;
                    }
                    if ($this.$lt.$isLineTerminator(jl_String_charAt($testString, $leftBound)))
                        break;
                    $leftBound = $leftBound + (-1) | 0;
                }
            }
        }
        if ($leftBound >= $stringIndex)
            $stringIndex = $leftBound >= $nextSearch ? $leftBound : $leftBound + 1 | 0;
        return $stringIndex;
    }
    function jur_DotQuantifierSet_findLineTerminator($this, $i, $to, $testString) {
        while (true) {
            if ($i >= $to)
                return (-1);
            if ($this.$lt.$isLineTerminator(jl_String_charAt($testString, $i)))
                break;
            $i = $i + 1 | 0;
        }
        return $i;
    }
    function jur_DotQuantifierSet_getName($this) {
        return $rt_s(701);
    }
    var jur_AbstractLineTerminator = $rt_classWithoutFields();
    var jur_AbstractLineTerminator_unixLT = null;
    var jur_AbstractLineTerminator_unicodeLT = null;
    function jur_AbstractLineTerminator_getInstance($flag) {
        var var$2;
        if (!($flag & 1)) {
            var$2 = jur_AbstractLineTerminator_unicodeLT;
            if (var$2 !== null)
                return var$2;
            var$2 = new jur_AbstractLineTerminator$2;
            jur_AbstractLineTerminator_unicodeLT = var$2;
            return var$2;
        }
        var$2 = jur_AbstractLineTerminator_unixLT;
        if (var$2 !== null)
            return var$2;
        var$2 = new jur_AbstractLineTerminator$1;
        jur_AbstractLineTerminator_unixLT = var$2;
        return var$2;
    }
    var jur_PossessiveQuantifierSet = $rt_classWithoutFields(jur_LeafQuantifierSet);
    function jur_PossessiveQuantifierSet_matches($this, $stringIndex, $testString, $matchResult) {
        var var$4;
        a: {
            while (true) {
                if (($stringIndex + $this.$leaf.$charCount0() | 0) > $matchResult.$rightBound0)
                    break a;
                var$4 = $this.$leaf.$accepts($stringIndex, $testString);
                if (var$4 < 1)
                    break;
                $stringIndex = $stringIndex + var$4 | 0;
            }
        }
        return $this.$next4.$matches($stringIndex, $testString, $matchResult);
    }
    var jur_PossessiveAltQuantifierSet = $rt_classWithoutFields(jur_AltQuantifierSet);
    function jur_PossessiveAltQuantifierSet_matches($this, $stringIndex, $testString, $matchResult) {
        var var$4;
        if (($stringIndex + $this.$leaf.$charCount0() | 0) <= $matchResult.$rightBound0) {
            var$4 = $this.$leaf.$accepts($stringIndex, $testString);
            if (var$4 >= 1)
                $stringIndex = $stringIndex + var$4 | 0;
        }
        return $this.$next4.$matches($stringIndex, $testString, $matchResult);
    }
    var jur_PossessiveCompositeQuantifierSet = $rt_classWithoutFields(jur_CompositeQuantifierSet);
    function jur_PossessiveCompositeQuantifierSet_matches($this, $stringIndex, $testString, $matchResult) {
        var var$4, $min, $max, $i, $shift;
        var$4 = $this.$quantifier;
        $min = var$4.$min0;
        $max = var$4.$max0;
        $i = 0;
        while (true) {
            if ($i >= $min) {
                a: {
                    while (true) {
                        if ($i >= $max)
                            break a;
                        if (($stringIndex + $this.$leaf.$charCount0() | 0) > $matchResult.$rightBound0)
                            break a;
                        $shift = $this.$leaf.$accepts($stringIndex, $testString);
                        if ($shift < 1)
                            break;
                        $stringIndex = $stringIndex + $shift | 0;
                        $i = $i + 1 | 0;
                    }
                }
                return $this.$next4.$matches($stringIndex, $testString, $matchResult);
            }
            if (($stringIndex + $this.$leaf.$charCount0() | 0) > $matchResult.$rightBound0) {
                $matchResult.$hitEnd = 1;
                return (-1);
            }
            $shift = $this.$leaf.$accepts($stringIndex, $testString);
            if ($shift < 1)
                break;
            $stringIndex = $stringIndex + $shift | 0;
            $i = $i + 1 | 0;
        }
        return (-1);
    }
    var jur_ReluctantQuantifierSet = $rt_classWithoutFields(jur_LeafQuantifierSet);
    function jur_ReluctantQuantifierSet_matches($this, $stringIndex, $testString, $matchResult) {
        var var$4;
        while (true) {
            var$4 = $this.$next4.$matches($stringIndex, $testString, $matchResult);
            if (var$4 >= 0)
                break;
            if (($stringIndex + $this.$leaf.$charCount0() | 0) <= $matchResult.$rightBound0) {
                var$4 = $this.$leaf.$accepts($stringIndex, $testString);
                $stringIndex = $stringIndex + var$4 | 0;
            }
            if (var$4 < 1)
                return (-1);
        }
        return var$4;
    }
    var jur_ReluctantAltQuantifierSet = $rt_classWithoutFields(jur_AltQuantifierSet);
    function jur_ReluctantAltQuantifierSet_matches($this, $stringIndex, $testString, $matchResult) {
        var $shift;
        $shift = $this.$next4.$matches($stringIndex, $testString, $matchResult);
        if ($shift >= 0)
            return $shift;
        return $this.$innerSet.$matches($stringIndex, $testString, $matchResult);
    }
    var jur_ReluctantCompositeQuantifierSet = $rt_classWithoutFields(jur_CompositeQuantifierSet);
    function jur_ReluctantCompositeQuantifierSet_matches($this, $stringIndex, $testString, $matchResult) {
        var var$4, $min, $max, $i, var$8, var$9;
        var$4 = $this.$quantifier;
        $min = var$4.$min0;
        $max = var$4.$max0;
        $i = 0;
        while (true) {
            if ($i >= $min) {
                a: {
                    while (true) {
                        var$8 = $this.$next4.$matches($stringIndex, $testString, $matchResult);
                        if (var$8 >= 0)
                            break;
                        if (($stringIndex + $this.$leaf.$charCount0() | 0) <= $matchResult.$rightBound0) {
                            var$8 = $this.$leaf.$accepts($stringIndex, $testString);
                            $stringIndex = $stringIndex + var$8 | 0;
                            $i = $i + 1 | 0;
                        }
                        if (var$8 < 1)
                            break a;
                        if ($i > $max)
                            break a;
                    }
                    return var$8;
                }
                return (-1);
            }
            if (($stringIndex + $this.$leaf.$charCount0() | 0) > $matchResult.$rightBound0) {
                $matchResult.$hitEnd = 1;
                return (-1);
            }
            var$9 = $this.$leaf.$accepts($stringIndex, $testString);
            if (var$9 < 1)
                break;
            $stringIndex = $stringIndex + var$9 | 0;
            $i = $i + 1 | 0;
        }
        return (-1);
    }
    var jur_SOLSet = $rt_classWithoutFields(jur_AbstractSet);
    function jur_SOLSet_matches($this, $strIndex, $testString, $matchResult) {
        if ($strIndex && !($matchResult.$anchoringBounds && $strIndex == $matchResult.$leftBound0))
            return (-1);
        return $this.$next4.$matches($strIndex, $testString, $matchResult);
    }
    function jur_SOLSet_hasConsumed($this, $matchResult) {
        return 0;
    }
    function jur_SOLSet_getName($this) {
        return $rt_s(702);
    }
    function jur_WordBoundary() {
        jur_AbstractSet.call(this);
        this.$positive = 0;
    }
    function jur_WordBoundary__init_(var_0) {
        var var_1 = new jur_WordBoundary();
        jur_WordBoundary__init_0(var_1, var_0);
        return var_1;
    }
    function jur_WordBoundary__init_0($this, $positive) {
        jur_AbstractSet__init_($this);
        $this.$positive = $positive;
    }
    function jur_WordBoundary_matches($this, $stringIndex, $testString, $matchResult) {
        var $ch1, $ch2, $leftBound;
        $ch1 = $stringIndex < $matchResult.$rightBound0 ? jl_String_charAt($testString, $stringIndex) : 32;
        $ch2 = !$stringIndex ? 32 : jl_String_charAt($testString, $stringIndex - 1 | 0);
        $leftBound = $matchResult.$transparentBounds ? 0 : $matchResult.$leftBound0;
        return ($ch1 != 32 && !jur_WordBoundary_isSpace($this, $ch1, $stringIndex, $leftBound, $testString) ? 0 : 1) ^ ($ch2 != 32 && !jur_WordBoundary_isSpace($this, $ch2, $stringIndex - 1 | 0, $leftBound, $testString) ? 0 : 1) ^ $this.$positive ? (-1) : $this.$next4.$matches($stringIndex, $testString, $matchResult);
    }
    function jur_WordBoundary_hasConsumed($this, $matchResult) {
        return 0;
    }
    function jur_WordBoundary_getName($this) {
        return $rt_s(703);
    }
    function jur_WordBoundary_isSpace($this, $ch, $index, $leftBound, $testString) {
        var var$5;
        if (!jl_Character_isLetterOrDigit($ch) && $ch != 95) {
            a: {
                if (jl_Character_getType($ch) == 6)
                    while (true) {
                        $index = $index + (-1) | 0;
                        if ($index < $leftBound)
                            break a;
                        var$5 = jl_String_charAt($testString, $index);
                        if (jl_Character_isLetterOrDigit(var$5))
                            return 0;
                        if (jl_Character_getType(var$5) != 6)
                            return 1;
                    }
            }
            return 1;
        }
        return 0;
    }
    var jur_PreviousMatch = $rt_classWithoutFields(jur_AbstractSet);
    function jur_PreviousMatch_matches($this, $stringIndex, $testString, $matchResult) {
        if ($stringIndex != $matchResult.$previousMatch)
            return (-1);
        return $this.$next4.$matches($stringIndex, $testString, $matchResult);
    }
    function jur_PreviousMatch_hasConsumed($this, $matchResult) {
        return 0;
    }
    function jur_PreviousMatch_getName($this) {
        return $rt_s(704);
    }
    function jur_EOLSet() {
        jur_AbstractSet.call(this);
        this.$consCounter = 0;
    }
    function jur_EOLSet__init_0(var_0) {
        var var_1 = new jur_EOLSet();
        jur_EOLSet__init_(var_1, var_0);
        return var_1;
    }
    function jur_EOLSet__init_($this, $counter) {
        jur_AbstractSet__init_($this);
        $this.$consCounter = $counter;
    }
    function jur_EOLSet_matches($this, $strIndex, $testString, $matchResult) {
        var $rightBound, var$5, $ch;
        $rightBound = !$matchResult.$anchoringBounds ? jl_String_length($testString) : $matchResult.$rightBound0;
        if ($strIndex >= $rightBound) {
            jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter, 0);
            return $this.$next4.$matches($strIndex, $testString, $matchResult);
        }
        var$5 = $rightBound - $strIndex | 0;
        if (var$5 == 2 && jl_String_charAt($testString, $strIndex) == 13 && jl_String_charAt($testString, $strIndex + 1 | 0) == 10) {
            jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter, 0);
            return $this.$next4.$matches($strIndex, $testString, $matchResult);
        }
        a: {
            if (var$5 == 1) {
                $ch = jl_String_charAt($testString, $strIndex);
                if ($ch == 10)
                    break a;
                if ($ch == 13)
                    break a;
                if ($ch == 133)
                    break a;
                if (($ch | 1) == 8233)
                    break a;
            }
            return (-1);
        }
        jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter, 0);
        return $this.$next4.$matches($strIndex, $testString, $matchResult);
    }
    function jur_EOLSet_hasConsumed($this, $matchResult) {
        var $res;
        $res = !jur_MatchResultImpl_getConsumed($matchResult, $this.$consCounter) ? 0 : 1;
        jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter, (-1));
        return $res;
    }
    function jur_EOLSet_getName($this) {
        return $rt_s(705);
    }
    var jur_EOISet = $rt_classWithoutFields(jur_AbstractSet);
    function jur_EOISet_matches($this, $stringIndex, $testString, $matchResult) {
        if ($stringIndex < ($matchResult.$transparentBounds ? jl_String_length($testString) : $matchResult.$rightBound0))
            return (-1);
        $matchResult.$hitEnd = 1;
        $matchResult.$requireEnd = 1;
        return $this.$next4.$matches($stringIndex, $testString, $matchResult);
    }
    function jur_EOISet_hasConsumed($this, $matchResult) {
        return 0;
    }
    function jur_EOISet_getName($this) {
        return $rt_s(706);
    }
    function jur_MultiLineSOLSet() {
        jur_AbstractSet.call(this);
        this.$lt0 = null;
    }
    function jur_MultiLineSOLSet_matches($this, $strIndex, $testString, $matchResult) {
        a: {
            if ($strIndex != $matchResult.$rightBound0) {
                if (!$strIndex)
                    break a;
                if ($matchResult.$anchoringBounds && $strIndex == $matchResult.$leftBound0)
                    break a;
                if ($this.$lt0.$isAfterLineTerminator(jl_String_charAt($testString, $strIndex - 1 | 0), jl_String_charAt($testString, $strIndex)))
                    break a;
            }
            return (-1);
        }
        return $this.$next4.$matches($strIndex, $testString, $matchResult);
    }
    function jur_MultiLineSOLSet_hasConsumed($this, $matchResult) {
        return 0;
    }
    function jur_MultiLineSOLSet_getName($this) {
        return $rt_s(707);
    }
    var jur_DotAllSet = $rt_classWithoutFields(jur_JointSet);
    function jur_DotAllSet__init_() {
        var var_0 = new jur_DotAllSet();
        jur_DotAllSet__init_0(var_0);
        return var_0;
    }
    function jur_DotAllSet__init_0($this) {
        jur_AbstractSet__init_($this);
    }
    function jur_DotAllSet_matches($this, $stringIndex, $testString, $matchResult) {
        var $strLength, var$5, $high, var$7;
        $strLength = $matchResult.$rightBound0;
        var$5 = $stringIndex + 1 | 0;
        if (var$5 > $strLength) {
            $matchResult.$hitEnd = 1;
            return (-1);
        }
        $high = jl_String_charAt($testString, $stringIndex);
        if (jl_Character_isHighSurrogate($high)) {
            var$7 = $stringIndex + 2 | 0;
            if (var$7 <= $strLength && jl_Character_isSurrogatePair($high, jl_String_charAt($testString, var$5)))
                return $this.$next4.$matches(var$7, $testString, $matchResult);
        }
        return $this.$next4.$matches(var$5, $testString, $matchResult);
    }
    function jur_DotAllSet_getName($this) {
        return $rt_s(708);
    }
    function jur_DotAllSet_setNext($this, $next) {
        $this.$next4 = $next;
    }
    function jur_DotAllSet_getType($this) {
        return (-2147483602);
    }
    function jur_DotAllSet_hasConsumed($this, $matchResult) {
        return 1;
    }
    function jur_DotSet() {
        jur_JointSet.call(this);
        this.$lt1 = null;
    }
    function jur_DotSet__init_(var_0) {
        var var_1 = new jur_DotSet();
        jur_DotSet__init_0(var_1, var_0);
        return var_1;
    }
    function jur_DotSet__init_0($this, $lt) {
        jur_AbstractSet__init_($this);
        $this.$lt1 = $lt;
    }
    function jur_DotSet_matches($this, $stringIndex, $testString, $matchResult) {
        var $strLength, var$5, $high, $low;
        $strLength = $matchResult.$rightBound0;
        var$5 = $stringIndex + 1 | 0;
        if (var$5 > $strLength) {
            $matchResult.$hitEnd = 1;
            return (-1);
        }
        $high = jl_String_charAt($testString, $stringIndex);
        if (jl_Character_isHighSurrogate($high)) {
            $stringIndex = $stringIndex + 2 | 0;
            if ($stringIndex <= $strLength) {
                $low = jl_String_charAt($testString, var$5);
                if (jl_Character_isSurrogatePair($high, $low))
                    return $this.$lt1.$isLineTerminator(jl_Character_toCodePoint($high, $low)) ? (-1) : $this.$next4.$matches($stringIndex, $testString, $matchResult);
            }
        }
        return $this.$lt1.$isLineTerminator($high) ? (-1) : $this.$next4.$matches(var$5, $testString, $matchResult);
    }
    function jur_DotSet_getName($this) {
        return $rt_s(176);
    }
    function jur_DotSet_setNext($this, $next) {
        $this.$next4 = $next;
    }
    function jur_DotSet_getType($this) {
        return (-2147483602);
    }
    function jur_DotSet_hasConsumed($this, $matchResult) {
        return 1;
    }
    function jur_UEOLSet() {
        jur_AbstractSet.call(this);
        this.$consCounter0 = 0;
    }
    function jur_UEOLSet__init_(var_0) {
        var var_1 = new jur_UEOLSet();
        jur_UEOLSet__init_0(var_1, var_0);
        return var_1;
    }
    function jur_UEOLSet__init_0($this, $counter) {
        jur_AbstractSet__init_($this);
        $this.$consCounter0 = $counter;
    }
    function jur_UEOLSet_matches($this, $strIndex, $testString, $matchResult) {
        var $rightBound;
        $rightBound = !$matchResult.$anchoringBounds ? jl_String_length($testString) : $matchResult.$rightBound0;
        if ($strIndex >= $rightBound) {
            jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter0, 0);
            return $this.$next4.$matches($strIndex, $testString, $matchResult);
        }
        if (($rightBound - $strIndex | 0) == 1 && jl_String_charAt($testString, $strIndex) == 10) {
            jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter0, 1);
            return $this.$next4.$matches($strIndex + 1 | 0, $testString, $matchResult);
        }
        return (-1);
    }
    function jur_UEOLSet_hasConsumed($this, $matchResult) {
        var $res;
        $res = !jur_MatchResultImpl_getConsumed($matchResult, $this.$consCounter0) ? 0 : 1;
        jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter0, (-1));
        return $res;
    }
    function jur_UEOLSet_getName($this) {
        return $rt_s(705);
    }
    function jur_UMultiLineEOLSet() {
        jur_AbstractSet.call(this);
        this.$consCounter1 = 0;
    }
    function jur_UMultiLineEOLSet__init_(var_0) {
        var var_1 = new jur_UMultiLineEOLSet();
        jur_UMultiLineEOLSet__init_0(var_1, var_0);
        return var_1;
    }
    function jur_UMultiLineEOLSet__init_0($this, $counter) {
        jur_AbstractSet__init_($this);
        $this.$consCounter1 = $counter;
    }
    function jur_UMultiLineEOLSet_matches($this, $strIndex, $testString, $matchResult) {
        if ((!$matchResult.$anchoringBounds ? jl_String_length($testString) - $strIndex | 0 : $matchResult.$rightBound0 - $strIndex | 0) <= 0) {
            jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter1, 0);
            return $this.$next4.$matches($strIndex, $testString, $matchResult);
        }
        if (jl_String_charAt($testString, $strIndex) != 10)
            return (-1);
        jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter1, 1);
        return $this.$next4.$matches($strIndex + 1 | 0, $testString, $matchResult);
    }
    function jur_UMultiLineEOLSet_hasConsumed($this, $matchResult) {
        var $res;
        $res = !jur_MatchResultImpl_getConsumed($matchResult, $this.$consCounter1) ? 0 : 1;
        jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter1, (-1));
        return $res;
    }
    function jur_UMultiLineEOLSet_getName($this) {
        return $rt_s(709);
    }
    function jur_MultiLineEOLSet() {
        jur_AbstractSet.call(this);
        this.$consCounter2 = 0;
    }
    function jur_MultiLineEOLSet__init_(var_0) {
        var var_1 = new jur_MultiLineEOLSet();
        jur_MultiLineEOLSet__init_0(var_1, var_0);
        return var_1;
    }
    function jur_MultiLineEOLSet__init_0($this, $counter) {
        jur_AbstractSet__init_($this);
        $this.$consCounter2 = $counter;
    }
    function jur_MultiLineEOLSet_matches($this, $strIndex, $testString, $matchResult) {
        var $strDif, $ch1, $ch2;
        $strDif = !$matchResult.$anchoringBounds ? jl_String_length($testString) - $strIndex | 0 : $matchResult.$rightBound0 - $strIndex | 0;
        if (!$strDif) {
            jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter2, 0);
            return $this.$next4.$matches($strIndex, $testString, $matchResult);
        }
        if ($strDif < 2) {
            $ch1 = jl_String_charAt($testString, $strIndex);
            $ch2 = 97;
        } else {
            $ch1 = jl_String_charAt($testString, $strIndex);
            $ch2 = jl_String_charAt($testString, $strIndex + 1 | 0);
        }
        switch ($ch1) {
            case 10:
            case 133:
            case 8232:
            case 8233:
                jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter2, 0);
                return $this.$next4.$matches($strIndex, $testString, $matchResult);
            case 13:
                if ($ch2 != 10) {
                    jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter2, 0);
                    return $this.$next4.$matches($strIndex, $testString, $matchResult);
                }
                jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter2, 0);
                return $this.$next4.$matches($strIndex, $testString, $matchResult);
            default:
        }
        return (-1);
    }
    function jur_MultiLineEOLSet_hasConsumed($this, $matchResult) {
        var $res;
        $res = !jur_MatchResultImpl_getConsumed($matchResult, $this.$consCounter2) ? 0 : 1;
        jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter2, (-1));
        return $res;
    }
    function jur_MultiLineEOLSet_getName($this) {
        return $rt_s(710);
    }
    function jur_CIBackReferenceSet() {
        var a = this; jur_JointSet.call(a);
        a.$referencedGroup = 0;
        a.$consCounter3 = 0;
    }
    function jur_CIBackReferenceSet__init_(var_0, var_1) {
        var var_2 = new jur_CIBackReferenceSet();
        jur_CIBackReferenceSet__init_0(var_2, var_0, var_1);
        return var_2;
    }
    function jur_CIBackReferenceSet__init_0($this, $groupIndex, $consCounter) {
        jur_AbstractSet__init_($this);
        $this.$referencedGroup = $groupIndex;
        $this.$consCounter3 = $consCounter;
    }
    function jur_CIBackReferenceSet_matches($this, $stringIndex, $testString, $matchResult) {
        var $group, $i, var$6, var$7;
        $group = jur_CIBackReferenceSet_getString($this, $matchResult);
        if ($group !== null && ($stringIndex + jl_String_length($group) | 0) <= $matchResult.$rightBound0) {
            $i = 0;
            while (true) {
                if ($i >= jl_String_length($group)) {
                    jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter3, jl_String_length($group));
                    return $this.$next4.$matches($stringIndex + jl_String_length($group) | 0, $testString, $matchResult);
                }
                var$6 = jl_String_charAt($group, $i);
                var$7 = $stringIndex + $i | 0;
                if (var$6 != jl_String_charAt($testString, var$7) && jur_Pattern_getSupplement(jl_String_charAt($group, $i)) != jl_String_charAt($testString, var$7))
                    break;
                $i = $i + 1 | 0;
            }
            return (-1);
        }
        return (-1);
    }
    function jur_CIBackReferenceSet_setNext($this, $next) {
        $this.$next4 = $next;
    }
    function jur_CIBackReferenceSet_getString($this, $matchResult) {
        var var$2, var$3;
        var$2 = $this.$referencedGroup;
        var$3 = jur_MatchResultImpl_getStart($matchResult, var$2);
        var$2 = jur_MatchResultImpl_getEnd($matchResult, var$2);
        return (var$2 | var$3 | (var$2 - var$3 | 0)) >= 0 && var$2 <= jl_String_length($matchResult.$string3) ? jl_String_substring($matchResult.$string3, var$3, var$2) : null;
    }
    function jur_CIBackReferenceSet_getName($this) {
        var var$1, var$2;
        var$1 = $this.$groupIndex0;
        var$2 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$2);
        jl_StringBuilder_append0(jl_StringBuilder_append(var$2, $rt_s(711)), var$1);
        return jl_AbstractStringBuilder_toString(var$2);
    }
    function jur_CIBackReferenceSet_hasConsumed($this, $matchResult) {
        var $res;
        $res = !jur_MatchResultImpl_getConsumed($matchResult, $this.$consCounter3) ? 0 : 1;
        jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter3, (-1));
        return $res;
    }
    var jur_BackReferenceSet = $rt_classWithoutFields(jur_CIBackReferenceSet);
    function jur_BackReferenceSet__init_(var_0, var_1) {
        var var_2 = new jur_BackReferenceSet();
        jur_BackReferenceSet__init_0(var_2, var_0, var_1);
        return var_2;
    }
    function jur_BackReferenceSet__init_0($this, $groupIndex, $consCounter) {
        jur_CIBackReferenceSet__init_0($this, $groupIndex, $consCounter);
    }
    function jur_BackReferenceSet_matches($this, $stringIndex, $testString, $matchResult) {
        var $group, $shift;
        $group = jur_CIBackReferenceSet_getString($this, $matchResult);
        if ($group !== null && ($stringIndex + jl_String_length($group) | 0) <= $matchResult.$rightBound0) {
            $shift = !jl_String_startsWith($testString, $group, $stringIndex) ? (-1) : jl_String_length($group);
            if ($shift < 0)
                return (-1);
            jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter3, $shift);
            return $this.$next4.$matches($stringIndex + $shift | 0, $testString, $matchResult);
        }
        return (-1);
    }
    function jur_BackReferenceSet_find($this, $strIndex, $testString, $matchResult) {
        var $group, $strLength;
        $group = jur_CIBackReferenceSet_getString($this, $matchResult);
        $strLength = $matchResult.$leftBound0;
        if ($group !== null && ($strIndex + jl_String_length($group) | 0) <= $strLength) {
            while (true) {
                if ($strIndex > $strLength)
                    return (-1);
                $strIndex = jl_String_indexOf1($testString, $group, $strIndex);
                if ($strIndex < 0)
                    return (-1);
                if ($this.$next4.$matches($strIndex + jl_String_length($group) | 0, $testString, $matchResult) >= 0)
                    break;
                $strIndex = $strIndex + 1 | 0;
            }
            return $strIndex;
        }
        return (-1);
    }
    function jur_BackReferenceSet_findBack($this, $strIndex, $lastIndex, $testString, $matchResult) {
        var $group, var$6;
        $group = jur_CIBackReferenceSet_getString($this, $matchResult);
        if ($group === null)
            return (-1);
        a: {
            while (true) {
                if ($lastIndex < $strIndex)
                    return (-1);
                var$6 = jl_Math_min($lastIndex, jl_String_length($testString) - jl_String_length($group) | 0);
                b: {
                    c: while (true) {
                        if (var$6 < 0) {
                            var$6 = (-1);
                            break b;
                        }
                        $lastIndex = 0;
                        while (true) {
                            if ($lastIndex >= jl_String_length($group))
                                break c;
                            if (jl_String_charAt($testString, var$6 + $lastIndex | 0) != jl_String_charAt($group, $lastIndex))
                                break;
                            $lastIndex = $lastIndex + 1 | 0;
                        }
                        var$6 = var$6 + (-1) | 0;
                    }
                }
                if (var$6 < 0)
                    break a;
                if (var$6 < $strIndex)
                    break a;
                if ($this.$next4.$matches(var$6 + jl_String_length($group) | 0, $testString, $matchResult) >= 0)
                    break;
                $lastIndex = var$6 + (-1) | 0;
            }
            return var$6;
        }
        return (-1);
    }
    function jur_BackReferenceSet_first($this, $set) {
        return 1;
    }
    function jur_BackReferenceSet_getName($this) {
        var var$1, var$2;
        var$1 = $this.$groupIndex0;
        var$2 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$2);
        jl_StringBuilder_append0(jl_StringBuilder_append(var$2, $rt_s(712)), var$1);
        return jl_AbstractStringBuilder_toString(var$2);
    }
    function jur_UCIBackReferenceSet() {
        jur_CIBackReferenceSet.call(this);
        this.$groupIndex1 = 0;
    }
    function jur_UCIBackReferenceSet__init_(var_0, var_1) {
        var var_2 = new jur_UCIBackReferenceSet();
        jur_UCIBackReferenceSet__init_0(var_2, var_0, var_1);
        return var_2;
    }
    function jur_UCIBackReferenceSet__init_0($this, $groupIndex, $consCounter) {
        jur_CIBackReferenceSet__init_0($this, $groupIndex, $consCounter);
    }
    function jur_UCIBackReferenceSet_matches($this, $stringIndex, $testString, $matchResult) {
        var $group, $i;
        $group = jur_CIBackReferenceSet_getString($this, $matchResult);
        if ($group !== null && ($stringIndex + jl_String_length($group) | 0) <= $matchResult.$rightBound0) {
            $i = 0;
            while (true) {
                if ($i >= jl_String_length($group)) {
                    jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter3, jl_String_length($group));
                    return $this.$next4.$matches($stringIndex + jl_String_length($group) | 0, $testString, $matchResult);
                }
                if (jl_Character_toLowerCase(jl_Character_toUpperCase0(jl_String_charAt($group, $i))) != jl_Character_toLowerCase(jl_Character_toUpperCase0(jl_String_charAt($testString, $stringIndex + $i | 0))))
                    break;
                $i = $i + 1 | 0;
            }
            return (-1);
        }
        return (-1);
    }
    function jur_UCIBackReferenceSet_getName($this) {
        var var$1, var$2;
        var$1 = $this.$groupIndex1;
        var$2 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$2);
        jl_StringBuilder_append0(jl_StringBuilder_append(var$2, $rt_s(713)), var$1);
        return jl_AbstractStringBuilder_toString(var$2);
    }
    function jur_SequenceSet() {
        var a = this; jur_LeafSet.call(a);
        a.$string1 = null;
        a.$leftToRight = null;
        a.$rightToLeft = null;
    }
    function jur_SequenceSet_accepts($this, $strIndex, $testString) {
        return !jur_SequenceSet_startsWith($this, $testString, $strIndex) ? (-1) : $this.$charCount;
    }
    function jur_SequenceSet_find($this, $strIndex, $testString, $matchResult) {
        var $strLength, var$5, var$6;
        $strLength = $matchResult.$rightBound0;
        while (true) {
            if ($strIndex > $strLength)
                return (-1);
            var$5 = jl_String_charAt($this.$string1, $this.$charCount - 1 | 0);
            a: {
                while (true) {
                    var$6 = $this.$charCount;
                    if ($strIndex > ($strLength - var$6 | 0)) {
                        $strIndex = (-1);
                        break a;
                    }
                    var$6 = jl_String_charAt($testString, ($strIndex + var$6 | 0) - 1 | 0);
                    if (var$6 == var$5 && jur_SequenceSet_startsWith($this, $testString, $strIndex))
                        break;
                    $strIndex = $strIndex + jur_SequenceSet$IntHash_get($this.$leftToRight, var$6) | 0;
                }
            }
            if ($strIndex < 0)
                return (-1);
            if ($this.$next4.$matches($strIndex + $this.$charCount | 0, $testString, $matchResult) >= 0)
                break;
            $strIndex = $strIndex + 1 | 0;
        }
        return $strIndex;
    }
    function jur_SequenceSet_findBack($this, $strIndex, $lastIndex, $testString, $matchResult) {
        var var$5, var$6;
        while (true) {
            if ($lastIndex < $strIndex)
                return (-1);
            var$5 = jl_String_charAt($this.$string1, 0);
            var$6 = (jl_String_length($testString) - $lastIndex | 0) - $this.$charCount | 0;
            if (var$6 <= 0)
                $lastIndex = $lastIndex + var$6 | 0;
            a: {
                while (true) {
                    if ($lastIndex < $strIndex) {
                        $lastIndex = (-1);
                        break a;
                    }
                    var$6 = jl_String_charAt($testString, $lastIndex);
                    if (var$6 == var$5 && jur_SequenceSet_startsWith($this, $testString, $lastIndex))
                        break;
                    $lastIndex = $lastIndex - jur_SequenceSet$IntHash_get($this.$rightToLeft, var$6) | 0;
                }
            }
            if ($lastIndex < 0)
                return (-1);
            if ($this.$next4.$matches($lastIndex + $this.$charCount | 0, $testString, $matchResult) >= 0)
                break;
            $lastIndex = $lastIndex + (-1) | 0;
        }
        return $lastIndex;
    }
    function jur_SequenceSet_getName($this) {
        var var$1, var$2;
        var$1 = $this.$string1;
        var$2 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$2);
        jl_StringBuilder_append(jl_StringBuilder_append(var$2, $rt_s(714)), var$1);
        return jl_AbstractStringBuilder_toString(var$2);
    }
    function jur_SequenceSet_first($this, $set) {
        var var$2;
        if ($set instanceof jur_CharSet)
            return $set.$ch2 != jl_String_charAt($this.$string1, 0) ? 0 : 1;
        if ($set instanceof jur_RangeSet)
            return jur_RangeSet_accepts($set, 0, jl_String_substring($this.$string1, 0, 1)) <= 0 ? 0 : 1;
        if (!($set instanceof jur_SupplRangeSet)) {
            if (!($set instanceof jur_SupplCharSet))
                return 1;
            return jl_String_length($this.$string1) > 1 && $set.$ch1 == jl_Character_toCodePoint(jl_String_charAt($this.$string1, 0), jl_String_charAt($this.$string1, 1)) ? 1 : 0;
        }
        a: {
            b: {
                $set = $set;
                if (!$set.$contains0(jl_String_charAt($this.$string1, 0))) {
                    if (jl_String_length($this.$string1) <= 1)
                        break b;
                    if (!$set.$contains0(jl_Character_toCodePoint(jl_String_charAt($this.$string1, 0), jl_String_charAt($this.$string1, 1))))
                        break b;
                }
                var$2 = 1;
                break a;
            }
            var$2 = 0;
        }
        return var$2;
    }
    function jur_SequenceSet_startsWith($this, $str, $from) {
        var $i;
        $i = 0;
        while ($i < $this.$charCount) {
            if (jl_String_charAt($str, $i + $from | 0) != jl_String_charAt($this.$string1, $i))
                return 0;
            $i = $i + 1 | 0;
        }
        return 1;
    }
    function jur_UCISequenceSet() {
        jur_LeafSet.call(this);
        this.$string4 = null;
    }
    function jur_UCISequenceSet__init_(var_0) {
        var var_1 = new jur_UCISequenceSet();
        jur_UCISequenceSet__init_0(var_1, var_0);
        return var_1;
    }
    function jur_UCISequenceSet__init_0($this, $substring) {
        var $res, $i;
        jur_LeafSet__init_($this);
        $res = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($res);
        $i = 0;
        while ($i < $substring.$length0) {
            jl_AbstractStringBuilder_append($res, jl_Character_toLowerCase(jl_Character_toUpperCase0(jl_AbstractStringBuilder_charAt($substring, $i))));
            $i = $i + 1 | 0;
        }
        $this.$string4 = jl_AbstractStringBuilder_toString($res);
        $this.$charCount = $res.$length0;
    }
    function jur_UCISequenceSet_accepts($this, $strIndex, $testString) {
        var $i;
        $i = 0;
        while (true) {
            if ($i >= jl_String_length($this.$string4))
                return jl_String_length($this.$string4);
            if (jl_String_charAt($this.$string4, $i) != jl_Character_toLowerCase(jl_Character_toUpperCase0(jl_String_charAt($testString, $strIndex + $i | 0))))
                break;
            $i = $i + 1 | 0;
        }
        return (-1);
    }
    function jur_UCISequenceSet_getName($this) {
        var var$1, var$2;
        var$1 = $this.$string4;
        var$2 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$2);
        jl_StringBuilder_append(jl_StringBuilder_append(var$2, $rt_s(715)), var$1);
        return jl_AbstractStringBuilder_toString(var$2);
    }
    function jur_CISequenceSet() {
        jur_LeafSet.call(this);
        this.$string2 = null;
    }
    function jur_CISequenceSet_accepts($this, $strIndex, $testString) {
        var $i, var$4, var$5;
        $i = 0;
        while (true) {
            if ($i >= jl_String_length($this.$string2))
                return jl_String_length($this.$string2);
            var$4 = jl_String_charAt($this.$string2, $i);
            var$5 = $strIndex + $i | 0;
            if (var$4 != jl_String_charAt($testString, var$5) && jur_Pattern_getSupplement(jl_String_charAt($this.$string2, $i)) != jl_String_charAt($testString, var$5))
                break;
            $i = $i + 1 | 0;
        }
        return (-1);
    }
    function jur_CISequenceSet_getName($this) {
        var var$1, var$2;
        var$1 = $this.$string2;
        var$2 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$2);
        jl_StringBuilder_append(jl_StringBuilder_append(var$2, $rt_s(716)), var$1);
        return jl_AbstractStringBuilder_toString(var$2);
    }
    var otciu_CLDRHelper = $rt_classWithoutFields();
    var otciu_CLDRHelper_$$metadata$$10 = null;
    function otciu_CLDRHelper_getDefaultLocale$$create() {
        return {"value" : "en_GB"};
    }
    var jur_AbstractCharClass$PredefinedCharacterClasses = $rt_classWithoutFields();
    var jur_AbstractCharClass$PredefinedCharacterClasses_space = null;
    var jur_AbstractCharClass$PredefinedCharacterClasses_digit = null;
    var jur_AbstractCharClass$PredefinedCharacterClasses_contents = null;
    function jur_AbstractCharClass$PredefinedCharacterClasses_$callClinit() {
        jur_AbstractCharClass$PredefinedCharacterClasses_$callClinit = $rt_eraseClinit(jur_AbstractCharClass$PredefinedCharacterClasses);
        jur_AbstractCharClass$PredefinedCharacterClasses__clinit_();
    }
    function jur_AbstractCharClass$PredefinedCharacterClasses__clinit_() {
        jur_AbstractCharClass$PredefinedCharacterClasses_space = jur_AbstractCharClass$LazySpace__init_();
        jur_AbstractCharClass$PredefinedCharacterClasses_digit = jur_AbstractCharClass$LazyDigit__init_();
        jur_AbstractCharClass$PredefinedCharacterClasses_contents = $rt_createArrayFromData($rt_arraycls(jl_Object), [$rt_createArrayFromData(jl_Object, [$rt_s(717), jur_AbstractCharClass$LazyLower__init_()]), $rt_createArrayFromData(jl_Object, [$rt_s(718), jur_AbstractCharClass$LazyUpper__init_()]), $rt_createArrayFromData(jl_Object, [$rt_s(719), jur_AbstractCharClass$LazyASCII__init_()]), $rt_createArrayFromData(jl_Object, [$rt_s(720), jur_AbstractCharClass$LazyAlpha__init_()]), $rt_createArrayFromData(jl_Object,
        [$rt_s(721), jur_AbstractCharClass$PredefinedCharacterClasses_digit]), $rt_createArrayFromData(jl_Object, [$rt_s(722), jur_AbstractCharClass$LazyAlnum__init_()]), $rt_createArrayFromData(jl_Object, [$rt_s(723), jur_AbstractCharClass$LazyPunct__init_()]), $rt_createArrayFromData(jl_Object, [$rt_s(724), jur_AbstractCharClass$LazyGraph__init_()]), $rt_createArrayFromData(jl_Object, [$rt_s(725), jur_AbstractCharClass$LazyPrint__init_()]), $rt_createArrayFromData(jl_Object, [$rt_s(726), jur_AbstractCharClass$LazyBlank__init_()]),
        $rt_createArrayFromData(jl_Object, [$rt_s(727), jur_AbstractCharClass$LazyCntrl__init_()]), $rt_createArrayFromData(jl_Object, [$rt_s(728), jur_AbstractCharClass$LazyXDigit__init_()]), $rt_createArrayFromData(jl_Object, [$rt_s(729), jur_AbstractCharClass$LazyJavaLowerCase__init_()]), $rt_createArrayFromData(jl_Object, [$rt_s(730), jur_AbstractCharClass$LazyJavaUpperCase__init_()]), $rt_createArrayFromData(jl_Object, [$rt_s(731), jur_AbstractCharClass$LazyJavaWhitespace__init_()]), $rt_createArrayFromData(jl_Object,
        [$rt_s(732), jur_AbstractCharClass$LazyJavaMirrored__init_()]), $rt_createArrayFromData(jl_Object, [$rt_s(733), jur_AbstractCharClass$LazyJavaDefined__init_()]), $rt_createArrayFromData(jl_Object, [$rt_s(734), jur_AbstractCharClass$LazyJavaDigit__init_()]), $rt_createArrayFromData(jl_Object, [$rt_s(735), jur_AbstractCharClass$LazyJavaIdentifierIgnorable__init_()]), $rt_createArrayFromData(jl_Object, [$rt_s(736), jur_AbstractCharClass$LazyJavaISOControl__init_()]), $rt_createArrayFromData(jl_Object, [$rt_s(737),
        jur_AbstractCharClass$LazyJavaJavaIdentifierPart__init_()]), $rt_createArrayFromData(jl_Object, [$rt_s(738), jur_AbstractCharClass$LazyJavaJavaIdentifierStart__init_()]), $rt_createArrayFromData(jl_Object, [$rt_s(739), jur_AbstractCharClass$LazyJavaLetter__init_()]), $rt_createArrayFromData(jl_Object, [$rt_s(740), jur_AbstractCharClass$LazyJavaLetterOrDigit__init_()]), $rt_createArrayFromData(jl_Object, [$rt_s(741), jur_AbstractCharClass$LazyJavaSpaceChar__init_()]), $rt_createArrayFromData(jl_Object,
        [$rt_s(742), jur_AbstractCharClass$LazyJavaTitleCase__init_()]), $rt_createArrayFromData(jl_Object, [$rt_s(743), jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart__init_()]), $rt_createArrayFromData(jl_Object, [$rt_s(744), jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart__init_()]), $rt_createArrayFromData(jl_Object, [$rt_s(745), jur_AbstractCharClass$PredefinedCharacterClasses_space]), $rt_createArrayFromData(jl_Object, [$rt_s(746), jur_AbstractCharClass$LazyWord__init_()]), $rt_createArrayFromData(jl_Object,
        [$rt_s(747), jur_AbstractCharClass$LazyNonWord__init_()]), $rt_createArrayFromData(jl_Object, [$rt_s(748), jur_AbstractCharClass$PredefinedCharacterClasses_space]), $rt_createArrayFromData(jl_Object, [$rt_s(749), jur_AbstractCharClass$LazyNonSpace__init_()]), $rt_createArrayFromData(jl_Object, [$rt_s(750), jur_AbstractCharClass$PredefinedCharacterClasses_digit]), $rt_createArrayFromData(jl_Object, [$rt_s(751), jur_AbstractCharClass$LazyNonDigit__init_()]), $rt_createArrayFromData(jl_Object, [$rt_s(752),
        jur_AbstractCharClass$LazyRange__init_(0, 127)]), $rt_createArrayFromData(jl_Object, [$rt_s(753), jur_AbstractCharClass$LazyRange__init_(128, 255)]), $rt_createArrayFromData(jl_Object, [$rt_s(754), jur_AbstractCharClass$LazyRange__init_(256, 383)]), $rt_createArrayFromData(jl_Object, [$rt_s(755), jur_AbstractCharClass$LazyRange__init_(384, 591)]), $rt_createArrayFromData(jl_Object, [$rt_s(756), jur_AbstractCharClass$LazyRange__init_(592, 687)]), $rt_createArrayFromData(jl_Object, [$rt_s(757), jur_AbstractCharClass$LazyRange__init_(688,
        767)]), $rt_createArrayFromData(jl_Object, [$rt_s(758), jur_AbstractCharClass$LazyRange__init_(768, 879)]), $rt_createArrayFromData(jl_Object, [$rt_s(759), jur_AbstractCharClass$LazyRange__init_(880, 1023)]), $rt_createArrayFromData(jl_Object, [$rt_s(760), jur_AbstractCharClass$LazyRange__init_(1024, 1279)]), $rt_createArrayFromData(jl_Object, [$rt_s(761), jur_AbstractCharClass$LazyRange__init_(1280, 1327)]), $rt_createArrayFromData(jl_Object, [$rt_s(762), jur_AbstractCharClass$LazyRange__init_(1328,
        1423)]), $rt_createArrayFromData(jl_Object, [$rt_s(763), jur_AbstractCharClass$LazyRange__init_(1424, 1535)]), $rt_createArrayFromData(jl_Object, [$rt_s(764), jur_AbstractCharClass$LazyRange__init_(1536, 1791)]), $rt_createArrayFromData(jl_Object, [$rt_s(765), jur_AbstractCharClass$LazyRange__init_(1792, 1871)]), $rt_createArrayFromData(jl_Object, [$rt_s(766), jur_AbstractCharClass$LazyRange__init_(1872, 1919)]), $rt_createArrayFromData(jl_Object, [$rt_s(767), jur_AbstractCharClass$LazyRange__init_(1920,
        1983)]), $rt_createArrayFromData(jl_Object, [$rt_s(768), jur_AbstractCharClass$LazyRange__init_(2304, 2431)]), $rt_createArrayFromData(jl_Object, [$rt_s(769), jur_AbstractCharClass$LazyRange__init_(2432, 2559)]), $rt_createArrayFromData(jl_Object, [$rt_s(770), jur_AbstractCharClass$LazyRange__init_(2560, 2687)]), $rt_createArrayFromData(jl_Object, [$rt_s(771), jur_AbstractCharClass$LazyRange__init_(2688, 2815)]), $rt_createArrayFromData(jl_Object, [$rt_s(772), jur_AbstractCharClass$LazyRange__init_(2816,
        2943)]), $rt_createArrayFromData(jl_Object, [$rt_s(773), jur_AbstractCharClass$LazyRange__init_(2944, 3071)]), $rt_createArrayFromData(jl_Object, [$rt_s(774), jur_AbstractCharClass$LazyRange__init_(3072, 3199)]), $rt_createArrayFromData(jl_Object, [$rt_s(775), jur_AbstractCharClass$LazyRange__init_(3200, 3327)]), $rt_createArrayFromData(jl_Object, [$rt_s(776), jur_AbstractCharClass$LazyRange__init_(3328, 3455)]), $rt_createArrayFromData(jl_Object, [$rt_s(777), jur_AbstractCharClass$LazyRange__init_(3456,
        3583)]), $rt_createArrayFromData(jl_Object, [$rt_s(778), jur_AbstractCharClass$LazyRange__init_(3584, 3711)]), $rt_createArrayFromData(jl_Object, [$rt_s(779), jur_AbstractCharClass$LazyRange__init_(3712, 3839)]), $rt_createArrayFromData(jl_Object, [$rt_s(780), jur_AbstractCharClass$LazyRange__init_(3840, 4095)]), $rt_createArrayFromData(jl_Object, [$rt_s(781), jur_AbstractCharClass$LazyRange__init_(4096, 4255)]), $rt_createArrayFromData(jl_Object, [$rt_s(782), jur_AbstractCharClass$LazyRange__init_(4256,
        4351)]), $rt_createArrayFromData(jl_Object, [$rt_s(783), jur_AbstractCharClass$LazyRange__init_(4352, 4607)]), $rt_createArrayFromData(jl_Object, [$rt_s(784), jur_AbstractCharClass$LazyRange__init_(4608, 4991)]), $rt_createArrayFromData(jl_Object, [$rt_s(785), jur_AbstractCharClass$LazyRange__init_(4992, 5023)]), $rt_createArrayFromData(jl_Object, [$rt_s(786), jur_AbstractCharClass$LazyRange__init_(5024, 5119)]), $rt_createArrayFromData(jl_Object, [$rt_s(787), jur_AbstractCharClass$LazyRange__init_(5120,
        5759)]), $rt_createArrayFromData(jl_Object, [$rt_s(788), jur_AbstractCharClass$LazyRange__init_(5760, 5791)]), $rt_createArrayFromData(jl_Object, [$rt_s(789), jur_AbstractCharClass$LazyRange__init_(5792, 5887)]), $rt_createArrayFromData(jl_Object, [$rt_s(790), jur_AbstractCharClass$LazyRange__init_(5888, 5919)]), $rt_createArrayFromData(jl_Object, [$rt_s(791), jur_AbstractCharClass$LazyRange__init_(5920, 5951)]), $rt_createArrayFromData(jl_Object, [$rt_s(792), jur_AbstractCharClass$LazyRange__init_(5952,
        5983)]), $rt_createArrayFromData(jl_Object, [$rt_s(793), jur_AbstractCharClass$LazyRange__init_(5984, 6015)]), $rt_createArrayFromData(jl_Object, [$rt_s(794), jur_AbstractCharClass$LazyRange__init_(6016, 6143)]), $rt_createArrayFromData(jl_Object, [$rt_s(795), jur_AbstractCharClass$LazyRange__init_(6144, 6319)]), $rt_createArrayFromData(jl_Object, [$rt_s(796), jur_AbstractCharClass$LazyRange__init_(6400, 6479)]), $rt_createArrayFromData(jl_Object, [$rt_s(797), jur_AbstractCharClass$LazyRange__init_(6480,
        6527)]), $rt_createArrayFromData(jl_Object, [$rt_s(798), jur_AbstractCharClass$LazyRange__init_(6528, 6623)]), $rt_createArrayFromData(jl_Object, [$rt_s(799), jur_AbstractCharClass$LazyRange__init_(6624, 6655)]), $rt_createArrayFromData(jl_Object, [$rt_s(800), jur_AbstractCharClass$LazyRange__init_(6656, 6687)]), $rt_createArrayFromData(jl_Object, [$rt_s(801), jur_AbstractCharClass$LazyRange__init_(7424, 7551)]), $rt_createArrayFromData(jl_Object, [$rt_s(802), jur_AbstractCharClass$LazyRange__init_(7552,
        7615)]), $rt_createArrayFromData(jl_Object, [$rt_s(803), jur_AbstractCharClass$LazyRange__init_(7616, 7679)]), $rt_createArrayFromData(jl_Object, [$rt_s(804), jur_AbstractCharClass$LazyRange__init_(7680, 7935)]), $rt_createArrayFromData(jl_Object, [$rt_s(805), jur_AbstractCharClass$LazyRange__init_(7936, 8191)]), $rt_createArrayFromData(jl_Object, [$rt_s(806), jur_AbstractCharClass$LazyRange__init_(8192, 8303)]), $rt_createArrayFromData(jl_Object, [$rt_s(807), jur_AbstractCharClass$LazyRange__init_(8304,
        8351)]), $rt_createArrayFromData(jl_Object, [$rt_s(808), jur_AbstractCharClass$LazyRange__init_(8352, 8399)]), $rt_createArrayFromData(jl_Object, [$rt_s(809), jur_AbstractCharClass$LazyRange__init_(8400, 8447)]), $rt_createArrayFromData(jl_Object, [$rt_s(810), jur_AbstractCharClass$LazyRange__init_(8448, 8527)]), $rt_createArrayFromData(jl_Object, [$rt_s(811), jur_AbstractCharClass$LazyRange__init_(8528, 8591)]), $rt_createArrayFromData(jl_Object, [$rt_s(812), jur_AbstractCharClass$LazyRange__init_(8592,
        8703)]), $rt_createArrayFromData(jl_Object, [$rt_s(813), jur_AbstractCharClass$LazyRange__init_(8704, 8959)]), $rt_createArrayFromData(jl_Object, [$rt_s(814), jur_AbstractCharClass$LazyRange__init_(8960, 9215)]), $rt_createArrayFromData(jl_Object, [$rt_s(815), jur_AbstractCharClass$LazyRange__init_(9216, 9279)]), $rt_createArrayFromData(jl_Object, [$rt_s(816), jur_AbstractCharClass$LazyRange__init_(9280, 9311)]), $rt_createArrayFromData(jl_Object, [$rt_s(817), jur_AbstractCharClass$LazyRange__init_(9312,
        9471)]), $rt_createArrayFromData(jl_Object, [$rt_s(818), jur_AbstractCharClass$LazyRange__init_(9472, 9599)]), $rt_createArrayFromData(jl_Object, [$rt_s(819), jur_AbstractCharClass$LazyRange__init_(9600, 9631)]), $rt_createArrayFromData(jl_Object, [$rt_s(820), jur_AbstractCharClass$LazyRange__init_(9632, 9727)]), $rt_createArrayFromData(jl_Object, [$rt_s(821), jur_AbstractCharClass$LazyRange__init_(9728, 9983)]), $rt_createArrayFromData(jl_Object, [$rt_s(822), jur_AbstractCharClass$LazyRange__init_(9984,
        10175)]), $rt_createArrayFromData(jl_Object, [$rt_s(823), jur_AbstractCharClass$LazyRange__init_(10176, 10223)]), $rt_createArrayFromData(jl_Object, [$rt_s(824), jur_AbstractCharClass$LazyRange__init_(10224, 10239)]), $rt_createArrayFromData(jl_Object, [$rt_s(825), jur_AbstractCharClass$LazyRange__init_(10240, 10495)]), $rt_createArrayFromData(jl_Object, [$rt_s(826), jur_AbstractCharClass$LazyRange__init_(10496, 10623)]), $rt_createArrayFromData(jl_Object, [$rt_s(827), jur_AbstractCharClass$LazyRange__init_(10624,
        10751)]), $rt_createArrayFromData(jl_Object, [$rt_s(828), jur_AbstractCharClass$LazyRange__init_(10752, 11007)]), $rt_createArrayFromData(jl_Object, [$rt_s(829), jur_AbstractCharClass$LazyRange__init_(11008, 11263)]), $rt_createArrayFromData(jl_Object, [$rt_s(830), jur_AbstractCharClass$LazyRange__init_(11264, 11359)]), $rt_createArrayFromData(jl_Object, [$rt_s(831), jur_AbstractCharClass$LazyRange__init_(11392, 11519)]), $rt_createArrayFromData(jl_Object, [$rt_s(832), jur_AbstractCharClass$LazyRange__init_(11520,
        11567)]), $rt_createArrayFromData(jl_Object, [$rt_s(833), jur_AbstractCharClass$LazyRange__init_(11568, 11647)]), $rt_createArrayFromData(jl_Object, [$rt_s(834), jur_AbstractCharClass$LazyRange__init_(11648, 11743)]), $rt_createArrayFromData(jl_Object, [$rt_s(835), jur_AbstractCharClass$LazyRange__init_(11776, 11903)]), $rt_createArrayFromData(jl_Object, [$rt_s(836), jur_AbstractCharClass$LazyRange__init_(11904, 12031)]), $rt_createArrayFromData(jl_Object, [$rt_s(837), jur_AbstractCharClass$LazyRange__init_(12032,
        12255)]), $rt_createArrayFromData(jl_Object, [$rt_s(838), jur_AbstractCharClass$LazyRange__init_(12272, 12287)]), $rt_createArrayFromData(jl_Object, [$rt_s(839), jur_AbstractCharClass$LazyRange__init_(12288, 12351)]), $rt_createArrayFromData(jl_Object, [$rt_s(840), jur_AbstractCharClass$LazyRange__init_(12352, 12447)]), $rt_createArrayFromData(jl_Object, [$rt_s(841), jur_AbstractCharClass$LazyRange__init_(12448, 12543)]), $rt_createArrayFromData(jl_Object, [$rt_s(842), jur_AbstractCharClass$LazyRange__init_(12544,
        12591)]), $rt_createArrayFromData(jl_Object, [$rt_s(843), jur_AbstractCharClass$LazyRange__init_(12592, 12687)]), $rt_createArrayFromData(jl_Object, [$rt_s(844), jur_AbstractCharClass$LazyRange__init_(12688, 12703)]), $rt_createArrayFromData(jl_Object, [$rt_s(845), jur_AbstractCharClass$LazyRange__init_(12704, 12735)]), $rt_createArrayFromData(jl_Object, [$rt_s(846), jur_AbstractCharClass$LazyRange__init_(12736, 12783)]), $rt_createArrayFromData(jl_Object, [$rt_s(847), jur_AbstractCharClass$LazyRange__init_(12784,
        12799)]), $rt_createArrayFromData(jl_Object, [$rt_s(848), jur_AbstractCharClass$LazyRange__init_(12800, 13055)]), $rt_createArrayFromData(jl_Object, [$rt_s(849), jur_AbstractCharClass$LazyRange__init_(13056, 13311)]), $rt_createArrayFromData(jl_Object, [$rt_s(850), jur_AbstractCharClass$LazyRange__init_(13312, 19893)]), $rt_createArrayFromData(jl_Object, [$rt_s(851), jur_AbstractCharClass$LazyRange__init_(19904, 19967)]), $rt_createArrayFromData(jl_Object, [$rt_s(852), jur_AbstractCharClass$LazyRange__init_(19968,
        40959)]), $rt_createArrayFromData(jl_Object, [$rt_s(853), jur_AbstractCharClass$LazyRange__init_(40960, 42127)]), $rt_createArrayFromData(jl_Object, [$rt_s(854), jur_AbstractCharClass$LazyRange__init_(42128, 42191)]), $rt_createArrayFromData(jl_Object, [$rt_s(855), jur_AbstractCharClass$LazyRange__init_(42752, 42783)]), $rt_createArrayFromData(jl_Object, [$rt_s(856), jur_AbstractCharClass$LazyRange__init_(43008, 43055)]), $rt_createArrayFromData(jl_Object, [$rt_s(857), jur_AbstractCharClass$LazyRange__init_(44032,
        55203)]), $rt_createArrayFromData(jl_Object, [$rt_s(858), jur_AbstractCharClass$LazyRange__init_(55296, 56191)]), $rt_createArrayFromData(jl_Object, [$rt_s(859), jur_AbstractCharClass$LazyRange__init_(56192, 56319)]), $rt_createArrayFromData(jl_Object, [$rt_s(860), jur_AbstractCharClass$LazyRange__init_(56320, 57343)]), $rt_createArrayFromData(jl_Object, [$rt_s(861), jur_AbstractCharClass$LazyRange__init_(57344, 63743)]), $rt_createArrayFromData(jl_Object, [$rt_s(862), jur_AbstractCharClass$LazyRange__init_(63744,
        64255)]), $rt_createArrayFromData(jl_Object, [$rt_s(863), jur_AbstractCharClass$LazyRange__init_(64256, 64335)]), $rt_createArrayFromData(jl_Object, [$rt_s(864), jur_AbstractCharClass$LazyRange__init_(64336, 65023)]), $rt_createArrayFromData(jl_Object, [$rt_s(865), jur_AbstractCharClass$LazyRange__init_(65024, 65039)]), $rt_createArrayFromData(jl_Object, [$rt_s(866), jur_AbstractCharClass$LazyRange__init_(65040, 65055)]), $rt_createArrayFromData(jl_Object, [$rt_s(867), jur_AbstractCharClass$LazyRange__init_(65056,
        65071)]), $rt_createArrayFromData(jl_Object, [$rt_s(868), jur_AbstractCharClass$LazyRange__init_(65072, 65103)]), $rt_createArrayFromData(jl_Object, [$rt_s(869), jur_AbstractCharClass$LazyRange__init_(65104, 65135)]), $rt_createArrayFromData(jl_Object, [$rt_s(870), jur_AbstractCharClass$LazyRange__init_(65136, 65279)]), $rt_createArrayFromData(jl_Object, [$rt_s(871), jur_AbstractCharClass$LazyRange__init_(65280, 65519)]), $rt_createArrayFromData(jl_Object, [$rt_s(872), jur_AbstractCharClass$LazyRange__init_(0,
        1114111)]), $rt_createArrayFromData(jl_Object, [$rt_s(873), jur_AbstractCharClass$LazySpecialsBlock__init_()]), $rt_createArrayFromData(jl_Object, [$rt_s(874), jur_AbstractCharClass$LazyCategory__init_(0, 1)]), $rt_createArrayFromData(jl_Object, [$rt_s(875), jur_AbstractCharClass$LazyCategoryScope__init_(62, 1)]), $rt_createArrayFromData(jl_Object, [$rt_s(876), jur_AbstractCharClass$LazyCategory__init_(1, 1)]), $rt_createArrayFromData(jl_Object, [$rt_s(877), jur_AbstractCharClass$LazyCategory__init_(2,
        1)]), $rt_createArrayFromData(jl_Object, [$rt_s(878), jur_AbstractCharClass$LazyCategory__init_(3, 0)]), $rt_createArrayFromData(jl_Object, [$rt_s(879), jur_AbstractCharClass$LazyCategory__init_(4, 0)]), $rt_createArrayFromData(jl_Object, [$rt_s(880), jur_AbstractCharClass$LazyCategory__init_(5, 1)]), $rt_createArrayFromData(jl_Object, [$rt_s(881), jur_AbstractCharClass$LazyCategoryScope__init_(448, 1)]), $rt_createArrayFromData(jl_Object, [$rt_s(882), jur_AbstractCharClass$LazyCategory__init_(6, 1)]),
        $rt_createArrayFromData(jl_Object, [$rt_s(883), jur_AbstractCharClass$LazyCategory__init_(7, 0)]), $rt_createArrayFromData(jl_Object, [$rt_s(884), jur_AbstractCharClass$LazyCategory__init_(8, 1)]), $rt_createArrayFromData(jl_Object, [$rt_s(885), jur_AbstractCharClass$LazyCategoryScope__init_(3584, 1)]), $rt_createArrayFromData(jl_Object, [$rt_s(886), jur_AbstractCharClass$LazyCategory__init_(9, 1)]), $rt_createArrayFromData(jl_Object, [$rt_s(887), jur_AbstractCharClass$LazyCategory__init_(10, 1)]), $rt_createArrayFromData(jl_Object,
        [$rt_s(888), jur_AbstractCharClass$LazyCategory__init_(11, 1)]), $rt_createArrayFromData(jl_Object, [$rt_s(889), jur_AbstractCharClass$LazyCategoryScope__init_(28672, 0)]), $rt_createArrayFromData(jl_Object, [$rt_s(890), jur_AbstractCharClass$LazyCategory__init_(12, 0)]), $rt_createArrayFromData(jl_Object, [$rt_s(891), jur_AbstractCharClass$LazyCategory__init_(13, 0)]), $rt_createArrayFromData(jl_Object, [$rt_s(892), jur_AbstractCharClass$LazyCategory__init_(14, 0)]), $rt_createArrayFromData(jl_Object,
        [$rt_s(893), jur_AbstractCharClass$LazyCategoryScope__init_0(983040, 1, 1)]), $rt_createArrayFromData(jl_Object, [$rt_s(894), jur_AbstractCharClass$LazyCategory__init_(15, 0)]), $rt_createArrayFromData(jl_Object, [$rt_s(895), jur_AbstractCharClass$LazyCategory__init_(16, 1)]), $rt_createArrayFromData(jl_Object, [$rt_s(896), jur_AbstractCharClass$LazyCategory__init_(18, 1)]), $rt_createArrayFromData(jl_Object, [$rt_s(897), jur_AbstractCharClass$LazyCategory__init_0(19, 0, 1)]), $rt_createArrayFromData(jl_Object,
        [$rt_s(898), jur_AbstractCharClass$LazyCategoryScope__init_(1643118592, 1)]), $rt_createArrayFromData(jl_Object, [$rt_s(899), jur_AbstractCharClass$LazyCategory__init_(20, 0)]), $rt_createArrayFromData(jl_Object, [$rt_s(900), jur_AbstractCharClass$LazyCategory__init_(21, 0)]), $rt_createArrayFromData(jl_Object, [$rt_s(901), jur_AbstractCharClass$LazyCategory__init_(22, 0)]), $rt_createArrayFromData(jl_Object, [$rt_s(902), jur_AbstractCharClass$LazyCategory__init_(23, 0)]), $rt_createArrayFromData(jl_Object,
        [$rt_s(903), jur_AbstractCharClass$LazyCategory__init_(24, 1)]), $rt_createArrayFromData(jl_Object, [$rt_s(904), jur_AbstractCharClass$LazyCategoryScope__init_(2113929216, 1)]), $rt_createArrayFromData(jl_Object, [$rt_s(905), jur_AbstractCharClass$LazyCategory__init_(25, 1)]), $rt_createArrayFromData(jl_Object, [$rt_s(906), jur_AbstractCharClass$LazyCategory__init_(26, 0)]), $rt_createArrayFromData(jl_Object, [$rt_s(907), jur_AbstractCharClass$LazyCategory__init_(27, 0)]), $rt_createArrayFromData(jl_Object,
        [$rt_s(908), jur_AbstractCharClass$LazyCategory__init_(28, 1)]), $rt_createArrayFromData(jl_Object, [$rt_s(909), jur_AbstractCharClass$LazyCategory__init_(29, 0)]), $rt_createArrayFromData(jl_Object, [$rt_s(910), jur_AbstractCharClass$LazyCategory__init_(30, 0)])]);
    }
    function jur_UCISupplCharSet() {
        jur_LeafSet.call(this);
        this.$ch0 = 0;
    }
    function jur_UCISupplCharSet_accepts($this, $strIndex, $testString) {
        var $low, $high;
        $low = $strIndex + 1 | 0;
        $high = jl_String_charAt($testString, $strIndex);
        $low = jl_String_charAt($testString, $low);
        return $this.$ch0 != jl_Character_toLowerCase0(jl_Character_toUpperCase(jl_Character_toCodePoint($high, $low))) ? (-1) : 2;
    }
    function jur_UCISupplCharSet_getName($this) {
        var var$1, var$2;
        var$1 = jl_String__init_(jl_Character_toChars($this.$ch0));
        var$2 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$2);
        jl_StringBuilder_append(jl_StringBuilder_append(var$2, $rt_s(697)), var$1);
        return jl_AbstractStringBuilder_toString(var$2);
    }
    function jur_LowSurrogateCharSet() {
        jur_JointSet.call(this);
        this.$low0 = 0;
    }
    function jur_LowSurrogateCharSet__init_(var_0) {
        var var_1 = new jur_LowSurrogateCharSet();
        jur_LowSurrogateCharSet__init_0(var_1, var_0);
        return var_1;
    }
    function jur_LowSurrogateCharSet__init_0($this, $low) {
        jur_AbstractSet__init_($this);
        $this.$low0 = $low;
    }
    function jur_LowSurrogateCharSet_setNext($this, $next) {
        $this.$next4 = $next;
    }
    function jur_LowSurrogateCharSet_matches($this, $stringIndex, $testString, $matchResult) {
        var var$4, $low;
        var$4 = $stringIndex + 1 | 0;
        if (var$4 > $matchResult.$rightBound0) {
            $matchResult.$hitEnd = 1;
            return (-1);
        }
        $low = jl_String_charAt($testString, $stringIndex);
        if ($stringIndex > $matchResult.$leftBound0 && jl_Character_isHighSurrogate(jl_String_charAt($testString, $stringIndex - 1 | 0)))
            return (-1);
        if ($this.$low0 != $low)
            return (-1);
        return $this.$next4.$matches(var$4, $testString, $matchResult);
    }
    function jur_LowSurrogateCharSet_find($this, $strIndex, $testStr, $matchResult) {
        var $startStr, $strLength, var$6, var$7;
        if (!($testStr instanceof jl_String))
            return jur_AbstractSet_find($this, $strIndex, $testStr, $matchResult);
        $startStr = $matchResult.$leftBound0;
        $strLength = $matchResult.$rightBound0;
        while (true) {
            if ($strIndex >= $strLength)
                return (-1);
            var$6 = jl_String_indexOf($testStr, $this.$low0, $strIndex);
            if (var$6 < 0)
                return (-1);
            if (var$6 > $startStr && jl_Character_isHighSurrogate(jl_String_charAt($testStr, var$6 - 1 | 0))) {
                $strIndex = var$6 + 1 | 0;
                continue;
            }
            var$7 = $this.$next4;
            $strIndex = var$6 + 1 | 0;
            if (var$7.$matches($strIndex, $testStr, $matchResult) >= 0)
                break;
        }
        return var$6;
    }
    function jur_LowSurrogateCharSet_findBack($this, $strIndex, $lastIndex, $testStr, $matchResult) {
        var $startStr, var$6;
        if (!($testStr instanceof jl_String))
            return jur_AbstractSet_findBack($this, $strIndex, $lastIndex, $testStr, $matchResult);
        $startStr = $matchResult.$leftBound0;
        a: {
            while (true) {
                if ($lastIndex < $strIndex)
                    return (-1);
                var$6 = jl_String_lastIndexOf0($testStr, $this.$low0, $lastIndex);
                if (var$6 < 0)
                    break a;
                if (var$6 < $strIndex)
                    break a;
                if (var$6 > $startStr && jl_Character_isHighSurrogate(jl_String_charAt($testStr, var$6 - 1 | 0))) {
                    $lastIndex = var$6 + (-2) | 0;
                    continue;
                }
                if ($this.$next4.$matches(var$6 + 1 | 0, $testStr, $matchResult) >= 0)
                    break;
                $lastIndex = var$6 + (-1) | 0;
            }
            return var$6;
        }
        return (-1);
    }
    function jur_LowSurrogateCharSet_getName($this) {
        var var$1, var$2;
        var$1 = $this.$low0;
        var$2 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$2);
        jl_AbstractStringBuilder_append(var$2, var$1);
        return jl_AbstractStringBuilder_toString(var$2);
    }
    function jur_LowSurrogateCharSet_first($this, $set) {
        if ($set instanceof jur_CharSet)
            return 0;
        if ($set instanceof jur_RangeSet)
            return 0;
        if ($set instanceof jur_SupplRangeSet)
            return 0;
        if ($set instanceof jur_SupplCharSet)
            return 0;
        if ($set instanceof jur_HighSurrogateCharSet)
            return 0;
        if (!($set instanceof jur_LowSurrogateCharSet))
            return 1;
        return $set.$low0 != $this.$low0 ? 0 : 1;
    }
    function jur_LowSurrogateCharSet_hasConsumed($this, $matchResult) {
        return 1;
    }
    function jur_HighSurrogateCharSet() {
        jur_JointSet.call(this);
        this.$high0 = 0;
    }
    function jur_HighSurrogateCharSet__init_(var_0) {
        var var_1 = new jur_HighSurrogateCharSet();
        jur_HighSurrogateCharSet__init_0(var_1, var_0);
        return var_1;
    }
    function jur_HighSurrogateCharSet__init_0($this, $high) {
        jur_AbstractSet__init_($this);
        $this.$high0 = $high;
    }
    function jur_HighSurrogateCharSet_setNext($this, $next) {
        $this.$next4 = $next;
    }
    function jur_HighSurrogateCharSet_matches($this, $stringIndex, $testString, $matchResult) {
        var $strLength, var$5, $low, $high;
        $strLength = $matchResult.$rightBound0;
        var$5 = $stringIndex + 1 | 0;
        $low = $rt_compare(var$5, $strLength);
        if ($low > 0) {
            $matchResult.$hitEnd = 1;
            return (-1);
        }
        $high = jl_String_charAt($testString, $stringIndex);
        if ($low < 0 && jl_Character_isLowSurrogate(jl_String_charAt($testString, var$5)))
            return (-1);
        if ($this.$high0 != $high)
            return (-1);
        return $this.$next4.$matches(var$5, $testString, $matchResult);
    }
    function jur_HighSurrogateCharSet_find($this, $strIndex, $testStr, $matchResult) {
        var $strLength, var$5;
        if (!($testStr instanceof jl_String))
            return jur_AbstractSet_find($this, $strIndex, $testStr, $matchResult);
        $strLength = $matchResult.$rightBound0;
        while (true) {
            if ($strIndex >= $strLength)
                return (-1);
            var$5 = jl_String_indexOf($testStr, $this.$high0, $strIndex);
            if (var$5 < 0)
                return (-1);
            $strIndex = var$5 + 1 | 0;
            if ($strIndex < $strLength && jl_Character_isLowSurrogate(jl_String_charAt($testStr, $strIndex))) {
                $strIndex = var$5 + 2 | 0;
                continue;
            }
            if ($this.$next4.$matches($strIndex, $testStr, $matchResult) >= 0)
                break;
        }
        return var$5;
    }
    function jur_HighSurrogateCharSet_findBack($this, $strIndex, $lastIndex, $testStr, $matchResult) {
        var $strLength, var$6;
        if (!($testStr instanceof jl_String))
            return jur_AbstractSet_findBack($this, $strIndex, $lastIndex, $testStr, $matchResult);
        $strLength = $matchResult.$rightBound0;
        a: {
            while (true) {
                if ($lastIndex < $strIndex)
                    return (-1);
                var$6 = jl_String_lastIndexOf0($testStr, $this.$high0, $lastIndex);
                if (var$6 < 0)
                    break a;
                if (var$6 < $strIndex)
                    break a;
                $lastIndex = var$6 + 1 | 0;
                if ($lastIndex < $strLength && jl_Character_isLowSurrogate(jl_String_charAt($testStr, $lastIndex))) {
                    $lastIndex = var$6 + (-1) | 0;
                    continue;
                }
                if ($this.$next4.$matches($lastIndex, $testStr, $matchResult) >= 0)
                    break;
                $lastIndex = var$6 + (-1) | 0;
            }
            return var$6;
        }
        return (-1);
    }
    function jur_HighSurrogateCharSet_getName($this) {
        var var$1, var$2;
        var$1 = $this.$high0;
        var$2 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$2);
        jl_AbstractStringBuilder_append(var$2, var$1);
        return jl_AbstractStringBuilder_toString(var$2);
    }
    function jur_HighSurrogateCharSet_first($this, $set) {
        if ($set instanceof jur_CharSet)
            return 0;
        if ($set instanceof jur_RangeSet)
            return 0;
        if ($set instanceof jur_SupplRangeSet)
            return 0;
        if ($set instanceof jur_SupplCharSet)
            return 0;
        if ($set instanceof jur_LowSurrogateCharSet)
            return 0;
        if (!($set instanceof jur_HighSurrogateCharSet))
            return 1;
        return $set.$high0 != $this.$high0 ? 0 : 1;
    }
    function jur_HighSurrogateCharSet_hasConsumed($this, $matchResult) {
        return 1;
    }
    function jur_SupplCharSet() {
        var a = this; jur_LeafSet.call(a);
        a.$high = 0;
        a.$low = 0;
        a.$ch1 = 0;
    }
    function jur_SupplCharSet_accepts($this, $strIndex, $testString) {
        var $low, $high;
        $low = $strIndex + 1 | 0;
        $high = jl_String_charAt($testString, $strIndex);
        $low = jl_String_charAt($testString, $low);
        return $this.$high == $high && $this.$low == $low ? 2 : (-1);
    }
    function jur_SupplCharSet_find($this, $strIndex, $testStr, $matchResult) {
        var $strLength, $ch;
        if (!($testStr instanceof jl_String))
            return jur_AbstractSet_find($this, $strIndex, $testStr, $matchResult);
        $strLength = $matchResult.$rightBound0;
        while ($strIndex < $strLength) {
            $strIndex = jl_String_indexOf($testStr, $this.$high, $strIndex);
            if ($strIndex < 0)
                return (-1);
            $strIndex = $strIndex + 1 | 0;
            if ($strIndex >= $strLength)
                continue;
            $ch = jl_String_charAt($testStr, $strIndex);
            if ($this.$low == $ch && $this.$next4.$matches($strIndex + 1 | 0, $testStr, $matchResult) >= 0)
                return $strIndex + (-1) | 0;
            $strIndex = $strIndex + 1 | 0;
        }
        return (-1);
    }
    function jur_SupplCharSet_findBack($this, $strIndex, $lastIndex, $testStr, $matchResult) {
        var var$5;
        if (!($testStr instanceof jl_String))
            return jur_AbstractSet_findBack($this, $strIndex, $lastIndex, $testStr, $matchResult);
        a: {
            while (true) {
                if ($lastIndex < $strIndex)
                    return (-1);
                var$5 = jl_String_lastIndexOf0($testStr, $this.$low, $lastIndex) + (-1) | 0;
                if (var$5 < 0)
                    break a;
                if (var$5 < $strIndex)
                    break a;
                if ($this.$high == jl_String_charAt($testStr, var$5) && $this.$next4.$matches(var$5 + 2 | 0, $testStr, $matchResult) >= 0)
                    break;
                $lastIndex = var$5 + (-1) | 0;
            }
            return var$5;
        }
        return (-1);
    }
    function jur_SupplCharSet_getName($this) {
        var var$1, var$2, var$3;
        var$1 = $this.$high;
        var$2 = $this.$low;
        var$3 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$3);
        jl_AbstractStringBuilder_append(var$3, var$1);
        jl_AbstractStringBuilder_append(var$3, var$2);
        return jl_AbstractStringBuilder_toString(var$3);
    }
    function jur_SupplCharSet_first($this, $set) {
        if ($set instanceof jur_SupplCharSet)
            return $set.$ch1 != $this.$ch1 ? 0 : 1;
        if ($set instanceof jur_SupplRangeSet)
            return $set.$contains0($this.$ch1);
        if ($set instanceof jur_CharSet)
            return 0;
        if (!($set instanceof jur_RangeSet))
            return 1;
        return 0;
    }
    var jur_AbstractLineTerminator$1 = $rt_classWithoutFields(jur_AbstractLineTerminator);
    function jur_AbstractLineTerminator$1_isLineTerminator($this, $ch) {
        return $ch != 10 ? 0 : 1;
    }
    function jur_AbstractLineTerminator$1_isAfterLineTerminator($this, $ch, $ch2) {
        return $ch != 10 ? 0 : 1;
    }
    var jur_AbstractLineTerminator$2 = $rt_classWithoutFields(jur_AbstractLineTerminator);
    function jur_AbstractLineTerminator$2_isLineTerminator($this, $ch) {
        return $ch != 10 && $ch != 13 && $ch != 133 && ($ch | 1) != 8233 ? 0 : 1;
    }
    function jur_AbstractLineTerminator$2_isAfterLineTerminator($this, $ch, $ch2) {
        a: {
            b: {
                if ($ch != 10 && $ch != 133 && ($ch | 1) != 8233) {
                    if ($ch != 13)
                        break b;
                    if ($ch2 == 10)
                        break b;
                }
                $ch = 1;
                break a;
            }
            $ch = 0;
        }
        return $ch;
    }
    function jur_SequenceSet$IntHash() {
        var a = this; jl_Object.call(a);
        a.$table = null;
        a.$values8 = null;
        a.$mask = 0;
        a.$size2 = 0;
    }
    function jur_SequenceSet$IntHash__init_(var_0) {
        var var_1 = new jur_SequenceSet$IntHash();
        jur_SequenceSet$IntHash__init_0(var_1, var_0);
        return var_1;
    }
    function jur_SequenceSet$IntHash__init_0($this, $size) {
        var var$2, var$3;
        while (true) {
            var$2 = $this.$mask;
            if ($size < var$2)
                break;
            $this.$mask = var$2 << 1 | 1;
        }
        var$3 = var$2 << 1 | 1;
        $this.$mask = var$3;
        var$3 = var$3 + 1 | 0;
        $this.$table = $rt_createIntArray(var$3);
        $this.$values8 = $rt_createIntArray(var$3);
        $this.$size2 = $size;
    }
    function jur_SequenceSet$IntHash_put($this, $key, $value) {
        var $i, var$4, $hashCode, var$6;
        $i = 0;
        var$4 = $this.$mask;
        $hashCode = $key & var$4;
        while (true) {
            var$6 = $this.$table.data;
            if (!var$6[$hashCode])
                break;
            if (var$6[$hashCode] == $key)
                break;
            $i = ($i + 1 | 0) & var$4;
            $hashCode = ($hashCode + $i | 0) & var$4;
        }
        var$6[$hashCode] = $key;
        $this.$values8.data[$hashCode] = $value;
    }
    function jur_SequenceSet$IntHash_get($this, $key) {
        var var$2, $hashCode, $i, $storedKey;
        var$2 = $this.$mask;
        $hashCode = $key & var$2;
        $i = 0;
        while (true) {
            $storedKey = $this.$table.data[$hashCode];
            if (!$storedKey)
                break;
            if ($storedKey == $key)
                return $this.$values8.data[$hashCode];
            $i = ($i + 1 | 0) & var$2;
            $hashCode = ($hashCode + $i | 0) & var$2;
        }
        return $this.$size2;
    }
    var jur_IntHash = $rt_classWithoutFields();
    var jur_AbstractCharClass$LazySpace = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass);
    function jur_AbstractCharClass$LazySpace__init_() {
        var var_0 = new jur_AbstractCharClass$LazySpace();
        jur_AbstractCharClass$LazySpace__init_0(var_0);
        return var_0;
    }
    function jur_AbstractCharClass$LazySpace__init_0($this) {}
    function jur_AbstractCharClass$LazySpace_computeValue($this) {
        return jur_CharClass_add(jur_CharClass_add0(jur_CharClass__init_0(), 9, 13), 32);
    }
    var jur_AbstractCharClass$LazyDigit = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass);
    function jur_AbstractCharClass$LazyDigit__init_() {
        var var_0 = new jur_AbstractCharClass$LazyDigit();
        jur_AbstractCharClass$LazyDigit__init_0(var_0);
        return var_0;
    }
    function jur_AbstractCharClass$LazyDigit__init_0($this) {}
    function jur_AbstractCharClass$LazyDigit_computeValue($this) {
        return jur_CharClass_add0(jur_CharClass__init_0(), 48, 57);
    }
    var jur_AbstractCharClass$LazyLower = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass);
    function jur_AbstractCharClass$LazyLower__init_() {
        var var_0 = new jur_AbstractCharClass$LazyLower();
        jur_AbstractCharClass$LazyLower__init_0(var_0);
        return var_0;
    }
    function jur_AbstractCharClass$LazyLower__init_0($this) {}
    function jur_AbstractCharClass$LazyLower_computeValue($this) {
        return jur_CharClass_add0(jur_CharClass__init_0(), 97, 122);
    }
    var jur_AbstractCharClass$LazyUpper = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass);
    function jur_AbstractCharClass$LazyUpper__init_() {
        var var_0 = new jur_AbstractCharClass$LazyUpper();
        jur_AbstractCharClass$LazyUpper__init_0(var_0);
        return var_0;
    }
    function jur_AbstractCharClass$LazyUpper__init_0($this) {}
    function jur_AbstractCharClass$LazyUpper_computeValue($this) {
        return jur_CharClass_add0(jur_CharClass__init_0(), 65, 90);
    }
    var jur_AbstractCharClass$LazyASCII = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass);
    function jur_AbstractCharClass$LazyASCII__init_() {
        var var_0 = new jur_AbstractCharClass$LazyASCII();
        jur_AbstractCharClass$LazyASCII__init_0(var_0);
        return var_0;
    }
    function jur_AbstractCharClass$LazyASCII__init_0($this) {}
    function jur_AbstractCharClass$LazyASCII_computeValue($this) {
        return jur_CharClass_add0(jur_CharClass__init_0(), 0, 127);
    }
    var jur_AbstractCharClass$LazyAlpha = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass);
    function jur_AbstractCharClass$LazyAlpha__init_() {
        var var_0 = new jur_AbstractCharClass$LazyAlpha();
        jur_AbstractCharClass$LazyAlpha__init_0(var_0);
        return var_0;
    }
    function jur_AbstractCharClass$LazyAlpha__init_0($this) {}
    function jur_AbstractCharClass$LazyAlpha_computeValue($this) {
        return jur_CharClass_add0(jur_CharClass_add0(jur_CharClass__init_0(), 97, 122), 65, 90);
    }
    var jur_AbstractCharClass$LazyAlnum = $rt_classWithoutFields(jur_AbstractCharClass$LazyAlpha);
    function jur_AbstractCharClass$LazyAlnum__init_() {
        var var_0 = new jur_AbstractCharClass$LazyAlnum();
        jur_AbstractCharClass$LazyAlnum__init_0(var_0);
        return var_0;
    }
    function jur_AbstractCharClass$LazyAlnum__init_0($this) {}
    function jur_AbstractCharClass$LazyAlnum_computeValue($this) {
        return jur_CharClass_add0(jur_AbstractCharClass$LazyAlpha_computeValue($this), 48, 57);
    }
    var jur_AbstractCharClass$LazyPunct = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass);
    function jur_AbstractCharClass$LazyPunct__init_() {
        var var_0 = new jur_AbstractCharClass$LazyPunct();
        jur_AbstractCharClass$LazyPunct__init_0(var_0);
        return var_0;
    }
    function jur_AbstractCharClass$LazyPunct__init_0($this) {}
    function jur_AbstractCharClass$LazyPunct_computeValue($this) {
        return jur_CharClass_add0(jur_CharClass_add0(jur_CharClass_add0(jur_CharClass__init_0(), 33, 64), 91, 96), 123, 126);
    }
    var jur_AbstractCharClass$LazyGraph = $rt_classWithoutFields(jur_AbstractCharClass$LazyAlnum);
    function jur_AbstractCharClass$LazyGraph__init_() {
        var var_0 = new jur_AbstractCharClass$LazyGraph();
        jur_AbstractCharClass$LazyGraph__init_0(var_0);
        return var_0;
    }
    function jur_AbstractCharClass$LazyGraph__init_0($this) {}
    function jur_AbstractCharClass$LazyGraph_computeValue($this) {
        return jur_CharClass_add0(jur_CharClass_add0(jur_CharClass_add0(jur_AbstractCharClass$LazyAlnum_computeValue($this), 33, 64), 91, 96), 123, 126);
    }
    var jur_AbstractCharClass$LazyPrint = $rt_classWithoutFields(jur_AbstractCharClass$LazyGraph);
    function jur_AbstractCharClass$LazyPrint__init_() {
        var var_0 = new jur_AbstractCharClass$LazyPrint();
        jur_AbstractCharClass$LazyPrint__init_0(var_0);
        return var_0;
    }
    function jur_AbstractCharClass$LazyPrint__init_0($this) {}
    function jur_AbstractCharClass$LazyPrint_computeValue($this) {
        return jur_CharClass_add(jur_AbstractCharClass$LazyGraph_computeValue($this), 32);
    }
    var jur_AbstractCharClass$LazyBlank = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass);
    function jur_AbstractCharClass$LazyBlank__init_() {
        var var_0 = new jur_AbstractCharClass$LazyBlank();
        jur_AbstractCharClass$LazyBlank__init_0(var_0);
        return var_0;
    }
    function jur_AbstractCharClass$LazyBlank__init_0($this) {}
    function jur_AbstractCharClass$LazyBlank_computeValue($this) {
        return jur_CharClass_add(jur_CharClass_add(jur_CharClass__init_0(), 32), 9);
    }
    var jur_AbstractCharClass$LazyCntrl = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass);
    function jur_AbstractCharClass$LazyCntrl__init_() {
        var var_0 = new jur_AbstractCharClass$LazyCntrl();
        jur_AbstractCharClass$LazyCntrl__init_0(var_0);
        return var_0;
    }
    function jur_AbstractCharClass$LazyCntrl__init_0($this) {}
    function jur_AbstractCharClass$LazyCntrl_computeValue($this) {
        return jur_CharClass_add(jur_CharClass_add0(jur_CharClass__init_0(), 0, 31), 127);
    }
    var jur_AbstractCharClass$LazyXDigit = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass);
    function jur_AbstractCharClass$LazyXDigit__init_() {
        var var_0 = new jur_AbstractCharClass$LazyXDigit();
        jur_AbstractCharClass$LazyXDigit__init_0(var_0);
        return var_0;
    }
    function jur_AbstractCharClass$LazyXDigit__init_0($this) {}
    function jur_AbstractCharClass$LazyXDigit_computeValue($this) {
        return jur_CharClass_add0(jur_CharClass_add0(jur_CharClass_add0(jur_CharClass__init_0(), 48, 57), 97, 102), 65, 70);
    }
    var jur_AbstractCharClass$LazyJavaLowerCase = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass);
    function jur_AbstractCharClass$LazyJavaLowerCase__init_() {
        var var_0 = new jur_AbstractCharClass$LazyJavaLowerCase();
        jur_AbstractCharClass$LazyJavaLowerCase__init_0(var_0);
        return var_0;
    }
    function jur_AbstractCharClass$LazyJavaLowerCase__init_0($this) {}
    function jur_AbstractCharClass$LazyJavaLowerCase_computeValue($this) {
        var $chCl;
        $chCl = new jur_AbstractCharClass$LazyJavaLowerCase$1;
        $chCl.$this$022 = $this;
        jur_AbstractCharClass__init_($chCl);
        $chCl.$mayContainSupplCodepoints = 1;
        return $chCl;
    }
    var jur_AbstractCharClass$LazyJavaUpperCase = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass);
    function jur_AbstractCharClass$LazyJavaUpperCase__init_() {
        var var_0 = new jur_AbstractCharClass$LazyJavaUpperCase();
        jur_AbstractCharClass$LazyJavaUpperCase__init_0(var_0);
        return var_0;
    }
    function jur_AbstractCharClass$LazyJavaUpperCase__init_0($this) {}
    function jur_AbstractCharClass$LazyJavaUpperCase_computeValue($this) {
        var $chCl;
        $chCl = new jur_AbstractCharClass$LazyJavaUpperCase$1;
        $chCl.$this$023 = $this;
        jur_AbstractCharClass__init_($chCl);
        $chCl.$mayContainSupplCodepoints = 1;
        return $chCl;
    }
    var jur_AbstractCharClass$LazyJavaWhitespace = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass);
    function jur_AbstractCharClass$LazyJavaWhitespace__init_() {
        var var_0 = new jur_AbstractCharClass$LazyJavaWhitespace();
        jur_AbstractCharClass$LazyJavaWhitespace__init_0(var_0);
        return var_0;
    }
    function jur_AbstractCharClass$LazyJavaWhitespace__init_0($this) {}
    function jur_AbstractCharClass$LazyJavaWhitespace_computeValue($this) {
        var var$1;
        var$1 = new jur_AbstractCharClass$LazyJavaWhitespace$1;
        var$1.$this$024 = $this;
        jur_AbstractCharClass__init_(var$1);
        return var$1;
    }
    var jur_AbstractCharClass$LazyJavaMirrored = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass);
    function jur_AbstractCharClass$LazyJavaMirrored__init_() {
        var var_0 = new jur_AbstractCharClass$LazyJavaMirrored();
        jur_AbstractCharClass$LazyJavaMirrored__init_0(var_0);
        return var_0;
    }
    function jur_AbstractCharClass$LazyJavaMirrored__init_0($this) {}
    function jur_AbstractCharClass$LazyJavaMirrored_computeValue($this) {
        var var$1;
        var$1 = new jur_AbstractCharClass$LazyJavaMirrored$1;
        var$1.$this$025 = $this;
        jur_AbstractCharClass__init_(var$1);
        return var$1;
    }
    var jur_AbstractCharClass$LazyJavaDefined = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass);
    function jur_AbstractCharClass$LazyJavaDefined__init_() {
        var var_0 = new jur_AbstractCharClass$LazyJavaDefined();
        jur_AbstractCharClass$LazyJavaDefined__init_0(var_0);
        return var_0;
    }
    function jur_AbstractCharClass$LazyJavaDefined__init_0($this) {}
    function jur_AbstractCharClass$LazyJavaDefined_computeValue($this) {
        var $chCl;
        $chCl = new jur_AbstractCharClass$LazyJavaDefined$1;
        $chCl.$this$026 = $this;
        jur_AbstractCharClass__init_($chCl);
        ju_BitSet_set0($chCl.$lowHighSurrogates, 0, 2048);
        $chCl.$mayContainSupplCodepoints = 1;
        return $chCl;
    }
    var jur_AbstractCharClass$LazyJavaDigit = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass);
    function jur_AbstractCharClass$LazyJavaDigit__init_() {
        var var_0 = new jur_AbstractCharClass$LazyJavaDigit();
        jur_AbstractCharClass$LazyJavaDigit__init_0(var_0);
        return var_0;
    }
    function jur_AbstractCharClass$LazyJavaDigit__init_0($this) {}
    function jur_AbstractCharClass$LazyJavaDigit_computeValue($this) {
        var $chCl;
        $chCl = new jur_AbstractCharClass$LazyJavaDigit$1;
        $chCl.$this$027 = $this;
        jur_AbstractCharClass__init_($chCl);
        $chCl.$mayContainSupplCodepoints = 1;
        return $chCl;
    }
    var jur_AbstractCharClass$LazyJavaIdentifierIgnorable = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass);
    function jur_AbstractCharClass$LazyJavaIdentifierIgnorable__init_() {
        var var_0 = new jur_AbstractCharClass$LazyJavaIdentifierIgnorable();
        jur_AbstractCharClass$LazyJavaIdentifierIgnorable__init_0(var_0);
        return var_0;
    }
    function jur_AbstractCharClass$LazyJavaIdentifierIgnorable__init_0($this) {}
    function jur_AbstractCharClass$LazyJavaIdentifierIgnorable_computeValue($this) {
        var $chCl;
        $chCl = new jur_AbstractCharClass$LazyJavaIdentifierIgnorable$1;
        $chCl.$this$028 = $this;
        jur_AbstractCharClass__init_($chCl);
        $chCl.$mayContainSupplCodepoints = 1;
        return $chCl;
    }
    var jur_AbstractCharClass$LazyJavaISOControl = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass);
    function jur_AbstractCharClass$LazyJavaISOControl__init_() {
        var var_0 = new jur_AbstractCharClass$LazyJavaISOControl();
        jur_AbstractCharClass$LazyJavaISOControl__init_0(var_0);
        return var_0;
    }
    function jur_AbstractCharClass$LazyJavaISOControl__init_0($this) {}
    function jur_AbstractCharClass$LazyJavaISOControl_computeValue($this) {
        var var$1;
        var$1 = new jur_AbstractCharClass$LazyJavaISOControl$1;
        var$1.$this$029 = $this;
        jur_AbstractCharClass__init_(var$1);
        return var$1;
    }
    var jur_AbstractCharClass$LazyJavaJavaIdentifierPart = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass);
    function jur_AbstractCharClass$LazyJavaJavaIdentifierPart__init_() {
        var var_0 = new jur_AbstractCharClass$LazyJavaJavaIdentifierPart();
        jur_AbstractCharClass$LazyJavaJavaIdentifierPart__init_0(var_0);
        return var_0;
    }
    function jur_AbstractCharClass$LazyJavaJavaIdentifierPart__init_0($this) {}
    function jur_AbstractCharClass$LazyJavaJavaIdentifierPart_computeValue($this) {
        var $chCl;
        $chCl = new jur_AbstractCharClass$LazyJavaJavaIdentifierPart$1;
        $chCl.$this$030 = $this;
        jur_AbstractCharClass__init_($chCl);
        $chCl.$mayContainSupplCodepoints = 1;
        return $chCl;
    }
    var jur_AbstractCharClass$LazyJavaJavaIdentifierStart = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass);
    function jur_AbstractCharClass$LazyJavaJavaIdentifierStart__init_() {
        var var_0 = new jur_AbstractCharClass$LazyJavaJavaIdentifierStart();
        jur_AbstractCharClass$LazyJavaJavaIdentifierStart__init_0(var_0);
        return var_0;
    }
    function jur_AbstractCharClass$LazyJavaJavaIdentifierStart__init_0($this) {}
    function jur_AbstractCharClass$LazyJavaJavaIdentifierStart_computeValue($this) {
        var $chCl;
        $chCl = new jur_AbstractCharClass$LazyJavaJavaIdentifierStart$1;
        $chCl.$this$031 = $this;
        jur_AbstractCharClass__init_($chCl);
        $chCl.$mayContainSupplCodepoints = 1;
        return $chCl;
    }
    var jur_AbstractCharClass$LazyJavaLetter = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass);
    function jur_AbstractCharClass$LazyJavaLetter__init_() {
        var var_0 = new jur_AbstractCharClass$LazyJavaLetter();
        jur_AbstractCharClass$LazyJavaLetter__init_0(var_0);
        return var_0;
    }
    function jur_AbstractCharClass$LazyJavaLetter__init_0($this) {}
    function jur_AbstractCharClass$LazyJavaLetter_computeValue($this) {
        var $chCl;
        $chCl = new jur_AbstractCharClass$LazyJavaLetter$1;
        $chCl.$this$032 = $this;
        jur_AbstractCharClass__init_($chCl);
        $chCl.$mayContainSupplCodepoints = 1;
        return $chCl;
    }
    var jur_AbstractCharClass$LazyJavaLetterOrDigit = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass);
    function jur_AbstractCharClass$LazyJavaLetterOrDigit__init_() {
        var var_0 = new jur_AbstractCharClass$LazyJavaLetterOrDigit();
        jur_AbstractCharClass$LazyJavaLetterOrDigit__init_0(var_0);
        return var_0;
    }
    function jur_AbstractCharClass$LazyJavaLetterOrDigit__init_0($this) {}
    function jur_AbstractCharClass$LazyJavaLetterOrDigit_computeValue($this) {
        var $chCl;
        $chCl = new jur_AbstractCharClass$LazyJavaLetterOrDigit$1;
        $chCl.$this$033 = $this;
        jur_AbstractCharClass__init_($chCl);
        $chCl.$mayContainSupplCodepoints = 1;
        return $chCl;
    }
    var jur_AbstractCharClass$LazyJavaSpaceChar = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass);
    function jur_AbstractCharClass$LazyJavaSpaceChar__init_() {
        var var_0 = new jur_AbstractCharClass$LazyJavaSpaceChar();
        jur_AbstractCharClass$LazyJavaSpaceChar__init_0(var_0);
        return var_0;
    }
    function jur_AbstractCharClass$LazyJavaSpaceChar__init_0($this) {}
    function jur_AbstractCharClass$LazyJavaSpaceChar_computeValue($this) {
        var var$1;
        var$1 = new jur_AbstractCharClass$LazyJavaSpaceChar$1;
        var$1.$this$034 = $this;
        jur_AbstractCharClass__init_(var$1);
        return var$1;
    }
    var jur_AbstractCharClass$LazyJavaTitleCase = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass);
    function jur_AbstractCharClass$LazyJavaTitleCase__init_() {
        var var_0 = new jur_AbstractCharClass$LazyJavaTitleCase();
        jur_AbstractCharClass$LazyJavaTitleCase__init_0(var_0);
        return var_0;
    }
    function jur_AbstractCharClass$LazyJavaTitleCase__init_0($this) {}
    function jur_AbstractCharClass$LazyJavaTitleCase_computeValue($this) {
        var var$1;
        var$1 = new jur_AbstractCharClass$LazyJavaTitleCase$1;
        var$1.$this$035 = $this;
        jur_AbstractCharClass__init_(var$1);
        return var$1;
    }
    var jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass);
    function jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart__init_() {
        var var_0 = new jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart();
        jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart__init_0(var_0);
        return var_0;
    }
    function jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart__init_0($this) {}
    function jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart_computeValue($this) {
        var $chCl;
        $chCl = new jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart$1;
        $chCl.$this$036 = $this;
        jur_AbstractCharClass__init_($chCl);
        $chCl.$mayContainSupplCodepoints = 1;
        return $chCl;
    }
    var jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass);
    function jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart__init_() {
        var var_0 = new jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart();
        jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart__init_0(var_0);
        return var_0;
    }
    function jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart__init_0($this) {}
    function jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart_computeValue($this) {
        var $chCl;
        $chCl = new jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart$1;
        $chCl.$this$037 = $this;
        jur_AbstractCharClass__init_($chCl);
        $chCl.$mayContainSupplCodepoints = 1;
        return $chCl;
    }
    var jur_AbstractCharClass$LazyWord = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass);
    function jur_AbstractCharClass$LazyWord__init_() {
        var var_0 = new jur_AbstractCharClass$LazyWord();
        jur_AbstractCharClass$LazyWord__init_0(var_0);
        return var_0;
    }
    function jur_AbstractCharClass$LazyWord__init_0($this) {}
    function jur_AbstractCharClass$LazyWord_computeValue($this) {
        return jur_CharClass_add(jur_CharClass_add0(jur_CharClass_add0(jur_CharClass_add0(jur_CharClass__init_0(), 97, 122), 65, 90), 48, 57), 95);
    }
    var jur_AbstractCharClass$LazyNonWord = $rt_classWithoutFields(jur_AbstractCharClass$LazyWord);
    function jur_AbstractCharClass$LazyNonWord__init_() {
        var var_0 = new jur_AbstractCharClass$LazyNonWord();
        jur_AbstractCharClass$LazyNonWord__init_0(var_0);
        return var_0;
    }
    function jur_AbstractCharClass$LazyNonWord__init_0($this) {}
    function jur_AbstractCharClass$LazyNonWord_computeValue($this) {
        var $chCl;
        $chCl = jur_AbstractCharClass_setNegative(jur_AbstractCharClass$LazyWord_computeValue($this), 1);
        $chCl.$mayContainSupplCodepoints = 1;
        return $chCl;
    }
    var jur_AbstractCharClass$LazyNonSpace = $rt_classWithoutFields(jur_AbstractCharClass$LazySpace);
    function jur_AbstractCharClass$LazyNonSpace__init_() {
        var var_0 = new jur_AbstractCharClass$LazyNonSpace();
        jur_AbstractCharClass$LazyNonSpace__init_0(var_0);
        return var_0;
    }
    function jur_AbstractCharClass$LazyNonSpace__init_0($this) {}
    function jur_AbstractCharClass$LazyNonSpace_computeValue($this) {
        var $chCl;
        $chCl = jur_AbstractCharClass_setNegative(jur_AbstractCharClass$LazySpace_computeValue($this), 1);
        $chCl.$mayContainSupplCodepoints = 1;
        return $chCl;
    }
    var jur_AbstractCharClass$LazyNonDigit = $rt_classWithoutFields(jur_AbstractCharClass$LazyDigit);
    function jur_AbstractCharClass$LazyNonDigit__init_() {
        var var_0 = new jur_AbstractCharClass$LazyNonDigit();
        jur_AbstractCharClass$LazyNonDigit__init_0(var_0);
        return var_0;
    }
    function jur_AbstractCharClass$LazyNonDigit__init_0($this) {}
    function jur_AbstractCharClass$LazyNonDigit_computeValue($this) {
        var $chCl;
        $chCl = jur_AbstractCharClass_setNegative(jur_AbstractCharClass$LazyDigit_computeValue($this), 1);
        $chCl.$mayContainSupplCodepoints = 1;
        return $chCl;
    }
    function jur_AbstractCharClass$LazyRange() {
        var a = this; jur_AbstractCharClass$LazyCharClass.call(a);
        a.$start5 = 0;
        a.$end1 = 0;
    }
    function jur_AbstractCharClass$LazyRange__init_(var_0, var_1) {
        var var_2 = new jur_AbstractCharClass$LazyRange();
        jur_AbstractCharClass$LazyRange__init_0(var_2, var_0, var_1);
        return var_2;
    }
    function jur_AbstractCharClass$LazyRange__init_0($this, $start, $end) {
        $this.$start5 = $start;
        $this.$end1 = $end;
    }
    function jur_AbstractCharClass$LazyRange_computeValue($this) {
        return jur_CharClass_add0(jur_CharClass__init_0(), $this.$start5, $this.$end1);
    }
    var jur_AbstractCharClass$LazySpecialsBlock = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass);
    function jur_AbstractCharClass$LazySpecialsBlock__init_() {
        var var_0 = new jur_AbstractCharClass$LazySpecialsBlock();
        jur_AbstractCharClass$LazySpecialsBlock__init_0(var_0);
        return var_0;
    }
    function jur_AbstractCharClass$LazySpecialsBlock__init_0($this) {}
    function jur_AbstractCharClass$LazySpecialsBlock_computeValue($this) {
        return jur_CharClass_add0(jur_CharClass_add0(jur_CharClass__init_0(), 65279, 65279), 65520, 65533);
    }
    function jur_AbstractCharClass$LazyCategory() {
        var a = this; jur_AbstractCharClass$LazyCharClass.call(a);
        a.$category = 0;
        a.$mayContainSupplCodepoints0 = 0;
        a.$containsAllSurrogates = 0;
    }
    function jur_AbstractCharClass$LazyCategory__init_(var_0, var_1) {
        var var_2 = new jur_AbstractCharClass$LazyCategory();
        jur_AbstractCharClass$LazyCategory__init_1(var_2, var_0, var_1);
        return var_2;
    }
    function jur_AbstractCharClass$LazyCategory__init_0(var_0, var_1, var_2) {
        var var_3 = new jur_AbstractCharClass$LazyCategory();
        jur_AbstractCharClass$LazyCategory__init_2(var_3, var_0, var_1, var_2);
        return var_3;
    }
    function jur_AbstractCharClass$LazyCategory__init_1($this, $cat, $mayContainSupplCodepoints) {
        $this.$mayContainSupplCodepoints0 = $mayContainSupplCodepoints;
        $this.$category = $cat;
    }
    function jur_AbstractCharClass$LazyCategory__init_2($this, $cat, $mayContainSupplCodepoints, $containsAllSurrogates) {
        $this.$containsAllSurrogates = $containsAllSurrogates;
        $this.$mayContainSupplCodepoints0 = $mayContainSupplCodepoints;
        $this.$category = $cat;
    }
    function jur_AbstractCharClass$LazyCategory_computeValue($this) {
        var $chCl;
        $chCl = jur_UnicodeCategory__init_($this.$category);
        if ($this.$containsAllSurrogates)
            ju_BitSet_set0($chCl.$lowHighSurrogates, 0, 2048);
        $chCl.$mayContainSupplCodepoints = $this.$mayContainSupplCodepoints0;
        return $chCl;
    }
    function jur_AbstractCharClass$LazyCategoryScope() {
        var a = this; jur_AbstractCharClass$LazyCharClass.call(a);
        a.$category0 = 0;
        a.$mayContainSupplCodepoints1 = 0;
        a.$containsAllSurrogates0 = 0;
    }
    function jur_AbstractCharClass$LazyCategoryScope__init_(var_0, var_1) {
        var var_2 = new jur_AbstractCharClass$LazyCategoryScope();
        jur_AbstractCharClass$LazyCategoryScope__init_1(var_2, var_0, var_1);
        return var_2;
    }
    function jur_AbstractCharClass$LazyCategoryScope__init_0(var_0, var_1, var_2) {
        var var_3 = new jur_AbstractCharClass$LazyCategoryScope();
        jur_AbstractCharClass$LazyCategoryScope__init_2(var_3, var_0, var_1, var_2);
        return var_3;
    }
    function jur_AbstractCharClass$LazyCategoryScope__init_1($this, $cat, $mayContainSupplCodepoints) {
        $this.$mayContainSupplCodepoints1 = $mayContainSupplCodepoints;
        $this.$category0 = $cat;
    }
    function jur_AbstractCharClass$LazyCategoryScope__init_2($this, $cat, $mayContainSupplCodepoints, $containsAllSurrogates) {
        $this.$containsAllSurrogates0 = $containsAllSurrogates;
        $this.$mayContainSupplCodepoints1 = $mayContainSupplCodepoints;
        $this.$category0 = $cat;
    }
    function jur_AbstractCharClass$LazyCategoryScope_computeValue($this) {
        var $chCl;
        $chCl = new jur_UnicodeCategoryScope;
        jur_UnicodeCategory__init_0($chCl, $this.$category0);
        if ($this.$containsAllSurrogates0)
            ju_BitSet_set0($chCl.$lowHighSurrogates, 0, 2048);
        $chCl.$mayContainSupplCodepoints = $this.$mayContainSupplCodepoints1;
        return $chCl;
    }
    function jni_XHRURLConnection() {
        var a = this; jn_HttpURLConnection.call(a);
        a.$xhr = null;
        a.$outputStream = null;
        a.$inputStream = null;
        a.$errorStream = null;
        a.$responseHeaders = null;
        a.$responseHeaderKeys = null;
        a.$responseHeaderValues = null;
        a.$headerFields = null;
        a.$requestPerformed = 0;
    }
    function jni_XHRURLConnection_connect($this) {
        var var$1, var$2, $value, var$4, var$5, var$6, var$7;
        if ($this.$connected)
            return;
        var$1 = new $rt_globals.XMLHttpRequest();
        $this.$xhr = var$1;
        var$2 = $this.$method;
        $value = $this.$url;
        var$4 = $value.$strmHandler;
        if (var$4 !== null)
            var$4 = jn_URLStreamHandler_toExternalForm(var$4, $value);
        else {
            var$4 = $value.$protocol;
            var$5 = $value.$host;
            $value = $value.$file;
            var$6 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_(var$6);
            jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$6, $rt_s(911)), var$4), $rt_s(912)), var$5), $value);
            var$4 = jl_AbstractStringBuilder_toString(var$6);
        }
        var$1.open($rt_ustr(var$2), $rt_ustr(var$4));
        if ($this.$connected) {
            var$2 = new jl_IllegalStateException;
            jl_Exception__init_(var$2);
            $rt_throw(var$2);
        }
        var$2 = ju_HashMap__init_();
        $value = ju_HashMap$1_iterator(ju_HashMap_keySet($this.$requestProperties));
        while (ju_HashMap$AbstractMapIterator_hasNext($value)) {
            var$1 = ju_HashMap$KeyIterator_next($value);
            var$4 = ju_HashMap_get($this.$requestProperties, var$1);
            var$5 = new ju_Collections$8;
            var$5.$val$list = var$4;
            ju_HashMap_put(var$2, var$1, var$5);
        }
        var$7 = ju_HashMap$HashMapEntrySet_iterator(ju_HashMap_entrySet(var$2));
        while (ju_HashMap$AbstractMapIterator_hasNext(var$7)) {
            var$2 = ju_HashMap$EntryIterator_next(var$7);
            $value = var$2.$key;
            var$2 = ju_AbstractList_iterator(var$2.$value1);
            var$4 = $value;
            while (ju_AbstractList$1_hasNext(var$2)) {
                $value = ju_AbstractList$1_next(var$2);
                $this.$xhr.setRequestHeader($rt_ustr(var$4), $rt_ustr($value));
            }
        }
        var$2 = $this.$xhr;
        $value = "arraybuffer";
        var$2.responseType = $value;
        $this.$connected = 1;
    }
    function jni_XHRURLConnection_performRequest(var$0) {
        var thread = $rt_nativeThread();
        var javaThread = $rt_getThread();
        if (thread.isResuming()) {
            thread.status = 0;
            var result = thread.attribute;
            if (result instanceof Error) {
                throw result;
            }
            return result;
        }
        var callback = function() {};
        callback.$complete = function(val) {
            thread.attribute = val;
            $rt_setThread(javaThread);
            thread.resume();
        };
        callback.$error = function(e) {
            thread.attribute = $rt_exception(e);
            $rt_setThread(javaThread);
            thread.resume();
        };
        callback = otpp_AsyncCallbackWrapper_create(callback);
        return thread.suspend(function() {
            try {
                jni_XHRURLConnection_performRequest0(var$0, callback);
            } catch($e) {
                callback.$error($rt_exception($e));
            }
        });
    }
    function jni_XHRURLConnection_performRequest0($this, $callback) {
        var $array, var$3, $bytes, var$5, $i, var$7;
        $array = $this.$xhr;
        var$3 = new jni_XHRURLConnection$performRequest$lambda$_5_0;
        var$3.$_01 = $this;
        var$3.$_10 = $callback;
        $callback = otji_JS_function(var$3, "stateChanged");
        $array.onreadystatechange = $callback;
        $callback = $this.$outputStream;
        if ($callback === null)
            $this.$xhr.send();
        else {
            $bytes = ($callback.$toByteArray()).data;
            var$5 = $bytes.length;
            $array = new $rt_globals.Int8Array(var$5);
            $i = 0;
            while ($i < var$5) {
                var$7 = $bytes[$i];
                $array[$i] = var$7;
                $i = $i + 1 | 0;
            }
            $callback = $this.$xhr;
            $array = $array.buffer;
            $callback.send($array);
        }
    }
    function jnci_BufferedEncoder() {
        var a = this; jnc_CharsetEncoder.call(a);
        a.$inArray = null;
        a.$outArray = null;
    }
    function jnci_BufferedEncoder__init_($this, $cs, $averageBytesPerChar, $maxBytesPerChar) {
        var var$4, var$5, var$6, var$7;
        var$4 = $rt_createByteArray(1);
        var$5 = var$4.data;
        var$5[0] = 63;
        jnc_CodingErrorAction_$callClinit();
        var$6 = jnc_CodingErrorAction_REPORT;
        $this.$malformedAction = var$6;
        $this.$unmappableAction = var$6;
        var$7 = var$5.length;
        if (var$7 && var$7 >= $this.$maxBytesPerChar) {
            $this.$charset0 = $cs;
            $this.$replacement = var$4.$clone();
            $this.$averageBytesPerChar = $averageBytesPerChar;
            $this.$maxBytesPerChar = $maxBytesPerChar;
            $this.$inArray = $rt_createCharArray(512);
            $this.$outArray = $rt_createByteArray(512);
            return;
        }
        var$6 = new jl_IllegalArgumentException;
        jl_Throwable__init_(var$6, $rt_s(913));
        $rt_throw(var$6);
    }
    function jnci_BufferedEncoder_encodeLoop($this, $in, $out) {
        var $inArray, $inPos, $inSize, $outArray, $i, var$8, $outPos, $outSize, $result, var$12, var$13, var$14, $controller;
        $inArray = $this.$inArray;
        $inPos = 0;
        $inSize = 0;
        $outArray = $this.$outArray;
        a: {
            b: {
                while (true) {
                    if (($inPos + 32 | 0) > $inSize && jn_Buffer_hasRemaining($in)) {
                        $i = $inPos;
                        while ($i < $inSize) {
                            var$8 = $inArray.data;
                            var$8[$i - $inPos | 0] = var$8[$i];
                            $i = $i + 1 | 0;
                        }
                        var$8 = $inArray.data;
                        $outPos = $inSize - $inPos | 0;
                        $outSize = jn_Buffer_remaining($in) + $outPos | 0;
                        $i = var$8.length;
                        $inSize = jl_Math_min($outSize, $i);
                        $inPos = $inSize - $outPos | 0;
                        if ($outPos < 0)
                            break b;
                        if ($outPos > $i)
                            break b;
                        $outSize = $outPos + $inPos | 0;
                        if ($outSize > $i) {
                            $result = new jl_IndexOutOfBoundsException;
                            $in = new jl_StringBuilder;
                            jl_AbstractStringBuilder__init_($in);
                            jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append($in, $rt_s(914)), $outSize), $rt_s(492)), $i);
                            jl_Throwable__init_($result, jl_AbstractStringBuilder_toString($in));
                            $rt_throw($result);
                        }
                        if (jn_Buffer_remaining($in) < $inPos)
                            break;
                        if ($inPos < 0) {
                            $in = new jl_IndexOutOfBoundsException;
                            $out = new jl_StringBuilder;
                            jl_AbstractStringBuilder__init_($out);
                            jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append($out, $rt_s(493)), $inPos), $rt_s(494));
                            jl_Throwable__init_($in, jl_AbstractStringBuilder_toString($out));
                            $rt_throw($in);
                        }
                        $i = $in.$position;
                        var$12 = 0;
                        var$13 = $i;
                        while (var$12 < $inPos) {
                            var$14 = $outPos + 1 | 0;
                            $outSize = var$13 + 1 | 0;
                            var$8[$outPos] = $in.$array1.data[var$13 + $in.$start4 | 0];
                            var$12 = var$12 + 1 | 0;
                            $outPos = var$14;
                            var$13 = $outSize;
                        }
                        $in.$position = $i + $inPos | 0;
                        $inPos = 0;
                    }
                    if (!jn_Buffer_hasRemaining($out)) {
                        $result = !jn_Buffer_hasRemaining($in) && $inPos >= $inSize ? jnc_CoderResult_UNDERFLOW : jnc_CoderResult_OVERFLOW;
                        break a;
                    }
                    var$8 = $outArray.data;
                    $outSize = jl_Math_min(jn_Buffer_remaining($out), var$8.length);
                    $controller = new jnci_BufferedEncoder$Controller;
                    $controller.$in = $in;
                    $controller.$out1 = $out;
                    $result = $this.$arrayEncode($inArray, $inPos, $inSize, $outArray, 0, $outSize, $controller);
                    $inPos = $controller.$inPosition;
                    $outPos = $controller.$outPosition;
                    if ($result === null) {
                        if (!jn_Buffer_hasRemaining($in) && $inPos >= $inSize)
                            $result = jnc_CoderResult_UNDERFLOW;
                        else if (!jn_Buffer_hasRemaining($out) && $inPos >= $inSize)
                            $result = jnc_CoderResult_OVERFLOW;
                    }
                    jn_ByteBuffer_put($out, $outArray, 0, $outPos);
                    if ($result !== null)
                        break a;
                }
                $in = new jn_BufferUnderflowException;
                jl_Exception__init_($in);
                $rt_throw($in);
            }
            $controller = new jl_IndexOutOfBoundsException;
            $result = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($result);
            jl_AbstractStringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append($result, $rt_s(489)), $outPos), $rt_s(490)), $i), 41);
            jl_Throwable__init_($controller, jl_AbstractStringBuilder_toString($result));
            $rt_throw($controller);
        }
        jn_Buffer_position($in, $in.$position - ($inSize - $inPos | 0) | 0);
        return $result;
    }
    var jnci_UTF8Encoder = $rt_classWithoutFields(jnci_BufferedEncoder);
    function jnci_UTF8Encoder_arrayEncode($this, $inArray, $inPos, $inSize, $outArray, $outPos, $outSize, $controller) {
        var $result, var$9, var$10, $ch, $low, var$13, $codePoint;
        $result = null;
        a: {
            while ($inPos < $inSize) {
                if ($outPos >= $outSize) {
                    var$9 = $inPos;
                    break a;
                }
                var$10 = $inArray.data;
                var$9 = $inPos + 1 | 0;
                $ch = var$10[$inPos];
                if ($ch < 128) {
                    var$10 = $outArray.data;
                    $low = $outPos + 1 | 0;
                    var$10[$outPos] = $ch << 24 >> 24;
                } else if ($ch < 2048) {
                    if (($outPos + 2 | 0) > $outSize) {
                        var$9 = var$9 + (-1) | 0;
                        if (jnci_BufferedEncoder$Controller_hasMoreOutput($controller, 2))
                            break a;
                        $result = jnc_CoderResult_OVERFLOW;
                        break a;
                    }
                    var$10 = $outArray.data;
                    $inPos = $outPos + 1 | 0;
                    var$10[$outPos] = (192 | $ch >> 6) << 24 >> 24;
                    $low = $inPos + 1 | 0;
                    var$10[$inPos] = (128 | $ch & 63) << 24 >> 24;
                } else if (!jl_Character_isSurrogate($ch)) {
                    if (($outPos + 3 | 0) > $outSize) {
                        var$9 = var$9 + (-1) | 0;
                        if (jnci_BufferedEncoder$Controller_hasMoreOutput($controller, 3))
                            break a;
                        $result = jnc_CoderResult_OVERFLOW;
                        break a;
                    }
                    var$10 = $outArray.data;
                    var$13 = $outPos + 1 | 0;
                    var$10[$outPos] = (224 | $ch >> 12) << 24 >> 24;
                    $inPos = var$13 + 1 | 0;
                    var$10[var$13] = (128 | $ch >> 6 & 63) << 24 >> 24;
                    $low = $inPos + 1 | 0;
                    var$10[$inPos] = (128 | $ch & 63) << 24 >> 24;
                } else {
                    if (!jl_Character_isHighSurrogate($ch)) {
                        $result = jnc_CoderResult_malformedForLength(1);
                        break a;
                    }
                    if (var$9 >= $inSize) {
                        if (jn_Buffer_hasRemaining($controller.$in))
                            break a;
                        $result = jnc_CoderResult_UNDERFLOW;
                        break a;
                    }
                    $inPos = var$9 + 1 | 0;
                    $low = var$10[var$9];
                    if (!jl_Character_isLowSurrogate($low)) {
                        var$9 = $inPos + (-2) | 0;
                        $result = jnc_CoderResult_malformedForLength(1);
                        break a;
                    }
                    if (($outPos + 4 | 0) > $outSize) {
                        var$9 = $inPos + (-2) | 0;
                        if (jnci_BufferedEncoder$Controller_hasMoreOutput($controller, 4))
                            break a;
                        $result = jnc_CoderResult_OVERFLOW;
                        break a;
                    }
                    var$10 = $outArray.data;
                    $codePoint = jl_Character_toCodePoint($ch, $low);
                    $low = $outPos + 1 | 0;
                    var$10[$outPos] = (240 | $codePoint >> 18) << 24 >> 24;
                    var$13 = $low + 1 | 0;
                    var$10[$low] = (128 | $codePoint >> 12 & 63) << 24 >> 24;
                    $outPos = var$13 + 1 | 0;
                    var$10[var$13] = (128 | $codePoint >> 6 & 63) << 24 >> 24;
                    $low = $outPos + 1 | 0;
                    var$10[$outPos] = (128 | $codePoint & 63) << 24 >> 24;
                    var$9 = $inPos;
                }
                $inPos = var$9;
                $outPos = $low;
            }
            var$9 = $inPos;
        }
        $controller.$inPosition = var$9;
        $controller.$outPosition = $outPos;
        return $result;
    }
    function jl_ClassLoader() {
        jl_Object.call(this);
        this.$parent = null;
    }
    var jl_ClassLoader_systemClassLoader = null;
    function jl_ClassLoader_$callClinit() {
        jl_ClassLoader_$callClinit = $rt_eraseClinit(jl_ClassLoader);
        jl_ClassLoader__clinit_();
    }
    function jl_ClassLoader__clinit_() {
        var var$1;
        var$1 = new jl_SystemClassLoader;
        jl_ClassLoader_$callClinit();
        var$1.$parent = null;
        jl_ClassLoader_systemClassLoader = var$1;
    }
    function jur_AbstractCharClass$1() {
        var a = this; jur_AbstractCharClass.call(a);
        a.$val$lHS = null;
        a.$this$02 = null;
    }
    function jur_AbstractCharClass$1_contains($this, $ch) {
        var $index;
        $index = $ch - 55296 | 0;
        return $index >= 0 && $index < 2048 ? $this.$altSurrogates ^ ju_BitSet_get($this.$val$lHS, $index) : 0;
    }
    function jur_AbstractCharClass$2() {
        var a = this; jur_AbstractCharClass.call(a);
        a.$val$lHS0 = null;
        a.$val$thisClass = null;
        a.$this$03 = null;
    }
    function jur_AbstractCharClass$2_contains($this, $ch) {
        var $index, $containslHS;
        $index = $ch - 55296 | 0;
        $containslHS = $index >= 0 && $index < 2048 ? $this.$altSurrogates ^ ju_BitSet_get($this.$val$lHS0, $index) : 0;
        return $this.$val$thisClass.$contains0($ch) && !$containslHS ? 1 : 0;
    }
    function jur_CharClass$18() {
        var a = this; jur_AbstractCharClass.call(a);
        a.$val$bs = null;
        a.$this$021 = null;
    }
    function jur_CharClass$18_contains($this, $ch) {
        return $this.$alt0 ^ ju_BitSet_get($this.$val$bs, $ch);
    }
    function jur_CharClass$18_toString($this) {
        var $temp, $i, var$3;
        $temp = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($temp);
        $i = ju_BitSet_nextSetBit($this.$val$bs, 0);
        while ($i >= 0) {
            jl_AbstractStringBuilder_append3($temp, jl_Character_toChars($i));
            jl_AbstractStringBuilder_append($temp, 124);
            $i = ju_BitSet_nextSetBit($this.$val$bs, $i + 1 | 0);
        }
        var$3 = $temp.$length0;
        if (var$3 > 0)
            jl_StringBuilder_deleteCharAt($temp, var$3 - 1 | 0);
        return jl_AbstractStringBuilder_toString($temp);
    }
    function jur_CharClass$1() {
        var a = this; jur_AbstractCharClass.call(a);
        a.$val$cc1 = null;
        a.$this$06 = null;
    }
    function jur_CharClass$1_contains($this, $ch) {
        return $this.$val$cc1.$contains0($ch);
    }
    function jur_CharClass$3() {
        var a = this; jur_AbstractCharClass.call(a);
        a.$val$curAlt1 = 0;
        a.$val$cc2 = null;
        a.$this$07 = null;
    }
    function jur_CharClass$3_contains($this, $ch) {
        return !($this.$val$curAlt1 ^ ju_BitSet_get($this.$this$07.$bits, $ch)) && !($this.$val$curAlt1 ^ $this.$this$07.$inverted ^ $this.$val$cc2.$contains0($ch)) ? 0 : 1;
    }
    function jur_CharClass$2() {
        var a = this; jur_AbstractCharClass.call(a);
        a.$val$curAlt2 = 0;
        a.$val$cc3 = null;
        a.$this$08 = null;
    }
    function jur_CharClass$2_contains($this, $ch) {
        return !($this.$val$curAlt2 ^ ju_BitSet_get($this.$this$08.$bits, $ch)) && !($this.$val$curAlt2 ^ $this.$this$08.$inverted ^ $this.$val$cc3.$contains0($ch)) ? 1 : 0;
    }
    function jur_CharClass$5() {
        var a = this; jur_AbstractCharClass.call(a);
        a.$val$curAlt = 0;
        a.$val$nb = null;
        a.$val$cc = null;
        a.$this$04 = null;
    }
    function jur_CharClass$5_contains($this, $ch) {
        return $this.$val$curAlt ^ (!$this.$val$nb.$contains0($ch) && !$this.$val$cc.$contains0($ch) ? 0 : 1);
    }
    function jur_CharClass$4() {
        var a = this; jur_AbstractCharClass.call(a);
        a.$val$curAlt0 = 0;
        a.$val$nb0 = null;
        a.$val$cc0 = null;
        a.$this$05 = null;
    }
    function jur_CharClass$4_contains($this, $ch) {
        return $this.$val$curAlt0 ^ (!$this.$val$nb0.$contains0($ch) && !$this.$val$cc0.$contains0($ch) ? 0 : 1) ? 0 : 1;
    }
    function jur_CharClass$7() {
        var a = this; jur_AbstractCharClass.call(a);
        a.$val$clazz1 = null;
        a.$this$011 = null;
    }
    function jur_CharClass$7_contains($this, $ch) {
        return jur_CharClass_contains($this.$val$clazz1, $ch);
    }
    function jur_CharClass$6() {
        var a = this; jur_AbstractCharClass.call(a);
        a.$val$clazz2 = null;
        a.$this$012 = null;
    }
    function jur_CharClass$6_contains($this, $ch) {
        return jur_CharClass_contains($this.$val$clazz2, $ch) ? 0 : 1;
    }
    function jur_CharClass$9() {
        var a = this; jur_AbstractCharClass.call(a);
        a.$val$clazz3 = null;
        a.$val$curAlt5 = 0;
        a.$this$013 = null;
    }
    function jur_CharClass$9_contains($this, $ch) {
        return !jur_CharClass_contains($this.$val$clazz3, $ch) && !($this.$val$curAlt5 ^ ju_BitSet_get($this.$this$013.$bits, $ch)) ? 0 : 1;
    }
    function jur_CharClass$8() {
        var a = this; jur_AbstractCharClass.call(a);
        a.$val$clazz4 = null;
        a.$val$curAlt6 = 0;
        a.$this$014 = null;
    }
    function jur_CharClass$8_contains($this, $ch) {
        return !jur_CharClass_contains($this.$val$clazz4, $ch) && !($this.$val$curAlt6 ^ ju_BitSet_get($this.$this$014.$bits, $ch)) ? 1 : 0;
    }
    function jur_CharClass$11() {
        var a = this; jur_AbstractCharClass.call(a);
        a.$val$curAlt3 = 0;
        a.$val$nb1 = null;
        a.$val$clazz = null;
        a.$this$09 = null;
    }
    function jur_CharClass$11_contains($this, $ch) {
        return !($this.$val$curAlt3 ^ $this.$val$nb1.$contains0($ch)) && !jur_CharClass_contains($this.$val$clazz, $ch) ? 0 : 1;
    }
    function jur_CharClass$10() {
        var a = this; jur_AbstractCharClass.call(a);
        a.$val$curAlt4 = 0;
        a.$val$nb2 = null;
        a.$val$clazz0 = null;
        a.$this$010 = null;
    }
    function jur_CharClass$10_contains($this, $ch) {
        return !($this.$val$curAlt4 ^ $this.$val$nb2.$contains0($ch)) && !jur_CharClass_contains($this.$val$clazz0, $ch) ? 1 : 0;
    }
    function jur_CharClass$13() {
        var a = this; jur_AbstractCharClass.call(a);
        a.$val$clazz7 = null;
        a.$this$017 = null;
    }
    function jur_CharClass$13_contains($this, $ch) {
        return jur_CharClass_contains($this.$val$clazz7, $ch);
    }
    function jur_CharClass$12() {
        var a = this; jur_AbstractCharClass.call(a);
        a.$val$clazz8 = null;
        a.$this$018 = null;
    }
    function jur_CharClass$12_contains($this, $ch) {
        return jur_CharClass_contains($this.$val$clazz8, $ch) ? 0 : 1;
    }
    function jur_CharClass$15() {
        var a = this; jur_AbstractCharClass.call(a);
        a.$val$clazz9 = null;
        a.$val$curAlt9 = 0;
        a.$this$019 = null;
    }
    function jur_CharClass$15_contains($this, $ch) {
        return jur_CharClass_contains($this.$val$clazz9, $ch) && $this.$val$curAlt9 ^ ju_BitSet_get($this.$this$019.$bits, $ch) ? 1 : 0;
    }
    function jur_CharClass$14() {
        var a = this; jur_AbstractCharClass.call(a);
        a.$val$clazz10 = null;
        a.$val$curAlt10 = 0;
        a.$this$020 = null;
    }
    function jur_CharClass$14_contains($this, $ch) {
        return jur_CharClass_contains($this.$val$clazz10, $ch) && $this.$val$curAlt10 ^ ju_BitSet_get($this.$this$020.$bits, $ch) ? 0 : 1;
    }
    function jur_CharClass$17() {
        var a = this; jur_AbstractCharClass.call(a);
        a.$val$curAlt7 = 0;
        a.$val$nb3 = null;
        a.$val$clazz5 = null;
        a.$this$015 = null;
    }
    function jur_CharClass$17_contains($this, $ch) {
        return $this.$val$curAlt7 ^ $this.$val$nb3.$contains0($ch) && jur_CharClass_contains($this.$val$clazz5, $ch) ? 1 : 0;
    }
    function jur_CharClass$16() {
        var a = this; jur_AbstractCharClass.call(a);
        a.$val$curAlt8 = 0;
        a.$val$nb4 = null;
        a.$val$clazz6 = null;
        a.$this$016 = null;
    }
    function jur_CharClass$16_contains($this, $ch) {
        return $this.$val$curAlt8 ^ $this.$val$nb4.$contains0($ch) && jur_CharClass_contains($this.$val$clazz6, $ch) ? 0 : 1;
    }
    var ju_ConcurrentModificationException = $rt_classWithoutFields(jl_RuntimeException);
    var otr_EventQueue$Event = $rt_classWithoutFields(0);
    var jl_ThreadInterruptHandler = $rt_classWithoutFields(0);
    function jl_Thread$SleepHandler() {
        var a = this; jl_Object.call(a);
        a.$thread = null;
        a.$callback = null;
        a.$isInterrupted = 0;
        a.$scheduleId = 0;
    }
    function jl_Thread$SleepHandler_run($this) {
        var var$1;
        if (!$this.$isInterrupted) {
            var$1 = $this.$thread;
            var$1.$interruptHandler = null;
            jl_Thread_setCurrentThread(var$1);
            otpp_AsyncCallbackWrapper_complete($this.$callback, null);
        }
    }
    function jl_Class$MethodSignature() {
        var a = this; jl_Object.call(a);
        a.$name1 = null;
        a.$parameterTypes0 = null;
        a.$returnType0 = null;
    }
    function jl_Class$MethodSignature_equals($this, $o) {
        var $that, var$3, var$4, var$5, var$6, var$7;
        if ($this === $o)
            return 1;
        if (!($o instanceof jl_Class$MethodSignature))
            return 0;
        a: {
            $that = $o;
            if (ju_Objects_equals($this.$name1, $that.$name1)) {
                b: {
                    var$3 = $this.$parameterTypes0;
                    var$4 = $that.$parameterTypes0;
                    if (var$3 === var$4)
                        var$5 = 1;
                    else {
                        if (var$3 !== null && var$4 !== null) {
                            var$3 = var$3.data;
                            var$4 = var$4.data;
                            var$5 = var$3.length;
                            if (var$5 == var$4.length) {
                                var$6 = 0;
                                c: {
                                    while (true) {
                                        if (var$6 >= var$5) {
                                            var$6 = (-1);
                                            break c;
                                        }
                                        var$7 = var$6 + 0 | 0;
                                        if (!ju_Objects_equals(var$3[var$7], var$4[var$7]))
                                            break;
                                        var$6 = var$6 + 1 | 0;
                                    }
                                }
                                var$5 = var$6 >= 0 ? 0 : 1;
                                break b;
                            }
                        }
                        var$5 = 0;
                    }
                }
                if (var$5 && ju_Objects_equals($this.$returnType0, $that.$returnType0)) {
                    var$5 = 1;
                    break a;
                }
            }
            var$5 = 0;
        }
        return var$5;
    }
    function jl_Class$MethodSignature_hashCode($this) {
        return ju_Arrays_hashCode($rt_createArrayFromData(jl_Object, [$this.$name1, jl_Integer_valueOf(ju_Arrays_hashCode($this.$parameterTypes0)), $this.$returnType0]));
    }
    var jl_SystemClassLoader = $rt_classWithoutFields(jl_ClassLoader);
    var otcir_JSCallable = $rt_classWithoutFields(0);
    var jur_MatchResult = $rt_classWithoutFields(0);
    function jur_MatchResultImpl() {
        var a = this; jl_Object.call(a);
        a.$groupBounds = null;
        a.$consumers = null;
        a.$compQuantCounters = null;
        a.$string3 = null;
        a.$groupCount = 0;
        a.$valid = 0;
        a.$leftBound0 = 0;
        a.$rightBound0 = 0;
        a.$startIndex = 0;
        a.$transparentBounds = 0;
        a.$anchoringBounds = 0;
        a.$hitEnd = 0;
        a.$requireEnd = 0;
        a.$previousMatch = 0;
        a.$mode0 = 0;
    }
    function jur_MatchResultImpl_setConsumed($this, $counter, $value) {
        $this.$consumers.data[$counter] = $value;
    }
    function jur_MatchResultImpl_getConsumed($this, $counter) {
        return $this.$consumers.data[$counter];
    }
    function jur_MatchResultImpl_end0($this) {
        return jur_MatchResultImpl_end($this, 0);
    }
    function jur_MatchResultImpl_end($this, $group) {
        jur_MatchResultImpl_checkGroup($this, $group);
        return $this.$groupBounds.data[($group * 2 | 0) + 1 | 0];
    }
    function jur_MatchResultImpl_setStart($this, $group, $offset) {
        $this.$groupBounds.data[$group * 2 | 0] = $offset;
    }
    function jur_MatchResultImpl_setEnd($this, $group, $offset) {
        $this.$groupBounds.data[($group * 2 | 0) + 1 | 0] = $offset;
    }
    function jur_MatchResultImpl_getStart($this, $group) {
        return $this.$groupBounds.data[$group * 2 | 0];
    }
    function jur_MatchResultImpl_getEnd($this, $group) {
        return $this.$groupBounds.data[($group * 2 | 0) + 1 | 0];
    }
    function jur_MatchResultImpl_start($this, $group) {
        jur_MatchResultImpl_checkGroup($this, $group);
        return $this.$groupBounds.data[$group * 2 | 0];
    }
    function jur_MatchResultImpl_getEnterCounter($this, $setCounter) {
        return $this.$compQuantCounters.data[$setCounter];
    }
    function jur_MatchResultImpl_setEnterCounter($this, $setCounter, $value) {
        $this.$compQuantCounters.data[$setCounter] = $value;
    }
    function jur_MatchResultImpl_checkGroup($this, $group) {
        var var$2;
        if (!$this.$valid) {
            var$2 = new jl_IllegalStateException;
            jl_Exception__init_(var$2);
            $rt_throw(var$2);
        }
        if ($group >= 0 && $group < $this.$groupCount)
            return;
        var$2 = new jl_IndexOutOfBoundsException;
        jl_Throwable__init_(var$2, jl_String_valueOf0($group));
        $rt_throw(var$2);
    }
    function jur_MatchResultImpl_reset($this, $newSequence, $leftBound, $rightBound) {
        $this.$valid = 0;
        $this.$mode0 = 2;
        ju_Arrays_fill($this.$groupBounds, (-1));
        ju_Arrays_fill($this.$consumers, (-1));
        if ($newSequence !== null)
            $this.$string3 = $newSequence;
        if ($leftBound >= 0) {
            $this.$leftBound0 = $leftBound;
            $this.$rightBound0 = $rightBound;
        }
        $this.$startIndex = $this.$leftBound0;
    }
    var oj_JSONObject$1 = $rt_classWithoutFields();
    var oj_JSONPointer = $rt_classWithoutFields();
    var ju_Set = $rt_classWithoutFields(0);
    var otp_PlatformClass = $rt_classWithoutFields(0);
    var oti_Structure = $rt_classWithoutFields();
    var otr_RuntimeObject = $rt_classWithoutFields(oti_Structure);
    var otr_RuntimeClass = $rt_classWithoutFields(otr_RuntimeObject);
    var jlr_Field = $rt_classWithoutFields(jlr_AccessibleObject);
    var otp_PlatformObject = $rt_classWithoutFields(0);
    var jlr_Constructor = $rt_classWithoutFields(jlr_AccessibleObject);
    var jla_Annotation = $rt_classWithoutFields(0);
    var ji_InputStream = $rt_classWithoutFields();
    var jn_ProtocolException = $rt_classWithoutFields(ji_IOException);
    var jur_BackReferencedSingleSet = $rt_classWithoutFields(jur_SingleSet);
    function jur_BackReferencedSingleSet_find($this, $startSearch, $testString, $matchResult) {
        var $res, $lastIndex, $saveStart;
        $res = 0;
        $lastIndex = $matchResult.$rightBound0;
        a: {
            while (true) {
                if ($startSearch > $lastIndex) {
                    $startSearch = $res;
                    break a;
                }
                $saveStart = jur_MatchResultImpl_getStart($matchResult, $this.$groupIndex0);
                jur_MatchResultImpl_setStart($matchResult, $this.$groupIndex0, $startSearch);
                $res = $this.$kid.$matches($startSearch, $testString, $matchResult);
                if ($res >= 0)
                    break;
                jur_MatchResultImpl_setStart($matchResult, $this.$groupIndex0, $saveStart);
                $startSearch = $startSearch + 1 | 0;
            }
        }
        return $startSearch;
    }
    function jur_BackReferencedSingleSet_findBack($this, $stringIndex, $startSearch, $testString, $matchResult) {
        var $res, $saveStart;
        $res = 0;
        a: {
            while (true) {
                if ($startSearch < $stringIndex) {
                    $startSearch = $res;
                    break a;
                }
                $saveStart = jur_MatchResultImpl_getStart($matchResult, $this.$groupIndex0);
                jur_MatchResultImpl_setStart($matchResult, $this.$groupIndex0, $startSearch);
                $res = $this.$kid.$matches($startSearch, $testString, $matchResult);
                if ($res >= 0)
                    break;
                jur_MatchResultImpl_setStart($matchResult, $this.$groupIndex0, $saveStart);
                $startSearch = $startSearch + (-1) | 0;
            }
        }
        return $startSearch;
    }
    function jur_BackReferencedSingleSet_processBackRefReplacement($this) {
        return null;
    }
    var jnc_CharacterCodingException = $rt_classWithoutFields(ji_IOException);
    var jl_AssertionError = $rt_classWithoutFields(jl_Error);
    var otcir_Flags = $rt_classWithoutFields();
    var otcir_Converter = $rt_classWithoutFields();
    var ju_AbstractSet = $rt_classWithoutFields(ju_AbstractCollection);
    function ju_HashMap$HashMapEntrySet() {
        ju_AbstractSet.call(this);
        this.$associatedMap = null;
    }
    function ju_HashMap$HashMapEntrySet_iterator($this) {
        var var$1;
        var$1 = new ju_HashMap$EntryIterator;
        ju_HashMap$AbstractMapIterator__init_(var$1, $this.$associatedMap);
        return var$1;
    }
    var otcic_Console = $rt_classWithoutFields();
    function ju_HashMap$2() {
        ju_AbstractCollection.call(this);
        this.$this$0 = null;
    }
    function ju_HashMap$2_size($this) {
        return $this.$this$0.$elementCount;
    }
    function ju_HashMap$2_iterator($this) {
        var var$1;
        var$1 = new ju_HashMap$ValueIterator;
        ju_HashMap$AbstractMapIterator__init_(var$1, $this.$this$0);
        return var$1;
    }
    function jur_Matcher() {
        var a = this; jl_Object.call(a);
        a.$pat = null;
        a.$start0 = null;
        a.$string0 = null;
        a.$matchResult = null;
        a.$leftBound = 0;
        a.$rightBound = 0;
    }
    function jur_Matcher_find0($this, $start) {
        var $stringLength, var$3, var$4;
        $stringLength = jl_String_length($this.$string0);
        if ($start >= 0 && $start <= $stringLength) {
            jur_MatchResultImpl_reset($this.$matchResult, null, (-1), (-1));
            var$3 = $this.$matchResult;
            var$3.$mode0 = 1;
            var$3.$startIndex = $start;
            $stringLength = var$3.$previousMatch;
            if ($stringLength < 0)
                $stringLength = $start;
            var$3.$previousMatch = $stringLength;
            $start = $this.$start0.$find0($start, $this.$string0, var$3);
            if ($start == (-1))
                $this.$matchResult.$hitEnd = 1;
            if ($start >= 0) {
                var$3 = $this.$matchResult;
                if (var$3.$valid) {
                    var$4 = var$3.$groupBounds.data;
                    if (var$4[0] == (-1)) {
                        $stringLength = var$3.$startIndex;
                        var$4[0] = $stringLength;
                        var$4[1] = $stringLength;
                    }
                    var$3.$previousMatch = jur_MatchResultImpl_end0(var$3);
                    return 1;
                }
            }
            $this.$matchResult.$startIndex = (-1);
            return 0;
        }
        var$3 = new jl_IndexOutOfBoundsException;
        jl_Throwable__init_(var$3, jl_String_valueOf0($start));
        $rt_throw(var$3);
    }
    function jur_Matcher_find($this) {
        var $length, var$2, var$3;
        $length = jl_String_length($this.$string0);
        var$2 = $this.$matchResult;
        if (!var$2.$transparentBounds)
            $length = $this.$rightBound;
        if (var$2.$startIndex >= 0 && var$2.$mode0 == 1) {
            var$2.$startIndex = jur_MatchResultImpl_end0(var$2);
            if (jur_MatchResultImpl_end0($this.$matchResult) == jur_MatchResultImpl_start($this.$matchResult, 0)) {
                var$2 = $this.$matchResult;
                var$2.$startIndex = var$2.$startIndex + 1 | 0;
            }
            var$3 = $this.$matchResult.$startIndex;
            return var$3 <= $length && jur_Matcher_find0($this, var$3) ? 1 : 0;
        }
        return jur_Matcher_find0($this, $this.$leftBound);
    }
    var otja_ReadyStateChangeHandler = $rt_classWithoutFields(0);
    function jni_XHRURLConnection$performRequest$lambda$_5_0() {
        var a = this; jl_Object.call(a);
        a.$_01 = null;
        a.$_10 = null;
    }
    function jni_XHRURLConnection$performRequest$lambda$_5_0_stateChanged$exported$0(var$0) {
        var var$1, var$2, var$3, var$4, var$5, var$6, var$7, var$8, var$9, var$10, var$11, var$12, var$13, var$14, var$15;
        var$1 = var$0.$_01;
        var$2 = var$0.$_10;
        if (var$1.$xhr.readyState == 4) {
            var$1.$responseCode = var$1.$xhr.status;
            var$1.$responseMessage = $rt_str(var$1.$xhr.statusText);
            if (!var$1.$responseCode)
                var$1.$responseCode = (-1);
            var$3 = new $rt_globals.Int8Array(var$1.$xhr.response);
            var$4 = $rt_createByteArray(var$3.length);
            var$5 = var$4.data;
            var$6 = 0;
            var$7 = var$5.length;
            while (var$6 < var$7) {
                var$5[var$6] = var$3[var$6];
                var$6 = var$6 + 1 | 0;
            }
            var$3 = new ji_ByteArrayInputStream;
            var$3.$buf0 = var$4;
            var$3.$pos = 0;
            var$3.$mark1 = 0;
            var$3.$count1 = 0 + var$7 | 0;
            var$8 = $rt_str(var$1.$xhr.getAllResponseHeaders());
            var$9 = 0;
            var$10 = ju_ArrayList__init_();
            var$11 = ju_ArrayList__init_();
            var$1.$responseHeaders = ju_HashMap__init_();
            var$1.$headerFields = ju_HashMap__init_();
            while (var$9 < jl_String_length(var$8)) {
                var$6 = jl_String_indexOf1(var$8, $rt_s(915), var$9);
                if (var$6 < 0)
                    var$6 = jl_String_length(var$8);
                var$7 = jl_String_indexOf(var$8, 58, var$9);
                if (var$7 < 0)
                    var$7 = jl_String_length(var$8);
                var$12 = $rt_compare(var$7, var$6);
                var$13 = var$12 >= 0 ? jl_String_substring(var$8, var$9, var$6) : jl_String_substring(var$8, var$9, var$7);
                var$14 = var$12 >= 0 ? $rt_s(2) : jl_String_trim(jl_String_substring(var$8, var$7 + 1 | 0, var$6));
                var$13 = jl_String_trim(var$13);
                ju_ArrayList_add(var$10, var$13);
                ju_ArrayList_add(var$11, var$14);
                var$15 = ju_HashMap_get(var$1.$headerFields, var$13);
                if (var$15 === null) {
                    var$15 = ju_ArrayList__init_();
                    ju_HashMap_put(var$1.$headerFields, var$13, var$15);
                }
                var$15.$add(var$14);
                var$13 = jl_String_toLowerCase(var$13);
                ju_HashMap_put(var$1.$responseHeaders, var$13, var$14);
                var$9 = var$6 + 2 | 0;
            }
            var$1.$responseHeaderKeys = ju_AbstractCollection_toArray(var$10, $rt_createArray(jl_String, var$10.$size0));
            var$1.$responseHeaderValues = ju_AbstractCollection_toArray(var$11, $rt_createArray(jl_String, var$11.$size0));
            var$9 = var$1.$responseCode / 100 | 0;
            if (var$9 != 4 && var$9 != 5) {
                var$1.$inputStream = var$3;
                var$1.$errorStream = null;
            } else {
                var$1.$errorStream = var$3;
                var$1.$inputStream = null;
            }
            otpp_AsyncCallbackWrapper_complete(var$2, jl_Boolean_TRUE);
        }
    }
    var otjt_ArrayBufferView = $rt_classWithoutFields();
    var otjt_Int8Array = $rt_classWithoutFields(otjt_ArrayBufferView);
    var ji_ByteArrayOutputStream = $rt_classWithoutFields(ji_OutputStream);
    var jm_Multiplication = $rt_classWithoutFields();
    var jm_Multiplication_tenPows = null;
    var jm_Multiplication_fivePows = null;
    var jm_Multiplication_bigTenPows = null;
    var jm_Multiplication_bigFivePows = null;
    function jm_Multiplication_$callClinit() {
        jm_Multiplication_$callClinit = $rt_eraseClinit(jm_Multiplication);
        jm_Multiplication__clinit_();
    }
    function jm_Multiplication_karatsuba($op1, $op2) {
        var $upperOp1, $ndiv2, $upperOp2, $lowerOp1, $lowerOp2, $upper, $lower, var$10, var$11, var$12, var$13, var$14, var$15, var$16, var$17, var$18, var$19, var$20, var$21, var$22, var$23, var$24;
        jm_Multiplication_$callClinit();
        if ($op2.$numberLength <= $op1.$numberLength) {
            $upperOp1 = $op2;
            $op2 = $op1;
            $op1 = $upperOp1;
        }
        $ndiv2 = $op1.$numberLength;
        if ($ndiv2 >= 63) {
            $ndiv2 = ($op2.$numberLength & (-2)) << 4;
            $upperOp1 = jm_BigInteger_shiftRight($op2, $ndiv2);
            $upperOp2 = jm_BigInteger_shiftRight($op1, $ndiv2);
            $lowerOp1 = jm_BigInteger_subtract($op2, jm_BigInteger_shiftLeft($upperOp1, $ndiv2));
            $lowerOp2 = jm_BigInteger_subtract($op1, jm_BigInteger_shiftLeft($upperOp2, $ndiv2));
            $upper = jm_Multiplication_karatsuba($upperOp1, $upperOp2);
            $lower = jm_Multiplication_karatsuba($lowerOp1, $lowerOp2);
            $op1 = jm_BigInteger_shiftLeft(jm_BigInteger_add(jm_BigInteger_add(jm_Multiplication_karatsuba(jm_BigInteger_subtract($upperOp1, $lowerOp1), jm_BigInteger_subtract($lowerOp2, $upperOp2)), $upper), $lower), $ndiv2);
            return jm_BigInteger_add(jm_BigInteger_add(jm_BigInteger_shiftLeft($upper, $ndiv2 << 1), $op1), $lower);
        }
        var$10 = $op2.$numberLength;
        var$11 = var$10 + $ndiv2 | 0;
        var$12 = $op2.$sign2 == $op1.$sign2 ? 1 : (-1);
        if (var$11 == 2) {
            var$13 = jm_Multiplication_unsignedMultAddAdd($op2.$digits.data[0], $op1.$digits.data[0], 0, 0);
            $ndiv2 = Long_lo(var$13);
            var$10 = Long_hi(var$13);
            $op1 = !var$10 ? jm_BigInteger__init_(var$12, $ndiv2) : jm_BigInteger__init_1(var$12, 2, $rt_createIntArrayFromData([$ndiv2, var$10]));
        } else {
            var$14 = $op2.$digits;
            var$15 = $op1.$digits;
            var$16 = $rt_createIntArray(var$11);
            if (var$10 && $ndiv2) {
                if (var$10 == 1) {
                    var$17 = var$14.data;
                    var$16.data[$ndiv2] = jm_Multiplication_multiplyByInt(var$16, var$15, $ndiv2, var$17[0]);
                } else if ($ndiv2 == 1) {
                    var$17 = var$15.data;
                    var$16.data[var$10] = jm_Multiplication_multiplyByInt(var$16, var$14, var$10, var$17[0]);
                } else if (var$14 === var$15 && var$10 == $ndiv2) {
                    var$17 = var$16.data;
                    $ndiv2 = 0;
                    while ($ndiv2 < var$10) {
                        var$13 = Long_ZERO;
                        var$18 = $ndiv2 + 1 | 0;
                        var$19 = var$18;
                        while (var$19 < var$10) {
                            var$20 = var$14.data;
                            var$21 = var$20[$ndiv2];
                            var$22 = var$20[var$19];
                            var$23 = $ndiv2 + var$19 | 0;
                            var$13 = jm_Multiplication_unsignedMultAddAdd(var$21, var$22, var$17[var$23], Long_lo(var$13));
                            var$17[var$23] = Long_lo(var$13);
                            var$13 = Long_shru(var$13, 32);
                            var$19 = var$19 + 1 | 0;
                        }
                        var$17[$ndiv2 + var$10 | 0] = Long_lo(var$13);
                        $ndiv2 = var$18;
                    }
                    $ndiv2 = var$10 << 1;
                    var$21 = 0;
                    var$22 = 0;
                    while (var$22 < $ndiv2) {
                        var$18 = var$17[var$22];
                        var$17[var$22] = var$18 << 1 | var$21;
                        var$21 = var$18 >>> 31 | 0;
                        var$22 = var$22 + 1 | 0;
                    }
                    if (var$21)
                        var$17[$ndiv2] = var$21;
                    var$13 = Long_ZERO;
                    $ndiv2 = 0;
                    var$18 = 0;
                    while ($ndiv2 < var$10) {
                        var$20 = var$14.data;
                        var$13 = jm_Multiplication_unsignedMultAddAdd(var$20[$ndiv2], var$20[$ndiv2], var$17[var$18], Long_lo(var$13));
                        var$17[var$18] = Long_lo(var$13);
                        var$24 = Long_shru(var$13, 32);
                        var$18 = var$18 + 1 | 0;
                        var$13 = Long_add(var$24, Long_and(Long_fromInt(var$17[var$18]), Long_create(4294967295, 0)));
                        var$17[var$18] = Long_lo(var$13);
                        var$13 = Long_shru(var$13, 32);
                        $ndiv2 = $ndiv2 + 1 | 0;
                        var$18 = var$18 + 1 | 0;
                    }
                } else {
                    var$20 = var$16.data;
                    var$18 = 0;
                    while (var$18 < var$10) {
                        var$17 = var$14.data;
                        var$13 = Long_ZERO;
                        var$19 = var$17[var$18];
                        var$21 = 0;
                        while (var$21 < $ndiv2) {
                            var$22 = var$15.data[var$21];
                            var$23 = var$18 + var$21 | 0;
                            var$13 = jm_Multiplication_unsignedMultAddAdd(var$19, var$22, var$20[var$23], Long_lo(var$13));
                            var$20[var$23] = Long_lo(var$13);
                            var$13 = Long_shru(var$13, 32);
                            var$21 = var$21 + 1 | 0;
                        }
                        var$20[var$18 + $ndiv2 | 0] = Long_lo(var$13);
                        var$18 = var$18 + 1 | 0;
                    }
                }
            }
            $op1 = jm_BigInteger__init_1(var$12, var$11, var$16);
            jm_BigInteger_cutOffLeadingZeroes($op1);
        }
        return $op1;
    }
    function jm_Multiplication_multiplyByInt($res, $a, $aSize, $factor) {
        var $carry, $i, var$7;
        jm_Multiplication_$callClinit();
        $carry = Long_ZERO;
        $i = 0;
        while ($i < $aSize) {
            var$7 = $res.data;
            $carry = jm_Multiplication_unsignedMultAddAdd($a.data[$i], $factor, Long_lo($carry), 0);
            var$7[$i] = Long_lo($carry);
            $carry = Long_shru($carry, 32);
            $i = $i + 1 | 0;
        }
        return Long_lo($carry);
    }
    function jm_Multiplication_unsignedMultAddAdd($a, $b, $c, $d) {
        jm_Multiplication_$callClinit();
        return Long_add(Long_add(Long_mul(Long_and(Long_fromInt($a), Long_create(4294967295, 0)), Long_and(Long_fromInt($b), Long_create(4294967295, 0))), Long_and(Long_fromInt($c), Long_create(4294967295, 0))), Long_and(Long_fromInt($d), Long_create(4294967295, 0)));
    }
    function jm_Multiplication__clinit_() {
        var $fivePow, $i, var$3, var$4;
        jm_Multiplication_tenPows = $rt_createIntArrayFromData([1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000]);
        jm_Multiplication_fivePows = $rt_createIntArrayFromData([1, 5, 25, 125, 625, 3125, 15625, 78125, 390625, 1953125, 9765625, 48828125, 244140625, 1220703125]);
        jm_Multiplication_bigTenPows = $rt_createArray(jm_BigInteger, 32);
        jm_Multiplication_bigFivePows = $rt_createArray(jm_BigInteger, 32);
        $fivePow = Long_fromInt(1);
        $i = 0;
        while ($i <= 18) {
            jm_Multiplication_bigFivePows.data[$i] = jm_BigInteger_valueOf($fivePow);
            jm_Multiplication_bigTenPows.data[$i] = jm_BigInteger_valueOf(Long_shl($fivePow, $i));
            $fivePow = Long_mul($fivePow, Long_fromInt(5));
            $i = $i + 1 | 0;
        }
        while ($i < jm_Multiplication_bigTenPows.data.length) {
            var$3 = jm_Multiplication_bigFivePows.data;
            var$4 = $i - 1 | 0;
            var$3[$i] = jm_BigInteger_multiply(var$3[var$4], var$3[1]);
            var$3 = jm_Multiplication_bigTenPows.data;
            var$3[$i] = jm_BigInteger_multiply(var$3[var$4], jm_BigInteger_TEN);
            $i = $i + 1 | 0;
        }
    }
    var jm_Conversion = $rt_classWithoutFields();
    var jm_Conversion_digitFitInInt = null;
    var jm_Conversion_bigRadices = null;
    function jm_Conversion__clinit_() {
        jm_Conversion_digitFitInInt = $rt_createIntArrayFromData([(-1), (-1), 31, 19, 15, 13, 11, 11, 10, 9, 9, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5]);
        jm_Conversion_bigRadices = $rt_createIntArrayFromData([(-2147483648), 1162261467, 1073741824, 1220703125, 362797056, 1977326743, 1073741824, 387420489, 1000000000, 214358881, 429981696, 815730721, 1475789056, 170859375, 268435456, 410338673, 612220032, 893871739, 1280000000, 1801088541, 113379904, 148035889, 191102976, 244140625, 308915776, 387420489, 481890304, 594823321, 729000000, 887503681, 1073741824, 1291467969, 1544804416, 1838265625, 60466176]);
    }
    var jm_Elementary = $rt_classWithoutFields();
    function jm_Elementary_compareArrays($a, $b, $size) {
        var $i, var$5;
        $i = $size - 1 | 0;
        while ($i >= 0) {
            var$5 = $b.data;
            if ($a.data[$i] != var$5[$i])
                break;
            $i = $i + (-1) | 0;
        }
        if ($i < 0)
            $size = 0;
        else {
            $b = $b.data;
            $size = Long_ge(Long_and(Long_fromInt($a.data[$i]), Long_create(4294967295, 0)), Long_and(Long_fromInt($b[$i]), Long_create(4294967295, 0))) ? 1 : (-1);
        }
        return $size;
    }
    function jm_Elementary_add($a, $aSize, $b, $bSize) {
        var $res, var$6, var$7, var$8, var$9;
        $a = $a.data;
        $b = $b.data;
        $res = $rt_createIntArray($aSize + 1 | 0);
        var$6 = $res.data;
        var$7 = Long_add(Long_and(Long_fromInt($a[0]), Long_create(4294967295, 0)), Long_and(Long_fromInt($b[0]), Long_create(4294967295, 0)));
        var$6[0] = Long_lo(var$7);
        var$8 = Long_shr(var$7, 32);
        if ($aSize < $bSize) {
            var$9 = 1;
            while (var$9 < $aSize) {
                var$7 = Long_add(var$8, Long_add(Long_and(Long_fromInt($a[var$9]), Long_create(4294967295, 0)), Long_and(Long_fromInt($b[var$9]), Long_create(4294967295, 0))));
                var$6[var$9] = Long_lo(var$7);
                var$8 = Long_shr(var$7, 32);
                var$9 = var$9 + 1 | 0;
            }
            while (var$9 < $bSize) {
                var$7 = Long_add(var$8, Long_and(Long_fromInt($b[var$9]), Long_create(4294967295, 0)));
                var$6[var$9] = Long_lo(var$7);
                var$8 = Long_shr(var$7, 32);
                var$9 = var$9 + 1 | 0;
            }
        } else {
            var$9 = 1;
            while (var$9 < $bSize) {
                var$7 = Long_add(var$8, Long_add(Long_and(Long_fromInt($a[var$9]), Long_create(4294967295, 0)), Long_and(Long_fromInt($b[var$9]), Long_create(4294967295, 0))));
                var$6[var$9] = Long_lo(var$7);
                var$8 = Long_shr(var$7, 32);
                var$9 = var$9 + 1 | 0;
            }
            while (var$9 < $aSize) {
                var$7 = Long_add(var$8, Long_and(Long_fromInt($a[var$9]), Long_create(4294967295, 0)));
                var$6[var$9] = Long_lo(var$7);
                var$8 = Long_shr(var$7, 32);
                var$9 = var$9 + 1 | 0;
            }
        }
        if (Long_ne(var$8, Long_ZERO))
            var$6[var$9] = Long_lo(var$8);
        return $res;
    }
    function jm_Elementary_subtract($a, $aSize, $b, $bSize) {
        var $res, var$6, var$7, var$8, var$9, var$10, var$11;
        $res = $rt_createIntArray($aSize);
        var$6 = $res.data;
        var$7 = Long_ZERO;
        var$8 = 0;
        while (var$8 < $bSize) {
            var$9 = $a.data;
            var$10 = $b.data;
            var$11 = Long_add(var$7, Long_sub(Long_and(Long_fromInt(var$9[var$8]), Long_create(4294967295, 0)), Long_and(Long_fromInt(var$10[var$8]), Long_create(4294967295, 0))));
            var$6[var$8] = Long_lo(var$11);
            var$7 = Long_shr(var$11, 32);
            var$8 = var$8 + 1 | 0;
        }
        while (var$8 < $aSize) {
            var$11 = Long_add(var$7, Long_and(Long_fromInt($a.data[var$8]), Long_create(4294967295, 0)));
            var$6[var$8] = Long_lo(var$11);
            var$7 = Long_shr(var$11, 32);
            var$8 = var$8 + 1 | 0;
        }
        return $res;
    }
    function ju_HashMap$AbstractMapIterator() {
        var a = this; jl_Object.call(a);
        a.$position1 = 0;
        a.$expectedModCount = 0;
        a.$futureEntry = null;
        a.$currentEntry = null;
        a.$prevEntry = null;
        a.$associatedMap0 = null;
    }
    function ju_HashMap$AbstractMapIterator__init_0(var_0) {
        var var_1 = new ju_HashMap$AbstractMapIterator();
        ju_HashMap$AbstractMapIterator__init_(var_1, var_0);
        return var_1;
    }
    function ju_HashMap$AbstractMapIterator__init_($this, $hm) {
        $this.$associatedMap0 = $hm;
        $this.$expectedModCount = $hm.$modCount1;
        $this.$futureEntry = null;
    }
    function ju_HashMap$AbstractMapIterator_hasNext($this) {
        var var$1, var$2;
        if ($this.$futureEntry !== null)
            return 1;
        while (true) {
            var$1 = $this.$position1;
            var$2 = $this.$associatedMap0.$elementData.data;
            if (var$1 >= var$2.length)
                break;
            if (var$2[var$1] !== null)
                return 1;
            $this.$position1 = var$1 + 1 | 0;
        }
        return 0;
    }
    function ju_HashMap$AbstractMapIterator_checkConcurrentMod($this) {
        var var$1;
        if ($this.$expectedModCount == $this.$associatedMap0.$modCount1)
            return;
        var$1 = new ju_ConcurrentModificationException;
        jl_Exception__init_(var$1);
        $rt_throw(var$1);
    }
    function ju_HashMap$AbstractMapIterator_makeNext($this) {
        var var$1, var$2, var$3, var$4;
        ju_HashMap$AbstractMapIterator_checkConcurrentMod($this);
        if (!ju_HashMap$AbstractMapIterator_hasNext($this)) {
            var$1 = new ju_NoSuchElementException;
            jl_Exception__init_(var$1);
            $rt_throw(var$1);
        }
        var$1 = $this.$futureEntry;
        if (var$1 !== null) {
            var$2 = $this.$currentEntry;
            if (var$2 !== null)
                $this.$prevEntry = var$2;
            $this.$currentEntry = var$1;
            $this.$futureEntry = var$1.$next2;
        } else {
            var$3 = $this.$associatedMap0.$elementData.data;
            var$4 = $this.$position1;
            $this.$position1 = var$4 + 1 | 0;
            var$1 = var$3[var$4];
            $this.$currentEntry = var$1;
            $this.$futureEntry = var$1.$next2;
            $this.$prevEntry = null;
        }
    }
    var ju_HashMap$EntryIterator = $rt_classWithoutFields(ju_HashMap$AbstractMapIterator);
    function ju_HashMap$EntryIterator_next($this) {
        ju_HashMap$AbstractMapIterator_makeNext($this);
        return $this.$currentEntry;
    }
    var ju_HashMap$ValueIterator = $rt_classWithoutFields(ju_HashMap$AbstractMapIterator);
    function ju_HashMap$ValueIterator_next($this) {
        ju_HashMap$AbstractMapIterator_makeNext($this);
        return $this.$currentEntry.$value1;
    }
    var otja_XMLHttpRequest = $rt_classWithoutFields();
    function otja_XMLHttpRequest_addEventListener$exported$0(var$0, var$1, var$2) {
        var$0.$addEventListener($rt_str(var$1), otji_JS_functionAsObject(var$2, "handleEvent"));
    }
    function otja_XMLHttpRequest_removeEventListener$exported$1(var$0, var$1, var$2) {
        var$0.$removeEventListener($rt_str(var$1), otji_JS_functionAsObject(var$2, "handleEvent"));
    }
    function otja_XMLHttpRequest_removeEventListener$exported$2(var$0, var$1, var$2, var$3) {
        var$0.$removeEventListener0($rt_str(var$1), otji_JS_functionAsObject(var$2, "handleEvent"), var$3 ? 1 : 0);
    }
    function otja_XMLHttpRequest_dispatchEvent$exported$3(var$0, var$1) {
        return !!var$0.$dispatchEvent(var$1);
    }
    function otja_XMLHttpRequest_addEventListener$exported$4(var$0, var$1, var$2, var$3) {
        var$0.$addEventListener0($rt_str(var$1), otji_JS_functionAsObject(var$2, "handleEvent"), var$3 ? 1 : 0);
    }
    function jur_AbstractCharClass$LazyJavaLowerCase$1() {
        jur_AbstractCharClass.call(this);
        this.$this$022 = null;
    }
    function jur_AbstractCharClass$LazyJavaLowerCase$1_contains($this, $ch) {
        return jl_Character_getType($ch) != 2 ? 0 : 1;
    }
    function jur_AbstractCharClass$LazyJavaUpperCase$1() {
        jur_AbstractCharClass.call(this);
        this.$this$023 = null;
    }
    function jur_AbstractCharClass$LazyJavaUpperCase$1_contains($this, $ch) {
        return jl_Character_isUpperCase($ch);
    }
    function jur_AbstractCharClass$LazyJavaWhitespace$1() {
        jur_AbstractCharClass.call(this);
        this.$this$024 = null;
    }
    function jur_AbstractCharClass$LazyJavaWhitespace$1_contains($this, $ch) {
        return jl_Character_isWhitespace($ch);
    }
    function jur_AbstractCharClass$LazyJavaMirrored$1() {
        jur_AbstractCharClass.call(this);
        this.$this$025 = null;
    }
    function jur_AbstractCharClass$LazyJavaMirrored$1_contains($this, $ch) {
        return 0;
    }
    function jur_AbstractCharClass$LazyJavaDefined$1() {
        jur_AbstractCharClass.call(this);
        this.$this$026 = null;
    }
    function jur_AbstractCharClass$LazyJavaDefined$1_contains($this, $ch) {
        return !jl_Character_getType($ch) ? 0 : 1;
    }
    function jur_AbstractCharClass$LazyJavaDigit$1() {
        jur_AbstractCharClass.call(this);
        this.$this$027 = null;
    }
    function jur_AbstractCharClass$LazyJavaDigit$1_contains($this, $ch) {
        return jl_Character_getType($ch) != 9 ? 0 : 1;
    }
    function jur_AbstractCharClass$LazyJavaIdentifierIgnorable$1() {
        jur_AbstractCharClass.call(this);
        this.$this$028 = null;
    }
    function jur_AbstractCharClass$LazyJavaIdentifierIgnorable$1_contains($this, $ch) {
        return jl_Character_isIdentifierIgnorable($ch);
    }
    function jur_AbstractCharClass$LazyJavaISOControl$1() {
        jur_AbstractCharClass.call(this);
        this.$this$029 = null;
    }
    function jur_AbstractCharClass$LazyJavaISOControl$1_contains($this, $ch) {
        a: {
            b: {
                if (!($ch >= 0 && $ch <= 31)) {
                    if ($ch < 127)
                        break b;
                    if ($ch > 159)
                        break b;
                }
                $ch = 1;
                break a;
            }
            $ch = 0;
        }
        return $ch;
    }
    function jur_AbstractCharClass$LazyJavaJavaIdentifierPart$1() {
        jur_AbstractCharClass.call(this);
        this.$this$030 = null;
    }
    function jur_AbstractCharClass$LazyJavaJavaIdentifierPart$1_contains($this, $ch) {
        a: {
            b: {
                switch (jl_Character_getType($ch)) {
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 8:
                    case 9:
                    case 10:
                    case 23:
                    case 26:
                        break;
                    case 7:
                    case 11:
                    case 12:
                    case 13:
                    case 14:
                    case 15:
                    case 16:
                    case 17:
                    case 18:
                    case 19:
                    case 20:
                    case 21:
                    case 22:
                    case 24:
                    case 25:
                        break b;
                    default:
                        break b;
                }
                $ch = 1;
                break a;
            }
            $ch = jl_Character_isIdentifierIgnorable($ch);
        }
        return $ch;
    }
    function jur_AbstractCharClass$LazyJavaJavaIdentifierStart$1() {
        jur_AbstractCharClass.call(this);
        this.$this$031 = null;
    }
    function jur_AbstractCharClass$LazyJavaJavaIdentifierStart$1_contains($this, $ch) {
        a: {
            b: {
                switch (jl_Character_getType($ch)) {
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 10:
                    case 23:
                    case 26:
                        break;
                    case 6:
                    case 7:
                    case 8:
                    case 9:
                    case 11:
                    case 12:
                    case 13:
                    case 14:
                    case 15:
                    case 16:
                    case 17:
                    case 18:
                    case 19:
                    case 20:
                    case 21:
                    case 22:
                    case 24:
                    case 25:
                        break b;
                    default:
                        break b;
                }
                $ch = 1;
                break a;
            }
            $ch = jl_Character_isIdentifierIgnorable($ch);
        }
        return $ch;
    }
    function jur_AbstractCharClass$LazyJavaLetter$1() {
        jur_AbstractCharClass.call(this);
        this.$this$032 = null;
    }
    function jur_AbstractCharClass$LazyJavaLetter$1_contains($this, $ch) {
        return jl_Character_isLetter($ch);
    }
    function jur_AbstractCharClass$LazyJavaLetterOrDigit$1() {
        jur_AbstractCharClass.call(this);
        this.$this$033 = null;
    }
    function jur_AbstractCharClass$LazyJavaLetterOrDigit$1_contains($this, $ch) {
        return jl_Character_isLetterOrDigit($ch);
    }
    function jur_AbstractCharClass$LazyJavaSpaceChar$1() {
        jur_AbstractCharClass.call(this);
        this.$this$034 = null;
    }
    function jur_AbstractCharClass$LazyJavaSpaceChar$1_contains($this, $ch) {
        return jl_Character_isSpaceChar($ch);
    }
    function jur_AbstractCharClass$LazyJavaTitleCase$1() {
        jur_AbstractCharClass.call(this);
        this.$this$035 = null;
    }
    function jur_AbstractCharClass$LazyJavaTitleCase$1_contains($this, $ch) {
        return jl_Character_getType($ch) != 3 ? 0 : 1;
    }
    function jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart$1() {
        jur_AbstractCharClass.call(this);
        this.$this$036 = null;
    }
    function jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart$1_contains($this, $ch) {
        a: {
            b: {
                switch (jl_Character_getType($ch)) {
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 8:
                    case 9:
                    case 10:
                    case 23:
                        break;
                    case 7:
                    case 11:
                    case 12:
                    case 13:
                    case 14:
                    case 15:
                    case 16:
                    case 17:
                    case 18:
                    case 19:
                    case 20:
                    case 21:
                    case 22:
                        break b;
                    default:
                        break b;
                }
                $ch = 1;
                break a;
            }
            $ch = jl_Character_isIdentifierIgnorable($ch);
        }
        return $ch;
    }
    function jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart$1() {
        jur_AbstractCharClass.call(this);
        this.$this$037 = null;
    }
    function jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart$1_contains($this, $ch) {
        a: {
            b: {
                switch (jl_Character_getType($ch)) {
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 10:
                        break;
                    case 6:
                    case 7:
                    case 8:
                    case 9:
                        break b;
                    default:
                        break b;
                }
                $ch = 1;
                break a;
            }
            $ch = jl_Character_isIdentifierIgnorable($ch);
        }
        return $ch;
    }
    function jur_UnicodeCategory() {
        jur_AbstractCharClass.call(this);
        this.$category1 = 0;
    }
    function jur_UnicodeCategory__init_(var_0) {
        var var_1 = new jur_UnicodeCategory();
        jur_UnicodeCategory__init_0(var_1, var_0);
        return var_1;
    }
    function jur_UnicodeCategory__init_0($this, $category) {
        jur_AbstractCharClass__init_($this);
        $this.$category1 = $category;
    }
    function jur_UnicodeCategory_contains($this, $ch) {
        return $this.$alt0 ^ ($this.$category1 != jl_Character_getType($ch & 65535) ? 0 : 1);
    }
    var jur_UnicodeCategoryScope = $rt_classWithoutFields(jur_UnicodeCategory);
    function jur_UnicodeCategoryScope_contains($this, $ch) {
        return $this.$alt0 ^ (!($this.$category1 >> jl_Character_getType($ch & 65535) & 1) ? 0 : 1);
    }
    var jnci_AsciiEncoder = $rt_classWithoutFields(jnci_BufferedEncoder);
    function jnci_AsciiEncoder_arrayEncode($this, $inArray, $inPos, $inSize, $outArray, $outPos, $outSize, $controller) {
        var $result, var$9, var$10, $c, $next;
        $result = null;
        a: {
            while ($inPos < $inSize) {
                if ($outPos >= $outSize) {
                    var$9 = $inPos;
                    break a;
                }
                var$10 = $inArray.data;
                var$9 = $inPos + 1 | 0;
                $c = var$10[$inPos];
                if (jl_Character_isHighSurrogate($c)) {
                    if (var$9 >= $inSize) {
                        if (!jnci_BufferedEncoder$Controller_hasMoreInput($controller, 2)) {
                            $result = jnc_CoderResult_UNDERFLOW;
                            break a;
                        }
                        var$9 = var$9 + (-1) | 0;
                        break a;
                    }
                    if (!jl_Character_isLowSurrogate(var$10[var$9])) {
                        $result = jnc_CoderResult_malformedForLength(1);
                        break a;
                    }
                    var$9 = var$9 + (-1) | 0;
                    $result = jnc_CoderResult_unmappableForLength(2);
                    break a;
                }
                if (jl_Character_isLowSurrogate($c))
                    $result = jnc_CoderResult_malformedForLength(1);
                if ($c >= 128) {
                    $result = jnc_CoderResult_unmappableForLength(1);
                    var$9 = var$9 + (-1) | 0;
                    break a;
                }
                var$10 = $outArray.data;
                $next = $outPos + 1 | 0;
                var$10[$outPos] = $c << 24 >> 24;
                $inPos = var$9;
                $outPos = $next;
            }
            var$9 = $inPos;
        }
        $controller.$inPosition = var$9;
        $controller.$outPosition = $outPos;
        return $result;
    }
    var jnci_Iso8859Encoder = $rt_classWithoutFields(jnci_BufferedEncoder);
    function jnci_Iso8859Encoder_arrayEncode($this, $inArray, $inPos, $inSize, $outArray, $outPos, $outSize, $controller) {
        var $result, var$9, var$10, $c, $next;
        $result = null;
        a: {
            while ($inPos < $inSize) {
                if ($outPos >= $outSize) {
                    var$9 = $inPos;
                    break a;
                }
                var$10 = $inArray.data;
                var$9 = $inPos + 1 | 0;
                $c = var$10[$inPos];
                if (jl_Character_isHighSurrogate($c)) {
                    if (var$9 == $inSize) {
                        if (!jnci_BufferedEncoder$Controller_hasMoreInput($controller, 2)) {
                            $result = jnc_CoderResult_UNDERFLOW;
                            break a;
                        }
                        var$9 = var$9 + (-1) | 0;
                        break a;
                    }
                    if (!jl_Character_isLowSurrogate(var$10[var$9])) {
                        $result = jnc_CoderResult_malformedForLength(1);
                        break a;
                    }
                    var$9 = var$9 + (-1) | 0;
                    $result = jnc_CoderResult_unmappableForLength(2);
                    break a;
                }
                if (jl_Character_isLowSurrogate($c))
                    $result = jnc_CoderResult_malformedForLength(1);
                if ($c >= 256) {
                    var$9 = var$9 + (-1) | 0;
                    $result = jnc_CoderResult_unmappableForLength(1);
                    break a;
                }
                var$10 = $outArray.data;
                $next = $outPos + 1 | 0;
                var$10[$outPos] = $c << 24 >> 24;
                $inPos = var$9;
                $outPos = $next;
            }
            var$9 = $inPos;
        }
        $controller.$inPosition = var$9;
        $controller.$outPosition = $outPos;
        return $result;
    }
    function jnci_UTF16Encoder() {
        var a = this; jnci_BufferedEncoder.call(a);
        a.$bom0 = 0;
        a.$littleEndian0 = 0;
    }
    function jnci_UTF16Encoder_arrayEncode($this, $inArray, $inPos, $inSize, $outArray, $outPos, $outSize, $controller) {
        var var$8, var$9;
        if ($this.$bom0) {
            if (($outPos + 2 | 0) > $outSize)
                return !jn_Buffer_hasRemaining($controller.$out1) ? jnc_CoderResult_OVERFLOW : null;
            $this.$bom0 = 0;
            if (!$this.$littleEndian0) {
                var$8 = $outArray.data;
                var$9 = $outPos + 1 | 0;
                var$8[$outPos] = (-2);
                $outPos = var$9 + 1 | 0;
                var$8[var$9] = (-1);
            } else {
                var$8 = $outArray.data;
                var$9 = $outPos + 1 | 0;
                var$8[$outPos] = (-1);
                $outPos = var$9 + 1 | 0;
                var$8[var$9] = (-2);
            }
        }
        return !$this.$littleEndian0 ? jnci_UTF16Encoder_arrayEncodeBE($this, $inArray, $inPos, $inSize, $outArray, $outPos, $outSize, $controller) : jnci_UTF16Encoder_arrayEncodeLE($this, $inArray, $inPos, $inSize, $outArray, $outPos, $outSize, $controller);
    }
    function jnci_UTF16Encoder_arrayEncodeLE($this, $inArray, $inPos, $inSize, $outArray, $outPos, $outSize, $controller) {
        var $result, var$9, var$10, $c, $next, var$13;
        $result = null;
        a: {
            while ($inPos < $inSize) {
                if ($outPos >= $outSize)
                    break a;
                var$9 = $inArray.data;
                var$10 = $inPos + 1 | 0;
                $c = var$9[$inPos];
                if (!jl_Character_isHighSurrogate($c)) {
                    if (jl_Character_isLowSurrogate($c)) {
                        $inPos = var$10 + (-1) | 0;
                        $result = jnc_CoderResult_malformedForLength(1);
                        break a;
                    }
                    if (($outPos + 2 | 0) > $outSize) {
                        $inPos = var$10 + (-1) | 0;
                        if (jnci_BufferedEncoder$Controller_hasMoreOutput($controller, 2))
                            break a;
                        $result = jnc_CoderResult_OVERFLOW;
                        break a;
                    }
                    var$9 = $outArray.data;
                    $inPos = $outPos + 1 | 0;
                    var$9[$outPos] = ($c & 255) << 24 >> 24;
                    $outPos = $inPos + 1 | 0;
                    var$9[$inPos] = $c >> 8 << 24 >> 24;
                    $inPos = var$10;
                } else {
                    if (var$10 == $inSize) {
                        $inPos = var$10 + (-1) | 0;
                        if (jnci_BufferedEncoder$Controller_hasMoreInput($controller, 2))
                            break a;
                        $result = jnc_CoderResult_UNDERFLOW;
                        break a;
                    }
                    $inPos = var$10 + 1 | 0;
                    $next = var$9[var$10];
                    if (!jl_Character_isLowSurrogate($next)) {
                        $inPos = $inPos + (-2) | 0;
                        $result = jnc_CoderResult_malformedForLength(1);
                        break a;
                    }
                    if (($outPos + 4 | 0) > $outSize) {
                        $inPos = $inPos + (-2) | 0;
                        if (jnci_BufferedEncoder$Controller_hasMoreOutput($controller, 4))
                            break a;
                        $result = jnc_CoderResult_OVERFLOW;
                        break a;
                    }
                    var$9 = $outArray.data;
                    var$13 = $outPos + 1 | 0;
                    var$9[$outPos] = ($c & 255) << 24 >> 24;
                    $outPos = var$13 + 1 | 0;
                    var$9[var$13] = $c >> 8 << 24 >> 24;
                    var$13 = $outPos + 1 | 0;
                    var$9[$outPos] = ($next & 255) << 24 >> 24;
                    $outPos = var$13 + 1 | 0;
                    var$9[var$13] = $next >> 8 << 24 >> 24;
                }
            }
        }
        $controller.$inPosition = $inPos;
        $controller.$outPosition = $outPos;
        return $result;
    }
    function jnci_UTF16Encoder_arrayEncodeBE($this, $inArray, $inPos, $inSize, $outArray, $outPos, $outSize, $controller) {
        var $result, var$9, var$10, $c, $next, var$13;
        $result = null;
        a: {
            while ($inPos < $inSize) {
                if ($outPos >= $outSize)
                    break a;
                var$9 = $inArray.data;
                var$10 = $inPos + 1 | 0;
                $c = var$9[$inPos];
                if (!jl_Character_isHighSurrogate($c)) {
                    if (jl_Character_isLowSurrogate($c)) {
                        $inPos = var$10 + (-1) | 0;
                        $result = jnc_CoderResult_malformedForLength(1);
                        break a;
                    }
                    if (($outPos + 2 | 0) > $outSize) {
                        $inPos = var$10 + (-1) | 0;
                        if (jnci_BufferedEncoder$Controller_hasMoreOutput($controller, 2))
                            break a;
                        $result = jnc_CoderResult_OVERFLOW;
                        break a;
                    }
                    var$9 = $outArray.data;
                    $inPos = $outPos + 1 | 0;
                    var$9[$outPos] = $c >> 8 << 24 >> 24;
                    $outPos = $inPos + 1 | 0;
                    var$9[$inPos] = ($c & 255) << 24 >> 24;
                    $inPos = var$10;
                } else {
                    if (var$10 == $inSize) {
                        $inPos = var$10 + (-1) | 0;
                        if (jnci_BufferedEncoder$Controller_hasMoreInput($controller, 2))
                            break a;
                        $result = jnc_CoderResult_UNDERFLOW;
                        break a;
                    }
                    $inPos = var$10 + 1 | 0;
                    $next = var$9[var$10];
                    if (!jl_Character_isLowSurrogate($next)) {
                        $inPos = $inPos + (-2) | 0;
                        $result = jnc_CoderResult_malformedForLength(1);
                        break a;
                    }
                    if (($outPos + 4 | 0) > $outSize) {
                        $inPos = $inPos + (-2) | 0;
                        if (jnci_BufferedEncoder$Controller_hasMoreOutput($controller, 4))
                            break a;
                        $result = jnc_CoderResult_OVERFLOW;
                        break a;
                    }
                    var$9 = $outArray.data;
                    var$13 = $outPos + 1 | 0;
                    var$9[$outPos] = $c >> 8 << 24 >> 24;
                    $outPos = var$13 + 1 | 0;
                    var$9[var$13] = ($c & 255) << 24 >> 24;
                    var$13 = $outPos + 1 | 0;
                    var$9[$outPos] = $next >> 8 << 24 >> 24;
                    $outPos = var$13 + 1 | 0;
                    var$9[var$13] = ($next & 255) << 24 >> 24;
                }
            }
        }
        $controller.$inPosition = $inPos;
        $controller.$outPosition = $outPos;
        return $result;
    }
    function ju_HashMap$1() {
        ju_AbstractSet.call(this);
        this.$this$01 = null;
    }
    function ju_HashMap$1_iterator($this) {
        var var$1;
        var$1 = new ju_HashMap$KeyIterator;
        ju_HashMap$AbstractMapIterator__init_(var$1, $this.$this$01);
        return var$1;
    }
    var jm_BitLevel = $rt_classWithoutFields();
    function jm_BitLevel_shiftLeft($source, $count) {
        var $intCount, var$4, var$5, $resLength, $resDigits, var$8, var$9, var$10, var$11, var$12, $result;
        $intCount = $count >> 5;
        $count = $count & 31;
        var$4 = $source.$numberLength + $intCount | 0;
        var$5 = $count ? 1 : 0;
        a: {
            $resLength = var$4 + var$5 | 0;
            $resDigits = $rt_createIntArray($resLength);
            var$8 = $source.$digits;
            if (!$count)
                jl_System_fastArraycopy(var$8, 0, $resDigits, $intCount, $resDigits.data.length - $intCount | 0);
            else {
                var$9 = $resDigits.data;
                var$10 = 32 - $count | 0;
                var$11 = var$9.length - 1 | 0;
                var$9[var$11] = 0;
                while (true) {
                    if (var$11 <= $intCount)
                        break a;
                    var$12 = var$8.data;
                    var$4 = var$9[var$11];
                    var$5 = (var$11 - $intCount | 0) - 1 | 0;
                    var$9[var$11] = var$4 | (var$12[var$5] >>> var$10 | 0);
                    var$9[var$11 - 1 | 0] = var$12[var$5] << $count;
                    var$11 = var$11 + (-1) | 0;
                }
            }
        }
        var$12 = $resDigits.data;
        $count = 0;
        while ($count < $intCount) {
            var$12[$count] = 0;
            $count = $count + 1 | 0;
        }
        $result = jm_BigInteger__init_1($source.$sign2, $resLength, $resDigits);
        jm_BigInteger_cutOffLeadingZeroes($result);
        return $result;
    }
    function jm_BitLevel_shiftRight($source, $count) {
        var $intCount, $resLength, var$5, $resDigits, var$7, $i, var$9, var$10, var$11, var$12, $result;
        $intCount = $count >> 5;
        $count = $count & 31;
        $resLength = $source.$numberLength;
        if ($intCount >= $resLength) {
            if ($source.$sign2 >= 0) {
                jm_BigInteger_$callClinit();
                $source = jm_BigInteger_ZERO;
            } else {
                jm_BigInteger_$callClinit();
                $source = jm_BigInteger_MINUS_ONE;
            }
            return $source;
        }
        $resLength = $resLength - $intCount | 0;
        var$5 = $resLength + 1 | 0;
        $resDigits = $rt_createIntArray(var$5);
        var$7 = $source.$digits;
        $i = 0;
        while ($i < $intCount) {
            $i = $i + 1 | 0;
        }
        if (!$count)
            jl_System_fastArraycopy(var$7, $intCount, $resDigits, 0, $resLength);
        else {
            var$9 = var$7.data;
            var$10 = 32 - $count | 0;
            var$7 = $resDigits.data;
            $i = 0;
            var$11 = $resLength - 1 | 0;
            while ($i < var$11) {
                var$12 = $i + $intCount | 0;
                var$7[$i] = (var$9[var$12] >>> $count | 0) | var$9[var$12 + 1 | 0] << var$10;
                $i = $i + 1 | 0;
            }
            var$7[$i] = var$9[$i + $intCount | 0] >>> $count | 0;
        }
        a: {
            var$12 = $source.$sign2;
            if (var$12 >= 0)
                var$5 = $resLength;
            else {
                $i = 0;
                while (true) {
                    var$10 = $rt_compare($i, $intCount);
                    if (var$10 >= 0)
                        break;
                    if ($source.$digits.data[$i])
                        break;
                    $i = $i + 1 | 0;
                }
                if (var$10 >= 0) {
                    if ($count <= 0) {
                        var$5 = $resLength;
                        break a;
                    }
                    if (!($source.$digits.data[$i] << (32 - $count | 0))) {
                        var$5 = $resLength;
                        break a;
                    }
                }
                var$7 = $resDigits.data;
                $count = 0;
                while (true) {
                    $intCount = $rt_compare($count, $resLength);
                    if ($intCount >= 0)
                        break;
                    if (var$7[$count] != (-1))
                        break;
                    var$7[$count] = 0;
                    $count = $count + 1 | 0;
                }
                if ($intCount)
                    var$5 = $resLength;
                var$7[$count] = var$7[$count] + 1 | 0;
            }
        }
        $result = jm_BigInteger__init_1(var$12, var$5, $resDigits);
        jm_BigInteger_cutOffLeadingZeroes($result);
        return $result;
    }
    var jl_AbstractStringBuilder$Constants = $rt_classWithoutFields();
    var jl_AbstractStringBuilder$Constants_intPowersOfTen = null;
    var jl_AbstractStringBuilder$Constants_longPowersOfTen = null;
    var jl_AbstractStringBuilder$Constants_longLogPowersOfTen = null;
    var jl_AbstractStringBuilder$Constants_doubleAnalysisResult = null;
    var jl_AbstractStringBuilder$Constants_floatAnalysisResult = null;
    function jl_AbstractStringBuilder$Constants__clinit_() {
        jl_AbstractStringBuilder$Constants_intPowersOfTen = $rt_createIntArrayFromData([1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000]);
        jl_AbstractStringBuilder$Constants_longPowersOfTen = $rt_createLongArrayFromData([Long_fromInt(1), Long_fromInt(10), Long_fromInt(100), Long_fromInt(1000), Long_fromInt(10000), Long_fromInt(100000), Long_fromInt(1000000), Long_fromInt(10000000), Long_fromInt(100000000), Long_fromInt(1000000000), Long_create(1410065408, 2), Long_create(1215752192, 23), Long_create(3567587328, 232), Long_create(1316134912, 2328), Long_create(276447232, 23283), Long_create(2764472320, 232830), Long_create(1874919424, 2328306),
        Long_create(1569325056, 23283064), Long_create(2808348672, 232830643)]);
        jl_AbstractStringBuilder$Constants_longLogPowersOfTen = $rt_createLongArrayFromData([Long_fromInt(1), Long_fromInt(10), Long_fromInt(100), Long_fromInt(10000), Long_fromInt(100000000), Long_create(1874919424, 2328306)]);
        jl_AbstractStringBuilder$Constants_doubleAnalysisResult = new otcit_DoubleAnalyzer$Result;
        jl_AbstractStringBuilder$Constants_floatAnalysisResult = new otcit_FloatAnalyzer$Result;
    }
    function otcit_FloatAnalyzer$Result() {
        var a = this; jl_Object.call(a);
        a.$mantissa = 0;
        a.$exponent = 0;
        a.$sign = 0;
    }
    function ji_ByteArrayInputStream() {
        var a = this; ji_InputStream.call(a);
        a.$buf0 = null;
        a.$pos = 0;
        a.$mark1 = 0;
        a.$count1 = 0;
    }
    function otcit_DoubleAnalyzer$Result() {
        var a = this; jl_Object.call(a);
        a.$mantissa0 = Long_ZERO;
        a.$exponent0 = 0;
        a.$sign0 = 0;
    }
    var jnc_CoderMalfunctionError = $rt_classWithoutFields(jl_Error);
    var ju_HashMap$KeyIterator = $rt_classWithoutFields(ju_HashMap$AbstractMapIterator);
    function ju_HashMap$KeyIterator_next($this) {
        ju_HashMap$AbstractMapIterator_makeNext($this);
        return $this.$currentEntry.$key;
    }
    var ju_Collections = $rt_classWithoutFields();
    var ju_Collections_EMPTY_SET = null;
    var ju_Collections_EMPTY_MAP = null;
    var ju_Collections_EMPTY_LIST = null;
    var ju_Collections_EMPTY_ITERATOR = null;
    var ju_Collections_EMPTY_LIST_ITERATOR = null;
    var ju_Collections_reverseOrder = null;
    function ju_Collections__clinit_() {
        ju_Collections_EMPTY_SET = new ju_Collections$1;
        ju_Collections_EMPTY_MAP = new ju_Collections$2;
        ju_Collections_EMPTY_LIST = new ju_Collections$3;
        ju_Collections_EMPTY_ITERATOR = new ju_Collections$4;
        ju_Collections_EMPTY_LIST_ITERATOR = new ju_Collections$5;
        ju_Collections_reverseOrder = new ju_Collections$_clinit_$lambda$_57_0;
    }
    function ju_Collections$13() {
        ju_AbstractMap.call(this);
        this.$val$m = null;
    }
    function ju_Collections$8() {
        ju_AbstractList.call(this);
        this.$val$list = null;
    }
    function ju_Collections$8_get($this, $index) {
        return $this.$val$list.$get0($index);
    }
    function ju_Collections$8_size($this) {
        return $this.$val$list.$size();
    }
    var ju_TemplateCollections$AbstractImmutableSet = $rt_classWithoutFields(ju_AbstractSet);
    var ju_Collections$1 = $rt_classWithoutFields(ju_TemplateCollections$AbstractImmutableSet);
    var ju_TemplateCollections$AbstractImmutableMap = $rt_classWithoutFields(ju_AbstractMap);
    var ju_Collections$2 = $rt_classWithoutFields(ju_TemplateCollections$AbstractImmutableMap);
    var ju_TemplateCollections$AbstractImmutableList = $rt_classWithoutFields(ju_AbstractList);
    var ju_Collections$3 = $rt_classWithoutFields(ju_TemplateCollections$AbstractImmutableList);
    var ju_Collections$4 = $rt_classWithoutFields();
    var ju_ListIterator = $rt_classWithoutFields(0);
    var ju_Collections$5 = $rt_classWithoutFields();
    var ju_Collections$_clinit_$lambda$_57_0 = $rt_classWithoutFields();
    var juf_Function = $rt_classWithoutFields(0);
    var juf_UnaryOperator = $rt_classWithoutFields(0);
    var juf_Consumer = $rt_classWithoutFields(0);
    var jnc_CharsetDecoder = $rt_classWithoutFields();
    var jl_UnsupportedOperationException = $rt_classWithoutFields(jl_RuntimeException);
    function jnci_BufferedEncoder$Controller() {
        var a = this; jl_Object.call(a);
        a.$in = null;
        a.$out1 = null;
        a.$inPosition = 0;
        a.$outPosition = 0;
    }
    function jnci_BufferedEncoder$Controller_hasMoreInput($this, $sz) {
        return jn_Buffer_remaining($this.$in) < $sz ? 0 : 1;
    }
    function jnci_BufferedEncoder$Controller_hasMoreOutput($this, $sz) {
        return jn_Buffer_remaining($this.$out1) < $sz ? 0 : 1;
    }
    var jnc_BufferUnderflowException = $rt_classWithoutFields(jl_RuntimeException);
    var jnc_BufferOverflowException = $rt_classWithoutFields(jl_RuntimeException);
    function jnc_MalformedInputException() {
        jnc_CharacterCodingException.call(this);
        this.$length2 = 0;
    }
    function jnc_MalformedInputException_getMessage($this) {
        var var$1, var$2;
        var$1 = $this.$length2;
        var$2 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$2);
        jl_StringBuilder_append0(jl_StringBuilder_append(var$2, $rt_s(916)), var$1);
        return jl_AbstractStringBuilder_toString(var$2);
    }
    function jnc_UnmappableCharacterException() {
        jnc_CharacterCodingException.call(this);
        this.$length3 = 0;
    }
    function jnc_UnmappableCharacterException_getMessage($this) {
        var var$1, var$2;
        var$1 = $this.$length3;
        var$2 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$2);
        jl_StringBuilder_append0(jl_StringBuilder_append(var$2, $rt_s(917)), var$1);
        return jl_AbstractStringBuilder_toString(var$2);
    }
    var ju_NoSuchElementException = $rt_classWithoutFields(jl_RuntimeException);
    function ju_Collections$14() {
        ju_AbstractSet.call(this);
        this.$val$c = null;
    }
    var jn_BufferUnderflowException = $rt_classWithoutFields(jl_RuntimeException);
    var jn_ReadOnlyBufferException = $rt_classWithoutFields(jl_UnsupportedOperationException);
    var jn_BufferOverflowException = $rt_classWithoutFields(jl_RuntimeException);
    function ju_Collections$15() {
        jl_Object.call(this);
        this.$val$c0 = null;
    }
    var jur_IntArrHash = $rt_classWithoutFields();
    function ju_AbstractMap$SimpleImmutableEntry() {
        var a = this; jl_Object.call(a);
        a.$key1 = null;
        a.$value36 = null;
    }
    $rt_packages([-1, "java", 0, "util", 1, "regex", 1, "function", 1, "concurrent", 0, "nio", 5, "charset", 6, "impl", 0, "io", 0, "math", 0, "net", 10, "impl", 0, "lang", 12, "annotation", 12, "reflect", -1, "org", 15, "teavm", 16, "jso", 16, "interop", 16, "classlib", 19, "impl", 20, "reflection", 20, "unicode", 16, "runtime", 16, "platform", 15, "json", -1, "trackerjo", 26, "javaish"
    ]);
    $rt_metadata([jl_Object, "Object", 12, 0, [], 0, 3, 0, 0, ["$hashCode0", $rt_wrapFunction0(jl_Object_hashCode), "$equals", $rt_wrapFunction1(jl_Object_equals), "$toString", $rt_wrapFunction0(jl_Object_toString)],
    t_Client, 0, jl_Object, [], 0, 3, 0, 0, 0,
    jlr_AnnotatedElement, 0, jl_Object, [], 3, 3, 0, 0, 0,
    jlr_Type, 0, jl_Object, [], 3, 3, 0, 0, 0,
    jl_Class, "Class", 12, jl_Object, [jlr_AnnotatedElement, jlr_Type], 0, 3, 0, 0, ["$toString", $rt_wrapFunction0(jl_Class_toString)],
    otji_JS, 0, jl_Object, [], 4, 0, 0, 0, 0,
    otp_Platform, 0, jl_Object, [], 4, 3, 0, 0, 0,
    jl_Throwable, 0, jl_Object, [], 0, 3, 0, 0, ["$getMessage", $rt_wrapFunction0(jl_Throwable_getMessage)],
    jl_Exception, 0, jl_Throwable, [], 0, 3, 0, 0, 0,
    jl_RuntimeException, "RuntimeException", 12, jl_Exception, [], 0, 3, 0, 0, 0,
    jl_ClassCastException, "ClassCastException", 12, jl_RuntimeException, [], 0, 3, 0, 0, 0,
    ji_Serializable, 0, jl_Object, [], 3, 3, 0, 0, 0,
    jl_Comparable, 0, jl_Object, [], 3, 3, 0, 0, 0,
    jl_CharSequence, "CharSequence", 12, jl_Object, [], 3, 3, 0, 0, 0,
    jl_String, "String", 12, jl_Object, [ji_Serializable, jl_Comparable, jl_CharSequence], 0, 3, 0, jl_String_$callClinit, ["$toString", $rt_wrapFunction0(jl_String_toString), "$equals", $rt_wrapFunction1(jl_String_equals), "$hashCode0", $rt_wrapFunction0(jl_String_hashCode)],
    jl_Error, 0, jl_Throwable, [], 0, 3, 0, 0, 0,
    jl_LinkageError, 0, jl_Error, [], 0, 3, 0, 0, 0,
    jl_NoClassDefFoundError, 0, jl_LinkageError, [], 0, 3, 0, 0, 0,
    jl_Number, "Number", 12, jl_Object, [ji_Serializable], 1, 3, 0, 0, 0,
    jl_Integer, "Integer", 12, jl_Number, [jl_Comparable], 0, 3, 0, 0, ["$intValue", $rt_wrapFunction0(jl_Integer_intValue), "$floatValue", $rt_wrapFunction0(jl_Integer_floatValue), "$toString", $rt_wrapFunction0(jl_Integer_toString0), "$hashCode0", $rt_wrapFunction0(jl_Integer_hashCode), "$equals", $rt_wrapFunction1(jl_Integer_equals)],
    jl_AbstractStringBuilder, 0, jl_Object, [ji_Serializable, jl_CharSequence], 0, 0, 0, 0, ["$ensureCapacity", $rt_wrapFunction1(jl_AbstractStringBuilder_ensureCapacity), "$toString", $rt_wrapFunction0(jl_AbstractStringBuilder_toString)],
    jl_Appendable, 0, jl_Object, [], 3, 3, 0, 0, 0,
    jl_StringBuilder, "StringBuilder", 12, jl_AbstractStringBuilder, [jl_Appendable], 0, 3, 0, 0, ["$insert2", $rt_wrapFunction4(jl_StringBuilder_insert), "$append3", $rt_wrapFunction3(jl_StringBuilder_append5), "$toString", $rt_wrapFunction0(jl_StringBuilder_toString), "$ensureCapacity", $rt_wrapFunction1(jl_StringBuilder_ensureCapacity), "$insert1", $rt_wrapFunction2(jl_StringBuilder_insert0), "$insert", $rt_wrapFunction2(jl_StringBuilder_insert1)],
    jl_IncompatibleClassChangeError, 0, jl_LinkageError, [], 0, 3, 0, 0, 0,
    jl_NoSuchFieldError, 0, jl_IncompatibleClassChangeError, [], 0, 3, 0, 0, 0,
    jl_NoSuchMethodError, 0, jl_IncompatibleClassChangeError, [], 0, 3, 0, 0, 0,
    otj_JSObject, "JSObject", 17, jl_Object, [], 3, 3, 0, 0, 0,
    otjdx_Node, 0, jl_Object, [otj_JSObject], 3, 3, 0, 0, 0,
    otjdx_Document, 0, jl_Object, [otjdx_Node], 3, 3, 0, 0, 0,
    otjde_EventTarget, 0, jl_Object, [otj_JSObject], 3, 3, 0, 0, 0,
    otjdh_HTMLDocument, 0, jl_Object, [otjdx_Document, otjde_EventTarget], 3, 3, 0, 0, 0,
    tj_Runner, 0, jl_Object, [], 0, 3, 0, 0, 0,
    jl_System, 0, jl_Object, [], 4, 3, 0, 0, 0,
    oj_JSONObject, "JSONObject", 25, jl_Object, [], 0, 3, 0, 0, ["$toString", $rt_wrapFunction0(oj_JSONObject_toString)],
    otci_IntegerUtil, 0, jl_Object, [], 4, 3, 0, 0, 0,
    otjde_FocusEventTarget, 0, jl_Object, [otjde_EventTarget], 3, 3, 0, 0, 0,
    otjde_MouseEventTarget, 0, jl_Object, [otjde_EventTarget], 3, 3, 0, 0, 0,
    otjde_KeyboardEventTarget, 0, jl_Object, [otjde_EventTarget], 3, 3, 0, 0, 0,
    otjde_LoadEventTarget, 0, jl_Object, [otjde_EventTarget], 3, 3, 0, 0, 0,
    otjde_GamepadEventTarget, 0, jl_Object, [otjde_EventTarget], 3, 3, 0, 0, 0,
    otjb_WindowEventTarget, 0, jl_Object, [otjde_EventTarget, otjde_FocusEventTarget, otjde_MouseEventTarget, otjde_KeyboardEventTarget, otjde_LoadEventTarget, otjde_GamepadEventTarget], 3, 3, 0, 0, 0,
    otjb_StorageProvider, 0, jl_Object, [], 3, 3, 0, 0, 0,
    otjc_JSArrayReader, 0, jl_Object, [otj_JSObject], 3, 3, 0, 0, 0,
    otjb_Window, 0, jl_Object, [otj_JSObject, otjb_WindowEventTarget, otjb_StorageProvider, otjc_JSArrayReader], 1, 3, 0, 0, ["$get$exported$0", $rt_wrapFunction1(otjb_Window_get$exported$0), "$addEventListener$exported$1", $rt_wrapFunction2(otjb_Window_addEventListener$exported$1), "$removeEventListener$exported$2", $rt_wrapFunction2(otjb_Window_removeEventListener$exported$2), "$removeEventListener$exported$3", $rt_wrapFunction3(otjb_Window_removeEventListener$exported$3), "$dispatchEvent$exported$4", $rt_wrapFunction1(otjb_Window_dispatchEvent$exported$4),
    "$getLength$exported$5", $rt_wrapFunction0(otjb_Window_getLength$exported$5), "$addEventListener$exported$6", $rt_wrapFunction3(otjb_Window_addEventListener$exported$6)],
    tj_Variables, "Variables", 27, jl_Object, [], 0, 0, 0, 0, 0,
    tj_Parser, 0, jl_Object, [], 0, 3, 0, 0, 0,
    tj_Interpreter, 0, jl_Object, [], 0, 3, 0, 0, 0,
    jl_AutoCloseable, 0, jl_Object, [], 3, 3, 0, 0, 0,
    ji_Closeable, 0, jl_Object, [jl_AutoCloseable], 3, 3, 0, 0, 0,
    ji_Flushable, 0, jl_Object, [], 3, 3, 0, 0, 0]);
    $rt_metadata([ji_OutputStream, 0, jl_Object, [ji_Closeable, ji_Flushable], 1, 3, 0, 0, 0,
    ji_FilterOutputStream, 0, ji_OutputStream, [], 0, 3, 0, 0, 0,
    ji_PrintStream, 0, ji_FilterOutputStream, [], 0, 3, 0, 0, 0,
    otcic_ConsoleOutputStream, 0, ji_OutputStream, [], 1, 3, 0, 0, 0,
    otcic_StdoutOutputStream, 0, otcic_ConsoleOutputStream, [], 0, 3, 0, 0, ["$write2", $rt_wrapFunction3(otcic_StdoutOutputStream_write)],
    tj_State, "State", 27, jl_Object, [], 0, 3, 0, 0, 0,
    tj_Result, "Result", 27, jl_Object, [], 0, 0, 0, 0, 0,
    tj_Return, "Return", 27, jl_Object, [], 0, 0, 0, 0, 0,
    tj_Debugger, 0, jl_Object, [], 0, 3, 0, 0, 0,
    jl_Iterable, "Iterable", 12, jl_Object, [], 3, 3, 0, 0, 0,
    ju_Collection, "Collection", 1, jl_Object, [jl_Iterable], 3, 3, 0, 0, 0,
    ju_AbstractCollection, "AbstractCollection", 1, jl_Object, [ju_Collection], 1, 3, 0, 0, ["$toString", $rt_wrapFunction0(ju_AbstractCollection_toString)],
    ju_SequencedCollection, 0, jl_Object, [ju_Collection], 3, 3, 0, 0, 0,
    ju_List, "List", 1, jl_Object, [ju_SequencedCollection], 3, 3, 0, 0, 0,
    ju_AbstractList, "AbstractList", 1, ju_AbstractCollection, [ju_List], 1, 3, 0, 0, ["$add", $rt_wrapFunction1(ju_AbstractList_add), "$iterator", $rt_wrapFunction0(ju_AbstractList_iterator), "$add0", $rt_wrapFunction2(ju_AbstractList_add0), "$remove", $rt_wrapFunction1(ju_AbstractList_remove), "$equals", $rt_wrapFunction1(ju_AbstractList_equals)],
    jl_Cloneable, 0, jl_Object, [], 3, 3, 0, 0, 0,
    ju_RandomAccess, 0, jl_Object, [], 3, 3, 0, 0, 0,
    ju_ArrayList, "ArrayList", 1, ju_AbstractList, [jl_Cloneable, ji_Serializable, ju_RandomAccess], 0, 3, 0, 0, ["$get0", $rt_wrapFunction1(ju_ArrayList_get), "$size", $rt_wrapFunction0(ju_ArrayList_size), "$add", $rt_wrapFunction1(ju_ArrayList_add), "$add0", $rt_wrapFunction2(ju_ArrayList_add0), "$remove", $rt_wrapFunction1(ju_ArrayList_remove), "$toString", $rt_wrapFunction0(ju_ArrayList_toString)],
    oj_JSONArray, "JSONArray", 25, jl_Object, [jl_Iterable], 0, 3, 0, 0, ["$toString", $rt_wrapFunction0(oj_JSONArray_toString)],
    tj_Statements, "Statements", 27, jl_Object, [], 0, 3, 0, 0, ["$getLine", $rt_wrapFunction0(tj_Statements_getLine)],
    oj_JSONTokener, "JSONTokener", 25, jl_Object, [], 0, 3, 0, 0, 0,
    tj_JavaTranslator, 0, jl_Object, [], 0, 3, 0, 0, 0,
    tj_PythonTranslator, 0, jl_Object, [], 0, 3, 0, 0, 0,
    jn_URLEncoder, 0, jl_Object, [], 4, 3, 0, 0, 0,
    jn_URL, "URL", 10, jl_Object, [ji_Serializable], 4, 3, 0, 0, 0,
    jn_URLConnection, "URLConnection", 10, jl_Object, [], 1, 3, 0, 0, 0,
    jn_HttpURLConnection, 0, jn_URLConnection, [], 1, 3, 0, 0, 0,
    ju_Comparator, "Comparator", 1, jl_Object, [], 3, 3, 0, 0, 0,
    jl_String$_clinit_$lambda$_89_0, 0, jl_Object, [ju_Comparator], 0, 3, 0, 0, 0,
    jl_IndexOutOfBoundsException, "IndexOutOfBoundsException", 12, jl_RuntimeException, [], 0, 3, 0, 0, 0,
    jlr_Array, 0, jl_Object, [], 4, 3, 0, 0, 0,
    jl_NullPointerException, "NullPointerException", 12, jl_RuntimeException, [], 0, 3, 0, 0, 0,
    jl_ArrayStoreException, "ArrayStoreException", 12, jl_RuntimeException, [], 0, 3, 0, 0, 0,
    jl_Character, 0, jl_Object, [jl_Comparable], 0, 3, 0, 0, 0,
    ju_Map, "Map", 1, jl_Object, [], 3, 3, 0, 0, 0,
    ju_AbstractMap, 0, jl_Object, [ju_Map], 1, 3, 0, 0, 0,
    ju_HashMap, 0, ju_AbstractMap, [jl_Cloneable, ji_Serializable], 0, 3, 0, 0, 0,
    tj_ClassStmt, "ClassStmt", 27, tj_Statements, [], 0, 0, 0, 0, ["$getLine", $rt_wrapFunction0(tj_ClassStmt_getLine)],
    jnc_Charset, "Charset", 6, jl_Object, [jl_Comparable], 1, 3, 0, 0, 0,
    jnci_UTF8Charset, "UTF8Charset", 7, jnc_Charset, [], 0, 3, 0, jnci_UTF8Charset_$callClinit, ["$newEncoder", $rt_wrapFunction0(jnci_UTF8Charset_newEncoder)],
    tj_Runner$1, 0, jl_Object, [], 32, 0, 0, tj_Runner$1_$callClinit, 0,
    tj_DeclarationStmt, "DeclarationStmt", 27, tj_Statements, [], 0, 0, 0, 0, ["$getLine", $rt_wrapFunction0(tj_DeclarationStmt_getLine)],
    tj_IfStmt, "IfStmt", 27, tj_Statements, [], 0, 0, 0, 0, ["$getLine", $rt_wrapFunction0(tj_IfStmt_getLine)],
    tj_ElseStmt, "ElseStmt", 27, tj_Statements, [], 0, 0, 0, 0, ["$getLine", $rt_wrapFunction0(tj_ElseStmt_getLine)],
    tj_ElseIfStmt, "ElseIfStmt", 27, tj_Statements, [], 0, 0, 0, 0, ["$getLine", $rt_wrapFunction0(tj_ElseIfStmt_getLine)],
    tj_ReturnStmt, "ReturnStmt", 27, tj_Statements, [], 0, 0, 0, 0, ["$getLine", $rt_wrapFunction0(tj_ReturnStmt_getLine)],
    tj_MutationStmt, "MutationStmt", 27, tj_Statements, [], 0, 0, 0, 0, ["$getLine", $rt_wrapFunction0(tj_MutationStmt_getLine)],
    tj_FunctionStmt, "FunctionStmt", 27, tj_Statements, [], 0, 0, 0, 0, ["$getLine", $rt_wrapFunction0(tj_FunctionStmt_getLine)],
    tj_CallStmt, "CallStmt", 27, tj_Statements, [], 0, 0, 0, 0, ["$getLine", $rt_wrapFunction0(tj_CallStmt_getLine)],
    tj_AssignmentStmt, "AssignmentStmt", 27, tj_Statements, [], 0, 0, 0, 0, ["$getLine", $rt_wrapFunction0(tj_AssignmentStmt_getLine)]]);
    $rt_metadata([tj_ForEachStmt, "ForEachStmt", 27, tj_Statements, [], 0, 0, 0, 0, ["$getLine", $rt_wrapFunction0(tj_ForEachStmt_getLine)],
    tj_ForWhenStmt, "ForWhenStmt", 27, tj_Statements, [], 0, 0, 0, 0, ["$getLine", $rt_wrapFunction0(tj_ForWhenStmt_getLine)],
    tj_ShowMsgBoxStmt, "ShowMsgBoxStmt", 27, tj_Statements, [], 0, 0, 0, 0, ["$getLine", $rt_wrapFunction0(tj_ShowMsgBoxStmt_getLine)],
    tj_PrintStmt, "PrintStmt", 27, tj_Statements, [], 0, 0, 0, 0, ["$getLine", $rt_wrapFunction0(tj_PrintStmt_getLine)],
    tj_WhileStmt, "WhileStmt", 27, tj_Statements, [], 0, 0, 0, 0, ["$getLine", $rt_wrapFunction0(tj_WhileStmt_getLine)],
    tj_RemoveAllFromStmt, "RemoveAllFromStmt", 27, tj_Statements, [], 0, 0, 0, 0, 0,
    tj_RemoveFromStmt, "RemoveFromStmt", 27, tj_Statements, [], 0, 0, 0, 0, 0,
    tj_RemoveAtStmt, "RemoveAtStmt", 27, tj_Statements, [], 0, 0, 0, 0, 0,
    ju_Map$Entry, 0, jl_Object, [], 3, 3, 0, 0, 0,
    jl_Enum, "Enum", 12, jl_Object, [jl_Comparable, ji_Serializable], 1, 3, 0, 0, ["$toString", $rt_wrapFunction0(jl_Enum_toString), "$equals", $rt_wrapFunction1(jl_Enum_equals)],
    tj_JavaishVal$JavaishType, "JavaishVal$JavaishType", 27, jl_Enum, [], 12, 3, 0, tj_JavaishVal$JavaishType_$callClinit, 0,
    tj_JavaishVal, 0, jl_Object, [], 3, 3, 0, 0, 0,
    tj_JavaishListVal, "JavaishListVal", 27, jl_Object, [tj_JavaishVal], 4, 0, 0, 0, ["$getType0", $rt_wrapFunction0(tj_JavaishListVal_getType), "$typeString", $rt_wrapFunction0(tj_JavaishListVal_typeString), "$getValue0", $rt_wrapFunction0(tj_JavaishListVal_getValue0)],
    tj_FunctionVar, "FunctionVar", 27, jl_Object, [], 0, 0, 0, 0, 0,
    jl_Readable, 0, jl_Object, [], 3, 3, 0, 0, 0,
    ji_Reader, 0, jl_Object, [ji_Closeable, jl_Readable], 1, 3, 0, 0, 0,
    ji_StringReader, 0, ji_Reader, [], 0, 3, 0, 0, ["$read", $rt_wrapFunction0(ji_StringReader_read)],
    oj_JSONObject$Null, "JSONObject$Null", 25, jl_Object, [], 4, 0, 0, 0, ["$equals", $rt_wrapFunction1(oj_JSONObject$Null_equals), "$toString", $rt_wrapFunction0(oj_JSONObject$Null_toString)],
    tj_Argument, "Argument", 27, jl_Object, [], 0, 3, 0, 0, 0,
    tj_Statements$StmtType, "Statements$StmtType", 27, jl_Enum, [], 12, 0, 0, tj_Statements$StmtType_$callClinit, 0,
    tj_Element, "Element", 27, jl_Object, [], 0, 3, 0, 0, 0,
    tj_Expression, "Expression", 27, jl_Object, [], 0, 3, 0, 0, ["$toString", $rt_wrapFunction0(tj_Expression_toString)],
    tj_Expression$ExpressionReturnType, "Expression$ExpressionReturnType", 27, jl_Enum, [], 12, 0, 0, tj_Expression$ExpressionReturnType_$callClinit, 0,
    tj_Statements$MutationType, "Statements$MutationType", 27, jl_Enum, [], 12, 3, 0, tj_Statements$MutationType_$callClinit, 0,
    ju_Objects, 0, jl_Object, [], 4, 3, 0, 0, 0,
    ji_IOException, "IOException", 8, jl_Exception, [], 0, 3, 0, 0, 0,
    ji_UnsupportedEncodingException, "UnsupportedEncodingException", 8, ji_IOException, [], 0, 3, 0, 0, 0,
    jl_IllegalArgumentException, "IllegalArgumentException", 12, jl_RuntimeException, [], 0, 3, 0, 0, 0,
    jnc_UnsupportedCharsetException, "UnsupportedCharsetException", 6, jl_IllegalArgumentException, [], 0, 3, 0, 0, 0,
    jn_URLStreamHandler, "URLStreamHandler", 10, jl_Object, [], 1, 3, 0, 0, 0,
    otji_JSWrapper, 0, jl_Object, [], 4, 3, 0, otji_JSWrapper_$callClinit, 0,
    tj_ExpressionElmt, "ExpressionElmt", 27, tj_Element, [], 0, 0, 0, 0, ["$toString", $rt_wrapFunction0(tj_ExpressionElmt_toString)],
    tj_NotElmt, "NotElmt", 27, tj_Element, [], 0, 0, 0, 0, ["$toString", $rt_wrapFunction0(tj_NotElmt_toString)],
    tj_CastElmt, "CastElmt", 27, tj_Element, [], 0, 0, 0, 0, ["$toString", $rt_wrapFunction0(tj_CastElmt_toString)],
    tj_ShowInputBoxElmt, "ShowInputBoxElmt", 27, tj_Element, [], 0, 0, 0, 0, 0,
    tj_FunctionElmt, "FunctionElmt", 27, tj_Element, [], 0, 0, 0, 0, ["$toString", $rt_wrapFunction0(tj_FunctionElmt_toString)],
    tj_ListElmt, "ListElmt", 27, tj_Element, [], 0, 0, 0, 0, ["$toString", $rt_wrapFunction0(tj_ListElmt_toString)],
    tj_ArrayLengthElmt, "ArrayLengthElmt", 27, tj_Element, [], 0, 0, 0, 0, ["$toString", $rt_wrapFunction0(tj_ArrayLengthElmt_toString)],
    tj_VariableElmt, "VariableElmt", 27, tj_Element, [], 0, 0, 0, 0, ["$toString", $rt_wrapFunction0(tj_VariableElmt_toString)],
    tj_ListValElmt, "ListValElmt", 27, tj_Element, [], 0, 0, 0, 0, ["$toString", $rt_wrapFunction0(tj_ListValElmt_toString)],
    ji_BufferedReader, 0, ji_Reader, [], 0, 3, 0, 0, ["$read", $rt_wrapFunction0(ji_BufferedReader_read)],
    tj_JavaishFloat, "JavaishFloat", 27, jl_Object, [tj_JavaishVal], 4, 0, 0, 0, ["$getType0", $rt_wrapFunction0(tj_JavaishFloat_getType), "$typeString", $rt_wrapFunction0(tj_JavaishFloat_typeString), "$getValue0", $rt_wrapFunction0(tj_JavaishFloat_getValue0)],
    jl_Float, "Float", 12, jl_Number, [jl_Comparable], 0, 3, 0, 0, ["$intValue", $rt_wrapFunction0(jl_Float_intValue), "$floatValue", $rt_wrapFunction0(jl_Float_floatValue), "$toString", $rt_wrapFunction0(jl_Float_toString0), "$equals", $rt_wrapFunction1(jl_Float_equals)],
    tj_JavaishInt, "JavaishInt", 27, jl_Object, [tj_JavaishVal], 4, 0, 0, 0, ["$getType0", $rt_wrapFunction0(tj_JavaishInt_getType), "$typeString", $rt_wrapFunction0(tj_JavaishInt_typeString), "$getValue0", $rt_wrapFunction0(tj_JavaishInt_getValue0)],
    tj_JavaishString, "JavaishString", 27, jl_Object, [tj_JavaishVal], 4, 0, 0, 0, ["$getType0", $rt_wrapFunction0(tj_JavaishString_getType), "$typeString", $rt_wrapFunction0(tj_JavaishString_typeString), "$getValue0", $rt_wrapFunction0(tj_JavaishString_getValue0)],
    tj_JavaishBoolean, "JavaishBoolean", 27, jl_Object, [tj_JavaishVal], 4, 0, 0, 0, ["$getType0", $rt_wrapFunction0(tj_JavaishBoolean_getType), "$typeString", $rt_wrapFunction0(tj_JavaishBoolean_typeString), "$getValue0", $rt_wrapFunction0(tj_JavaishBoolean_getValue0)],
    jl_Boolean, "Boolean", 12, jl_Object, [ji_Serializable, jl_Comparable], 0, 3, 0, 0, ["$toString", $rt_wrapFunction0(jl_Boolean_toString0), "$equals", $rt_wrapFunction1(jl_Boolean_equals)],
    tj_JavaishList, "JavaishList", 27, jl_Object, [], 3, 3, 0, 0, 0,
    tj_JavaishBooleanList, "JavaishBooleanList", 27, jl_Object, [tj_JavaishList], 4, 0, 0, 0, ["$getType0", $rt_wrapFunction0(tj_JavaishBooleanList_getType), "$typeString", $rt_wrapFunction0(tj_JavaishBooleanList_typeString), "$getInnerType", $rt_wrapFunction0(tj_JavaishBooleanList_getInnerType), "$listString", $rt_wrapFunction0(tj_JavaishBooleanList_listString), "$getLength", $rt_wrapFunction0(tj_JavaishBooleanList_getLength), "$getValue1", $rt_wrapFunction1(tj_JavaishBooleanList_getValue)],
    tj_JavaishStringList, "JavaishStringList", 27, jl_Object, [tj_JavaishList], 4, 0, 0, 0, ["$getType0", $rt_wrapFunction0(tj_JavaishStringList_getType), "$typeString", $rt_wrapFunction0(tj_JavaishStringList_typeString), "$getInnerType", $rt_wrapFunction0(tj_JavaishStringList_getInnerType), "$listString", $rt_wrapFunction0(tj_JavaishStringList_listString), "$getLength", $rt_wrapFunction0(tj_JavaishStringList_getLength), "$getValue1", $rt_wrapFunction1(tj_JavaishStringList_getValue)]]);
    $rt_metadata([tj_JavaishIntList, "JavaishIntList", 27, jl_Object, [tj_JavaishList], 4, 0, 0, 0, ["$getType0", $rt_wrapFunction0(tj_JavaishIntList_getType), "$typeString", $rt_wrapFunction0(tj_JavaishIntList_typeString), "$getInnerType", $rt_wrapFunction0(tj_JavaishIntList_getInnerType), "$listString", $rt_wrapFunction0(tj_JavaishIntList_listString), "$getLength", $rt_wrapFunction0(tj_JavaishIntList_getLength), "$getValue1", $rt_wrapFunction1(tj_JavaishIntList_getValue)],
    tj_JavaishFloatList, "JavaishFloatList", 27, jl_Object, [tj_JavaishList], 4, 0, 0, 0, ["$getType0", $rt_wrapFunction0(tj_JavaishFloatList_getType), "$typeString", $rt_wrapFunction0(tj_JavaishFloatList_typeString), "$getInnerType", $rt_wrapFunction0(tj_JavaishFloatList_getInnerType), "$listString", $rt_wrapFunction0(tj_JavaishFloatList_listString), "$getLength", $rt_wrapFunction0(tj_JavaishFloatList_getLength), "$getValue1", $rt_wrapFunction1(tj_JavaishFloatList_getValue)],
    tj_Element$ElementType, "Element$ElementType", 27, jl_Enum, [], 12, 3, 0, tj_Element$ElementType_$callClinit, 0,
    tj_StringElmt, "StringElmt", 27, tj_Element, [], 0, 0, 0, 0, ["$toString", $rt_wrapFunction0(tj_StringElmt_toString)],
    tj_AndElmt, "AndElmt", 27, tj_Element, [], 0, 0, 0, 0, ["$toString", $rt_wrapFunction0(tj_AndElmt_toString)],
    tj_OrElmt, "OrElmt", 27, tj_Element, [], 0, 0, 0, 0, ["$toString", $rt_wrapFunction0(tj_OrElmt_toString)],
    tj_PlusElmt, "PlusElmt", 27, tj_Element, [], 0, 0, 0, 0, ["$toString", $rt_wrapFunction0(tj_PlusElmt_toString)],
    tj_MinusElmt, "MinusElmt", 27, tj_Element, [], 0, 0, 0, 0, ["$toString", $rt_wrapFunction0(tj_MinusElmt_toString)],
    tj_MultiplyElmt, "MultiplyElmt", 27, tj_Element, [], 0, 0, 0, 0, ["$toString", $rt_wrapFunction0(tj_MultiplyElmt_toString)],
    tj_DivideElmt, "DivideElmt", 27, tj_Element, [], 0, 0, 0, 0, ["$toString", $rt_wrapFunction0(tj_DivideElmt_toString)],
    tj_FloatElmt, "FloatElmt", 27, tj_Element, [], 0, 0, 0, 0, ["$toString", $rt_wrapFunction0(tj_FloatElmt_toString)],
    tj_IntElmt, "IntElmt", 27, tj_Element, [], 0, 0, 0, 0, ["$toString", $rt_wrapFunction0(tj_IntElmt_toString)],
    tj_BoolElmt, "BoolElmt", 27, tj_Element, [], 0, 0, 0, 0, ["$toString", $rt_wrapFunction0(tj_BoolElmt_toString)],
    tj_EqualElmt, "EqualElmt", 27, tj_Element, [], 0, 0, 0, 0, ["$toString", $rt_wrapFunction0(tj_EqualElmt_toString)],
    tj_NotEqualElmt, "NotEqualElmt", 27, tj_Element, [], 0, 0, 0, 0, ["$toString", $rt_wrapFunction0(tj_NotEqualElmt_toString)],
    tj_GreaterThanElmt, "GreaterThanElmt", 27, tj_Element, [], 0, 0, 0, 0, ["$toString", $rt_wrapFunction0(tj_GreaterThanElmt_toString)],
    tj_LessThanElmt, "LessThanElmt", 27, tj_Element, [], 0, 0, 0, 0, ["$toString", $rt_wrapFunction0(tj_LessThanElmt_toString)],
    tj_GreaterThanEqualElmt, "GreaterThanEqualElmt", 27, tj_Element, [], 0, 0, 0, 0, ["$toString", $rt_wrapFunction0(tj_GreaterThanEqualElmt_toString)],
    tj_LessThanEqualElmt, "LessThanEqualElmt", 27, tj_Element, [], 0, 0, 0, 0, ["$toString", $rt_wrapFunction0(tj_LessThanEqualElmt_toString)],
    jnc_Charset$Charsets, 0, jl_Object, [], 0, 0, 0, jnc_Charset$Charsets_$callClinit, 0,
    jl_StringBuffer, "StringBuffer", 12, jl_AbstractStringBuilder, [jl_Appendable], 0, 3, 0, 0, ["$insert2", $rt_wrapFunction4(jl_StringBuffer_insert), "$append3", $rt_wrapFunction3(jl_StringBuffer_append), "$ensureCapacity", $rt_wrapFunction1(jl_StringBuffer_ensureCapacity), "$insert1", $rt_wrapFunction2(jl_StringBuffer_insert0), "$insert", $rt_wrapFunction2(jl_StringBuffer_insert1)],
    jn_MalformedURLException, "MalformedURLException", 10, ji_IOException, [], 0, 3, 0, 0, 0,
    jl_NumberFormatException, "NumberFormatException", 12, jl_IllegalArgumentException, [], 0, 3, 0, 0, 0,
    otcit_FloatSynthesizer, 0, jl_Object, [], 4, 3, 0, 0, 0,
    jnc_IllegalCharsetNameException, "IllegalCharsetNameException", 6, jl_IllegalArgumentException, [], 0, 3, 0, 0, 0,
    otjc_JSWeakMap, 0, jl_Object, [otj_JSObject], 1, 3, 0, 0, 0,
    otjc_JSWeakRef, 0, jl_Object, [otj_JSObject], 1, 3, 0, 0, 0,
    otjc_JSMap, 0, jl_Object, [otj_JSObject], 1, 3, 0, 0, 0,
    otjc_JSFinalizationRegistryConsumer, 0, jl_Object, [otj_JSObject], 3, 3, 0, 0, 0,
    otji_JSWrapper$_clinit_$lambda$_29_0, 0, jl_Object, [otjc_JSFinalizationRegistryConsumer], 0, 3, 0, 0, ["$accept$exported$0", $rt_wrapFunction1(otji_JSWrapper$_clinit_$lambda$_29_0_accept$exported$0)],
    otjc_JSFinalizationRegistry, 0, jl_Object, [otj_JSObject], 1, 3, 0, 0, 0,
    otji_JSWrapper$_clinit_$lambda$_29_1, 0, jl_Object, [otjc_JSFinalizationRegistryConsumer], 0, 3, 0, 0, ["$accept$exported$0", $rt_wrapFunction1(otji_JSWrapper$_clinit_$lambda$_29_1_accept$exported$0)],
    jl_Math, 0, jl_Object, [], 4, 3, 0, 0, 0,
    otcit_FloatAnalyzer, 0, jl_Object, [], 4, 3, 0, 0, 0,
    jnc_StandardCharsets, 0, jl_Object, [], 4, 3, 0, jnc_StandardCharsets_$callClinit, 0,
    jl_CloneNotSupportedException, "CloneNotSupportedException", 12, jl_Exception, [], 0, 3, 0, 0, 0,
    jnci_AsciiCharset, "AsciiCharset", 7, jnc_Charset, [], 0, 3, 0, 0, ["$newEncoder", $rt_wrapFunction0(jnci_AsciiCharset_newEncoder)],
    jnci_Iso8859Charset, "Iso8859Charset", 7, jnc_Charset, [], 0, 3, 0, 0, ["$newEncoder", $rt_wrapFunction0(jnci_Iso8859Charset_newEncoder)],
    jnci_UTF16Charset, "UTF16Charset", 7, jnc_Charset, [], 0, 3, 0, 0, ["$newEncoder", $rt_wrapFunction0(jnci_UTF16Charset_newEncoder)],
    otjc_JSObjects, 0, jl_Object, [], 4, 3, 0, 0, 0,
    otpp_ResourceAccessor, 0, jl_Object, [], 4, 0, 0, 0, 0,
    otciu_UnicodeHelper, 0, jl_Object, [], 4, 3, 0, 0, 0,
    otci_CharFlow, 0, jl_Object, [], 0, 3, 0, 0, 0,
    otci_Base46, 0, jl_Object, [], 4, 3, 0, 0, 0,
    ju_MapEntry, 0, jl_Object, [ju_Map$Entry, jl_Cloneable], 0, 0, 0, 0, 0,
    ju_HashMap$HashEntry, 0, ju_MapEntry, [], 0, 0, 0, 0, 0,
    jl_StringIndexOutOfBoundsException, "StringIndexOutOfBoundsException", 12, jl_IndexOutOfBoundsException, [], 0, 3, 0, 0, 0,
    jur_Pattern, 0, jl_Object, [ji_Serializable], 4, 3, 0, 0, 0,
    tj_CommentStmt, "CommentStmt", 27, tj_Statements, [], 0, 0, 0, 0, ["$getLine", $rt_wrapFunction0(tj_CommentStmt_getLine)],
    tj_ImportStmt, "ImportStmt", 27, tj_Statements, [], 0, 0, 0, 0, ["$getLine", $rt_wrapFunction0(tj_ImportStmt_getLine)]]);
    $rt_metadata([tj_Error, 0, jl_Object, [], 0, 3, 0, 0, 0,
    tj_RobotStmt, "RobotStmt", 27, tj_Statements, [], 0, 0, 0, 0, ["$getLine", $rt_wrapFunction0(tj_RobotStmt_getLine)],
    tj_ReservedNames, 0, jl_Object, [], 0, 3, 0, tj_ReservedNames_$callClinit, 0,
    tj_Parser$1, 0, jl_Object, [], 32, 0, 0, tj_Parser$1_$callClinit, 0,
    oj_JSONException, "JSONException", 25, jl_RuntimeException, [], 0, 3, 0, 0, 0,
    ju_Iterator, "Iterator", 1, jl_Object, [], 3, 3, 0, 0, 0,
    ju_AbstractList$1, 0, jl_Object, [ju_Iterator], 0, 0, 0, 0, ["$hasNext", $rt_wrapFunction0(ju_AbstractList$1_hasNext), "$next", $rt_wrapFunction0(ju_AbstractList$1_next)],
    tj_StringList, "StringList", 27, jl_Object, [], 0, 0, 0, 0, 0,
    tj_BoolList, "BoolList", 27, jl_Object, [], 0, 0, 0, 0, 0,
    tj_FloatList, "FloatList", 27, jl_Object, [], 0, 0, 0, 0, 0,
    tj_IntList, "IntList", 27, jl_Object, [], 0, 0, 0, 0, 0,
    tj_IntVar, "IntVar", 27, jl_Object, [], 0, 0, 0, 0, 0,
    tj_FloatVar, "FloatVar", 27, jl_Object, [], 0, 0, 0, 0, 0,
    tj_BoolVar, "BoolVar", 27, jl_Object, [], 0, 0, 0, 0, 0,
    tj_StringVar, "StringVar", 27, jl_Object, [], 0, 0, 0, 0, 0,
    jni_XHRStreamHandler, "XHRStreamHandler", 11, jn_URLStreamHandler, [], 0, 3, 0, 0, ["$openConnection", $rt_wrapFunction1(jni_XHRStreamHandler_openConnection)],
    jni_DummyStreamHandler, "DummyStreamHandler", 11, jn_URLStreamHandler, [], 0, 3, 0, 0, ["$openConnection", $rt_wrapFunction1(jni_DummyStreamHandler_openConnection)],
    tj_FunctionCall, 0, jl_Object, [], 0, 0, 0, 0, 0,
    tj_Statements$RobotType, "Statements$RobotType", 27, jl_Enum, [], 12, 0, 0, tj_Statements$RobotType_$callClinit, 0,
    tj_Debugger$1, 0, jl_Object, [], 32, 0, 0, tj_Debugger$1_$callClinit, 0,
    jl_Double, "Double", 12, jl_Number, [jl_Comparable], 0, 3, 0, 0, ["$intValue", $rt_wrapFunction0(jl_Double_intValue), "$floatValue", $rt_wrapFunction0(jl_Double_floatValue), "$toString", $rt_wrapFunction0(jl_Double_toString), "$equals", $rt_wrapFunction1(jl_Double_equals)],
    ji_Writer, "Writer", 8, jl_Object, [jl_Appendable, ji_Closeable, ji_Flushable], 1, 3, 0, 0, 0,
    ji_StringWriter, 0, ji_Writer, [], 0, 3, 0, 0, 0,
    tj_JavaTranslator$1, 0, jl_Object, [], 32, 0, 0, tj_JavaTranslator$1_$callClinit, 0,
    jl_Long, "Long", 12, jl_Number, [jl_Comparable], 0, 3, 0, 0, ["$intValue", $rt_wrapFunction0(jl_Long_intValue), "$floatValue", $rt_wrapFunction0(jl_Long_floatValue), "$toString", $rt_wrapFunction0(jl_Long_toString), "$equals", $rt_wrapFunction1(jl_Long_equals)],
    ju_Arrays, 0, jl_Object, [], 0, 3, 0, 0, 0,
    jn_Buffer, 0, jl_Object, [], 1, 3, 0, 0, 0,
    jn_CharBuffer, "CharBuffer", 5, jn_Buffer, [jl_Comparable, jl_Appendable, jl_CharSequence, jl_Readable], 1, 3, 0, 0, 0,
    jn_ByteBuffer, "ByteBuffer", 5, jn_Buffer, [jl_Comparable], 1, 3, 0, 0, 0,
    jnc_CodingErrorAction, 0, jl_Object, [], 0, 3, 0, jnc_CodingErrorAction_$callClinit, 0,
    jur_AbstractSet, "AbstractSet", 2, jl_Object, [], 1, 0, 0, 0, ["$find0", $rt_wrapFunction3(jur_AbstractSet_find), "$findBack", $rt_wrapFunction4(jur_AbstractSet_findBack), "$getType4", $rt_wrapFunction0(jur_AbstractSet_getType), "$toString", $rt_wrapFunction0(jur_AbstractSet_toString), "$setNext", $rt_wrapFunction1(jur_AbstractSet_setNext), "$first", $rt_wrapFunction1(jur_AbstractSet_first), "$processBackRefReplacement", $rt_wrapFunction0(jur_AbstractSet_processBackRefReplacement), "$processSecondPass",
    $rt_wrapFunction0(jur_AbstractSet_processSecondPass)],
    tj_RobotActionElmt, "RobotActionElmt", 27, tj_Element, [], 0, 0, 0, 0, ["$toString", $rt_wrapFunction0(tj_RobotActionElmt_toString)],
    otjc_JSArray, 0, jl_Object, [otjc_JSArrayReader], 1, 3, 0, 0, ["$get$exported$0", $rt_wrapFunction1(otjc_JSArray_get$exported$0), "$getLength$exported$1", $rt_wrapFunction0(otjc_JSArray_getLength$exported$1)],
    otjc_JSString, 0, jl_Object, [otj_JSObject], 1, 3, 0, 0, 0,
    otcic_StderrOutputStream, 0, otcic_ConsoleOutputStream, [], 0, 3, 0, 0, ["$write2", $rt_wrapFunction3(otcic_StderrOutputStream_write)],
    tj_Debugger$Operator, "Debugger$Operator", 27, jl_Enum, [], 12, 0, 0, tj_Debugger$Operator_$callClinit, 0,
    juc_TimeUnit, "TimeUnit", 4, jl_Enum, [], 12, 3, 0, juc_TimeUnit_$callClinit, 0,
    jl_InterruptedException, 0, jl_Exception, [], 0, 3, 0, 0, 0,
    oj_JSONString, 0, jl_Object, [], 3, 3, 0, 0, 0,
    jl_Byte, 0, jl_Number, [jl_Comparable], 0, 3, 0, 0, 0,
    jl_Short, 0, jl_Number, [jl_Comparable], 0, 3, 0, 0, 0,
    jm_BigInteger, "BigInteger", 9, jl_Number, [jl_Comparable, ji_Serializable], 0, 3, 0, jm_BigInteger_$callClinit, 0,
    jm_BigDecimal, "BigDecimal", 9, jl_Number, [jl_Comparable, ji_Serializable], 0, 3, 0, jm_BigDecimal_$callClinit, 0,
    jl_Object$Monitor, 0, jl_Object, [], 0, 0, 0, 0, 0,
    jl_Runnable, 0, jl_Object, [], 3, 3, 0, 0, 0,
    jl_Thread, "Thread", 12, jl_Object, [jl_Runnable], 0, 3, 0, jl_Thread_$callClinit, 0,
    jl_IllegalStateException, "IllegalStateException", 12, jl_RuntimeException, [], 0, 3, 0, 0, 0,
    jl_IllegalMonitorStateException, "IllegalMonitorStateException", 12, jl_RuntimeException, [], 0, 3, 0, 0, 0,
    tj_PythonTranslator$1, 0, jl_Object, [], 32, 0, 0, tj_PythonTranslator$1_$callClinit, 0,
    jn_CharBufferImpl, 0, jn_CharBuffer, [], 1, 0, 0, 0, 0]);
    $rt_metadata([jn_CharBufferOverArray, 0, jn_CharBufferImpl, [], 0, 0, 0, 0, 0,
    jnc_CharsetEncoder, "CharsetEncoder", 6, jl_Object, [], 1, 3, 0, 0, 0,
    jnc_CoderResult, 0, jl_Object, [], 0, 3, 0, 0, 0,
    jur_FSet, "FSet", 2, jur_AbstractSet, [], 0, 0, 0, jur_FSet_$callClinit, ["$matches", $rt_wrapFunction3(jur_FSet_matches), "$getName", $rt_wrapFunction0(jur_FSet_getName), "$hasConsumed", $rt_wrapFunction1(jur_FSet_hasConsumed)],
    jur_Lexer, 0, jl_Object, [], 0, 0, 0, 0, 0,
    jur_PatternSyntaxException, "PatternSyntaxException", 2, jl_IllegalArgumentException, [], 0, 3, 0, 0, ["$getMessage", $rt_wrapFunction0(jur_PatternSyntaxException_getMessage)],
    tj_Expression$1, 0, jl_Object, [], 32, 0, 0, tj_Expression$1_$callClinit, 0,
    tj_Interpreter$Operator, "Interpreter$Operator", 27, jl_Enum, [], 12, 0, 0, tj_Interpreter$Operator_$callClinit, 0,
    jl_Package, "Package", 12, jl_Object, [jlr_AnnotatedElement], 0, 3, 0, 0, 0,
    otp_PlatformQueue, 0, jl_Object, [otj_JSObject], 1, 3, 0, 0, 0,
    otp_PlatformRunnable, 0, jl_Object, [], 3, 3, 0, 0, 0,
    jl_Object$monitorExit$lambda$_8_0, 0, jl_Object, [otp_PlatformRunnable], 0, 3, 0, 0, ["$run", $rt_wrapFunction0(jl_Object$monitorExit$lambda$_8_0_run)],
    tj_JavaTranslator$Operator, "JavaTranslator$Operator", 27, jl_Enum, [], 12, 0, 0, tj_JavaTranslator$Operator_$callClinit, 0,
    tj_PythonTranslator$Operator, "PythonTranslator$Operator", 27, jl_Enum, [], 12, 0, 0, tj_PythonTranslator$Operator_$callClinit, 0,
    otcit_DoubleSynthesizer, 0, jl_Object, [], 4, 3, 0, 0, 0,
    jn_ByteBufferImpl, 0, jn_ByteBuffer, [], 0, 0, 0, 0, 0,
    jur_NonCapFSet, "NonCapFSet", 2, jur_FSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_NonCapFSet_matches), "$getName", $rt_wrapFunction0(jur_NonCapFSet_getName), "$hasConsumed", $rt_wrapFunction1(jur_NonCapFSet_hasConsumed)],
    jur_AheadFSet, "AheadFSet", 2, jur_FSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_AheadFSet_matches), "$getName", $rt_wrapFunction0(jur_AheadFSet_getName)],
    jur_BehindFSet, "BehindFSet", 2, jur_FSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_BehindFSet_matches), "$getName", $rt_wrapFunction0(jur_BehindFSet_getName)],
    jur_AtomicFSet, "AtomicFSet", 2, jur_FSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_AtomicFSet_matches), "$getName", $rt_wrapFunction0(jur_AtomicFSet_getName), "$hasConsumed", $rt_wrapFunction1(jur_AtomicFSet_hasConsumed)],
    jur_FinalSet, "FinalSet", 2, jur_FSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_FinalSet_matches), "$getName", $rt_wrapFunction0(jur_FinalSet_getName)],
    jur_LeafSet, "LeafSet", 2, jur_AbstractSet, [], 1, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_LeafSet_matches), "$charCount0", $rt_wrapFunction0(jur_LeafSet_charCount), "$hasConsumed", $rt_wrapFunction1(jur_LeafSet_hasConsumed)],
    jur_EmptySet, "EmptySet", 2, jur_LeafSet, [], 0, 0, 0, 0, ["$accepts", $rt_wrapFunction2(jur_EmptySet_accepts), "$find0", $rt_wrapFunction3(jur_EmptySet_find), "$findBack", $rt_wrapFunction4(jur_EmptySet_findBack), "$getName", $rt_wrapFunction0(jur_EmptySet_getName), "$hasConsumed", $rt_wrapFunction1(jur_EmptySet_hasConsumed)],
    jur_JointSet, "JointSet", 2, jur_AbstractSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_JointSet_matches), "$setNext", $rt_wrapFunction1(jur_JointSet_setNext), "$getName", $rt_wrapFunction0(jur_JointSet_getName), "$first", $rt_wrapFunction1(jur_JointSet_first), "$hasConsumed", $rt_wrapFunction1(jur_JointSet_hasConsumed), "$processSecondPass", $rt_wrapFunction0(jur_JointSet_processSecondPass)],
    jur_NonCapJointSet, "NonCapJointSet", 2, jur_JointSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_NonCapJointSet_matches), "$getName", $rt_wrapFunction0(jur_NonCapJointSet_getName), "$hasConsumed", $rt_wrapFunction1(jur_NonCapJointSet_hasConsumed)],
    jur_AtomicJointSet, "AtomicJointSet", 2, jur_NonCapJointSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_AtomicJointSet_matches), "$setNext", $rt_wrapFunction1(jur_AtomicJointSet_setNext), "$getName", $rt_wrapFunction0(jur_AtomicJointSet_getName)],
    jur_PositiveLookAhead, "PositiveLookAhead", 2, jur_AtomicJointSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_PositiveLookAhead_matches), "$hasConsumed", $rt_wrapFunction1(jur_PositiveLookAhead_hasConsumed), "$getName", $rt_wrapFunction0(jur_PositiveLookAhead_getName)],
    jur_NegativeLookAhead, "NegativeLookAhead", 2, jur_AtomicJointSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_NegativeLookAhead_matches), "$hasConsumed", $rt_wrapFunction1(jur_NegativeLookAhead_hasConsumed), "$getName", $rt_wrapFunction0(jur_NegativeLookAhead_getName)],
    jur_PositiveLookBehind, "PositiveLookBehind", 2, jur_AtomicJointSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_PositiveLookBehind_matches), "$hasConsumed", $rt_wrapFunction1(jur_PositiveLookBehind_hasConsumed), "$getName", $rt_wrapFunction0(jur_PositiveLookBehind_getName)],
    jur_NegativeLookBehind, "NegativeLookBehind", 2, jur_AtomicJointSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_NegativeLookBehind_matches), "$hasConsumed", $rt_wrapFunction1(jur_NegativeLookBehind_hasConsumed), "$getName", $rt_wrapFunction0(jur_NegativeLookBehind_getName)],
    jur_SingleSet, "SingleSet", 2, jur_JointSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_SingleSet_matches), "$find0", $rt_wrapFunction3(jur_SingleSet_find), "$findBack", $rt_wrapFunction4(jur_SingleSet_findBack), "$first", $rt_wrapFunction1(jur_SingleSet_first), "$processBackRefReplacement", $rt_wrapFunction0(jur_SingleSet_processBackRefReplacement), "$processSecondPass", $rt_wrapFunction0(jur_SingleSet_processSecondPass)],
    otciu_UnicodeHelper$Range, "UnicodeHelper$Range", 22, jl_Object, [], 0, 3, 0, 0, 0,
    jl_ArrayIndexOutOfBoundsException, "ArrayIndexOutOfBoundsException", 12, jl_IndexOutOfBoundsException, [], 0, 3, 0, 0, 0,
    jlr_Modifier, 0, jl_Object, [], 0, 3, 0, 0, 0,
    ju_Locale, "Locale", 1, jl_Object, [jl_Cloneable, ji_Serializable], 4, 3, 0, ju_Locale_$callClinit, 0,
    jl_ReflectiveOperationException, 0, jl_Exception, [], 0, 3, 0, 0, 0,
    jl_IllegalAccessException, "IllegalAccessException", 12, jl_ReflectiveOperationException, [], 0, 3, 0, 0, 0,
    jlr_InvocationTargetException, 0, jl_ReflectiveOperationException, [], 0, 3, 0, 0, 0,
    oti_AsyncCallback, "AsyncCallback", 18, jl_Object, [], 3, 3, 0, 0, 0,
    otpp_AsyncCallbackWrapper, 0, jl_Object, [oti_AsyncCallback], 0, 0, 0, 0, ["$complete", $rt_wrapFunction1(otpp_AsyncCallbackWrapper_complete), "$error", $rt_wrapFunction1(otpp_AsyncCallbackWrapper_error)],
    jl_Object$monitorEnterWait$lambda$_6_0, 0, jl_Object, [otp_PlatformRunnable], 0, 3, 0, 0, 0,
    jl_Thread$UncaughtExceptionHandler, 0, jl_Object, [], 3, 3, 0, 0, 0,
    jl_DefaultUncaughtExceptionHandler, 0, jl_Object, [jl_Thread$UncaughtExceptionHandler], 0, 3, 0, 0, 0,
    otcit_DoubleAnalyzer, 0, jl_Object, [], 4, 3, 0, 0, 0,
    jur_SpecialToken, 0, jl_Object, [], 1, 0, 0, 0, 0,
    jur_AbstractCharClass, "AbstractCharClass", 2, jur_SpecialToken, [], 1, 0, 0, jur_AbstractCharClass_$callClinit, ["$getBits", $rt_wrapFunction0(jur_AbstractCharClass_getBits), "$getLowHighSurrogates", $rt_wrapFunction0(jur_AbstractCharClass_getLowHighSurrogates), "$getInstance0", $rt_wrapFunction0(jur_AbstractCharClass_getInstance), "$hasUCI", $rt_wrapFunction0(jur_AbstractCharClass_hasUCI)],
    jur_CharClass, "CharClass", 2, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains0", $rt_wrapFunction1(jur_CharClass_contains), "$getBits", $rt_wrapFunction0(jur_CharClass_getBits), "$getLowHighSurrogates", $rt_wrapFunction0(jur_CharClass_getLowHighSurrogates), "$getInstance0", $rt_wrapFunction0(jur_CharClass_getInstance), "$toString", $rt_wrapFunction0(jur_CharClass_toString), "$hasUCI", $rt_wrapFunction0(jur_CharClass_hasUCI)],
    ju_MissingResourceException, "MissingResourceException", 1, jl_RuntimeException, [], 0, 3, 0, 0, 0,
    jur_QuantifierSet, "QuantifierSet", 2, jur_AbstractSet, [], 1, 0, 0, 0, ["$first", $rt_wrapFunction1(jur_QuantifierSet_first), "$hasConsumed", $rt_wrapFunction1(jur_QuantifierSet_hasConsumed), "$processSecondPass", $rt_wrapFunction0(jur_QuantifierSet_processSecondPass)],
    jur_LeafQuantifierSet, "LeafQuantifierSet", 2, jur_QuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_LeafQuantifierSet_matches), "$getName", $rt_wrapFunction0(jur_LeafQuantifierSet_getName)]]);
    $rt_metadata([jur_CompositeQuantifierSet, "CompositeQuantifierSet", 2, jur_LeafQuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_CompositeQuantifierSet_matches), "$getName", $rt_wrapFunction0(jur_CompositeQuantifierSet_getName)],
    jur_GroupQuantifierSet, "GroupQuantifierSet", 2, jur_QuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_GroupQuantifierSet_matches), "$getName", $rt_wrapFunction0(jur_GroupQuantifierSet_getName)],
    jur_AltQuantifierSet, "AltQuantifierSet", 2, jur_LeafQuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_AltQuantifierSet_matches), "$setNext", $rt_wrapFunction1(jur_AltQuantifierSet_setNext)],
    jur_UnifiedQuantifierSet, "UnifiedQuantifierSet", 2, jur_LeafQuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_UnifiedQuantifierSet_matches), "$find0", $rt_wrapFunction3(jur_UnifiedQuantifierSet_find)],
    jlr_AccessibleObject, "AccessibleObject", 14, jl_Object, [jlr_AnnotatedElement], 0, 3, 0, 0, 0,
    jlr_Member, 0, jl_Object, [], 3, 3, 0, 0, 0,
    jlr_Method, "Method", 14, jlr_AccessibleObject, [jlr_Member], 0, 3, 0, 0, ["$toString", $rt_wrapFunction0(jlr_Method_toString)],
    jl_NegativeArraySizeException, "NegativeArraySizeException", 12, jl_RuntimeException, [], 0, 3, 0, 0, 0,
    jn_ByteOrder, 0, jl_Object, [], 4, 3, 0, jn_ByteOrder_$callClinit, 0,
    jur_AbstractCharClass$LazyCharClass, 0, jl_Object, [], 1, 0, 0, 0, 0,
    jur_Quantifier, "Quantifier", 2, jur_SpecialToken, [jl_Cloneable], 0, 0, 0, 0, ["$toString", $rt_wrapFunction0(jur_Quantifier_toString)],
    jur_FSet$PossessiveFSet, "FSet$PossessiveFSet", 2, jur_AbstractSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_FSet$PossessiveFSet_matches), "$getName", $rt_wrapFunction0(jur_FSet$PossessiveFSet_getName), "$hasConsumed", $rt_wrapFunction1(jur_FSet$PossessiveFSet_hasConsumed)],
    ju_BitSet, 0, jl_Object, [jl_Cloneable, ji_Serializable], 0, 3, 0, 0, 0,
    jur_LowHighSurrogateRangeSet, "LowHighSurrogateRangeSet", 2, jur_JointSet, [], 0, 0, 0, 0, ["$getName", $rt_wrapFunction0(jur_LowHighSurrogateRangeSet_getName)],
    jur_CompositeRangeSet, "CompositeRangeSet", 2, jur_JointSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_CompositeRangeSet_matches), "$setNext", $rt_wrapFunction1(jur_CompositeRangeSet_setNext), "$getName", $rt_wrapFunction0(jur_CompositeRangeSet_getName), "$hasConsumed", $rt_wrapFunction1(jur_CompositeRangeSet_hasConsumed), "$first", $rt_wrapFunction1(jur_CompositeRangeSet_first)],
    jur_SupplRangeSet, "SupplRangeSet", 2, jur_JointSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_SupplRangeSet_matches), "$getName", $rt_wrapFunction0(jur_SupplRangeSet_getName), "$contains0", $rt_wrapFunction1(jur_SupplRangeSet_contains), "$first", $rt_wrapFunction1(jur_SupplRangeSet_first), "$setNext", $rt_wrapFunction1(jur_SupplRangeSet_setNext), "$hasConsumed", $rt_wrapFunction1(jur_SupplRangeSet_hasConsumed)],
    jur_UCISupplRangeSet, "UCISupplRangeSet", 2, jur_SupplRangeSet, [], 0, 0, 0, 0, ["$contains0", $rt_wrapFunction1(jur_UCISupplRangeSet_contains), "$getName", $rt_wrapFunction0(jur_UCISupplRangeSet_getName)],
    jur_UCIRangeSet, "UCIRangeSet", 2, jur_LeafSet, [], 0, 0, 0, 0, ["$accepts", $rt_wrapFunction2(jur_UCIRangeSet_accepts), "$getName", $rt_wrapFunction0(jur_UCIRangeSet_getName)],
    jur_RangeSet, "RangeSet", 2, jur_LeafSet, [], 0, 0, 0, 0, ["$accepts", $rt_wrapFunction2(jur_RangeSet_accepts), "$getName", $rt_wrapFunction0(jur_RangeSet_getName), "$first", $rt_wrapFunction1(jur_RangeSet_first)],
    jur_HangulDecomposedCharSet, "HangulDecomposedCharSet", 2, jur_JointSet, [], 0, 0, 0, 0, ["$setNext", $rt_wrapFunction1(jur_HangulDecomposedCharSet_setNext), "$getName", $rt_wrapFunction0(jur_HangulDecomposedCharSet_getName), "$matches", $rt_wrapFunction3(jur_HangulDecomposedCharSet_matches), "$first", $rt_wrapFunction1(jur_HangulDecomposedCharSet_first), "$hasConsumed", $rt_wrapFunction1(jur_HangulDecomposedCharSet_hasConsumed)],
    jur_CharSet, "CharSet", 2, jur_LeafSet, [], 0, 0, 0, 0, ["$charCount0", $rt_wrapFunction0(jur_CharSet_charCount), "$accepts", $rt_wrapFunction2(jur_CharSet_accepts), "$find0", $rt_wrapFunction3(jur_CharSet_find), "$findBack", $rt_wrapFunction4(jur_CharSet_findBack), "$getName", $rt_wrapFunction0(jur_CharSet_getName), "$first", $rt_wrapFunction1(jur_CharSet_first)],
    jur_UCICharSet, "UCICharSet", 2, jur_LeafSet, [], 0, 0, 0, 0, ["$accepts", $rt_wrapFunction2(jur_UCICharSet_accepts), "$getName", $rt_wrapFunction0(jur_UCICharSet_getName)],
    jur_CICharSet, "CICharSet", 2, jur_LeafSet, [], 0, 0, 0, 0, ["$accepts", $rt_wrapFunction2(jur_CICharSet_accepts), "$getName", $rt_wrapFunction0(jur_CICharSet_getName)],
    jur_DecomposedCharSet, "DecomposedCharSet", 2, jur_JointSet, [], 0, 0, 0, 0, ["$setNext", $rt_wrapFunction1(jur_DecomposedCharSet_setNext), "$matches", $rt_wrapFunction3(jur_DecomposedCharSet_matches), "$getName", $rt_wrapFunction0(jur_DecomposedCharSet_getName), "$first", $rt_wrapFunction1(jur_DecomposedCharSet_first), "$hasConsumed", $rt_wrapFunction1(jur_DecomposedCharSet_hasConsumed)],
    jur_UCIDecomposedCharSet, "UCIDecomposedCharSet", 2, jur_DecomposedCharSet, [], 0, 0, 0, 0, 0,
    jur_CIDecomposedCharSet, "CIDecomposedCharSet", 2, jur_DecomposedCharSet, [], 0, 0, 0, 0, 0,
    jur_PossessiveGroupQuantifierSet, "PossessiveGroupQuantifierSet", 2, jur_GroupQuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_PossessiveGroupQuantifierSet_matches)],
    jur_PosPlusGroupQuantifierSet, "PosPlusGroupQuantifierSet", 2, jur_GroupQuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_PosPlusGroupQuantifierSet_matches)],
    jur_AltGroupQuantifierSet, "AltGroupQuantifierSet", 2, jur_GroupQuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_AltGroupQuantifierSet_matches), "$setNext", $rt_wrapFunction1(jur_AltGroupQuantifierSet_setNext)],
    jur_PosAltGroupQuantifierSet, "PosAltGroupQuantifierSet", 2, jur_AltGroupQuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_PosAltGroupQuantifierSet_matches), "$setNext", $rt_wrapFunction1(jur_PosAltGroupQuantifierSet_setNext)],
    jur_CompositeGroupQuantifierSet, "CompositeGroupQuantifierSet", 2, jur_GroupQuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_CompositeGroupQuantifierSet_matches), "$getName", $rt_wrapFunction0(jur_CompositeGroupQuantifierSet_getName)],
    jur_PosCompositeGroupQuantifierSet, "PosCompositeGroupQuantifierSet", 2, jur_CompositeGroupQuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_PosCompositeGroupQuantifierSet_matches)],
    jur_ReluctantGroupQuantifierSet, "ReluctantGroupQuantifierSet", 2, jur_GroupQuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_ReluctantGroupQuantifierSet_matches)],
    jur_RelAltGroupQuantifierSet, "RelAltGroupQuantifierSet", 2, jur_AltGroupQuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_RelAltGroupQuantifierSet_matches)],
    jur_RelCompositeGroupQuantifierSet, "RelCompositeGroupQuantifierSet", 2, jur_CompositeGroupQuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_RelCompositeGroupQuantifierSet_matches)],
    jur_DotAllQuantifierSet, "DotAllQuantifierSet", 2, jur_QuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_DotAllQuantifierSet_matches), "$find0", $rt_wrapFunction3(jur_DotAllQuantifierSet_find), "$getName", $rt_wrapFunction0(jur_DotAllQuantifierSet_getName)],
    jur_DotQuantifierSet, "DotQuantifierSet", 2, jur_QuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_DotQuantifierSet_matches), "$find0", $rt_wrapFunction3(jur_DotQuantifierSet_find), "$getName", $rt_wrapFunction0(jur_DotQuantifierSet_getName)],
    jur_AbstractLineTerminator, "AbstractLineTerminator", 2, jl_Object, [], 1, 0, 0, 0, 0,
    jur_PossessiveQuantifierSet, "PossessiveQuantifierSet", 2, jur_LeafQuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_PossessiveQuantifierSet_matches)],
    jur_PossessiveAltQuantifierSet, "PossessiveAltQuantifierSet", 2, jur_AltQuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_PossessiveAltQuantifierSet_matches)],
    jur_PossessiveCompositeQuantifierSet, "PossessiveCompositeQuantifierSet", 2, jur_CompositeQuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_PossessiveCompositeQuantifierSet_matches)],
    jur_ReluctantQuantifierSet, "ReluctantQuantifierSet", 2, jur_LeafQuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_ReluctantQuantifierSet_matches)],
    jur_ReluctantAltQuantifierSet, "ReluctantAltQuantifierSet", 2, jur_AltQuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_ReluctantAltQuantifierSet_matches)],
    jur_ReluctantCompositeQuantifierSet, "ReluctantCompositeQuantifierSet", 2, jur_CompositeQuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_ReluctantCompositeQuantifierSet_matches)],
    jur_SOLSet, "SOLSet", 2, jur_AbstractSet, [], 4, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_SOLSet_matches), "$hasConsumed", $rt_wrapFunction1(jur_SOLSet_hasConsumed), "$getName", $rt_wrapFunction0(jur_SOLSet_getName)],
    jur_WordBoundary, "WordBoundary", 2, jur_AbstractSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_WordBoundary_matches), "$hasConsumed", $rt_wrapFunction1(jur_WordBoundary_hasConsumed), "$getName", $rt_wrapFunction0(jur_WordBoundary_getName)],
    jur_PreviousMatch, "PreviousMatch", 2, jur_AbstractSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_PreviousMatch_matches), "$hasConsumed", $rt_wrapFunction1(jur_PreviousMatch_hasConsumed), "$getName", $rt_wrapFunction0(jur_PreviousMatch_getName)],
    jur_EOLSet, "EOLSet", 2, jur_AbstractSet, [], 4, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_EOLSet_matches), "$hasConsumed", $rt_wrapFunction1(jur_EOLSet_hasConsumed), "$getName", $rt_wrapFunction0(jur_EOLSet_getName)],
    jur_EOISet, "EOISet", 2, jur_AbstractSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_EOISet_matches), "$hasConsumed", $rt_wrapFunction1(jur_EOISet_hasConsumed), "$getName", $rt_wrapFunction0(jur_EOISet_getName)],
    jur_MultiLineSOLSet, "MultiLineSOLSet", 2, jur_AbstractSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_MultiLineSOLSet_matches), "$hasConsumed", $rt_wrapFunction1(jur_MultiLineSOLSet_hasConsumed), "$getName", $rt_wrapFunction0(jur_MultiLineSOLSet_getName)]]);
    $rt_metadata([jur_DotAllSet, "DotAllSet", 2, jur_JointSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_DotAllSet_matches), "$getName", $rt_wrapFunction0(jur_DotAllSet_getName), "$setNext", $rt_wrapFunction1(jur_DotAllSet_setNext), "$getType4", $rt_wrapFunction0(jur_DotAllSet_getType), "$hasConsumed", $rt_wrapFunction1(jur_DotAllSet_hasConsumed)],
    jur_DotSet, "DotSet", 2, jur_JointSet, [], 4, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_DotSet_matches), "$getName", $rt_wrapFunction0(jur_DotSet_getName), "$setNext", $rt_wrapFunction1(jur_DotSet_setNext), "$getType4", $rt_wrapFunction0(jur_DotSet_getType), "$hasConsumed", $rt_wrapFunction1(jur_DotSet_hasConsumed)],
    jur_UEOLSet, "UEOLSet", 2, jur_AbstractSet, [], 4, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_UEOLSet_matches), "$hasConsumed", $rt_wrapFunction1(jur_UEOLSet_hasConsumed), "$getName", $rt_wrapFunction0(jur_UEOLSet_getName)],
    jur_UMultiLineEOLSet, "UMultiLineEOLSet", 2, jur_AbstractSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_UMultiLineEOLSet_matches), "$hasConsumed", $rt_wrapFunction1(jur_UMultiLineEOLSet_hasConsumed), "$getName", $rt_wrapFunction0(jur_UMultiLineEOLSet_getName)],
    jur_MultiLineEOLSet, "MultiLineEOLSet", 2, jur_AbstractSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_MultiLineEOLSet_matches), "$hasConsumed", $rt_wrapFunction1(jur_MultiLineEOLSet_hasConsumed), "$getName", $rt_wrapFunction0(jur_MultiLineEOLSet_getName)],
    jur_CIBackReferenceSet, "CIBackReferenceSet", 2, jur_JointSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_CIBackReferenceSet_matches), "$setNext", $rt_wrapFunction1(jur_CIBackReferenceSet_setNext), "$getName", $rt_wrapFunction0(jur_CIBackReferenceSet_getName), "$hasConsumed", $rt_wrapFunction1(jur_CIBackReferenceSet_hasConsumed)],
    jur_BackReferenceSet, "BackReferenceSet", 2, jur_CIBackReferenceSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_BackReferenceSet_matches), "$find0", $rt_wrapFunction3(jur_BackReferenceSet_find), "$findBack", $rt_wrapFunction4(jur_BackReferenceSet_findBack), "$first", $rt_wrapFunction1(jur_BackReferenceSet_first), "$getName", $rt_wrapFunction0(jur_BackReferenceSet_getName)],
    jur_UCIBackReferenceSet, "UCIBackReferenceSet", 2, jur_CIBackReferenceSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_UCIBackReferenceSet_matches), "$getName", $rt_wrapFunction0(jur_UCIBackReferenceSet_getName)],
    jur_SequenceSet, "SequenceSet", 2, jur_LeafSet, [], 0, 0, 0, 0, ["$accepts", $rt_wrapFunction2(jur_SequenceSet_accepts), "$find0", $rt_wrapFunction3(jur_SequenceSet_find), "$findBack", $rt_wrapFunction4(jur_SequenceSet_findBack), "$getName", $rt_wrapFunction0(jur_SequenceSet_getName), "$first", $rt_wrapFunction1(jur_SequenceSet_first)],
    jur_UCISequenceSet, "UCISequenceSet", 2, jur_LeafSet, [], 0, 0, 0, 0, ["$accepts", $rt_wrapFunction2(jur_UCISequenceSet_accepts), "$getName", $rt_wrapFunction0(jur_UCISequenceSet_getName)],
    jur_CISequenceSet, "CISequenceSet", 2, jur_LeafSet, [], 0, 0, 0, 0, ["$accepts", $rt_wrapFunction2(jur_CISequenceSet_accepts), "$getName", $rt_wrapFunction0(jur_CISequenceSet_getName)],
    otciu_CLDRHelper, 0, jl_Object, [], 4, 3, 0, 0, 0,
    jur_AbstractCharClass$PredefinedCharacterClasses, 0, jl_Object, [], 4, 0, 0, jur_AbstractCharClass$PredefinedCharacterClasses_$callClinit, 0,
    jur_UCISupplCharSet, "UCISupplCharSet", 2, jur_LeafSet, [], 0, 0, 0, 0, ["$accepts", $rt_wrapFunction2(jur_UCISupplCharSet_accepts), "$getName", $rt_wrapFunction0(jur_UCISupplCharSet_getName)],
    jur_LowSurrogateCharSet, "LowSurrogateCharSet", 2, jur_JointSet, [], 0, 0, 0, 0, ["$setNext", $rt_wrapFunction1(jur_LowSurrogateCharSet_setNext), "$matches", $rt_wrapFunction3(jur_LowSurrogateCharSet_matches), "$find0", $rt_wrapFunction3(jur_LowSurrogateCharSet_find), "$findBack", $rt_wrapFunction4(jur_LowSurrogateCharSet_findBack), "$getName", $rt_wrapFunction0(jur_LowSurrogateCharSet_getName), "$first", $rt_wrapFunction1(jur_LowSurrogateCharSet_first), "$hasConsumed", $rt_wrapFunction1(jur_LowSurrogateCharSet_hasConsumed)],
    jur_HighSurrogateCharSet, "HighSurrogateCharSet", 2, jur_JointSet, [], 0, 0, 0, 0, ["$setNext", $rt_wrapFunction1(jur_HighSurrogateCharSet_setNext), "$matches", $rt_wrapFunction3(jur_HighSurrogateCharSet_matches), "$find0", $rt_wrapFunction3(jur_HighSurrogateCharSet_find), "$findBack", $rt_wrapFunction4(jur_HighSurrogateCharSet_findBack), "$getName", $rt_wrapFunction0(jur_HighSurrogateCharSet_getName), "$first", $rt_wrapFunction1(jur_HighSurrogateCharSet_first), "$hasConsumed", $rt_wrapFunction1(jur_HighSurrogateCharSet_hasConsumed)],
    jur_SupplCharSet, "SupplCharSet", 2, jur_LeafSet, [], 0, 0, 0, 0, ["$accepts", $rt_wrapFunction2(jur_SupplCharSet_accepts), "$find0", $rt_wrapFunction3(jur_SupplCharSet_find), "$findBack", $rt_wrapFunction4(jur_SupplCharSet_findBack), "$getName", $rt_wrapFunction0(jur_SupplCharSet_getName), "$first", $rt_wrapFunction1(jur_SupplCharSet_first)],
    jur_AbstractLineTerminator$1, 0, jur_AbstractLineTerminator, [], 0, 0, 0, 0, ["$isLineTerminator", $rt_wrapFunction1(jur_AbstractLineTerminator$1_isLineTerminator), "$isAfterLineTerminator", $rt_wrapFunction2(jur_AbstractLineTerminator$1_isAfterLineTerminator)],
    jur_AbstractLineTerminator$2, 0, jur_AbstractLineTerminator, [], 0, 0, 0, 0, ["$isLineTerminator", $rt_wrapFunction1(jur_AbstractLineTerminator$2_isLineTerminator), "$isAfterLineTerminator", $rt_wrapFunction2(jur_AbstractLineTerminator$2_isAfterLineTerminator)],
    jur_SequenceSet$IntHash, 0, jl_Object, [], 0, 0, 0, 0, 0,
    jur_IntHash, 0, jl_Object, [], 0, 0, 0, 0, 0,
    jur_AbstractCharClass$LazySpace, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazySpace_computeValue)],
    jur_AbstractCharClass$LazyDigit, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyDigit_computeValue)],
    jur_AbstractCharClass$LazyLower, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyLower_computeValue)],
    jur_AbstractCharClass$LazyUpper, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyUpper_computeValue)],
    jur_AbstractCharClass$LazyASCII, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyASCII_computeValue)],
    jur_AbstractCharClass$LazyAlpha, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyAlpha_computeValue)],
    jur_AbstractCharClass$LazyAlnum, 0, jur_AbstractCharClass$LazyAlpha, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyAlnum_computeValue)],
    jur_AbstractCharClass$LazyPunct, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyPunct_computeValue)],
    jur_AbstractCharClass$LazyGraph, 0, jur_AbstractCharClass$LazyAlnum, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyGraph_computeValue)],
    jur_AbstractCharClass$LazyPrint, 0, jur_AbstractCharClass$LazyGraph, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyPrint_computeValue)],
    jur_AbstractCharClass$LazyBlank, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyBlank_computeValue)],
    jur_AbstractCharClass$LazyCntrl, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyCntrl_computeValue)],
    jur_AbstractCharClass$LazyXDigit, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyXDigit_computeValue)],
    jur_AbstractCharClass$LazyJavaLowerCase, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaLowerCase_computeValue)],
    jur_AbstractCharClass$LazyJavaUpperCase, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaUpperCase_computeValue)],
    jur_AbstractCharClass$LazyJavaWhitespace, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaWhitespace_computeValue)],
    jur_AbstractCharClass$LazyJavaMirrored, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaMirrored_computeValue)],
    jur_AbstractCharClass$LazyJavaDefined, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaDefined_computeValue)],
    jur_AbstractCharClass$LazyJavaDigit, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaDigit_computeValue)],
    jur_AbstractCharClass$LazyJavaIdentifierIgnorable, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaIdentifierIgnorable_computeValue)],
    jur_AbstractCharClass$LazyJavaISOControl, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaISOControl_computeValue)],
    jur_AbstractCharClass$LazyJavaJavaIdentifierPart, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaJavaIdentifierPart_computeValue)],
    jur_AbstractCharClass$LazyJavaJavaIdentifierStart, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaJavaIdentifierStart_computeValue)],
    jur_AbstractCharClass$LazyJavaLetter, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaLetter_computeValue)],
    jur_AbstractCharClass$LazyJavaLetterOrDigit, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaLetterOrDigit_computeValue)],
    jur_AbstractCharClass$LazyJavaSpaceChar, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaSpaceChar_computeValue)],
    jur_AbstractCharClass$LazyJavaTitleCase, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaTitleCase_computeValue)],
    jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart_computeValue)],
    jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart_computeValue)]]);
    $rt_metadata([jur_AbstractCharClass$LazyWord, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyWord_computeValue)],
    jur_AbstractCharClass$LazyNonWord, 0, jur_AbstractCharClass$LazyWord, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyNonWord_computeValue)],
    jur_AbstractCharClass$LazyNonSpace, 0, jur_AbstractCharClass$LazySpace, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyNonSpace_computeValue)],
    jur_AbstractCharClass$LazyNonDigit, 0, jur_AbstractCharClass$LazyDigit, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyNonDigit_computeValue)],
    jur_AbstractCharClass$LazyRange, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyRange_computeValue)],
    jur_AbstractCharClass$LazySpecialsBlock, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazySpecialsBlock_computeValue)],
    jur_AbstractCharClass$LazyCategory, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyCategory_computeValue)],
    jur_AbstractCharClass$LazyCategoryScope, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyCategoryScope_computeValue)],
    jni_XHRURLConnection, 0, jn_HttpURLConnection, [], 0, 3, 0, 0, 0,
    jnci_BufferedEncoder, 0, jnc_CharsetEncoder, [], 1, 3, 0, 0, 0,
    jnci_UTF8Encoder, 0, jnci_BufferedEncoder, [], 0, 3, 0, 0, ["$arrayEncode", function(var_1, var_2, var_3, var_4, var_5, var_6, var_7) { return jnci_UTF8Encoder_arrayEncode(this, var_1, var_2, var_3, var_4, var_5, var_6, var_7); }],
    jl_ClassLoader, "ClassLoader", 12, jl_Object, [], 1, 3, 0, jl_ClassLoader_$callClinit, 0,
    jur_AbstractCharClass$1, "AbstractCharClass$1", 2, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains0", $rt_wrapFunction1(jur_AbstractCharClass$1_contains)],
    jur_AbstractCharClass$2, "AbstractCharClass$2", 2, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains0", $rt_wrapFunction1(jur_AbstractCharClass$2_contains)],
    jur_CharClass$18, "CharClass$18", 2, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains0", $rt_wrapFunction1(jur_CharClass$18_contains), "$toString", $rt_wrapFunction0(jur_CharClass$18_toString)],
    jur_CharClass$1, 0, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains0", $rt_wrapFunction1(jur_CharClass$1_contains)],
    jur_CharClass$3, 0, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains0", $rt_wrapFunction1(jur_CharClass$3_contains)],
    jur_CharClass$2, 0, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains0", $rt_wrapFunction1(jur_CharClass$2_contains)],
    jur_CharClass$5, 0, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains0", $rt_wrapFunction1(jur_CharClass$5_contains)],
    jur_CharClass$4, 0, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains0", $rt_wrapFunction1(jur_CharClass$4_contains)],
    jur_CharClass$7, 0, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains0", $rt_wrapFunction1(jur_CharClass$7_contains)],
    jur_CharClass$6, 0, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains0", $rt_wrapFunction1(jur_CharClass$6_contains)],
    jur_CharClass$9, 0, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains0", $rt_wrapFunction1(jur_CharClass$9_contains)],
    jur_CharClass$8, 0, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains0", $rt_wrapFunction1(jur_CharClass$8_contains)],
    jur_CharClass$11, 0, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains0", $rt_wrapFunction1(jur_CharClass$11_contains)],
    jur_CharClass$10, 0, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains0", $rt_wrapFunction1(jur_CharClass$10_contains)],
    jur_CharClass$13, 0, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains0", $rt_wrapFunction1(jur_CharClass$13_contains)],
    jur_CharClass$12, 0, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains0", $rt_wrapFunction1(jur_CharClass$12_contains)],
    jur_CharClass$15, 0, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains0", $rt_wrapFunction1(jur_CharClass$15_contains)],
    jur_CharClass$14, 0, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains0", $rt_wrapFunction1(jur_CharClass$14_contains)],
    jur_CharClass$17, 0, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains0", $rt_wrapFunction1(jur_CharClass$17_contains)],
    jur_CharClass$16, 0, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains0", $rt_wrapFunction1(jur_CharClass$16_contains)],
    ju_ConcurrentModificationException, "ConcurrentModificationException", 1, jl_RuntimeException, [], 0, 3, 0, 0, 0,
    otr_EventQueue$Event, 0, jl_Object, [], 3, 3, 0, 0, 0,
    jl_ThreadInterruptHandler, 0, jl_Object, [], 3, 3, 0, 0, 0,
    jl_Thread$SleepHandler, 0, jl_Object, [otp_PlatformRunnable, otr_EventQueue$Event, jl_ThreadInterruptHandler], 0, 0, 0, 0, ["$run", $rt_wrapFunction0(jl_Thread$SleepHandler_run)],
    jl_Class$MethodSignature, "Class$MethodSignature", 12, jl_Object, [], 4, 0, 0, 0, ["$equals", $rt_wrapFunction1(jl_Class$MethodSignature_equals), "$hashCode0", $rt_wrapFunction0(jl_Class$MethodSignature_hashCode)],
    jl_SystemClassLoader, 0, jl_ClassLoader, [], 0, 0, 0, 0, 0,
    otcir_JSCallable, "JSCallable", 21, jl_Object, [otj_JSObject], 3, 3, 0, 0, 0,
    jur_MatchResult, 0, jl_Object, [], 3, 3, 0, 0, 0,
    jur_MatchResultImpl, "MatchResultImpl", 2, jl_Object, [jur_MatchResult], 0, 0, 0, 0, 0,
    oj_JSONObject$1, "JSONObject$1", 25, jl_Object, [], 32, 0, 0, 0, 0,
    oj_JSONPointer, "JSONPointer", 25, jl_Object, [], 0, 3, 0, 0, 0,
    ju_Set, "Set", 1, jl_Object, [ju_Collection], 3, 3, 0, 0, 0,
    otp_PlatformClass, "PlatformClass", 24, jl_Object, [otj_JSObject], 3, 3, 0, 0, 0,
    oti_Structure, 0, jl_Object, [], 0, 3, 0, 0, 0,
    otr_RuntimeObject, "RuntimeObject", 23, oti_Structure, [], 0, 3, 0, 0, 0,
    otr_RuntimeClass, "RuntimeClass", 23, otr_RuntimeObject, [], 0, 3, 0, 0, 0,
    jlr_Field, "Field", 14, jlr_AccessibleObject, [jlr_Member], 0, 3, 0, 0, 0,
    otp_PlatformObject, "PlatformObject", 24, jl_Object, [otj_JSObject], 3, 3, 0, 0, 0]);
    $rt_metadata([jlr_Constructor, "Constructor", 14, jlr_AccessibleObject, [jlr_Member], 0, 3, 0, 0, 0,
    jla_Annotation, "Annotation", 13, jl_Object, [], 19, 3, 0, 0, 0,
    ji_InputStream, "InputStream", 8, jl_Object, [ji_Closeable], 1, 3, 0, 0, 0,
    jn_ProtocolException, "ProtocolException", 10, ji_IOException, [], 0, 3, 0, 0, 0,
    jur_BackReferencedSingleSet, "BackReferencedSingleSet", 2, jur_SingleSet, [], 0, 0, 0, 0, ["$find0", $rt_wrapFunction3(jur_BackReferencedSingleSet_find), "$findBack", $rt_wrapFunction4(jur_BackReferencedSingleSet_findBack), "$processBackRefReplacement", $rt_wrapFunction0(jur_BackReferencedSingleSet_processBackRefReplacement)],
    jnc_CharacterCodingException, 0, ji_IOException, [], 0, 3, 0, 0, 0,
    jl_AssertionError, 0, jl_Error, [], 0, 3, 0, 0, 0,
    otcir_Flags, 0, jl_Object, [], 4, 3, 0, 0, 0,
    otcir_Converter, 0, jl_Object, [], 4, 3, 0, 0, 0,
    ju_AbstractSet, 0, ju_AbstractCollection, [ju_Set], 1, 3, 0, 0, 0,
    ju_HashMap$HashMapEntrySet, 0, ju_AbstractSet, [], 0, 0, 0, 0, 0,
    otcic_Console, 0, jl_Object, [], 4, 3, 0, 0, 0,
    ju_HashMap$2, 0, ju_AbstractCollection, [], 0, 0, 0, 0, ["$size", $rt_wrapFunction0(ju_HashMap$2_size), "$iterator", $rt_wrapFunction0(ju_HashMap$2_iterator)],
    jur_Matcher, 0, jl_Object, [jur_MatchResult], 4, 3, 0, 0, 0,
    otja_ReadyStateChangeHandler, 0, jl_Object, [otj_JSObject], 3, 3, 0, 0, 0,
    jni_XHRURLConnection$performRequest$lambda$_5_0, 0, jl_Object, [otja_ReadyStateChangeHandler], 0, 3, 0, 0, ["$stateChanged$exported$0", $rt_wrapFunction0(jni_XHRURLConnection$performRequest$lambda$_5_0_stateChanged$exported$0)],
    otjt_ArrayBufferView, 0, jl_Object, [otj_JSObject], 1, 3, 0, 0, 0,
    otjt_Int8Array, 0, otjt_ArrayBufferView, [], 1, 3, 0, 0, 0,
    ji_ByteArrayOutputStream, 0, ji_OutputStream, [], 0, 3, 0, 0, 0,
    jm_Multiplication, 0, jl_Object, [], 0, 0, 0, jm_Multiplication_$callClinit, 0,
    jm_Conversion, 0, jl_Object, [], 0, 0, 0, 0, 0,
    jm_Elementary, 0, jl_Object, [], 0, 0, 0, 0, 0,
    ju_HashMap$AbstractMapIterator, 0, jl_Object, [], 0, 0, 0, 0, ["$hasNext", $rt_wrapFunction0(ju_HashMap$AbstractMapIterator_hasNext)],
    ju_HashMap$EntryIterator, 0, ju_HashMap$AbstractMapIterator, [ju_Iterator], 0, 0, 0, 0, 0,
    ju_HashMap$ValueIterator, 0, ju_HashMap$AbstractMapIterator, [ju_Iterator], 0, 0, 0, 0, ["$next", $rt_wrapFunction0(ju_HashMap$ValueIterator_next)],
    otja_XMLHttpRequest, 0, jl_Object, [otj_JSObject, otjde_EventTarget], 1, 3, 0, 0, ["$addEventListener$exported$0", $rt_wrapFunction2(otja_XMLHttpRequest_addEventListener$exported$0), "$removeEventListener$exported$1", $rt_wrapFunction2(otja_XMLHttpRequest_removeEventListener$exported$1), "$removeEventListener$exported$20", $rt_wrapFunction3(otja_XMLHttpRequest_removeEventListener$exported$2), "$dispatchEvent$exported$3", $rt_wrapFunction1(otja_XMLHttpRequest_dispatchEvent$exported$3), "$addEventListener$exported$4",
    $rt_wrapFunction3(otja_XMLHttpRequest_addEventListener$exported$4)],
    jur_AbstractCharClass$LazyJavaLowerCase$1, "AbstractCharClass$LazyJavaLowerCase$1", 2, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains0", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaLowerCase$1_contains)],
    jur_AbstractCharClass$LazyJavaUpperCase$1, "AbstractCharClass$LazyJavaUpperCase$1", 2, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains0", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaUpperCase$1_contains)],
    jur_AbstractCharClass$LazyJavaWhitespace$1, "AbstractCharClass$LazyJavaWhitespace$1", 2, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains0", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaWhitespace$1_contains)],
    jur_AbstractCharClass$LazyJavaMirrored$1, "AbstractCharClass$LazyJavaMirrored$1", 2, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains0", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaMirrored$1_contains)],
    jur_AbstractCharClass$LazyJavaDefined$1, "AbstractCharClass$LazyJavaDefined$1", 2, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains0", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaDefined$1_contains)],
    jur_AbstractCharClass$LazyJavaDigit$1, "AbstractCharClass$LazyJavaDigit$1", 2, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains0", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaDigit$1_contains)],
    jur_AbstractCharClass$LazyJavaIdentifierIgnorable$1, "AbstractCharClass$LazyJavaIdentifierIgnorable$1", 2, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains0", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaIdentifierIgnorable$1_contains)],
    jur_AbstractCharClass$LazyJavaISOControl$1, "AbstractCharClass$LazyJavaISOControl$1", 2, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains0", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaISOControl$1_contains)],
    jur_AbstractCharClass$LazyJavaJavaIdentifierPart$1, "AbstractCharClass$LazyJavaJavaIdentifierPart$1", 2, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains0", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaJavaIdentifierPart$1_contains)],
    jur_AbstractCharClass$LazyJavaJavaIdentifierStart$1, "AbstractCharClass$LazyJavaJavaIdentifierStart$1", 2, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains0", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaJavaIdentifierStart$1_contains)],
    jur_AbstractCharClass$LazyJavaLetter$1, "AbstractCharClass$LazyJavaLetter$1", 2, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains0", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaLetter$1_contains)],
    jur_AbstractCharClass$LazyJavaLetterOrDigit$1, "AbstractCharClass$LazyJavaLetterOrDigit$1", 2, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains0", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaLetterOrDigit$1_contains)],
    jur_AbstractCharClass$LazyJavaSpaceChar$1, "AbstractCharClass$LazyJavaSpaceChar$1", 2, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains0", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaSpaceChar$1_contains)],
    jur_AbstractCharClass$LazyJavaTitleCase$1, "AbstractCharClass$LazyJavaTitleCase$1", 2, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains0", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaTitleCase$1_contains)],
    jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart$1, "AbstractCharClass$LazyJavaUnicodeIdentifierPart$1", 2, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains0", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart$1_contains)],
    jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart$1, "AbstractCharClass$LazyJavaUnicodeIdentifierStart$1", 2, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains0", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart$1_contains)],
    jur_UnicodeCategory, "UnicodeCategory", 2, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains0", $rt_wrapFunction1(jur_UnicodeCategory_contains)],
    jur_UnicodeCategoryScope, "UnicodeCategoryScope", 2, jur_UnicodeCategory, [], 0, 0, 0, 0, ["$contains0", $rt_wrapFunction1(jur_UnicodeCategoryScope_contains)],
    jnci_AsciiEncoder, 0, jnci_BufferedEncoder, [], 0, 3, 0, 0, ["$arrayEncode", function(var_1, var_2, var_3, var_4, var_5, var_6, var_7) { return jnci_AsciiEncoder_arrayEncode(this, var_1, var_2, var_3, var_4, var_5, var_6, var_7); }],
    jnci_Iso8859Encoder, 0, jnci_BufferedEncoder, [], 0, 3, 0, 0, ["$arrayEncode", function(var_1, var_2, var_3, var_4, var_5, var_6, var_7) { return jnci_Iso8859Encoder_arrayEncode(this, var_1, var_2, var_3, var_4, var_5, var_6, var_7); }],
    jnci_UTF16Encoder, 0, jnci_BufferedEncoder, [], 0, 3, 0, 0, ["$arrayEncode", function(var_1, var_2, var_3, var_4, var_5, var_6, var_7) { return jnci_UTF16Encoder_arrayEncode(this, var_1, var_2, var_3, var_4, var_5, var_6, var_7); }],
    ju_HashMap$1, 0, ju_AbstractSet, [], 0, 0, 0, 0, 0,
    jm_BitLevel, 0, jl_Object, [], 0, 0, 0, 0, 0,
    jl_AbstractStringBuilder$Constants, 0, jl_Object, [], 0, 0, 0, 0, 0]);
    $rt_metadata([otcit_FloatAnalyzer$Result, 0, jl_Object, [], 0, 3, 0, 0, 0,
    ji_ByteArrayInputStream, 0, ji_InputStream, [], 0, 3, 0, 0, 0,
    otcit_DoubleAnalyzer$Result, 0, jl_Object, [], 0, 3, 0, 0, 0,
    jnc_CoderMalfunctionError, 0, jl_Error, [], 0, 3, 0, 0, 0,
    ju_HashMap$KeyIterator, 0, ju_HashMap$AbstractMapIterator, [ju_Iterator], 0, 0, 0, 0, 0,
    ju_Collections, 0, jl_Object, [], 0, 3, 0, 0, 0,
    ju_Collections$13, 0, ju_AbstractMap, [], 0, 0, 0, 0, 0,
    ju_Collections$8, "Collections$8", 1, ju_AbstractList, [], 0, 0, 0, 0, ["$get0", $rt_wrapFunction1(ju_Collections$8_get), "$size", $rt_wrapFunction0(ju_Collections$8_size)],
    ju_TemplateCollections$AbstractImmutableSet, 0, ju_AbstractSet, [], 1, 0, 0, 0, 0,
    ju_Collections$1, 0, ju_TemplateCollections$AbstractImmutableSet, [], 0, 0, 0, 0, 0,
    ju_TemplateCollections$AbstractImmutableMap, 0, ju_AbstractMap, [], 1, 0, 0, 0, 0,
    ju_Collections$2, 0, ju_TemplateCollections$AbstractImmutableMap, [], 0, 0, 0, 0, 0,
    ju_TemplateCollections$AbstractImmutableList, 0, ju_AbstractList, [ju_RandomAccess], 1, 0, 0, 0, 0,
    ju_Collections$3, 0, ju_TemplateCollections$AbstractImmutableList, [], 0, 0, 0, 0, 0,
    ju_Collections$4, 0, jl_Object, [ju_Iterator], 0, 0, 0, 0, 0,
    ju_ListIterator, "ListIterator", 1, jl_Object, [ju_Iterator], 3, 3, 0, 0, 0,
    ju_Collections$5, 0, jl_Object, [ju_ListIterator], 0, 0, 0, 0, 0,
    ju_Collections$_clinit_$lambda$_57_0, 0, jl_Object, [ju_Comparator], 0, 3, 0, 0, 0,
    juf_Function, 0, jl_Object, [], 3, 3, 0, 0, 0,
    juf_UnaryOperator, "UnaryOperator", 3, jl_Object, [juf_Function], 3, 3, 0, 0, 0,
    juf_Consumer, "Consumer", 3, jl_Object, [], 3, 3, 0, 0, 0,
    jnc_CharsetDecoder, "CharsetDecoder", 6, jl_Object, [], 1, 3, 0, 0, 0,
    jl_UnsupportedOperationException, "UnsupportedOperationException", 12, jl_RuntimeException, [], 0, 3, 0, 0, 0,
    jnci_BufferedEncoder$Controller, 0, jl_Object, [], 0, 3, 0, 0, 0,
    jnc_BufferUnderflowException, "BufferUnderflowException", 6, jl_RuntimeException, [], 0, 3, 0, 0, 0,
    jnc_BufferOverflowException, "BufferOverflowException", 6, jl_RuntimeException, [], 0, 3, 0, 0, 0,
    jnc_MalformedInputException, "MalformedInputException", 6, jnc_CharacterCodingException, [], 0, 3, 0, 0, ["$getMessage", $rt_wrapFunction0(jnc_MalformedInputException_getMessage)],
    jnc_UnmappableCharacterException, "UnmappableCharacterException", 6, jnc_CharacterCodingException, [], 0, 3, 0, 0, ["$getMessage", $rt_wrapFunction0(jnc_UnmappableCharacterException_getMessage)],
    ju_NoSuchElementException, "NoSuchElementException", 1, jl_RuntimeException, [], 0, 3, 0, 0, 0,
    ju_Collections$14, 0, ju_AbstractSet, [], 0, 0, 0, 0, 0,
    jn_BufferUnderflowException, "BufferUnderflowException", 5, jl_RuntimeException, [], 0, 3, 0, 0, 0,
    jn_ReadOnlyBufferException, "ReadOnlyBufferException", 5, jl_UnsupportedOperationException, [], 0, 3, 0, 0, 0,
    jn_BufferOverflowException, "BufferOverflowException", 5, jl_RuntimeException, [], 0, 3, 0, 0, 0,
    ju_Collections$15, 0, jl_Object, [ju_Iterator], 0, 0, 0, 0, 0,
    jur_IntArrHash, 0, jl_Object, [], 0, 0, 0, 0, 0,
    ju_AbstractMap$SimpleImmutableEntry, 0, jl_Object, [ju_Map$Entry, ji_Serializable], 0, 3, 0, 0, 0]);
    function $rt_array(cls, data) {
        this.$monitor = null;
        this.$id$ = 0;
        this.type = cls;
        this.data = data;
        this.constructor = $rt_arraycls(cls);
    }
    $rt_array.prototype = $rt_globals.Object.create(($rt_objcls()).prototype);
    $rt_array.prototype.toString = function() {
        var str = "[";
        for (var i = 0;i < this.data.length;++i) {
            if (i > 0) {
                str += ", ";
            }
            str += this.data[i].toString();
        }
        str += "]";
        return str;
    };
    $rt_setCloneMethod($rt_array.prototype, function() {
        var dataCopy;
        if ('slice' in this.data) {
            dataCopy = this.data.slice();
        } else {
            dataCopy = new this.data.constructor(this.data.length);
            for (var i = 0;i < dataCopy.length;++i) {
                dataCopy[i] = this.data[i];
            }
        }
        return new $rt_array(this.type, dataCopy);
    });
    $rt_stringPool(["Can\'t enter monitor from another thread synchronously", "Running Code\n", "", "\\.", "java", "python", "interface ", "class ", "<init>", "<clinit>", ": ", "null", "Patter is null", "0", "String is null", "String is empty", "String contains invalid digits: ", "String contains digits out of radix ", "The value is too big for int type: ", "Illegal radix: ", "false", "true", "$main", "public class ", " {", "\tpublic static void main(String[] args) {", "\t}", "}", "UTF-8", "http://", ":8080/run_string/",
    "GET", "    ", "If: ", "Else:", "Function: ", "ARG Length: ", "Call: ", "Assignment: ", "Foreach: ", " in ", "ShowMsgBox: ", "Print: ", "RemoveAll: ", " From:", "Remove: ", "RemoveAt: ", "End", "Return: ", "ElseIf: ", "While: ", "Mutation: ", "Declaration: ", "ForWhen: ", " Increment ", " by ", ", ", "body", "isComplete", "currentRuntimeLine", "isGlobal", "isLoop", "currentLine", "hasReturn", "value", "type", "returnVal", "pastResult", "loopStartLine", "forIndex", "inForWhenLoop", "globalVariables", "localVariables",
    "states", "name", "INTLIST", "FLOATLIST", "STRINGLIST", "BOOLEANLIST", "innerType", "length", "index", "FUNCTION", "args", "line", "ELEMENT: ", "varType", "returnType", "condition", "ifreturnType", "ebody", "efcondition", "efreturnType", "efbody", "returnExpr", "returnReturnType", "mutationExpr", "mutationType", "mutationVar", "mutationReturnType", "fbody", "param", "paramReturnType", "params", "assignmentExpr", "assignmentReturnType", "tempVar", "listVar", "febody", "incVar", "increment", "forwhenIncReturnType",
    "forwhenReturnType", "fwbody", "showMsgBoxStmt", "showMsgBoxStmtReturnType", "printStmt", "printStmtReturnType", "whilecondition", "whilereturnType", "whilebody", "removeAllFromStmt", "removeAllFromStmtListName", "removeAllFromStmtReturnType", "removeFromStmt", "removeFromStmtListName", "removeFromStmtReturnType", "removeAtStmt", "removeAtStmtListName", "removeAtStmtReturnType", " - TYPE", "elementType", "elementReturnType", "element", "castType", "elementListType", "elementListName", " - isGlobal - ", " ",
    " - LISTVAL", "JSONArray[", "] is not a number.", "] not a string.", "] is not a boolean.", "showMsgBoxReturnType", "] is not a JSONArray.", "Either src or dest is null", "A JSONObject text must begin with \'{\'", "A JSONObject text must end with \'}\'", "Expected a \':\' after a key", "Duplicate key \"", "\"", "Expected a \',\' or \'}\'", "Null key.", "JSONObject[", "] not found.", "] is not a Boolean.", "] is not an int.", "] is not a JSONObject.", "get", "is", "getClass", "getDeclaringClass", "\\t", "\\n",
    "\\f", "\\r", "\\u", "0000", "\\b", "\"\"", "-0", "JSON does not allow non-finite numbers.", "java.", "javax.", "Null pointer", ".", "Unable to write JSONObject value for key: ", "STRING", "INT", "FLOAT", "BOOLEAN", "Function ", " already exists!", "Float", "Boolean", "String", "Int", "FloatList", "BooleanList", "StringList", "IntList", "\n", "//", "subtract", "divide", "import", "remove", "return", "removeAt", "if", "add", "for", "let", "robot", "while", "}else", "multiply", "return.", "removeAll", "function",
    "Expression: ", "else", "when", "each", "ForCondition: ", "FunctionName: ", ",", ":", "Invalid argument declaration. Full Arg", " Line: ", "equals", "=", "print", "dialog", "ImportName: ", "from", "sub", "Name: ", "(", "\\(", "input", "toString", "toInt", "toBool", "toFloat", "in", "by", "Missing closing parenthesis at line ", "to", "equal", "Unclosed string at line ", "bool[]", "float[]", "int", "bool", "float", "int[]", "String[]", "random_eyes", "lying_back", "lying_belly", "RETURN", "IF", "CALL", "ELSE",
    "FOREACH", "FORWHEN", "PRINT", "WHILE", "DECLARATION", "REMOVEAT", "ASSIGNMENT", "REMOVEFROM", "MUTATION", "COMMENT", "REMOVEALLFROM", "SHOWMSGBOX", "ELSEIF", "EVAL ELSE IF: ", " PASSED: ", "INTEGER", "LESS_THAN_EQUAL", "EXPRESSION", "LESS_THAN", "ARRAYLENGTH", "VARIABLE", "OR", "AND", "NOT", "BOOL", "CAST", "LIST", "PLUS", "EQUAL", "MINUS", "GREATER_THAN_EQUAL", "LISTVAL", "GREATER_THAN", "NOT_EQUAL", "MULTIPLY", "SHOWINPUTBOX", "DIVIDE", "List", "Number or String", "Number or Bool", "Number", "Declaration: Type:",
    " Name: ", " Value:", "LIST: ", "REMOVE FROM: ", "SUBTRACT", "ADD", "Index out of bounds", "NOT LOOPING", "LOOPING", "Current Line: ", "States Size: ", "Interpreting: ", "Statement Size: ", "CALLING FUNCTION: ", "ADDING LIST: ", "(this Collection)", "[]", "JSONArray initial value should be a string or collection or array.", "Unable to write JSONArray value at index: 0", "Unable to write JSONArray value at index: ", "Stepping back two steps is not supported", "Substring bounds error", "Illegal escape.", "Unterminated string",
    "A JSONArray text must start with \'[\'", "Expected a \',\' or \']\'", ",:]}/\\\"[{;=#", "Missing value", " at ", " [character ", " line ", "]", "public static void ", ") {", "public static ", " = ", "),", ");", " else {", " else if(", "){", "System.out.println(", "Parsing INT ", " && ", " !", "CastExpr: ", "(float)", "Float.parseFloat(", "(int)", "Integer.parseInt(", "String.valueOf(", "Boolean.parseBoolean(", " / ", " == ", " > ", " >= ", " < ", " <= ", " - ", " * ", " != ", " || ", " + ", ".get(", "new ArrayList<",
    ">(Arrays.asList(", "import java.util.ArrayList;", "import java.util.Arrays;", "))", ".size()", "ArrayList<", "if(", "while(", "for(String ", " : ", "for(boolean ", "for(int ", "for(float ", "; ", "int ", " = 0;", "for(", " += ", "import javax.swing.JOptionPane;", "JOptionPane.showMessageDialog(null, ", "ShowInputBox", "JOptionPane.showInputDialog(", "++;", "--;", " -= ", " *= ", " /= ", ".add(", ".remove(", ".remove(Integer.valueOf(", "));", ".removeAll(Arrays.asList(", "boolean", "Adding function: ", "def ",
    "):", "Interpreting Function: ", " TAB COUNT: ", "Assignment: Name:", "TABCOUNT: ", "Comment: ", " else:", " else if ", "robot speak", "1 argument", "no arguments", "motion = ALProxy(\"ALMotion\", \"", "\", 9559)", "motion.setStiffnesses(\"Body\", 1.0)", "motion.moveInit()", "motion.moveTo(", ",0,0)", "tts = ALProxy(\"ALTextToSpeech\", \"", "tts.say(", "postureService = ALProxy(\"ALRobotPosture\", \"", "postureService.goToPosture(\"Stand\", .8)", "import time", "leds = ALProxy(\"ALLeds\", \"", "0.05", "Blink Duration: ",
    "rDuration = ", "leds.fadeRGB( \"FaceLed0\", 0x000000, rDuration, _async=True )", "leds.fadeRGB( \"FaceLed1\", 0x000000, rDuration, _async=True )", "leds.fadeRGB( \"FaceLed2\", 0xffffff, rDuration, _async=True )", "leds.fadeRGB( \"FaceLed3\", 0x000000, rDuration, _async=True )", "leds.fadeRGB( \"FaceLed4\", 0x000000, rDuration, _async=True )", "leds.fadeRGB( \"FaceLed5\", 0x000000, rDuration, _async=True )", "leds.fadeRGB( \"FaceLed6\", 0xffffff, rDuration, _async=True )", "leds.fadeRGB( \"FaceLed7\", 0x000000, rDuration, _async=True )",
    "time.sleep( 0.1 )", "leds.fadeRGB( \"FaceLeds\", 0xffffff, rDuration )", "5", "while rDuration > 0:", "\tleds.fade(\"FaceLeds\", 1, ", "\ttime.sleep(", "\tleds.fade(\"FaceLeds\", 0, ", "\trDuration -= ", "leds.fade(\"FaceLeds\", 1, 0.1)", "import random", "\trRandTime = random.uniform(0.0,2.0)", "\tleds.fadeRGB(\"FaceLeds\", 256*random.randint(0,255) + 256*256*random.randint(0,255) + random.randint(0,255), rRandTime)", "\ttime.sleep(random.uniform(0.0,3.0))", "\trDuration -= rRandTime", "postureService.goToPosture(\"Crouch\", .8)",
    "postureService.goToPosture(\"LyingBack\", .8)", "postureService.goToPosture(\"LyingBelly\", .8)", "\"/home/nao/recordings/cameras\"", "\"image\"", "photo = ALProxy(\"ALPhotoCapture\", \"", "photo.setResolution(2)", "photo.setCameraID(0)", "photo.setPictureFormat(\"jpg\")", "photo.takePicture(", "postureService.goToPosture(\"Sit\", .8)", "robot move", "memory = ALProxy(\"ALMemory\", \"", "memory.getData(\"BatteryChargeChanged\")", "audio = ALProxy(\"ALAudioDevice\", \"", "audio.getOutputVolume()", "import socket",
    "socket.gethostname()", "from naoqi import ALProxy", "EVALUATING EXPR: ", "EVALUATING ELMT: ", " and ", " not ", "False", "True", "float(", "int(", "str(", "bool(", " or ", "[", "len(", "if ", "print(", "while ", "for ", " = 0", "input(", ".append(", ".pop(", " = [i for i in ", " if i != ", " .-*_", "Offset ", " is outside of range [0;", "The last byte in dst ", " is outside of array of size ", "Length ", " must be non-negative", "0123456789ABCDEF", "/", "ftp", "http", "https", "charsetName is null", "Should never been thrown",
    "Class does not represent enum", "Enum ", " does not have the ", " constant", "END", "CLASS", "IMPORT", "ROBOT", "EXPRESSION: ", "EXPRESSIONSSSS: ", "ARRAY ARG EXPR: ", "READING NOT", "ORIGINAL EXPR: ", " PARSING(", ")FUNCTION ARG: ", "ADDING ROBOT ACTION:", "CAST TO STRING: ", "Adding NOT", "call", "not", "greater", "than", "or", "less", "LENGTH NEXT WORD: ", "of", "==", "!=", ">", "<", ">=", "<=", "and", "&&", "||", "plus", "+", "minus", "-", "times", "*", "Unknown element at line ", " column ", "NUMBER",
    "////", "String index out of bounds: ", "/./", "/.", "/../", "/..", "object", "string", "number", "EXPRESSION(", "CAST(", ".length", "boolean[]", "RobotActionElmt", "US-ASCII", "ISO-8859-1", "UTF-16", "UTF-16BE", "UTF-16LE", "Unknown statement at line ", "Type mismatch at line ", ": Expected ", ", got ", "Variable \"", "\" already exists!", "Variable ", "Unable to parse ", " to ", " at line ", "\" not declared at line ", " not declared at line ", "Invalid variable name at line ", "Error: Invalid variable name at line ",
    "Invalid function name at line ", "Error: Invalid function name at line ", "Invalid function call at line ", "Can\'t perform mutation on ", "Argument length mismatch at line ", "Argument type mismatch at line ", " not global at line ", "Can\'t perform operation ", " on ", "Index bigger than array length at line ", ": Got:", ", Max: ", "Unclosed parenthesis at line ", "Missing period at end of statement at line ", "Unclosed bracket at line ", "List ", " empty at line ", "Robot not imported at line ", "Invalid robot action ",
    "Function \"", "\" has no return at line ", "Message boxes not supported during debugging, at line ", "Reserved name ", "break", "mod", "DELETE", "HEAD", "OPTIONS", "POST", "PUT", "TRACE", "Unsupported protocol: ", "MOVE", "SPEAK", "STAND", "SIT", "BLINK", "TWINKLE", "RANDOMEYES", "BATTERY", "VOLUME", "CROUCH", "LYINGBACK", "NAME", "PICTURE", "LYINGBELLY", "New position ", "Capacity is negative: ", "The last byte in src ", "IGNORE", "REPLACE", "REPORT", "NANOSECONDS", "MICROSECONDS", "MILLISECONDS", "SECONDS",
    "MINUTES", "HOURS", "DAYS", "Scale out of range.", "Zero length BigInteger", "main", "Action must be non-null", "fSet", "Is", "In", "NonCapFSet", "AheadFSet", "BehindFSet", "AtomicFSet", "FinalSet", "<Empty set>", "JointSet", "NonCapJointSet", "PosLookaheadJointSet", "NegLookaheadJointSet", "PosBehindJointSet", "NegBehindJointSet", "en", "CA", "fr", "zh", "CN", "FR", "de", "DE", "it", "IT", "ja", "JP", "ko", "KR", "TW", "GB", "US", "<Quant>", "<GroupQuant>", "public", "protected", "private", "abstract",
    "static", "final", "transient", "volatile", "synchronized", "native", "strictfp", "interface", "BIG_ENDIAN", "LITTLE_ENDIAN", "posFSet", "^ ", "range:", "CompositeRangeSet:  <nonsurrogate> ", " <surrogate> ", "UCI range:", "decomposed Hangul syllable:", "UCI ", "CI ", "decomposed char:", "<DotAllQuant>", "<DotQuant>", "<SOL>", "WordBoundary", "PreviousMatch", "<EOL>", "EOI", "^", "DotAll", "<Unix MultiLine $>", "<MultiLine $>", "CI back reference: ", "back reference: ", "UCI back reference: ", "sequence: ",
    "UCI sequence: ", "CI sequence: ", "Lower", "Upper", "ASCII", "Alpha", "Digit", "Alnum", "Punct", "Graph", "Print", "Blank", "Cntrl", "XDigit", "javaLowerCase", "javaUpperCase", "javaWhitespace", "javaMirrored", "javaDefined", "javaDigit", "javaIdentifierIgnorable", "javaISOControl", "javaJavaIdentifierPart", "javaJavaIdentifierStart", "javaLetter", "javaLetterOrDigit", "javaSpaceChar", "javaTitleCase", "javaUnicodeIdentifierPart", "javaUnicodeIdentifierStart", "Space", "w", "W", "s", "S", "d", "D", "BasicLatin",
    "Latin-1Supplement", "LatinExtended-A", "LatinExtended-B", "IPAExtensions", "SpacingModifierLetters", "CombiningDiacriticalMarks", "Greek", "Cyrillic", "CyrillicSupplement", "Armenian", "Hebrew", "Arabic", "Syriac", "ArabicSupplement", "Thaana", "Devanagari", "Bengali", "Gurmukhi", "Gujarati", "Oriya", "Tamil", "Telugu", "Kannada", "Malayalam", "Sinhala", "Thai", "Lao", "Tibetan", "Myanmar", "Georgian", "HangulJamo", "Ethiopic", "EthiopicSupplement", "Cherokee", "UnifiedCanadianAboriginalSyllabics", "Ogham",
    "Runic", "Tagalog", "Hanunoo", "Buhid", "Tagbanwa", "Khmer", "Mongolian", "Limbu", "TaiLe", "NewTaiLue", "KhmerSymbols", "Buginese", "PhoneticExtensions", "PhoneticExtensionsSupplement", "CombiningDiacriticalMarksSupplement", "LatinExtendedAdditional", "GreekExtended", "GeneralPunctuation", "SuperscriptsandSubscripts", "CurrencySymbols", "CombiningMarksforSymbols", "LetterlikeSymbols", "NumberForms", "Arrows", "MathematicalOperators", "MiscellaneousTechnical", "ControlPictures", "OpticalCharacterRecognition",
    "EnclosedAlphanumerics", "BoxDrawing", "BlockElements", "GeometricShapes", "MiscellaneousSymbols", "Dingbats", "MiscellaneousMathematicalSymbols-A", "SupplementalArrows-A", "BraillePatterns", "SupplementalArrows-B", "MiscellaneousMathematicalSymbols-B", "SupplementalMathematicalOperators", "MiscellaneousSymbolsandArrows", "Glagolitic", "Coptic", "GeorgianSupplement", "Tifinagh", "EthiopicExtended", "SupplementalPunctuation", "CJKRadicalsSupplement", "KangxiRadicals", "IdeographicDescriptionCharacters", "CJKSymbolsandPunctuation",
    "Hiragana", "Katakana", "Bopomofo", "HangulCompatibilityJamo", "Kanbun", "BopomofoExtended", "CJKStrokes", "KatakanaPhoneticExtensions", "EnclosedCJKLettersandMonths", "CJKCompatibility", "CJKUnifiedIdeographsExtensionA", "YijingHexagramSymbols", "CJKUnifiedIdeographs", "YiSyllables", "YiRadicals", "ModifierToneLetters", "SylotiNagri", "HangulSyllables", "HighSurrogates", "HighPrivateUseSurrogates", "LowSurrogates", "PrivateUseArea", "CJKCompatibilityIdeographs", "AlphabeticPresentationForms", "ArabicPresentationForms-A",
    "VariationSelectors", "VerticalForms", "CombiningHalfMarks", "CJKCompatibilityForms", "SmallFormVariants", "ArabicPresentationForms-B", "HalfwidthandFullwidthForms", "all", "Specials", "Cn", "IsL", "Lu", "Ll", "Lt", "Lm", "Lo", "IsM", "Mn", "Me", "Mc", "N", "Nd", "Nl", "No", "IsZ", "Zs", "Zl", "Zp", "IsC", "Cc", "Cf", "Co", "Cs", "IsP", "Pd", "Ps", "Pe", "Pc", "Po", "IsS", "Sm", "Sc", "Sk", "So", "Pi", "Pf", "unknown protocol(", ")://", "Replacement preconditions do not hold", "The last char in dst ", "\r\n",
    "Malformed input of length ", "Unmappable characters of length "]);
    jl_String.prototype.toString = function() {
        return $rt_ustr(this);
    };
    jl_String.prototype.valueOf = jl_String.prototype.toString;
    jl_Object.prototype.toString = function() {
        return $rt_ustr(jl_Object_toString(this));
    };
    jl_Object.prototype.__teavm_class__ = function() {
        return $dbg_class(this);
    };
    var Long_eq;
    var Long_ne;
    var Long_gt;
    var Long_ge;
    var Long_lt;
    var Long_le;
    var Long_compare;
    var Long_ucompare;
    var Long_add;
    var Long_sub;
    var Long_inc;
    var Long_dec;
    var Long_mul;
    var Long_div;
    var Long_rem;
    var Long_udiv;
    var Long_urem;
    var Long_neg;
    var Long_and;
    var Long_or;
    var Long_xor;
    var Long_shl;
    var Long_shr;
    var Long_shru;
    var Long_not;
    if (typeof $rt_globals.BigInt !== 'function') {
        Long_eq = function(a, b) {
            return a.hi === b.hi && a.lo === b.lo;
        };
        Long_ne = function(a, b) {
            return a.hi !== b.hi || a.lo !== b.lo;
        };
        Long_gt = function(a, b) {
            if (a.hi < b.hi) {
                return false;
            }
            if (a.hi > b.hi) {
                return true;
            }
            var x = a.lo >>> 1;
            var y = b.lo >>> 1;
            if (x !== y) {
                return x > y;
            }
            return (a.lo & 1) > (b.lo & 1);
        };
        Long_ge = function(a, b) {
            if (a.hi < b.hi) {
                return false;
            }
            if (a.hi > b.hi) {
                return true;
            }
            var x = a.lo >>> 1;
            var y = b.lo >>> 1;
            if (x !== y) {
                return x >= y;
            }
            return (a.lo & 1) >= (b.lo & 1);
        };
        Long_lt = function(a, b) {
            if (a.hi > b.hi) {
                return false;
            }
            if (a.hi < b.hi) {
                return true;
            }
            var x = a.lo >>> 1;
            var y = b.lo >>> 1;
            if (x !== y) {
                return x < y;
            }
            return (a.lo & 1) < (b.lo & 1);
        };
        Long_le = function(a, b) {
            if (a.hi > b.hi) {
                return false;
            }
            if (a.hi < b.hi) {
                return true;
            }
            var x = a.lo >>> 1;
            var y = b.lo >>> 1;
            if (x !== y) {
                return x <= y;
            }
            return (a.lo & 1) <= (b.lo & 1);
        };
        Long_add = function(a, b) {
            if (a.hi === a.lo >> 31 && b.hi === b.lo >> 31) {
                return Long_fromNumber(a.lo + b.lo);
            } else if ($rt_globals.Math.abs(a.hi) < Long_MAX_NORMAL && $rt_globals.Math.abs(b.hi) < Long_MAX_NORMAL) {
                return Long_fromNumber(Long_toNumber(a) + Long_toNumber(b));
            }
            var a_lolo = a.lo & 0xFFFF;
            var a_lohi = a.lo >>> 16;
            var a_hilo = a.hi & 0xFFFF;
            var a_hihi = a.hi >>> 16;
            var b_lolo = b.lo & 0xFFFF;
            var b_lohi = b.lo >>> 16;
            var b_hilo = b.hi & 0xFFFF;
            var b_hihi = b.hi >>> 16;
            var lolo = a_lolo + b_lolo | 0;
            var lohi = a_lohi + b_lohi + (lolo >> 16) | 0;
            var hilo = a_hilo + b_hilo + (lohi >> 16) | 0;
            var hihi = a_hihi + b_hihi + (hilo >> 16) | 0;
            return new Long(lolo & 0xFFFF | (lohi & 0xFFFF) << 16, hilo & 0xFFFF | (hihi & 0xFFFF) << 16);
        };
        Long_inc = function(a) {
            var lo = a.lo + 1 | 0;
            var hi = a.hi;
            if (lo === 0) {
                hi = hi + 1 | 0;
            }
            return new Long(lo, hi);
        };
        Long_dec = function(a) {
            var lo = a.lo - 1 | 0;
            var hi = a.hi;
            if (lo ===  -1) {
                hi = hi - 1 | 0;
            }
            return new Long(lo, hi);
        };
        Long_neg = function(a) {
            return Long_inc(new Long(a.lo ^ 0xFFFFFFFF, a.hi ^ 0xFFFFFFFF));
        };
        Long_sub = function(a, b) {
            if (a.hi === a.lo >> 31 && b.hi === b.lo >> 31) {
                return Long_fromNumber(a.lo - b.lo);
            }
            var a_lolo = a.lo & 0xFFFF;
            var a_lohi = a.lo >>> 16;
            var a_hilo = a.hi & 0xFFFF;
            var a_hihi = a.hi >>> 16;
            var b_lolo = b.lo & 0xFFFF;
            var b_lohi = b.lo >>> 16;
            var b_hilo = b.hi & 0xFFFF;
            var b_hihi = b.hi >>> 16;
            var lolo = a_lolo - b_lolo | 0;
            var lohi = a_lohi - b_lohi + (lolo >> 16) | 0;
            var hilo = a_hilo - b_hilo + (lohi >> 16) | 0;
            var hihi = a_hihi - b_hihi + (hilo >> 16) | 0;
            return new Long(lolo & 0xFFFF | (lohi & 0xFFFF) << 16, hilo & 0xFFFF | (hihi & 0xFFFF) << 16);
        };
        Long_compare = function(a, b) {
            var r = a.hi - b.hi;
            if (r !== 0) {
                return r;
            }
            r = (a.lo >>> 1) - (b.lo >>> 1);
            if (r !== 0) {
                return r;
            }
            return (a.lo & 1) - (b.lo & 1);
        };
        Long_ucompare = function(a, b) {
            var r = $rt_ucmp(a.hi, b.hi);
            if (r !== 0) {
                return r;
            }
            r = (a.lo >>> 1) - (b.lo >>> 1);
            if (r !== 0) {
                return r;
            }
            return (a.lo & 1) - (b.lo & 1);
        };
        Long_mul = function(a, b) {
            var positive = Long_isNegative(a) === Long_isNegative(b);
            if (Long_isNegative(a)) {
                a = Long_neg(a);
            }
            if (Long_isNegative(b)) {
                b = Long_neg(b);
            }
            var a_lolo = a.lo & 0xFFFF;
            var a_lohi = a.lo >>> 16;
            var a_hilo = a.hi & 0xFFFF;
            var a_hihi = a.hi >>> 16;
            var b_lolo = b.lo & 0xFFFF;
            var b_lohi = b.lo >>> 16;
            var b_hilo = b.hi & 0xFFFF;
            var b_hihi = b.hi >>> 16;
            var lolo = 0;
            var lohi = 0;
            var hilo = 0;
            var hihi = 0;
            lolo = a_lolo * b_lolo | 0;
            lohi = lolo >>> 16;
            lohi = (lohi & 0xFFFF) + a_lohi * b_lolo | 0;
            hilo = hilo + (lohi >>> 16) | 0;
            lohi = (lohi & 0xFFFF) + a_lolo * b_lohi | 0;
            hilo = hilo + (lohi >>> 16) | 0;
            hihi = hilo >>> 16;
            hilo = (hilo & 0xFFFF) + a_hilo * b_lolo | 0;
            hihi = hihi + (hilo >>> 16) | 0;
            hilo = (hilo & 0xFFFF) + a_lohi * b_lohi | 0;
            hihi = hihi + (hilo >>> 16) | 0;
            hilo = (hilo & 0xFFFF) + a_lolo * b_hilo | 0;
            hihi = hihi + (hilo >>> 16) | 0;
            hihi = hihi + a_hihi * b_lolo + a_hilo * b_lohi + a_lohi * b_hilo + a_lolo * b_hihi | 0;
            var result = new Long(lolo & 0xFFFF | lohi << 16, hilo & 0xFFFF | hihi << 16);
            return positive ? result : Long_neg(result);
        };
        Long_div = function(a, b) {
            if ($rt_globals.Math.abs(a.hi) < Long_MAX_NORMAL && $rt_globals.Math.abs(b.hi) < Long_MAX_NORMAL) {
                return Long_fromNumber(Long_toNumber(a) / Long_toNumber(b));
            }
            return (Long_divRem(a, b))[0];
        };
        Long_udiv = function(a, b) {
            if (a.hi >= 0 && a.hi < Long_MAX_NORMAL && b.hi >= 0 && b.hi < Long_MAX_NORMAL) {
                return Long_fromNumber(Long_toNumber(a) / Long_toNumber(b));
            }
            return (Long_udivRem(a, b))[0];
        };
        Long_rem = function(a, b) {
            if ($rt_globals.Math.abs(a.hi) < Long_MAX_NORMAL && $rt_globals.Math.abs(b.hi) < Long_MAX_NORMAL) {
                return Long_fromNumber(Long_toNumber(a) % Long_toNumber(b));
            }
            return (Long_divRem(a, b))[1];
        };
        Long_urem = function(a, b) {
            if (a.hi >= 0 && a.hi < Long_MAX_NORMAL && b.hi >= 0 && b.hi < Long_MAX_NORMAL) {
                return Long_fromNumber(Long_toNumber(a) / Long_toNumber(b));
            }
            return (Long_udivRem(a, b))[1];
        };
        function Long_divRem(a, b) {
            if (b.lo === 0 && b.hi === 0) {
                throw new $rt_globals.Error("Division by zero");
            }
            var positive = Long_isNegative(a) === Long_isNegative(b);
            if (Long_isNegative(a)) {
                a = Long_neg(a);
            }
            if (Long_isNegative(b)) {
                b = Long_neg(b);
            }
            a = new LongInt(a.lo, a.hi, 0);
            b = new LongInt(b.lo, b.hi, 0);
            var q = LongInt_div(a, b);
            a = new Long(a.lo, a.hi);
            q = new Long(q.lo, q.hi);
            return positive ? [q, a] : [Long_neg(q), Long_neg(a)];
        }
        function Long_udivRem(a, b) {
            if (b.lo === 0 && b.hi === 0) {
                throw new $rt_globals.Error("Division by zero");
            }
            a = new LongInt(a.lo, a.hi, 0);
            b = new LongInt(b.lo, b.hi, 0);
            var q = LongInt_div(a, b);
            a = new Long(a.lo, a.hi);
            q = new Long(q.lo, q.hi);
            return [q, a];
        }
        function Long_shiftLeft16(a) {
            return new Long(a.lo << 16, a.lo >>> 16 | a.hi << 16);
        }
        function Long_shiftRight16(a) {
            return new Long(a.lo >>> 16 | a.hi << 16, a.hi >>> 16);
        }
        Long_and = function(a, b) {
            return new Long(a.lo & b.lo, a.hi & b.hi);
        };
        Long_or = function(a, b) {
            return new Long(a.lo | b.lo, a.hi | b.hi);
        };
        Long_xor = function(a, b) {
            return new Long(a.lo ^ b.lo, a.hi ^ b.hi);
        };
        Long_shl = function(a, b) {
            b &= 63;
            if (b === 0) {
                return a;
            } else if (b < 32) {
                return new Long(a.lo << b, a.lo >>> 32 - b | a.hi << b);
            } else if (b === 32) {
                return new Long(0, a.lo);
            } else {
                return new Long(0, a.lo << b - 32);
            }
        };
        Long_shr = function(a, b) {
            b &= 63;
            if (b === 0) {
                return a;
            } else if (b < 32) {
                return new Long(a.lo >>> b | a.hi << 32 - b, a.hi >> b);
            } else if (b === 32) {
                return new Long(a.hi, a.hi >> 31);
            } else {
                return new Long(a.hi >> b - 32, a.hi >> 31);
            }
        };
        Long_shru = function(a, b) {
            b &= 63;
            if (b === 0) {
                return a;
            } else if (b < 32) {
                return new Long(a.lo >>> b | a.hi << 32 - b, a.hi >>> b);
            } else if (b === 32) {
                return new Long(a.hi, 0);
            } else {
                return new Long(a.hi >>> b - 32, 0);
            }
        };
        Long_not = function(a) {
            return new Long(~a.hi, ~a.lo);
        };
        function LongInt(lo, hi, sup) {
            this.lo = lo;
            this.hi = hi;
            this.sup = sup;
        }
        function LongInt_mul(a, b) {
            var a_lolo = (a.lo & 0xFFFF) * b | 0;
            var a_lohi = (a.lo >>> 16) * b | 0;
            var a_hilo = (a.hi & 0xFFFF) * b | 0;
            var a_hihi = (a.hi >>> 16) * b | 0;
            var sup = a.sup * b | 0;
            a_lohi = a_lohi + (a_lolo >>> 16) | 0;
            a_hilo = a_hilo + (a_lohi >>> 16) | 0;
            a_hihi = a_hihi + (a_hilo >>> 16) | 0;
            sup = sup + (a_hihi >>> 16) | 0;
            a.lo = a_lolo & 0xFFFF | a_lohi << 16;
            a.hi = a_hilo & 0xFFFF | a_hihi << 16;
            a.sup = sup & 0xFFFF;
        }
        function LongInt_sub(a, b) {
            var a_lolo = a.lo & 0xFFFF;
            var a_lohi = a.lo >>> 16;
            var a_hilo = a.hi & 0xFFFF;
            var a_hihi = a.hi >>> 16;
            var b_lolo = b.lo & 0xFFFF;
            var b_lohi = b.lo >>> 16;
            var b_hilo = b.hi & 0xFFFF;
            var b_hihi = b.hi >>> 16;
            a_lolo = a_lolo - b_lolo | 0;
            a_lohi = a_lohi - b_lohi + (a_lolo >> 16) | 0;
            a_hilo = a_hilo - b_hilo + (a_lohi >> 16) | 0;
            a_hihi = a_hihi - b_hihi + (a_hilo >> 16) | 0;
            var sup = a.sup - b.sup + (a_hihi >> 16) | 0;
            a.lo = a_lolo & 0xFFFF | a_lohi << 16;
            a.hi = a_hilo & 0xFFFF | a_hihi << 16;
            a.sup = sup;
        }
        function LongInt_add(a, b) {
            var a_lolo = a.lo & 0xFFFF;
            var a_lohi = a.lo >>> 16;
            var a_hilo = a.hi & 0xFFFF;
            var a_hihi = a.hi >>> 16;
            var b_lolo = b.lo & 0xFFFF;
            var b_lohi = b.lo >>> 16;
            var b_hilo = b.hi & 0xFFFF;
            var b_hihi = b.hi >>> 16;
            a_lolo = a_lolo + b_lolo | 0;
            a_lohi = a_lohi + b_lohi + (a_lolo >> 16) | 0;
            a_hilo = a_hilo + b_hilo + (a_lohi >> 16) | 0;
            a_hihi = a_hihi + b_hihi + (a_hilo >> 16) | 0;
            var sup = a.sup + b.sup + (a_hihi >> 16) | 0;
            a.lo = a_lolo & 0xFFFF | a_lohi << 16;
            a.hi = a_hilo & 0xFFFF | a_hihi << 16;
            a.sup = sup;
        }
        function LongInt_inc(a) {
            a.lo = a.lo + 1 | 0;
            if (a.lo === 0) {
                a.hi = a.hi + 1 | 0;
                if (a.hi === 0) {
                    a.sup = a.sup + 1 & 0xFFFF;
                }
            }
        }
        function LongInt_dec(a) {
            a.lo = a.lo - 1 | 0;
            if (a.lo ===  -1) {
                a.hi = a.hi - 1 | 0;
                if (a.hi ===  -1) {
                    a.sup = a.sup - 1 & 0xFFFF;
                }
            }
        }
        function LongInt_ucompare(a, b) {
            var r = a.sup - b.sup;
            if (r !== 0) {
                return r;
            }
            r = (a.hi >>> 1) - (b.hi >>> 1);
            if (r !== 0) {
                return r;
            }
            r = (a.hi & 1) - (b.hi & 1);
            if (r !== 0) {
                return r;
            }
            r = (a.lo >>> 1) - (b.lo >>> 1);
            if (r !== 0) {
                return r;
            }
            return (a.lo & 1) - (b.lo & 1);
        }
        function LongInt_numOfLeadingZeroBits(a) {
            var n = 0;
            var d = 16;
            while (d > 0) {
                if (a >>> d !== 0) {
                    a >>>= d;
                    n = n + d | 0;
                }
                d = d / 2 | 0;
            }
            return 31 - n;
        }
        function LongInt_shl(a, b) {
            if (b === 0) {
                return;
            }
            if (b < 32) {
                a.sup = (a.hi >>> 32 - b | a.sup << b) & 0xFFFF;
                a.hi = a.lo >>> 32 - b | a.hi << b;
                a.lo <<= b;
            } else if (b === 32) {
                a.sup = a.hi & 0xFFFF;
                a.hi = a.lo;
                a.lo = 0;
            } else if (b < 64) {
                a.sup = (a.lo >>> 64 - b | a.hi << b - 32) & 0xFFFF;
                a.hi = a.lo << b;
                a.lo = 0;
            } else if (b === 64) {
                a.sup = a.lo & 0xFFFF;
                a.hi = 0;
                a.lo = 0;
            } else {
                a.sup = a.lo << b - 64 & 0xFFFF;
                a.hi = 0;
                a.lo = 0;
            }
        }
        function LongInt_shr(a, b) {
            if (b === 0) {
                return;
            }
            if (b === 32) {
                a.lo = a.hi;
                a.hi = a.sup;
                a.sup = 0;
            } else if (b < 32) {
                a.lo = a.lo >>> b | a.hi << 32 - b;
                a.hi = a.hi >>> b | a.sup << 32 - b;
                a.sup >>>= b;
            } else if (b === 64) {
                a.lo = a.sup;
                a.hi = 0;
                a.sup = 0;
            } else if (b < 64) {
                a.lo = a.hi >>> b - 32 | a.sup << 64 - b;
                a.hi = a.sup >>> b - 32;
                a.sup = 0;
            } else {
                a.lo = a.sup >>> b - 64;
                a.hi = 0;
                a.sup = 0;
            }
        }
        function LongInt_copy(a) {
            return new LongInt(a.lo, a.hi, a.sup);
        }
        function LongInt_div(a, b) {
            var bits = b.hi !== 0 ? LongInt_numOfLeadingZeroBits(b.hi) : LongInt_numOfLeadingZeroBits(b.lo) + 32;
            var sz = 1 + (bits / 16 | 0);
            var dividentBits = bits % 16;
            LongInt_shl(b, bits);
            LongInt_shl(a, dividentBits);
            var q = new LongInt(0, 0, 0);
            while (sz-- > 0) {
                LongInt_shl(q, 16);
                var digitA = (a.hi >>> 16) + 0x10000 * a.sup;
                var digitB = b.hi >>> 16;
                var digit = digitA / digitB | 0;
                var t = LongInt_copy(b);
                LongInt_mul(t, digit);
                if (LongInt_ucompare(t, a) >= 0) {
                    while (LongInt_ucompare(t, a) > 0) {
                        LongInt_sub(t, b);
                         --digit;
                    }
                } else {
                    while (true) {
                        var nextT = LongInt_copy(t);
                        LongInt_add(nextT, b);
                        if (LongInt_ucompare(nextT, a) > 0) {
                            break;
                        }
                        t = nextT;
                        ++digit;
                    }
                }
                LongInt_sub(a, t);
                q.lo |= digit;
                LongInt_shl(a, 16);
            }
            LongInt_shr(a, bits + 16);
            return q;
        }
    } else {
        Long_eq = function(a, b) {
            return a === b;
        };
        Long_ne = function(a, b) {
            return a !== b;
        };
        Long_gt = function(a, b) {
            return a > b;
        };
        Long_ge = function(a, b) {
            return a >= b;
        };
        Long_lt = function(a, b) {
            return a < b;
        };
        Long_le = function(a, b) {
            return a <= b;
        };
        Long_add = function(a, b) {
            return $rt_globals.BigInt.asIntN(64, a + b);
        };
        Long_inc = function(a) {
            return $rt_globals.BigInt.asIntN(64, a + 1);
        };
        Long_dec = function(a) {
            return $rt_globals.BigInt.asIntN(64, a - 1);
        };
        Long_neg = function(a) {
            return $rt_globals.BigInt.asIntN(64,  -a);
        };
        Long_sub = function(a, b) {
            return $rt_globals.BigInt.asIntN(64, a - b);
        };
        Long_compare = function(a, b) {
            return a < b ?  -1 : a > b ? 1 : 0;
        };
        Long_ucompare = function(a, b) {
            a = $rt_globals.BigInt.asUintN(64, a);
            b = $rt_globals.BigInt.asUintN(64, b);
            return a < b ?  -1 : a > b ? 1 : 0;
        };
        Long_mul = function(a, b) {
            return $rt_globals.BigInt.asIntN(64, a * b);
        };
        Long_div = function(a, b) {
            return $rt_globals.BigInt.asIntN(64, a / b);
        };
        Long_udiv = function(a, b) {
            return $rt_globals.BigInt.asIntN(64, $rt_globals.BigInt.asUintN(64, a) / $rt_globals.BigInt.asUintN(64, b));
        };
        Long_rem = function(a, b) {
            return $rt_globals.BigInt.asIntN(64, a % b);
        };
        Long_urem = function(a, b) {
            return $rt_globals.BigInt.asIntN(64, $rt_globals.BigInt.asUintN(64, a) % $rt_globals.BigInt.asUintN(64, b));
        };
        Long_and = function(a, b) {
            return $rt_globals.BigInt.asIntN(64, a & b);
        };
        Long_or = function(a, b) {
            return $rt_globals.BigInt.asIntN(64, a | b);
        };
        Long_xor = function(a, b) {
            return $rt_globals.BigInt.asIntN(64, a ^ b);
        };
        Long_shl = function(a, b) {
            return $rt_globals.BigInt.asIntN(64, a << $rt_globals.BigInt(b & 63));
        };
        Long_shr = function(a, b) {
            return $rt_globals.BigInt.asIntN(64, a >> $rt_globals.BigInt(b & 63));
        };
        Long_shru = function(a, b) {
            return $rt_globals.BigInt.asIntN(64, $rt_globals.BigInt.asUintN(64, a) >> $rt_globals.BigInt(b & 63));
        };
        Long_not = function(a) {
            return $rt_globals.BigInt.asIntN(64, ~a);
        };
    }
    var Long_add = Long_add;

    var Long_sub = Long_sub;

    var Long_mul = Long_mul;

    var Long_div = Long_div;

    var Long_rem = Long_rem;

    var Long_or = Long_or;

    var Long_and = Long_and;

    var Long_xor = Long_xor;

    var Long_shl = Long_shl;

    var Long_shr = Long_shr;

    var Long_shru = Long_shru;

    var Long_compare = Long_compare;

    var Long_eq = Long_eq;

    var Long_ne = Long_ne;

    var Long_lt = Long_lt;

    var Long_le = Long_le;

    var Long_gt = Long_gt;

    var Long_ge = Long_ge;

    var Long_not = Long_not;

    var Long_neg = Long_neg;

    function TeaVMThread(runner) {
        this.status = 3;
        this.stack = [];
        this.suspendCallback = null;
        this.runner = runner;
        this.attribute = null;
        this.completeCallback = null;
    }
    TeaVMThread.prototype.push = function() {
        for (var i = 0;i < arguments.length;++i) {
            this.stack.push(arguments[i]);
        }
        return this;
    };
    TeaVMThread.prototype.s = TeaVMThread.prototype.push;
    TeaVMThread.prototype.pop = function() {
        return this.stack.pop();
    };
    TeaVMThread.prototype.l = TeaVMThread.prototype.pop;
    TeaVMThread.prototype.isResuming = function() {
        return this.status === 2;
    };
    TeaVMThread.prototype.isSuspending = function() {
        return this.status === 1;
    };
    TeaVMThread.prototype.suspend = function(callback) {
        this.suspendCallback = callback;
        this.status = 1;
    };
    TeaVMThread.prototype.start = function(callback) {
        if (this.status !== 3) {
            throw new $rt_globals.Error("Thread already started");
        }
        if ($rt_currentNativeThread !== null) {
            throw new $rt_globals.Error("Another thread is running");
        }
        this.status = 0;
        this.completeCallback = callback ? callback : function(result) {
            if (result instanceof $rt_globals.Error) {
                throw result;
            }
        };
        this.run();
    };
    TeaVMThread.prototype.resume = function() {
        if ($rt_currentNativeThread !== null) {
            throw new $rt_globals.Error("Another thread is running");
        }
        this.status = 2;
        this.run();
    };
    TeaVMThread.prototype.run = function() {
        $rt_currentNativeThread = this;
        var result;
        try {
            result = this.runner();
        } catch (e){
            result = e;
        } finally {
            $rt_currentNativeThread = null;
        }
        if (this.suspendCallback !== null) {
            var self = this;
            var callback = this.suspendCallback;
            this.suspendCallback = null;
            callback(function() {
                self.resume();
            });
        } else if (this.status === 0) {
            this.completeCallback(result);
        }
    };
    function $rt_suspending() {
        var thread = $rt_nativeThread();
        return thread != null && thread.isSuspending();
    }
    function $rt_resuming() {
        var thread = $rt_nativeThread();
        return thread != null && thread.isResuming();
    }
    function $rt_suspend(callback) {
        var nativeThread = $rt_nativeThread();
        if (nativeThread === null) {
            throw new $rt_globals.Error("Suspension point reached from non-threading context (perhaps, from native JS method).");
        }
        return nativeThread.suspend(callback);
    }
    function $rt_startThread(runner, callback) {
        (new TeaVMThread(runner)).start(callback);
    }
    var $rt_currentNativeThread = null;
    function $rt_nativeThread() {
        return $rt_currentNativeThread;
    }
    function $rt_invalidPointer() {
        throw new $rt_globals.Error("Invalid recorded state");
    }
    $rt_exports.main = $rt_mainStarter(t_Client_main);
    $rt_exports.main.javaException = $rt_javaException;
    (function() {
        var c;
        c = otjb_Window.prototype;
        c.removeEventListener = c.$removeEventListener$exported$3;
        c.dispatchEvent = c.$dispatchEvent$exported$4;
        c.get = c.$get$exported$0;
        c.addEventListener = c.$addEventListener$exported$6;
        Object.defineProperty(c, "length", {
            get: c.$getLength$exported$5
        });
        c = otji_JSWrapper$_clinit_$lambda$_29_0.prototype;
        c.accept = c.$accept$exported$0;
        c = otji_JSWrapper$_clinit_$lambda$_29_1.prototype;
        c.accept = c.$accept$exported$0;
        c = otjc_JSArray.prototype;
        c.get = c.$get$exported$0;
        Object.defineProperty(c, "length", {
            get: c.$getLength$exported$1
        });
        c = jni_XHRURLConnection$performRequest$lambda$_5_0.prototype;
        c.stateChanged = c.$stateChanged$exported$0;
        c = otja_XMLHttpRequest.prototype;
        c.removeEventListener = c.$removeEventListener$exported$20;
        c.dispatchEvent = c.$dispatchEvent$exported$3;
        c.addEventListener = c.$addEventListener$exported$4;
    })();
}));

//# sourceMappingURL=classes.js.map